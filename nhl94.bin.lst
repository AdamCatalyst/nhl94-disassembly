    org $0


    include "src/ports.inc"
    include "src/equals.inc"
    include "src/ram_addrs.inc"
;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2022 Hex-Rays, <support@hex-rays.com>           |
; |                       Think-Cell Operations GmbH                        |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : CCC0298C118D580863C877ABD470C71186EF0A1B60F1E7C6FF1E5A38F48FD053
; Input MD5    : 8356B3F0D091B9CC441E2FF8721AD063
; Input CRC32  : 9438F5DD
; Processor       : 68020
; Target assembler: 680x0 Assembler in MRI compatible mode
; This file should be compiled with "as -M"
; ===========================================================================
; Segment type: Pure code
; segment "ROM"
; ROM segment
off_0:          dc.l unk_FFFFF6         ; DATA XREF: ROM:000F4EB4   r
                dc.l Reset
off_8:          dc.l AdrErr             ; DATA XREF: sub_DB68+3C   w
                dc.l AdrErr
off_10:         dc.l InvOpCode
off_14:         dc.l DivBy0
                dc.l $FFFFFFFF
dword_1C:       dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
dword_48:       dc.l $FFFFFFFF
                dc.l $FFFFFFFF
dword_50:       dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
dword_5C:       dc.l $FFFFFFFF
                dc.l IRQ7
                dc.l IRQ7
                dc.l IRQ7
                dc.l IRQ7
off_70:         dc.l IRQ7
                dc.l 0
                dc.l VBLANK
                dc.l IRQ7
                dc.l 0
                dc.l 0
                dc.l 0
                dc.l 0
dword_90:       dc.l $FFFFFFFF
                dc.l $FFFFFFFF
dword_98:       dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
dword_A8:       dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
dword_C4:       dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
dword_E0:       dc.l $FFFFFFFF
                dc.l $FFFFFFFF
dword_E8:       dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
                dc.l $FFFFFFFF
CopyRights:     dc.b $53,$45,$47,$41,$20,$47,$45,$4E,$45,$53,$49,$53,$20
                dc.b $20,$20,$20,$28,$43,$29,$54,$2D,$35,$30,$20,$31,$39
                dc.b $39,$33,$2E,$4A,$55,$4C
DomesticName:   dc.b $4E,$48,$4C,$20,$48,$6F,$63,$6B,$65,$79,$20,$27,$39
                dc.b $34,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
                dc.b $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
                dc.b $20,$20,$20,$20,$20,$20,$20,$20,$20
OverseasName:   dc.b $4E,$48,$4C,$20,$48,$6F,$63,$6B,$65,$79,$20,$27,$39
                dc.b $34,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
                dc.b $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
                dc.b $20,$20,$20,$20,$20,$20,$20,$20,$20
ProductCode:    dc.b $47,$4D,$20,$54,$2D,$35,$30,$36,$35,$36,$20,$2D,$30
                dc.b $30
Checksum:       dc.w $5512
Peripherials:   dc.b $4A,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
                dc.b $20,$20,$20
RomStart:       dc.l         0
RomEnd:         dc.l loc_FFFFE+1
RamStart:       dc.l M68K_RAM
RamEnd:         dc.l unk_FFFFFF
SramCode:       dc.b $52,$41,$F8,$20,  0,$20,  0,  1,  0,$20,$3F,$FF
ModemCode:      dc.b $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
Reserved:       dc.b $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
                dc.b $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
                dc.b $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
                dc.b $20
CountryCode:    dc.b $55,$45,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
                dc.b $20,$20,$20
; ---------------------------------------------------------------------------
Reset:                                  ; DATA XREF: ROM:00000004   o
                tst.l   (IO_CT1_CTRL).l
                bne.s   loc_20E
                tst.w   (IO_EXT_CTRL).l
loc_20E:                                ; CODE XREF: ROM:00000206   j
                bne.s   loc_28C
                lea     word_28E(pc),a5
                movem.w (a5)+,d5-d7
                movem.l (a5)+,a0-a4
                move.b  -$10FF(a1),d0
                andi.b  #$F,d0
                beq.s   loc_22E
                move.l  #$53454741,$2F00(a1)
loc_22E:                                ; CODE XREF: ROM:00000224   j
                move.w  (a4),d0
                moveq   #0,d0
                movea.l d0,a6
                move.l  a6,usp
                moveq   #$17,d1
loc_238:                                ; CODE XREF: ROM:0000023E   j
                move.b  (a5)+,d5
                move.w  d5,(a4)
                add.w   d7,d5
                dbf     d1,loc_238
                move.l  (a5)+,(a4)
                move.w  d0,(a3)
loc_246:
                move.w  d7,(a1)
                move.w  d7,(a2)
loc_24A:                                ; CODE XREF: ROM:0000024C   j
                btst    d0,(a1)
                bne.s   loc_24A
                moveq   #$25,d2 ; '%'
loc_250:                                ; CODE XREF: ROM:00000252   j
                move.b  (a5)+,(a0)+
                dbf     d2,loc_250
                move.w  d0,(a2)
                move.w  d0,(a1)
                move.w  d7,(a2)
loc_25C:                                ; CODE XREF: ROM:0000025E   j
                move.l  d0,-(a6)
                dbf     d6,loc_25C
                move.l  (a5)+,(a4)
                move.l  (a5)+,(a4)
                moveq   #$1F,d3
loc_268:                                ; CODE XREF: ROM:0000026A   j
                move.l  d0,(a3)
                dbf     d3,loc_268
                move.l  (a5)+,(a4)
                moveq   #$13,d4
loc_272:                                ; CODE XREF: ROM:00000274   j
                move.l  d0,(a3)
                dbf     d4,loc_272
                moveq   #3,d5
loc_27A:                                ; CODE XREF: ROM:0000027E   j
                move.b  (a5)+,$11(a3)
                dbf     d5,loc_27A
                move.w  d0,(a2)
                movem.l (a6),d0-d7/a0-a6
                move    #$2700,sr
loc_28C:                                ; CODE XREF: ROM:loc_20E   j
                bra.s   loc_2FA
; ---------------------------------------------------------------------------
word_28E:       dc.w $8000              ; DATA XREF: ROM:00000210   o
                dc.w $3FFF
                dc.w $100
                dc.l Z80_RAM
                dc.l IO_Z80BUS
                dc.l IO_Z80RES
                dc.l VDP_DATA
                dc.l VDP_CTRL
; ---------------------------------------------------------------------------
loc_2FA:                                ; CODE XREF: ROM:loc_28C   j
                tst.w   (VDP_CTRL).l
loc_300:
                jsr     (Calc_Checksum).l
                bra.w   Begin
; ---------------------------------------------------------------------------
                dc.l unk_5330           ; Team List Pointer Table Start
                                        ; ANH
                dc.l unk_966            ; BOS
                dc.l unk_C4C            ; BUF
                dc.l unk_F3A            ; CGY
                dc.l unk_1234           ; CHI
                dc.l unk_214E           ; DAL
                dc.l unk_152E           ; DET
                dc.l unk_1848           ; EDM
                dc.l unk_50E6           ; FLA
                dc.l unk_1B44           ; HFD
                dc.l unk_1E52           ; LA
                dc.l unk_243E           ; MTL
                dc.l unk_2740           ; NJ
                dc.l unk_2A58           ; NYI
                dc.l unk_2D5C           ; NYR
                dc.l unk_3054           ; OTT
                dc.l unk_3348           ; PIT
                dc.l unk_3646           ; PHI
                dc.l unk_393C           ; QUE
                dc.l unk_3C42           ; STL
                dc.l unk_3F30           ; SJ
                dc.l unk_4216           ; TB
                dc.l unk_4518           ; TOR
                dc.l unk_481C           ; VAN
                dc.l unk_4DFC           ; WSH
                dc.l unk_4B0A           ; WPG
                dc.l unk_37E            ; ASE
                dc.l unk_674            ; ASW
byte_3038:      dc.b $65                ; DATA XREF: sub_8BA6+C   w
word_3244:      dc.w $756C              ; DATA XREF: ROM:000F468C   r
byte_4240:      dc.b $A                 ; DATA XREF: sub_93C4+10   w
                                        ; sub_99C6+10   w
byte_4280:      dc.b 1                  ; DATA XREF: ROM:00008F34   w
byte_43FA:      dc.b $72                ; DATA XREF: sub_FD1FE+14   r
byte_4EB9:      dc.b 0                  ; DATA XREF: ROM:loc_8ECC   r


VBLANK:                                 ; DATA XREF: ROM:00000078   o
                move.l  (vbint).w,-(sp)
                rts
; End of function VBLANK


Begin:                                  ; CODE XREF: ROM:00000306   j
                move    #$2700,sr       ; Disable interrupts
                movea.w #(Stack-M68K_RAM),sp ; set stack pointer to RAM FFFE
                movea.w #(VSCRLPM-M68K_RAM),a0 ; clear out ram
_0:                                     ; CODE XREF: Begin+12   j
                clr.l   (a0)+           ; Clear RAM B000 - DEF4
                cmpa.w  #$DEF4,a0
                blt.s   _0
                clr.w   (word_FFDEF2).w ; Clear DMA Flag
                move.w  (VDP_CTRL).l,d0
                andi.w  #1,d0           ; DMA busy bit
                move.w  d0,(word_FFD06E).w ; if the VDP is not busy with DMA fill/copy, branch
                beq.w   loc_76E8
                bset    #0,(word_FFDEF2).w ; Set DMA flag
loc_76E8:                               ; CODE XREF: Begin+26   j
                jsr     (Z80_LoadROM).l
                jsr     (Z80_MuteAllFM).l
                jsr     (sub_1A50A).l
                jsr     (KillCrowd).l
                jsr     (Unk_ControlsSetRelated).l
                move.w  #$FFFF,(word_FFBE86).w
                jsr     (sub_17A18).l
                jsr     (sub_1A050).l
                jsr     (sub_FE660).l
                jsr     (sub_FED70).l
                jsr     (sub_17C72).l
                move.w  (OptLine).w,(TmpOptLine2).w
                move.w  (OptPlayMode).w,(TempOptPlayMode).w
                jsr     (orjoy).l
                jmp     loc_172F0
; End of function Begin


StartGame:                              ; CODE XREF: ROM:loc_17332   j
                st      (word_FFD6B4).w
                clr.l   (dword_FFDEA4).w
                clr.l   (dword_FFDEAC).w
                clr.l   (dword_FFDEA8).w
                clr.l   (dword_FFDEB0).w
                jsr     (ReadJoy1).l
                cmp.b   #$E0,d3
                bne.w   loc_776A
                move.w  #3,(OptPerlen).w
loc_776A:                               ; CODE XREF: StartGame+1E   j
                clr.b   (gmode).w
                cmpi.w  #1,(OptPen).w
                bne.w   _0
                bset    #5,(gmode).w    ; offsides pen is active
_0:                                     ; CODE XREF: StartGame+32   j
                cmpi.w  #1,(OptPlayMode).w
                ble.w   loc_778C
                bsr.w   sub_77E4
loc_778C:                               ; CODE XREF: StartGame+42   j
                jsr     (clearTeamStats).l
                btst    #0,(word_FFC2FA).w
                beq.w   loc_77B8
                move.l  a0,-(sp)
                movea.l #$FFFFC6CE,a0
                jsr     (Create_HotCold_Table).l
                movea.l #$FFFFCA32,a0
                jsr     (Create_HotCold_Table).l
                movea.l (sp)+,a0
loc_77B8:                               ; CODE XREF: StartGame+56   j
                clr.w   (word_FFC472).w
                clr.w   (word_FFC5DC).w
                clr.w   (gsp).w
                clr.w   (word_FFC46E).w
                bsr.w   restoreteams
                jsr     (sub_131F4).l
                jsr     (setupice).l
                jsr     (LoadCrowdRec).l
                jmp     loc_17278
; End of function StartGame


sub_77E4:                               ; CODE XREF: StartGame+46   p
                move.w  #$E3,d0
                movea.w #(unk_FFD092-M68K_RAM),a0
loc_77EC:                               ; CODE XREF: sub_77E4+A   j
                clr.w   (a0)+
                dbf     d0,loc_77EC
                rts
; End of function sub_77E4


restoreteams:                           ; CODE XREF: StartGame+86   p
                                        ; sub_1354C+8C   p
                movea.w #(HmShots-M68K_RAM),a2 ; team 1
                bsr.w   _r
                adda.w  #$364,a2        ; team 2
_r:                                     ; CODE XREF: restoreteams+4   p
                move.w  #6,$24(a2)      ; no players in pen. box, sets # of players on ice
                moveq   #$32,d0 ; '2'   ; $32 = (max roster -1) *2
_0:                                     ; CODE XREF: restoreteams+1C   j
                move.w  #$FFFE,$66(a2,d0.w) ; tmpdst(a2,d0) : FFFE = -2 - all players on bench
                subq.w  #2,d0
                bpl.s   _0
                rts
; End of function restoreteams


; set period length and stop clock
ResetClock:                             ; CODE XREF: ROM:0000788A   p
                                        ; ROM:loc_17278   p
                bsr.w   ClockLength
                cmpi.w  #3,(gsp).w      ; check if reg period
                blt.w   _0
                tst.w   (OptPlayMode).w
                bne.w   _0
                move.w  #$258,d0        ; Ot period (10 min)
_0:                                     ; CODE XREF: ResetClock+A   j
                                        ; ResetClock+12   j
                move.w  d0,(gameclock).w
                move.w  d0,(PerTimeTotal).w
                move.w  d0,(word_FFB048).w
                asr.w   #1,d0
                jsr     (randomd0).l
                sub.w   d0,(word_FFB048).w
                bset    #0,(gmode).w    ; #gmclock
                rts
; End of function ResetClock


; set period length in d0
ClockLength:                            ; CODE XREF: ResetClock   p
                                        ; setplayer+C2   p ...
                move.w  (OptPerlen).w,d0
                asl.w   #1,d0
                lea     _timetab(pc),a0 ; .timetab
                move.w  (a0,d0.w),d0
                rts
; End of function ClockLength
; ---------------------------------------------------------------------------
_timetab:       dc.w $12C               ; DATA XREF: ClockLength+6   o
                dc.w $258
                dc.w $4B0
                dc.w $1E
; ---------------------------------------------------------------------------
StartPer:                               ; CODE XREF: ROM:000172C4   j
                cmpi.w  #3,(gsp).w
                bne.w   loc_7876
                bset    #1,(byte_FFC2FC).w
loc_7876:                               ; CODE XREF: ROM:0000786C   j
                st      (word_FFD6BE).w
                movea.w #(Stack-M68K_RAM),sp
                jsr     (Z80_MuteAllFM).l
                jsr     (setupice).l
                bsr.s   ResetClock
                ori.w   #$F000,(word_FFBE78).w
                st      (c1playernum).w
                st      (c2playernum).w
                movea.w #(puckx-M68K_RAM),a3
                clr.w   (fox).w
                clr.w   (foy).w
                btst    #0,(word_FFC2FA).w
                beq.w   loc_78C4
                move.w  #$1E,d0
                move.w  #8,(BA_Skater_Offset).w
                move.w  #$B,(BA_Goalie_SCnum).w
                bra.w   loc_78CA
; ---------------------------------------------------------------------------
loc_78C4:                               ; CODE XREF: ROM:000078AC   j
                move.l  #$1B,d0         ; #pfaceoff
loc_78CA:                               ; CODE XREF: ROM:000078C0   j
                jsr     (assreplace).l
                bset    #2,(sflags2).w  ; dont record
                bclr    #4,(sflags).w   ; reset replay stuff
                move.w  #$FFFF,(lastsfx).w
                move.l  #$FFFF0000,(recbpr).w ; #replaystart
                move.w  (vcount).w,(oldvcount).w
                bsr.w   Gameloop
                move.w  #$FFFF,(palcount).w
                bsr.w   Gameloop
                move.w  (gamelevel).w,d0
                asl.w   #4,d0
                move.w  d0,(CwdExciteLvl).w
                clr.w   (CurCrowdMeter).w
                move.w  (HomeTeam).w,(word_FFD6CA).w
                move.w  #0,(word_FFD6CC).w
                jsr     (sub_FE556).l
                move.w  (word_FFD6C8).w,-(sp)
                jsr     (song).l
                cmpi.w  #2,(gsp).w
                bge.w   loc_7938
                bset    #7,(sflags3).w
loc_7938:                               ; CODE XREF: ROM:0000792E   j
                                        ; ROM:00007946   j ...
                bsr.w   Gameloop
                bsr.w   demoread
                btst    #0,(sflags).w
                beq.s   loc_7938
                bsr.w   sub_7CF8
                bra.s   loc_7938


; main loop for game
Gameloop:                               ; CODE XREF: ROM:000078F0   p
                                        ; ROM:000078FA   p ...
                move.w  (vcount).w,d7
                sub.w   (oldvcount).w,d7 ; number of frames since last loop
                beq.s   Gameloop
                move.w  (vcount).w,(oldvcount).w
                bsr.w   periodiceevents
                bsr.w   updateplayers
                tst.w   (word_FFDECC).w
                beq.w   loc_798A
                bmi.w   loc_798A
                subq.w  #1,(word_FFDECC).w
                bne.w   loc_798A
                jsr     (sub_1A304).l
                move.w  (word_FFDECE).w,-(sp)
                jsr     (song).l
loc_798A:                               ; CODE XREF: Gameloop+1C   j
                                        ; Gameloop+20   j ...
                jsr     (setSlotBit).l
                bsr.w   checkwindow
                bsr.w   sub_A8CA
                jmp     setvideo
; End of function Gameloop


; called every time through game loop with d7 = elapsed frames
periodiceevents:                        ; CODE XREF: Gameloop+10   p
                jsr     (PenaltyManager).l
                bsr.w   updatecrowdf
                jsr     (sub_FE2C8).l
                jsr     (updatesound).l
                bsr.w   clockcont
                btst    #7,(sflags).w   ; #sfhor
                bne.w   rtss8           ; exit if in horizontal mode
                sub.w   d7,(lldisp).w   ; count down for screen updates
                bpl.w   rtss8
                addi.w  #$18,(lldisp).w ; #jps - only update once per second
                bsr.w   ChkGoalies
                bsr.w   UpdateCwdExcite
                bsr.w   sub_7A34
                bsr.w   loc_79F8
                bsr.w   loc_79EA
                jmp     updatepwrplay
; ---------------------------------------------------------------------------
loc_79EA:                               ; CODE XREF: periodiceevents+42   p
                subq.w  #1,(word_FFC3EC).w
                bne.w   rtss8
                jmp     loc_1871C
; ---------------------------------------------------------------------------
loc_79F8:                               ; CODE XREF: periodiceevents+3E   p
                tst.w   (OptLine).w
                bne.w   _ex             ; exit if line changes off
                movea.w #(HmShots-M68K_RAM),a2
                bsr.w   _notinprog
                lea     $364(a2),a2
_notinprog:                             ; CODE XREF: periodiceevents+66   p
                moveq   #$32,d0 ; '2'
_b0:                                    ; CODE XREF: periodiceevents+92   j
                cmpi.w  #$FFFE,$66(a2,d0.w) ; 66(a2,d0) = tmpdst -2=bench, -1=ice, 0+=pen box
                bne.w   _next
                addi.w  #9,$32(a2,d0.w)
                cmpi.w  #$1000,$32(a2,d0.w)
                blt.w   _next
                move.w  #$1000,$32(a2,d0.w)
_next:                                  ; CODE XREF: periodiceevents+76   j
                                        ; periodiceevents+86   j
                subq.w  #2,d0
                bpl.s   _b0
_ex:                                    ; CODE XREF: periodiceevents+5E   j
                rts
; End of function periodiceevents


sub_7A34:                               ; CODE XREF: periodiceevents+3A   p
                cmpi.w  #2,(gsp).w
                bne.w   locret_7A74
                btst    #4,(gmode).w
                bne.w   locret_7A74
                move.w  (gameclock).w,d0
                cmp.w   (word_FFB048).w,d0
                bgt.w   locret_7A74
                st      (word_FFB048).w
                move.w  (HomeTeam).w,(word_FFD6CA).w
                move.w  #5,(word_FFD6CC).w
                jsr     (sub_FE556).l
                move.w  (word_FFD6C8).w,-(sp)
                jsr     (song).l
locret_7A74:                            ; CODE XREF: sub_7A34+6   j
                                        ; sub_7A34+10   j ...
                rts
; End of function sub_7A34


; check if Excite is more than max,
; add to Sum and Num used to show average crowd
UpdateCwdExcite:                        ; CODE XREF: periodiceevents+36   p
                move.w  (CwdExciteLvl).w,d0
                cmp.w   (MaxCwdExciteLvl).w,d0
                bls.w   _less
                move.w  d0,(MaxCwdExciteLvl).w
_less:                                  ; CODE XREF: UpdateCwdExcite+8   j
                ext.l   d0              ; sign extend d0
                add.l   d0,(SumCwdExciteLvl).w
                addq.w  #1,(NumCwdExciteLvl).w
                subq.w  #1,(CwdExciteLvl).w ; sub 1 from CwdExciteLvl
                bpl.w   _ex             ; jump if result is positive
                clr.w   (CwdExciteLvl).w ; clear if result negative or 0
_ex:                                    ; CODE XREF: UpdateCwdExcite+1E   j
                rts
; End of function UpdateCwdExcite


; this is called every game loop with d7 = elapsed frames
; this will update the current frame of crowd animation
updatecrowdf:                           ; CODE XREF: periodiceevents+6   p
                                        ; waitxsr+1A   p
                cmpi.w  #$15E,(crowdlevel).w
                blt.w   start
                subq.w  #3,(crowdlevel).w
start:                                  ; CODE XREF: updatecrowdf+6   j
                sub.w   d7,(crowdlevel).w
                bpl.w   _0
                clr.w   (crowdlevel).w
_0:                                     ; CODE XREF: updatecrowdf+12   j
                sub.w   d7,(crowdcnt).w
                bpl.w   _cf
                move.w  (crowdlevel).w,d0
                lsr.w   #1,d0
                cmp.w   #$7F,d0
                bls.w   _1
                moveq   #$7F,d0
_1:                                     ; CODE XREF: updatecrowdf+2C   j
                andi.w  #$60,d0 ; '`'
                addq.w  #2,(crowdstep).w
                andi.w  #$1E,(crowdstep).w
                add.w   (crowdstep).w,d0
                movea.l #_cd0,a0
                move.b  (a0,d0.w),(crowdframe+1).w
                clr.w   d1
                move.b  1(a0,d0.w),d1
                move.w  (VDP_CNTR).l,d2
                and.w   d1,d2
                add.w   d2,d1
                move.w  d1,(crowdcnt).w
_cf:                                    ; CODE XREF: updatecrowdf+1E   j
                clr.b   (crowdframe).w
                cmpi.w  #$118,(crowdlevel).w
                bls.w   rtss8
                move.w  (VDP_CNTR).l,d0
                andi.w  #$7F,d0
                cmp.w   #$13,d0
                blt.w   rtss8
                cmp.w   #$19,d0
                bgt.w   rtss8
                move.b  d0,(crowdframe).w
                rts
; End of function updatecrowdf


; monitor period clock and initiate various clock activated events
clockcont:                              ; CODE XREF: periodiceevents+16   p
                btst    #0,(gmode).w    ; #gmclock
                bne.w   rtss8
                tst.w   (gameclock).w
                bne.w   rtss8
                bset    #3,(disflags).w ; #dclock - clock needs update
                jsr     (sub_1A304).l
                move.w  #4,-(sp)        ; #SFXhorn
                jsr     (sfx).l
                bsr.w   freezewindow
loc_7B5C:                               ; CODE XREF: puckfaceoff+B2   j
                movea.w #(puckx-M68K_RAM),a3
                move.l  #$18,d0         ; #pucknothing assignment
                jsr     (assinsert).l
                cmpi.w  #2,(gsp).w      ; time left in period
                blt.w   _eop
                move.l  #7,d0           ; #ascore assignment
                movea.w #(SortCords-M68K_RAM),a3
                cmpi.w  #3,(gamelevel).w
                bne.w   _t3
                cmpi.w  #7,(bosgames).w
                beq.w   _sc
                moveq   #$10,d3         ; #gssize - game score size
                mulu.w  (gamenum).w,d3
                movea.w #(gsstruct-M68K_RAM),a0 ; game struct (games stored for playoffs and box scores)
                adda.w  d3,a0
                clr.w   d3
                btst    #0,$E(a0)       ; #gsftf,gsflags - check if teams are flipped
                beq.w   _nf
                eori.w  #2,d3           ; #gspobwins-#gspotwins
_nf:                                    ; CODE XREF: clockcont+78   j
                move.w  (HmGoals).w,d1
                sub.w   (AwGoals).w,d1
                bpl.w   _ns1
                eori.w  #2,d3           ; #gspobwins-#gspotwins
_ns1:                                   ; CODE XREF: clockcont+88   j
                cmpi.w  #3,4(a0,d3.w)   ; gspotwins
                bne.w   _t3
_sc:                                    ; CODE XREF: clockcont+60   j
                move.l  #8,d0           ; #astanley
                moveq   #$B,d2
_t0:                                    ; CODE XREF: clockcont+AC   j
                bclr    #3,$62(a3)      ; #pfjoycon
                adda.w  #$80,a3         ; #SCstruct
                dbf     d2,_t0
                movea.w #(SortCords-M68K_RAM),a3
_t3:                                    ; CODE XREF: clockcont+56   j
                                        ; clockcont+96   j
                moveq   #5,d2
                move.w  (HmGoals).w,d1
                sub.w   (AwGoals).w,d1
                beq.w   _eop
                bpl.w   _t2
                adda.w  #$300,a3        ; 6*SCstruct
_t2:                                    ; CODE XREF: clockcont+C2   j
                                        ; clockcont+E2   j
                tst.w   $34(a3)         ; position
                ble.w   _n2
                jsr     (assinsert).l
                move.l  #7,d0           ; #ascore
_n2:                                    ; CODE XREF: clockcont+CE   j
                adda.w  #$80,a3         ; #SCstruct
                dbf     d2,_t2
_eog:                                   ; CODE XREF: clockcont+11C   j
                jsr     (clrPenBuf).l
                addi.w  #$3E8,(crowdlevel).w
                bset    #0,(gmode).w    ; stop clock
                bset    #6,(gmode).w    ; set bit 6 gmode (?)
                jsr     (sub_FF88E).l
                move.w  #4,d0           ; #PenEOG
                jmp     AddPenalty2
; ---------------------------------------------------------------------------
_eop:                                   ; CODE XREF: clockcont+42   j
                                        ; clockcont+BE   j
                cmpi.w  #3,(gsp).w      ; check if end of OT
                bne.w   _eop_ex
                tst.w   (OptPlayMode).w
                beq.s   _eog
_eop_ex:                                ; CODE XREF: clockcont+114   j
                move.w  #2,d0           ; #PenEOP
                jmp     AddPenalty2
; End of function clockcont


; monitor joystick if in demo mode
demoread:                               ; CODE XREF: ROM:0000793C   p
                tst.w   (cont1team).w
                bne.w   rtss8           ; not demo
                tst.w   (cont2team).w
                bne.w   rtss8           ; not demo
                jsr     (ReadJoy1).l
                btst    #7,d1           ; #sbut
                bne.w   startpause1
                bsr.w   loc_7CB0
                jsr     (ReadJoy2).l
                btst    #7,d1
                bne.w   startpause2
                tst.w   (FourWayPlay).w
                beq.w   loc_7CB0
                jsr     (ReadJoy3).l
                btst    #7,d1
                bne.w   loc_7CDC
                bsr.w   loc_7CB0
                jsr     (ReadJoy4).l
                btst    #7,d1
                bne.w   loc_7CEA
loc_7CB0:                               ; CODE XREF: demoread+1E   p
                                        ; demoread+34   j ...
                tst.w   d1
                beq.w   rtss8
                jmp     loc_172E4
; End of function demoread
; ---------------------------------------------------------------------------
startpause1:                            ; CODE XREF: demoread+1A   j
                                        ; doinput+90   j
                clr.w   (word_FFC316).w
                bclr    #1,(sflags).w
                bra.w   startpause
; ---------------------------------------------------------------------------
startpause2:                            ; CODE XREF: demoread+2C   j
                                        ; doinput+94   j
                clr.w   (word_FFC316).w
                bset    #1,(sflags).w
startpause:                             ; CODE XREF: ROM:00007CC6   j
                                        ; ROM:00007CE8   j ...
                bset    #0,(sflags).w
                rts
; ---------------------------------------------------------------------------
loc_7CDC:                               ; CODE XREF: demoread+42   j
                                        ; doinput+A4   j
                move.w  #3,(word_FFC316).w
                bclr    #1,(sflags).w
                bra.s   startpause
; ---------------------------------------------------------------------------
loc_7CEA:                               ; CODE XREF: demoread+54   j
                                        ; doinput+A8   j
                move.w  #4,(word_FFC316).w
                bset    #1,(sflags).w
                bra.s   startpause


sub_7CF8:                               ; CODE XREF: ROM:00007948   p
                jsr     (forceblack).l
                move.w  d0,-(sp)
                move.w  (vcount).w,d0
loc_7D04:                               ; CODE XREF: sub_7CF8+10   j
                cmp.w   (vcount).w,d0
                beq.s   loc_7D04
                move.w  (sp)+,d0
                jsr     (Z80_MuteAllFM).l
                move.w  (sflags).w,-(sp)
                bsr.w   sub_7E0E
                movea.l #unk_19700,a0
                lea     sub_7DCE(pc),a1
                btst    #0,(word_FFC2FA).w
                beq.w   loc_7D38
                movea.l #unk_19664,a0
                bra.w   loc_7D48
; ---------------------------------------------------------------------------
loc_7D38:                               ; CODE XREF: sub_7CF8+32   j
                btst    #2,$30(a2)
                beq.w   loc_7D48
                movea.l #unk_1988C,a0
loc_7D48:                               ; CODE XREF: sub_7CF8+3C   j
                                        ; sub_7CF8+46   j
                bsr.w   sub_7E36
loc_7D4C:                               ; CODE XREF: sub_7CF8+6C   j
                bsr.w   sub_80BA
                bsr.w   sub_A41E
                jsr     (sub_162FE).l
                jsr     (sub_11318).l
                bsr.w   sub_7E88
                bne.s   loc_7D4C
                jsr     (forceblack).l
                move.w  (sp)+,(sflags).w
                btst    #7,(sflags).w
                beq.w   loc_7D8A
                jsr     (sub_16CE0).l
                jsr     (SetHor).l
                bra.w   loc_7D90
; ---------------------------------------------------------------------------
loc_7D8A:                               ; CODE XREF: sub_7CF8+7E   j
                jsr     (ClrHor).l
loc_7D90:                               ; CODE XREF: sub_7CF8+8E   j
                movea.l #VDP_DATA,a0
                move.w  #$9100,4(a0)
                move.w  #$9200,4(a0)
                bset    #3,(disflags).w
                bclr    #0,(sflags).w
                jsr     (PrintScores1).l
                jsr     (setvideo).l
                move.w  #$18,(palcount).w
loc_7DC0:                               ; CODE XREF: sub_7CF8+CC   j
                tst.w   (palcount).w
                bpl.s   loc_7DC0
                move.w  (vcount).w,(oldvcount).w
                rts
; End of function sub_7CF8


sub_7DCE:                               ; CODE XREF: ROM:00013780   p
                                        ; DATA XREF: sub_7CF8+28   o
                movea.l #VDP_DATA,a0
                move.w  #$9100,4(a0)
                move.w  #$921C,4(a0)
                jsr     (SetHor).l
                jsr     (setvideo).l
                jsr     (KillCrowd).l
                jsr     (printz2).l
                ori.b   #3,a0
                moveq   #$20,d0 ; ' '
                moveq   #$1C,d1
                move.w  #$7FF,d2
                jmp     eraser
; End of function sub_7DCE


sub_7E0E:                               ; CODE XREF: sub_7CF8+1E   p
                                        ; sub_7E88+30   p
                movea.w #(HmShots-M68K_RAM),a2
                btst    #1,(sflags).w
                beq.w   loc_7E26
                cmpi.w  #1,(cont2team).w
                bra.w   loc_7E2C
; ---------------------------------------------------------------------------
loc_7E26:                               ; CODE XREF: sub_7E0E+A   j
                cmpi.w  #1,(cont1team).w
loc_7E2C:                               ; CODE XREF: sub_7E0E+14   j
                beq.w   locret_7E34
                adda.w  #$364,a2
locret_7E34:                            ; CODE XREF: sub_7E0E:loc_7E2C   j
                rts
; End of function sub_7E0E


sub_7E36:                               ; CODE XREF: sub_7CF8:loc_7D48   p
                                        ; ROM:00008854   p ...
                move.l  a0,(dword_FFCF24).w
                move.l  a1,(dword_FFCF28).w
                clr.w   (dword_FFCF20).w
                clr.w   (dword_FFCF20+2).w
; End of function sub_7E36


sub_7E46:                               ; CODE XREF: sub_7E88+5A   p
                                        ; ROM:00013784   p
                movea.l (dword_FFCF28).w,a0
                jsr     (a0)
                jsr     (printz2).l
                ori.b   #4,d6
                bsr.w   sub_7E72
                moveq   #$16,d0
                moveq   #6,d1
                jsr     (Framer).l
                bsr.w   sub_7EF2
                move.w  #$18,(palcount).w
                rts
; End of function sub_7E46


sub_7E72:                               ; CODE XREF: sub_7E46+12   p
                                        ; sub_7EF2:loc_7F3C   p ...
                move.w  #5,(printx).w
                btst    #1,(disflags).w
                bne.w   rtss8
                addq.w  #4,(printx).w
                rts
; End of function sub_7E72


sub_7E88:                               ; CODE XREF: sub_7CF8+68   p
                                        ; ROM:00008868   p ...
                btst    #7,d1
                bne.w   loc_7EEC
                btst    #1,d1
                beq.w   loc_7EA0
                addq.w  #1,(dword_FFCF20).w
                bra.w   sub_7EF2
; ---------------------------------------------------------------------------
loc_7EA0:                               ; CODE XREF: sub_7E88+C   j
                btst    #0,d1
                beq.w   loc_7EB0
                subq.w  #1,(dword_FFCF20).w
                bra.w   sub_7EF2
; ---------------------------------------------------------------------------
loc_7EB0:                               ; CODE XREF: sub_7E88+1C   j
                btst    #5,d1
                beq.w   loc_7EEC
                bsr.w   sub_7E0E
                move.w  (dword_FFCF20).w,d0
                movea.l (dword_FFCF24).w,a0
                adda.w  (a0),a0
                adda.w  (a0),a0
                bra.w   loc_7ECE
; ---------------------------------------------------------------------------
loc_7ECC:                               ; CODE XREF: sub_7E88+48   j
                addq.w  #4,a0
loc_7ECE:                               ; CODE XREF: sub_7E88+40   j
                adda.w  (a0),a0
                dbf     d0,loc_7ECC
                movea.l (a0),a0
                jsr     (a0)
                bclr    #1,(byte_FFC2F6).w
                bne.w   loc_7EE6
                bsr.w   sub_7E46
loc_7EE6:                               ; CODE XREF: sub_7E88+56   j
                tst.w   (dword_FFCF20).w
                rts
; ---------------------------------------------------------------------------
loc_7EEC:                               ; CODE XREF: sub_7E88+4   j
                                        ; sub_7E88+2C   j
                eori    #4,ccr
                rts
; End of function sub_7E88


sub_7EF2:                               ; CODE XREF: sub_7E46+20   p
                                        ; sub_7E88+14   j ...
                move.w  (dword_FFCF20).w,d0
                bpl.w   loc_7F00
                clr.w   (dword_FFCF20).w
                clr.w   d0
loc_7F00:                               ; CODE XREF: sub_7EF2+4   j
                movea.l (dword_FFCF24).w,a0
                adda.w  (a0),a0
                adda.w  (a0),a0
                bra.w   loc_7F14
; ---------------------------------------------------------------------------
loc_7F0C:                               ; CODE XREF: sub_7EF2:loc_7F14   j
                adda.w  (a0),a0
                addq.w  #4,a0
                tst.w   2(a0)
loc_7F14:                               ; CODE XREF: sub_7EF2+16   j
                dbmi    d0,loc_7F0C
                addq.w  #1,d0
                sub.w   d0,(dword_FFCF20).w
                move.w  (dword_FFCF20).w,d0
                cmp.w   (dword_FFCF20+2).w,d0
                bge.w   loc_7F2E
                move.w  d0,(dword_FFCF20+2).w
loc_7F2E:                               ; CODE XREF: sub_7EF2+34   j
                subq.w  #3,d0
                cmp.w   (dword_FFCF20+2).w,d0
                ble.w   loc_7F3C
                move.w  d0,(dword_FFCF20+2).w
loc_7F3C:                               ; CODE XREF: sub_7EF2+42   j
                bsr.w   sub_7E72
                move.w  #$D,(printy).w
                movea.l (dword_FFCF24).w,a1
                jsr     (print2).l
                jsr     (printz2).l
                ori.b   #1,-(a6)
                move.l  off_0(pc)
                btst    d0,-(a0)
                move.l  off_0(pc)
                btst    d0,-(a0)
                move.l  off_0(pc)
                move.l  off_0(pc)
                adda.w  (a1),a1
                move.w  (dword_FFCF20+2).w,d0
                bra.w   loc_7F8A
; ---------------------------------------------------------------------------
loc_7F86:                               ; CODE XREF: sub_7EF2:loc_7F8A   j
                adda.w  (a1),a1
                addq.w  #4,a1
loc_7F8A:                               ; CODE XREF: sub_7EF2+90   j
                dbf     d0,loc_7F86
                moveq   #3,d1
                move.w  #$C,(printy).w
                bsr.w   sub_7E72
                move.w  (dword_FFCF20+2).w,d0
                beq.w   loc_7FB4
                jsr     (printz2).l
                ori.b   #5,a4
loc_7FB4:                               ; CODE XREF: sub_7EF2+AC   j
                                        ; sub_7EF2+FA   j
                bsr.w   sub_7E72
                jsr     (printz2).l
                ori.b   #2,d6
                move.l  a1,-(sp)
                movea.l (dword_FFCF24).w,a1
                jsr     (print2).l
                cmp.w   (dword_FFCF20).w,d0
                bne.w   loc_7FDE
                jsr     (print2).l
loc_7FDE:                               ; CODE XREF: sub_7EF2+E2   j
                movea.l (sp)+,a1
                bsr.w   sub_8008
                addq.w  #1,d0
                addq.w  #4,a1
                tst.w   2(a1)
                dbmi    d1,loc_7FB4
                bmi.w   locret_8006
                bsr.w   sub_7E72
                jsr     (printz2).l
                ori.b   #5,a0
locret_8006:                            ; CODE XREF: sub_7EF2+FE   j
                rts
; End of function sub_7EF2


sub_8008:                               ; CODE XREF: sub_7EF2+EE   p
                cmpi.b  #$78,2(a1) ; 'x'
                bne.w   loc_8048
                move.l  a1,-(sp)
                movea.l #$8050,a1
                btst    #1,(sflags).w
                beq.w   loc_802C
                tst.w   (word_FFD05C).w
                bra.w   loc_8030
; ---------------------------------------------------------------------------
loc_802C:                               ; CODE XREF: sub_8008+18   j
                tst.w   (word_FFD05A).w
loc_8030:                               ; CODE XREF: sub_8008+20   j
                beq.w   loc_803A
                movea.l #$8064,a1
loc_803A:                               ; CODE XREF: sub_8008:loc_8030   j
                jsr     (print2).l
                movea.l (sp)+,a1
                adda.w  (a1),a1
                bra.w   locret_804E
; ---------------------------------------------------------------------------
loc_8048:                               ; CODE XREF: sub_8008+6   j
                jsr     (print2).l
locret_804E:                            ; CODE XREF: sub_8008+3C   j
                rts
; End of function sub_8008
; ---------------------------------------------------------------------------


sub_8078:                               ; CODE XREF: sub_86F8+70   j
                                        ; sub_86F8+78   j ...
                movem.l d0-d2/a0-a1,-(sp)
                move.w  (disflags).w,-(sp)
                bset    #2,(disflags).w
                movea.w #(unk_FFC334-M68K_RAM),a1
                adda.w  d0,a1
                moveq   #1,d2
loc_808E:                               ; CODE XREF: sub_8078+2A   j
                jsr     (xyVmMap).l
                move.w  #$A,d1
loc_8098:                               ; CODE XREF: sub_8078+22   j
                move.w  (a1)+,(a0)
                dbf     d1,loc_8098
                addq.w  #1,(printy).w
                dbf     d2,loc_808E
                addi.w  #$B,(printx).w
                subq.w  #2,(printy).w
                move.w  (sp)+,(disflags).w
                movem.l (sp)+,d0-d2/a0-a1
                rts
; End of function sub_8078


sub_80BA:                               ; CODE XREF: sub_7CF8:loc_7D4C   p
                                        ; ROM:loc_816A   p ...
                move.w  d0,-(sp)
                move.w  (oldvcount).w,d0
                move.w  (oldvcount).w,d0
loc_80C4:                               ; CODE XREF: sub_80BA+E   j
                cmp.w   (vcount).w,d0
                beq.s   loc_80C4
                move.w  (oldvcount).w,(vcount).w
                move.w  (sp)+,d0
                rts
; End of function sub_80BA
; ---------------------------------------------------------------------------
                moveq   #6,d0
                moveq   #$1A,d1
                bsr.w   sub_9BD8
                jsr     (printz).l
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
                moveq   #$1E,d0
                moveq   #6,d1
                jsr     (Framer).l
                jsr     (sub_11DE2).l
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
                movea.l #unk_B3E74,a1
                lea     8(a1),a2
                adda.l  4(a1),a1
                clr.w   d0
                clr.w   d1
                move.w  (a1),d2
                move.w  2(a1),d3
                clr.w   d5
                jsr     (dobitmap).l
                jsr     (printz2).l
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
                clr.w   (word_FFD5AE).w
                bsr.w   sub_81CA
                jsr     (sub_1828A).l
                move.w  d1,d3
                ble.w   loc_8150
loc_8148:                               ; CODE XREF: ROM:0000814C   j
                bsr.w   sub_81F2
                dbf     d3,loc_8148
loc_8150:                               ; CODE XREF: ROM:00008144   j
                clr.w   (word_FFD5B2).w
                move.w  (printy).w,d0
                subi.w  #$15,d0
                bmi.w   loc_816A
                asl.w   #3,d0
                move.w  d0,(word_FFD5B2).w
                bsr.w   sub_8280
loc_816A:                               ; CODE XREF: ROM:0000815C   j
                                        ; ROM:00008196   j
                bsr.w   sub_80BA
                bsr.w   sub_A41E
                btst    #7,d3
                bne.w   loc_9CD8
                moveq   #$FFFFFFFE,d0
                btst    #0,d3
                bne.w   loc_818E
                neg.w   d0
                btst    #1,d3
                beq.w   loc_8192
loc_818E:                               ; CODE XREF: ROM:00008180   j
                move.w  d0,(word_FFD5B0).w
loc_8192:                               ; CODE XREF: ROM:0000818A   j
                bsr.w   sub_8198
                bra.s   loc_816A


sub_8198:                               ; CODE XREF: ROM:loc_8192   p
                move.w  (word_FFD5B0).w,d0
                beq.w   rtss8
                add.w   (word_FFD5AE).w,d0
                bmi.w   rtss8
                cmp.w   (word_FFD5B2).w,d0
                bgt.w   rtss8
                move.w  d0,(word_FFD5AE).w
                ext.l   d0
                divu.w  #$18,d0
                swap    d0
                tst.w   d0
                bne.w   sub_81CA
                bsr.w   sub_8280
                clr.w   (word_FFD5B0).w
; End of function sub_8198


sub_81CA:                               ; CODE XREF: ROM:00008138   p
                                        ; sub_8198+26   j
                move.w  (disflags).w,-(sp)
                bset    #2,(disflags).w
                movea.l #VDP_DATA,a0
                move.l  #$40020010,4(a0)
                move.w  #$FFD0,d0
                add.w   (word_FFD5AE).w,d0
                move.w  d0,(a0)
                move.w  (sp)+,(disflags).w
                rts
; End of function sub_81CA


sub_81F2:                               ; CODE XREF: ROM:loc_8148   p
                cmp.w   (gamenum).w,d3
                beq.w   rtss8
                moveq   #$10,d0
                mulu.w  d3,d0
                movea.w #(gsstruct-M68K_RAM),a0
                adda.w  d0,a0
                btst    #1,$E(a0)
                bne.w   rtss8
                btst    #2,$E(a0)
                bne.w   rtss8
                move.w  2(a0),d0
                move.w  $C(a0),d1
                bsr.w   sub_8250
                addq.w  #1,(printy).w
                move.w  (a0),d0
                move.w  $A(a0),d1
                bsr.w   sub_8250
                move.w  8(a0),d0
                subq.w  #1,d0
                movea.l #unk_191E4,a1
                move.w  #$1C,(printx).w
                jsr     (sub_13508).l
                addq.w  #2,(printy).w
                rts
; End of function sub_81F2


sub_8250:                               ; CODE XREF: sub_81F2+2E   p
                                        ; sub_81F2+3C   p
                movea.w #$30E,a1
                asl.w   #2,d0
                movea.l (a1,d0.w),a1
                adda.w  4(a1),a1
                move.w  #6,(printx).w
                jsr     (print).l
                move.w  #$18,(printx).w
                move.w  d1,d0
                moveq   #2,d1
                jsr     (sub_11D3A).l
                jmp     print
; End of function sub_8250


sub_8280:                               ; CODE XREF: ROM:00008166   p
                                        ; sub_8198+2A   p
                movem.l d0-d1/a1,-(sp)
                jsr     (printz2).l
                ori.b   #4,a2
                btst    d1,d4
                clr.w   d0
                move.w  (word_FFD5AE).w,d1
                tst.w   d1
                sgt     d0
                neg.b   d0
                cmp.w   (word_FFD5B2).w,d1
                slt     d1
                neg.b   d1
                add.b   d1,d0
                add.b   d1,d0
                lea     unk_82BC(pc),a1
                jsr     (sub_13508).l
                movem.l (sp)+,d0-d1/a1
                rts
; End of function sub_8280
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
                bset    #0,$30(a2)
                moveq   #0,d0
                moveq   #$1C,d1
                bsr.w   sub_9BD8
                clr.w   (word_FFD5AC).w
                clr.w   (word_FFD5B0).w
                move.w  #1,(word_FFD5B8).w
loc_82F6:                               ; CODE XREF: ROM:00008890   j
                jsr     (printz2).l
                ori.b   #2,a0
                moveq   #$28,d0 ; '('
                moveq   #$1C,d1
                move.w  #$7FF,d2
                jsr     (eraser).l
                st      (byte_FFC012).w
                bsr.w   sub_878E
loc_831A:                               ; CODE XREF: ROM:00008442   j
                                        ; ROM:000084CA   j
                bsr.w   sub_86F8
                bsr.w   sub_8566
loc_8322:                               ; CODE XREF: ROM:00008364   j
                                        ; ROM:00008376   j ...
                bsr.w   sub_80BA
                bsr.w   sub_A41E
                jsr     (sub_11318).l
                btst    #7,d1
                bne.w   loc_8812
                btst    #5,d1
                bne.w   loc_838E
                moveq   #1,d0
                btst    #1,d1
                bne.w   loc_8366
                moveq   #$FFFFFFFF,d0
                btst    #0,d1
                bne.w   loc_8366
                moveq   #8,d0
                btst    #3,d1
                bne.w   loc_8366
                moveq   #$FFFFFFF8,d0
                btst    #2,d1
                beq.s   loc_8322
loc_8366:                               ; CODE XREF: ROM:00008346   j
                                        ; ROM:00008350   j ...
                add.w   (word_FFD5B8).w,d0
                tst.w   (OptLine).w
                beq.w   loc_837E
                cmp.w   #1,d0
                blt.s   loc_8322
                cmp.w   #5,d0
                bgt.s   loc_8322
loc_837E:                               ; CODE XREF: ROM:0000836E   j
                lea     unk_87CA(pc),a0
                move.b  8(a0,d0.w),(word_FFD5B8+1).w
                bsr.w   sub_8566
                bra.s   loc_8322
; ---------------------------------------------------------------------------
loc_838E:                               ; CODE XREF: ROM:0000833C   j
                bsr.w   sub_9F40
                move.w  d0,d1
                bsr.w   sub_9F7E
                move.w  (word_FFD5B8).w,d2
                andi.w  #7,d2
                cmp.w   #2,d2
                bgt.w   loc_83B0
                add.w   d0,d1
                bsr.w   sub_9F9A
                sub.w   d1,d0
loc_83B0:                               ; CODE XREF: ROM:000083A4   j
                subq.w  #1,d0
                move.w  d0,(word_FFD5B6).w
                clr.w   (word_FFD5B0).w
                clr.w   (word_FFD5AE).w
                movea.w #(unk_FFC018-M68K_RAM),a0
                clr.w   d2
loc_83C4:                               ; CODE XREF: ROM:000083D6   j
                move.b  d1,(a0,d2.w)
                cmp.w   d1,d6
                bne.w   loc_83D2
                move.w  d2,(word_FFD5AE).w
loc_83D2:                               ; CODE XREF: ROM:000083CA   j
                addq.w  #1,d1
                addq.w  #1,d2
                dbf     d0,loc_83C4
                bsr.w   sub_8774
                jsr     (printz2).l
                ori.b   #0,a0
                btst    d1,d1
                ori.b   #$12,d0
                moveq   #3,d1
                jsr     (Framer).l
                jsr     (printz2).l
                ori.b   #$15,d6
                moveq   #$12,d0
                moveq   #3,d1
                jsr     (Framer).l
                jsr     (printz2).l
                ori.b   #4,(a0)+
                andi.b  #$7B,d2 ; '{'
                subq.w  #1,-(a5)
                bge.s   loc_8482+1
                bls.s   loc_8494
                move.l  -(a0),d0
                addq.w  #8,$6179(a4)
                bcs.s   loc_8498+2
                clr.w   d0
                bra.w   loc_8484
; ---------------------------------------------------------------------------
loc_8430:                               ; CODE XREF: ROM:00008472   j
                                        ; ROM:00008478   j ...
                bsr.w   sub_80BA
                bsr.w   sub_A41E
                jsr     (sub_11318).l
                btst    #7,d1
                bne.w   loc_831A
                btst    #5,d1
                bne.w   loc_84B6
                moveq   #1,d0
                btst    #1,d1
                bne.w   loc_8484
                btst    #3,d1
                bne.w   loc_8474
                moveq   #$FFFFFFFF,d0
                btst    #0,d1
                bne.w   loc_8484
                btst    #2,d1
                bne.w   loc_8474
                bra.s   loc_8430
; ---------------------------------------------------------------------------
loc_8474:                               ; CODE XREF: ROM:0000845C   j
                                        ; ROM:0000846E   j
                add.w   (word_FFD5AC).w,d0
                bmi.s   loc_8430
                move.w  d0,(word_FFD5AC).w
                bsr.w   sub_84CE
loc_8482:                               ; CODE XREF: ROM:0000841C   j
                bra.s   loc_8430
; ---------------------------------------------------------------------------
loc_8484:                               ; CODE XREF: ROM:0000842C   j
                                        ; ROM:00008454   j ...
                add.w   (word_FFD5AE).w,d0
                bmi.s   loc_8430
                cmp.w   (word_FFD5B6).w,d0
                bgt.s   loc_8430
                move.w  d0,(word_FFD5AE).w
loc_8494:                               ; CODE XREF: ROM:0000841E   j
                cmp.w   (word_FFD5B0).w,d0
loc_8498:                               ; CODE XREF: ROM:00008426   j
                bgt.w   loc_84A0
                move.w  d0,(word_FFD5B0).w
loc_84A0:                               ; CODE XREF: ROM:loc_8498   j
                subq.w  #5,d0
                cmp.w   (word_FFD5B0).w,d0
                ble.w   loc_84AE
                move.w  d0,(word_FFD5B0).w
loc_84AE:                               ; CODE XREF: ROM:000084A6   j
                bsr.w   sub_84CE
                bra.w   loc_8430
; ---------------------------------------------------------------------------
loc_84B6:                               ; CODE XREF: ROM:0000844A   j
                movea.w #(unk_FFC018-M68K_RAM),a3
                adda.w  (word_FFD5AE).w,a3
                move.b  (a3),d0
                addq.b  #1,d0
                move.w  (word_FFD5B8).w,d2
                bsr.w   sub_8898
                bra.w   loc_831A


sub_84CE:                               ; CODE XREF: ROM:0000847E   p
                                        ; ROM:loc_84AE   p
                jsr     (printz).l
                ori.b   #$16,d6
                btst    d0,d0
loc_84DA:                               ; CODE XREF: sub_84CE+2C   j
                movea.l #unk_193F8,a1
                move.w  (word_FFD5AC).w,d0
                bra.w   loc_84EC
; ---------------------------------------------------------------------------
loc_84E8:                               ; CODE XREF: sub_84CE+20   j
                adda.w  (a1),a1
                addq.w  #4,a1
loc_84EC:                               ; CODE XREF: sub_84CE+16   j
                tst.w   (a1)
                dbmi    d0,loc_84E8
                bpl.w   loc_84FC
                subq.w  #1,(word_FFD5AC).w
                bra.s   loc_84DA
; ---------------------------------------------------------------------------
loc_84FC:                               ; CODE XREF: sub_84CE+24   j
                jsr     (print).l
                move.l  (a1),d4
                movea.w #(unk_FFC018-M68K_RAM),a3
                move.w  (word_FFD5B0).w,d2
                move.w  (word_FFD5B6).w,d1
                sub.w   d2,d1
                cmp.w   #5,d1
                bls.w   loc_851C
                moveq   #5,d1
loc_851C:                               ; CODE XREF: sub_84CE+48   j
                move.w  #2,(printy).w
loc_8522:                               ; CODE XREF: sub_84CE+92   j
                jsr     (printz2).l
                ori.b   #4,-(a0)
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                cmp.w   (word_FFD5AE).w,d2
                bne.w   loc_8554
                move.w  d7,(printa).w
loc_8554:                               ; CODE XREF: sub_84CE+7E   j
                clr.w   d0
                move.b  (a3,d2.w),d0
                bsr.w   sub_8D4E
                addq.w  #1,d2
                dbf     d1,loc_8522
                rts
; End of function sub_84CE


sub_8566:                               ; CODE XREF: ROM:0000831E   p
                                        ; ROM:00008388   p
                moveq   #6,d5
                lea     unk_85E7(pc),a0
                move.w  (word_FFD5B8).w,d0
                lsr.w   #3,d0
                adda.w  d0,a0
                tst.w   (OptLine).w
                beq.w   loc_857E
                subq.w  #1,a0
loc_857E:                               ; CODE XREF: sub_8566+12   j
                move.b  (a0),d0
                cmp.b   (byte_FFC012).w,d0
                beq.w   loc_8590
                move.b  d0,(byte_FFC012).w
                bsr.w   sub_868C
loc_8590:                               ; CODE XREF: sub_8566+1E   j
                                        ; sub_8566:loc_859C   j
                btst    d5,(byte_FFC012).w
                beq.w   loc_859C
                bsr.w   sub_85EE
loc_859C:                               ; CODE XREF: sub_8566+2E   j
                dbf     d5,loc_8590
                jsr     (printz2).l
                ori.b   #4,a2
                andi.b  #$F9,a0
                btst    d0,d0
                moveq   #$18,d0
                moveq   #3,d1
                jsr     (Framer).l
                jsr     (printz2).l
                ori.b   #$15,d6
                move.w  d6,d0
                jsr     (sub_18A90).l
                move.w  (a1),d0
                lsr.w   #1,d0
                sub.w   d0,(printx).w
                move.w  d7,(printa).w
                jsr     (print2).l
                clr.w   (word_FFB030).w
                rts
; End of function sub_8566
; ---------------------------------------------------------------------------


sub_85EE:                               ; CODE XREF: sub_8566+32   p
                moveq   #6,d0
                mulu.w  d5,d0
                lea     word_879E(pc),a0
                adda.w  d0,a0
                tst.w   (OptLine).w
                beq.w   loc_8602
                subq.w  #6,a0
loc_8602:                               ; CODE XREF: sub_85EE+E   j
                move.w  (a0),(printx).w
                move.w  2(a0),(printy).w
                move.w  d5,d0
                movea.l #FaceOffsprites,a1
                move.w  #$8000,(printa).w
                jsr     (sub_13508).l
                jsr     (printz2).l
                ori.b   #$4C,a0 ; 'L'
                bvs.s   loc_869A
                bcs.w   loc_B7FC+2
                cmp.b   $3805(a0),d0
                asl.w   #3,d4
                addq.w  #1,d4
                move.w  2(a0),(printy).w
                move.w  4(a0),d3
                lea     $16A(a2),a3
loc_8646:                               ; CODE XREF: sub_85EE+98   j
                move.w  (a0),(printx).w
                jsr     (printz2).l
                ori.b   #$FF,a0
                clr.w   d0
                move.b  (a3,d4.w),d0
                subq.w  #1,d0
                jsr     (sub_18B6E).l
                cmp.w   (word_FFD5B8).w,d4
                bne.w   loc_867A
                move.w  d0,d6
                move.w  (printa).w,d7
                move.w  #2,(word_FFB030).w
loc_867A:                               ; CODE XREF: sub_85EE+7C   j
                jsr     (print2).l
                clr.w   (word_FFB030).w
                addq.w  #1,d4
                dbf     d3,loc_8646
                rts
; End of function sub_85EE


sub_868C:                               ; CODE XREF: sub_8566+26   p
                jsr     (printz2).l
                ori.b   #2,a0
loc_869A:                               ; CODE XREF: sub_85EE+3C   j
                moveq   #$28,d0 ; '('
                moveq   #$12,d1
                move.w  #$7FF,d2
                jsr     (eraser).l
                move.w  (word_87A0).l,(printy).l
                move.w  (word_879E).l,(printx).l
                tst.w   (OptLine).w
                beq.w   loc_86CE
                move.w  (word_8798).l,(printx).l
loc_86CE:                               ; CODE XREF: sub_868C+34   j
                jsr     (printz2).l
                ori.b   #4,-(a2)
                divsl
                addq.w  #1,d4
                divsl
                chk.l   -(a0),d1
                addq.w  #1,(sp)
                rts
; End of function sub_868C


sub_86F8:                               ; CODE XREF: ROM:loc_831A   p
                bsr.w   sub_8774
                movem.l d0-d5/a0-a2,-(sp)
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$7C,d0 ; '|'
                ori.b   #$24,d5 ; '$'
                adda.l  4(a1),a1
                movea.w #$30A,a2
                clr.w   d0
                clr.w   d1
                move.w  (a1),d2
                move.w  2(a1),d3
                moveq   #1,d4
                moveq   #0,d5
                jsr     (dobitmap).l
                movem.l (sp)+,d0-d5/a0-a2
                jsr     (printz).l
                ori.b   #7,d6
                btst    d0,d0
                moveq   #$1A,d0
                moveq   #6,d1
                jsr     (Framer).l
                jsr     (sub_11DE2).l
                ori.b   #$A,(a4)
                subi.w  #$696E,a4
                bcs.s   sub_8774+4
                movea.l d5,a0
                bcc.s   unk_87C5
                moveq   #$6F,d2 ; 'o'
                moveq   #$FFFFFFBE,d1
                clr.w   d0
                cmpa.w  #$C6CE,a2
                beq.w   sub_8078
                move.w  #$2C,d0 ; ','
                bra.w   sub_8078
; End of function sub_86F8


sub_8774:                               ; CODE XREF: ROM:000083DA   p
                                        ; sub_86F8   p ...
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$28,d0 ; '('
                moveq   #$A,d1
                move.w  #$7FF,d2
                jmp     eraser
; End of function sub_8774


sub_878E:                               ; CODE XREF: ROM:00008316   p
                                        ; ROM:loc_8812   p
                clr.w   (word_FFBD82).w
                clr.w   (word_FFBDA2).w
                rts
; End of function sub_878E
; ---------------------------------------------------------------------------
word_8798:      dc.w $10                ; DATA XREF: sub_868C+38   r
word_879E:      dc.w 4                  ; DATA XREF: sub_85EE+4   o
                                        ; sub_868C+26   r
word_87A0:      dc.w $C                 ; DATA XREF: sub_868C+1C   r
; ---------------------------------------------------------------------------
loc_8812:                               ; CODE XREF: ROM:00008334   j
                bsr.w   sub_878E
                move.w  #$18,(palcount).w
                move.l  (dword_FFCF20).w,-(sp)
                move.l  (dword_FFCF24).w,-(sp)
                move.l  (dword_FFCF28).w,-(sp)
                movea.l #rtss2,a1
                movea.l #unk_19F88,a0
                movea.w #(unk_FFD076-M68K_RAM),a3
                move.w  $28(a2),d0
                addq.w  #1,d0
                cmp.b   (a3),d0
                beq.w   loc_884A
                movea.l #unk_19FF8,a0
loc_884A:                               ; CODE XREF: ROM:00008840   j
                jsr     (printz2).l
                ori.b   #2,d4
                bsr.w   sub_7E36
loc_8858:                               ; CODE XREF: ROM:00008872   j
                bsr.w   sub_80BA
                bsr.w   sub_A41E
                jsr     (sub_11318).l
                move.w  d1,-(sp)
                bsr.w   sub_7E88
                move.w  (sp)+,d1
                andi.w  #$A0,d1
                beq.s   loc_8858
                jsr     (printz2).l
                ori.b   #0,d4
                move.w  (dword_FFCF20).w,d0
                move.l  (sp)+,(dword_FFCF28).w
                move.l  (sp)+,(dword_FFCF24).w
                move.l  (sp)+,(dword_FFCF20).w
                tst.w   d0
                bne.w   loc_82F6
                bra.w   loc_9CD8


sub_8898:                               ; CODE XREF: ROM:000084C6   p
                movem.l d0-d2/a0-a1,-(sp)
                lea     $16A(a2),a0
                move.w  d2,d1
                andi.w  #$FFF8,d1
                lea     (a0,d1.w),a1
                moveq   #5,d1
loc_88AC:                               ; CODE XREF: sub_8898+18   j
                cmp.b   1(a1,d1.w),d0
                dbeq    d1,loc_88AC
                bne.w   loc_88BE
                move.b  (a0,d2.w),1(a1,d1.w)
loc_88BE:                               ; CODE XREF: sub_8898+1C   j
                move.b  d0,(a0,d2.w)
                movem.l (sp)+,d0-d2/a0-a1
                rts
; End of function sub_8898
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
                moveq   #$D,d0
                moveq   #$17,d1
                bsr.w   sub_9BD8
                moveq   #1,d0
                add.w   $16(a2),d0
                move.w  d0,(word_FFD5B2).w
                clr.w   (word_FFD5AC).w
loc_89C2:                               ; CODE XREF: ROM:00008AF8   j
                                        ; ROM:00008B00   j
                jsr     (printz).l
                ori.b   #7,d6
                btst    d0,d0
                moveq   #$1A,d0
                moveq   #6,d1
                jsr     (Framer).l
                jsr     (sub_11DE2).l
                ori.b   #9,(a4)
                subi.w  #$6561,(a4)
                blt.s   loc_8A04+4
                movea.l (a2),a0
                ble.s   loc_8A5E+1
                moveq   #$65,d2 ; 'e'
                moveq   #$FFFFFFBD,d1
                clr.w   d0
                cmpa.w  #$C6CE,a2
                beq.w   loc_8A00
                move.w  #$2C,d0 ; ','
loc_8A00:                               ; CODE XREF: ROM:000089F8   j
                bsr.w   sub_8078
loc_8A04:                               ; CODE XREF: ROM:000089E6   j
                jsr     (printz2).l
                ori.b   #6,0(a4,d0.w*2)
                ble.s   loc_8A86+3
                movea.l (a6)+,sp
                addq.w  #8,$6179(a4)
                bcs.s   loc_8A90
                addq.w  #1,-(a1)
                moveq   #$69,d2 ; 'i'
                bgt.s   loc_8A8A+5
                move.l  (a6)+,$5377(a6)
                bvs.s   loc_8AA8
                bls.s   loc_8A9C+2
                addq.w  #7,(a4)
                bcs.s   loc_8A98+3
                blt.s   loc_8AAC+3
                jsr     (printz).l
                ori.b   #1,d6
                        #$12
                moveq   #3,d1
                jsr     (Framer).l
                jsr     (printz).l
                ori.b   #$15,d6
loc_8A5E:                               ; CODE XREF: ROM:000089EA   j
                        #$12
                moveq   #3,d1
                jsr     (Framer).l
                bsr.w   sub_8BA6
                move.w  (word_FFD5B2).w,d0
                mulu.w  #$80,d0
                move.w  d0,(word_FFD5AE).w
                bsr.w   sub_8B1C
                clr.w   (word_FFD5B0).w
loc_8A82:                               ; CODE XREF: ROM:00008ADE   j
                bsr.w   sub_80BA
loc_8A86:                               ; CODE XREF: ROM:00008A14   j
                bsr.w   sub_A41E
loc_8A8A:                               ; CODE XREF: ROM:00008A26   j
                jsr     (sub_11318).l
loc_8A90:                               ; CODE XREF: ROM:00008A1C   j
                btst    #7,d3
                bne.w   loc_9CD8
loc_8A98:                               ; CODE XREF: ROM:00008A38   j
                btst    #6,d1
loc_8A9C:                               ; CODE XREF: ROM:00008A34   j
                bne.w   loc_8AF0
                jsr     (nodiag).l
                moveq   #1,d0
loc_8AA8:                               ; CODE XREF: ROM:00008A32   j
                btst    #3,d1
loc_8AAC:                               ; CODE XREF: ROM:00008A3A   j
                bne.w   loc_8AE0
                neg.w   d0
                btst    #2,d1
                bne.w   loc_8AE0
                tst.w   (word_FFD5B0).w
                bne.w   loc_8ADA
                moveq   #$FFFFFFFE,d0
                btst    #0,d3
                bne.w   loc_8AD6
                neg.w   d0
                btst    #1,d3
                beq.w   loc_8ADA
loc_8AD6:                               ; CODE XREF: ROM:00008AC8   j
                move.w  d0,(word_FFD5B0).w
loc_8ADA:                               ; CODE XREF: ROM:00008ABE   j
                                        ; ROM:00008AD2   j ...
                bsr.w   sub_8B04
                bra.s   loc_8A82
; ---------------------------------------------------------------------------
loc_8AE0:                               ; CODE XREF: ROM:loc_8AAC   j
                                        ; ROM:00008AB6   j
                add.w   (word_FFD5AC).w,d0
                bmi.s   loc_8ADA
                move.w  d0,(word_FFD5AC).w
                bsr.w   sub_8BA6
                bra.s   loc_8ADA
; ---------------------------------------------------------------------------
loc_8AF0:                               ; CODE XREF: ROM:loc_8A9C   j
                lea     $364(a2),a2
                cmpa.w  #$CA32,a2
                beq.w   loc_89C2
                movea.w #(HmShots-M68K_RAM),a2
                bra.w   loc_89C2


sub_8B04:                               ; CODE XREF: ROM:loc_8ADA   p
                move.w  (word_FFD5B0).w,d0
                beq.w   rtss8
                add.w   (word_FFD5AE).w,d0
                bmi.w   loc_8B7E
                cmp.w   #$380,d0
                bgt.w   loc_8B7E
; End of function sub_8B04


sub_8B1C:                               ; CODE XREF: ROM:00008A7A   p
                move.w  (word_FFD5AE).w,d1
                move.w  d0,(word_FFD5AE).w
                ext.l   d0
                divs.w  #$80,d0
                swap    d0
                tst.w   d0
                bne.w   loc_8B36
                clr.w   (word_FFD5B0).w
loc_8B36:                               ; CODE XREF: sub_8B1C+12   j
                andi.w  #$7F,d1
                bne.w   loc_8B56
                cmp.w   #$7E,d0 ; '~'
                bne.w   loc_8B4A
                bsr.w   sub_8B84
loc_8B4A:                               ; CODE XREF: sub_8B1C+26   j
                cmp.w   #2,d0
                bne.w   loc_8B56
                bsr.w   sub_8B94
loc_8B56:                               ; CODE XREF: sub_8B1C+1E   j
                                        ; sub_8B1C+32   j
                move.w  (disflags).w,-(sp)
                bset    #2,(disflags).w
                movea.l #VDP_DATA,a0
                move.l  #$40020010,4(a0)
                move.w  #$FF90,d0
                add.w   (word_FFD5AE).w,d0
                move.w  d0,(a0)
                move.w  (sp)+,(disflags).w
                rts
; End of function sub_8B1C
; ---------------------------------------------------------------------------
loc_8B7E:                               ; CODE XREF: sub_8B04+C   j
                                        ; sub_8B04+14   j
                clr.w   (word_FFD5B0).w
                rts


sub_8B84:                               ; CODE XREF: sub_8B1C+2A   p
                move.l  d0,-(sp)
                swap    d0
                move.w  d0,(word_FFD5B2).w
                bsr.w   sub_8BA6
                move.l  (sp)+,d0
                rts
; End of function sub_8B84


sub_8B94:                               ; CODE XREF: sub_8B1C+36   p
                move.l  d0,-(sp)
                swap    d0
                addq.w  #1,d0
                move.w  d0,(word_FFD5B2).w
                bsr.w   sub_8BA6
                move.l  (sp)+,d0
                rts
; End of function sub_8B94


sub_8BA6:                               ; CODE XREF: ROM:00008A6A   p
                                        ; ROM:00008AEA   p ...
                jsr     (printz2).l
                ori.b   #7,a2
                btst    d1,d2
                bset    d4,($1003038).l
                add.l   0(a2),d2
                btst    d0,d2
                jsr     (sub_13510).l
                jsr     (print2).l
                jsr     (printz2).l
                ori.b   #$16,d6
loc_8BD6:                               ; CODE XREF: sub_8BA6+5E   j
                movea.l #unk_193F8,a1
                move.w  (word_FFD5AC).w,d0
                tst.w   (word_FFD5B2).w
                bne.w   loc_8BF6
                movea.l #unk_1955A,a1
                bra.w   loc_8BF6
; ---------------------------------------------------------------------------
loc_8BF2:                               ; CODE XREF: sub_8BA6+52   j
                adda.w  (a1),a1
                addq.w  #4,a1
loc_8BF6:                               ; CODE XREF: sub_8BA6+3E   j
                                        ; sub_8BA6+48   j
                tst.w   (a1)
                dbmi    d0,loc_8BF2
                bpl.w   loc_8C06
                subq.w  #1,(word_FFD5AC).w
                bra.s   loc_8BD6
; ---------------------------------------------------------------------------
loc_8C06:                               ; CODE XREF: sub_8BA6+56   j
                jsr     (print2).l
                move.l  (a1),d4
                jsr     (printz2).l
                ori.b   #4,a2
                andi.b  #$F9,d0
                ori.b   #$38,d0 ; '8'
                ori.b   #$B3,d0
                beq.w   loc_8C2E
                addi.w  #$10,(printy).w
loc_8C2E:                               ; CODE XREF: sub_8BA6+7E   j
                move.w  (printy).w,-(sp)
                moveq   #$28,d0 ; '('
                moveq   #$10,d1
                move.w  #$7FF,d2
                jsr     (eraser).l
                move.w  (sp)+,(printy).w
                bsr.w   sub_9F40
                move.w  d0,d1
                subq.w  #1,d1
                movea.l #$8CAE,a5
                movea.w #(unk_FFC018-M68K_RAM),a3
                move.l  #$1020304,(a3)
                move.w  (word_FFD5B2).w,d0
                subq.w  #1,d0
                bmi.w   loc_8C84
                asl.w   #3,d0
                lea     $16A(a2),a3
                lea     1(a3,d0.w),a3
                movea.l #unk_191D0,a5
                moveq   #4,d1
                cmpi.w  #5,(word_FFD5B2).w
                ble.w   loc_8C84
                subq.w  #1,d1
loc_8C84:                               ; CODE XREF: sub_8BA6+BC   j
                                        ; sub_8BA6+D8   j ...
                move.w  #2,(printx).w
                movea.l a5,a1
                jsr     (print).l
                movea.l a1,a5
                move.w  #7,(printx).w
                clr.w   d0
                move.b  (a3)+,d0
                subq.w  #1,d0
                bsr.w   sub_8D4E
                addq.w  #2,(printy).w
                dbf     d1,loc_8C84
                rts
; End of function sub_8BA6
; ---------------------------------------------------------------------------


sub_8D4E:                               ; CODE XREF: sub_84CE+8C   p
                                        ; sub_8BA6+FA   p ...
                movem.l d0-d4/a0-a1/a4-a5,-(sp)
                pea     loc_8D82(pc)
                jsr     (sub_18A90).l
                jsr     (print).l
                move.w  #$1E,(printx).w
                cmp.w   #2,d4
                bls.w   loc_8D78
                jsr     (sub_FA9F8).l
                swap    d4
loc_8D78:                               ; CODE XREF: sub_8D4E+1E   j
                lea     unk_8D88(pc),a0
                adda.w  (a0,d4.w),a0
                jmp     (a0)
; End of function sub_8D4E
; ---------------------------------------------------------------------------
loc_8D82:                               ; DATA XREF: sub_8D4E+4   o
                movem.l (sp)+,d0-d4/a0-a1/a4-a5
                rts
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
                add.w   d0,d0
                move.w  $66(a2,d0.w),d0
                bpl.w   loc_8DBA
                not.w   d0
                cmp.w   #3,d0
                bls.w   loc_8DB0
                moveq   #1,d0
                bra.w   loc_8DB0
; ---------------------------------------------------------------------------
loc_8DAE:                               ; CODE XREF: ROM:00008DBE   j
                moveq   #3,d0
loc_8DB0:                               ; CODE XREF: ROM:00008DA4   j
                                        ; ROM:00008DAA   j
                lea     unk_8DEC(pc),a1
                jmp     sub_13508
; ---------------------------------------------------------------------------
loc_8DBA:                               ; CODE XREF: ROM:00008D9A   j
                btst    #$C,d0
                bne.s   loc_8DAE
                subq.w  #1,(printx).w
                move.w  d0,d1
                andi.w  #$FFF,d0
                jsr     (PushTime).l
                jsr     (print).l
                moveq   #4,d0
                bclr    #$E,d1
                beq.w   loc_8DE2
                moveq   #5,d0
loc_8DE2:                               ; CODE XREF: ROM:00008DDC   j
                lea     unk_8DEC(pc),a1
                jmp     sub_13508
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
                add.w   d0,d0
                move.w  $32(a2,d0.w),d0
                ext.l   d0
                divu.w  #$28,d0 ; '('
                cmp.w   #$64,d0 ; 'd'
                ble.w   loc_8E4C
                moveq   #$64,d0 ; 'd'
                bra.w   loc_8E4C
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
                mulu.w  #$64,d0 ; 'd'
                divu.w  d1,d0
                jsr     (sub_FEF7C).l
loc_8E4C:                               ; CODE XREF: ROM:00008E30   j
                                        ; ROM:00008E36   j
                moveq   #4,d1
                jsr     (sub_11D3A).l
                jsr     (print).l
                jsr     (printz).l
                ori.b   #$20,d6 ; ' '
                move.l  -(a0),d0
                rts
; ---------------------------------------------------------------------------
                andi.w  #1,d0
                eori.w  #1,d0
                lea     unk_8E7A(pc),a1
                jmp     sub_13508
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
                asl.w   #3,d0
                addi.w  #$8C,d0
                jsr     (sub_11D06).l
                jsr     (print).l
                jsr     (printz).l
                ori.b   #$6C,a0 ; 'l'
                bhi.s   loc_8ECC
                move.l  d0,d0
                rts
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_8ECC:                               ; CODE XREF: ROM:00008EAA   j
                move.b  (byte_4EB9).w,1(a4,d0.w)
                ori.b   #6,(a0)+
                subi.w  #$636F,(a3)
                moveq   #$69,d1 ; 'i'
                bgt.s   loc_8F44+3
                movea.l (a3),a0
                blt.s   loc_8F44+3
                moveq   #$79,d1 ; 'y'
                eor.b   d6,d7
                btst    d0,d0
                move.w  #$2C,d0 ; ','
                bsr.w   sub_8078
                addq.w  #4,(printx).w
                clr.w   d0
                bsr.w   sub_8078
                jsr     (printz2).l
                ori.b   #6,0(a4,d0.w*2)
                        #$5E
                addq.w  #8,-(a5)
                moveq   #$5E,d1 ; '^'
                addq.w  #7,(a4)
                bvs.s   loc_8F82+1
                bcs.s   loc_8F76
                addq.w  #7,(a4)
                blt.s   loc_8F7A
                addq.w  #7,d7
                ble.s   loc_8F7E+3
                bge.s   loc_8F50+1
                addq.w  #7,(a6)+
                addq.w  #7,(a6)+
                addq.w  #7,(a6)+
                addq.w  #7,(a6)+
                addq.b  #8,$535E(sp)
                sgt     (byte_4280).l
                move.w  (word_FFC472).w,d0
                divu.w  #6,d0
                asl.w   #5,d0
loc_8F44:                               ; CODE XREF: ROM:00008EDE   j
                                        ; ROM:00008EE4   j
                move.w  d0,(word_FFD5AE).w
                subi.w  #$80,d0
                bpl.w   loc_8F52
loc_8F50:                               ; CODE XREF: ROM:00008F20   j
                clr.w   d0
loc_8F52:                               ; CODE XREF: ROM:00008F4C   j
                move.w  d0,(word_FFD5B2).w
                move.w  (word_FFD5AE).w,d0
loc_8F5A:                               ; CODE XREF: ROM:00008F6C   j
                bsr.w   sub_80BA
                bsr.w   sub_8FB8
                move.w  (word_FFD5AE).w,d0
                subq.w  #2,d0
                cmp.w   (word_FFD5B2).w,d0
                bge.s   loc_8F5A
                clr.w   (word_FFD5B0).w
loc_8F72:                               ; CODE XREF: ROM:00008F9E   j
                bsr.w   sub_80BA
loc_8F76:                               ; CODE XREF: ROM:00008F16   j
                bsr.w   sub_A41E
loc_8F7A:                               ; CODE XREF: ROM:00008F1A   j
                btst    #7,d3
loc_8F7E:                               ; CODE XREF: ROM:00008F1E   j
                bne.w   loc_9CD8
loc_8F82:                               ; CODE XREF: ROM:00008F14   j
                moveq   #$FFFFFFFE,d0
                btst    #0,d3
                bne.w   loc_8F96
                neg.w   d0
                btst    #1,d3
                beq.w   loc_8F9A
loc_8F96:                               ; CODE XREF: ROM:00008F88   j
                move.w  d0,(word_FFD5B0).w
loc_8F9A:                               ; CODE XREF: ROM:00008F92   j
                bsr.w   sub_8FA0
                bra.s   loc_8F72


sub_8FA0:                               ; CODE XREF: ROM:loc_8F9A   p
                move.w  (word_FFD5B0).w,d0
                beq.w   rtss8
                add.w   (word_FFD5AE).w,d0
                bmi.w   rtss8
                cmp.w   (word_FFD5B2).w,d0
                bgt.w   rtss8
; End of function sub_8FA0


sub_8FB8:                               ; CODE XREF: ROM:00008F5E   p
                move.w  (word_FFD5AE).w,d1
                move.w  d0,(word_FFD5AE).w
                ext.l   d0
                divs.w  #$20,d0 ; ' '
                swap    d0
                tst.w   d0
                bne.w   loc_8FD6
                bsr.w   sub_93C4
                clr.w   (word_FFD5B0).w
loc_8FD6:                               ; CODE XREF: sub_8FB8+12   j
                andi.w  #$1F,d1
                bne.w   loc_8FFA
                move.l  d0,-(sp)
                cmp.w   #$1E,d0
                bne.w   loc_8FEC
                bsr.w   sub_9020
loc_8FEC:                               ; CODE XREF: sub_8FB8+2C   j
                move.l  (sp)+,d0
                cmp.w   #2,d0
                bne.w   loc_8FFA
                bsr.w   sub_904C
loc_8FFA:                               ; CODE XREF: sub_8FB8+22   j
                                        ; sub_8FB8+3A   j
                move.w  (disflags).w,-(sp)
                bset    #2,(disflags).w
                movea.l #VDP_DATA,a0
                move.l  #$40020010,4(a0)
                moveq   #$FFFFFFB0,d0
                add.w   (word_FFD5AE).w,d0
                move.w  d0,(a0)
                move.w  (sp)+,(disflags).w
                rts
; End of function sub_8FB8


sub_9020:                               ; CODE XREF: sub_8FB8+30   p
                move.l  d0,-(sp)
                swap    d0
                moveq   #6,d3
                mulu.w  d0,d3
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$38,d0 ; '8'
                add.l   d2,-$19B8(a6)
                subq.w  #3,d0
                andi.w  #$1F,d0
                move.w  d0,(printy).w
                bsr.w   sub_907C
                move.l  (sp)+,d0
                rts
; End of function sub_9020


sub_904C:                               ; CODE XREF: sub_8FB8+3E   p
                move.l  d0,-(sp)
                swap    d0
                addq.w  #4,d0
                moveq   #6,d3
                mulu.w  d0,d3
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$38,d0 ; '8'
                add.l   d2,-$19B8(a6)
                addi.w  #$10,d0
                andi.w  #$1F,d0
                move.w  d0,(printy).w
                bsr.w   sub_907C
                move.l  (sp)+,d0
                rts
; End of function sub_904C


sub_907C:                               ; CODE XREF: sub_9020+24   p
                                        ; sub_904C+28   p
                move.w  (printy).w,-(sp)
                moveq   #$28,d0 ; '('
                moveq   #4,d1
                move.w  #$7FF,d2
                jsr     (eraser).l
                move.w  (sp)+,(printy).w
                movea.w #(unk_FFC474-M68K_RAM),a0
                move.w  (a0,d3.w),d0
                move.w  #1,(printx).w
                jsr     (sub_11C72).l
                movea.w #(HmShots-M68K_RAM),a2
                btst    #7,2(a0,d3.w)
                beq.w   loc_90B8
                adda.w  #$364,a2
loc_90B8:                               ; CODE XREF: sub_907C+34   j
                movea.l $1E(a2),a1
                adda.w  4(a1),a1
                adda.w  (a1),a1
                move.w  #$C,(printx).w
                jsr     (print).l
                move.w  #$23,(printx).w ; '#'
                lea     unk_912A(pc),a1
                move.b  2(a0,d3.w),d0
                andi.w  #$7F,d0
                jsr     (sub_13508).l
                move.w  #$10,(printx).w
                move.b  3(a0,d3.w),d0
                bsr.w   sub_9112
                move.w  #$E000,(printa).w
                move.w  #$12,(printx).w
                move.b  4(a0,d3.w),d0
                bsr.w   sub_9112
                move.w  #$12,(printx).w
                move.b  5(a0,d3.w),d0
; End of function sub_907C


sub_9112:                               ; CODE XREF: sub_907C+74   p
                                        ; sub_907C+88   p
                ext.w   d0
                bmi.w   loc_9124
                jsr     (sub_18AE8).l
                jsr     (print).l
loc_9124:                               ; CODE XREF: sub_9112+2   j
                addq.w  #1,(printy).w
                rts
; End of function sub_9112
; ---------------------------------------------------------------------------


sub_93C4:                               ; CODE XREF: sub_8FB8+16   p
                movem.l d0-d1/a1,-(sp)
                jsr     (printz2).l
                ori.b   #4,a2
                btst    d1,d4
                bset    d4,($1004240).l
                move.w  (word_FFD5AE).w,d1
                tst.w   d1
                sgt     d0
                neg.b   d0
                cmp.w   (word_FFD5B2).w,d1
                slt     d1
                neg.b   d1
                add.b   d1,d0
                add.b   d1,d0
                lea     unk_9400(pc),a1
                jsr     (sub_13508).l
                movem.l (sp)+,d0-d1/a1
                rts
; End of function sub_93C4
; ---------------------------------------------------------------------------


sub_9428:                               ; CODE XREF: ROM:000172DA   p
                movem.l a2,-(sp)
                jsr     (sub_1833A).l
                movea.w #(unk_FFCEF4-M68K_RAM),a0
                move.w  (potreeteam).w,d0
                move.b  (a0,d0.w),d0
                movea.w #(HmShots-M68K_RAM),a2
                cmp.w   $28(a2),d0
                beq.w   loc_944E
                adda.w  #$364,a2
loc_944E:                               ; CODE XREF: sub_9428+1E   j
                moveq   #1,d7
                bsr.w   sub_945C
                movem.l (sp)+,a2
                rts
; End of function sub_9428
; ---------------------------------------------------------------------------
                clr.w   d7


sub_945C:                               ; CODE XREF: sub_9428+28   p
                moveq   #$D,d0
                moveq   #$16,d1
                bsr.w   sub_9BD8
                clr.w   (word_FFD5AC).w
                clr.w   (word_FFD5AE).w
loc_946C:                               ; CODE XREF: ROM:0000957C   j
                                        ; ROM:00009584   j
                clr.w   (word_FFD5B0).w
                jsr     (printz).l
                ori.b   #5,d6
                btst    d0,d0
                moveq   #$1E,d0
                moveq   #6,d1
                jsr     (Framer).l
                tst.w   d7
                beq.w   loc_94AC
                jsr     (sub_11DE2).l
                ori.b   #7,(a6)
                subi.w  #$6C61,(a0)
                bne.s   loc_9504
                move.l  -(a0),d0
                subq.w  #1,0(a4)
                bra.w   loc_94EA
; ---------------------------------------------------------------------------
loc_94AC:                               ; CODE XREF: sub_945C+2C   j
                jsr     (printz2).l
                ori.b   #6,(a4)+
                movep.w $1AF9(a4),d1
                bchg    d0,d1
                addq.b  #7,$5E53(a5)
                moveq   #$63,d2 ; 'c'
                bvc.s   loc_9522+2
                addq.w  #2,-(a5)
                bsr.s   loc_9536+1
                ori.b   #$B9,d0
                ori.b   #$E2,d1
                ori.b   #8,(a6)
                subi.w  #$6C61,(a0)
                moveq   #$20,d1 ; ' '
                movea.l (a3),a0
                moveq   #$61,d2 ; 'a'
                moveq   #$73,d2 ; 's'
                cmpm.b  (a6)+,(a6)+
                btst    d0,d0
loc_94EA:                               ; CODE XREF: sub_945C+4C   j
                clr.w   d0
                cmpa.w  #$C6CE,a2
                beq.w   loc_94F8
                move.w  #$2C,d0 ; ','
loc_94F8:                               ; CODE XREF: sub_945C+94   j
                bsr.w   sub_8078
                bsr.w   sub_961A
                bsr.w   sub_99C6
loc_9504:                               ; CODE XREF: sub_945C+40   j
                                        ; ROM:00009550   j
                bsr.w   sub_80BA
                bsr.w   sub_A41E
                btst    #7,d3
                bne.w   loc_9CD8
                btst    #6,d1
                bne.w   loc_9570
                bsr.w   nodiag
                moveq   #1,d0
loc_9522:                               ; CODE XREF: sub_945C+68   j
                btst    #3,d1
                bne.w   loc_9552
                neg.w   d0
                btst    #2,d1
                bne.w   loc_9552
                moveq   #$FFFFFFFE,d0
loc_9536:                               ; CODE XREF: sub_945C+6C   p
                btst    #0,d3
; End of function sub_945C
                bne.w   loc_9548
                neg.w   d0
                btst    #1,d3
                beq.w   loc_954C
loc_9548:                               ; CODE XREF: ROM:0000953A   j
                move.w  d0,(word_FFD5B0).w
loc_954C:                               ; CODE XREF: ROM:00009544   j
                                        ; ROM:0000955A   j ...
                bsr.w   sub_9588
                bra.s   loc_9504
; ---------------------------------------------------------------------------
loc_9552:                               ; CODE XREF: sub_945C+CA   j
                                        ; sub_945C+D4   j
                add.w   (word_FFD5AC).w,d0
                cmp.w   #$FFFF,d0
                blt.s   loc_954C
                cmp.w   #4,d0
                bgt.s   loc_954C
                move.w  d0,(word_FFD5AC).w
                bsr.w   sub_961A
                bsr.w   sub_99C6
                bra.s   loc_954C
; ---------------------------------------------------------------------------
loc_9570:                               ; CODE XREF: sub_945C+BC   j
                tst.w   d7
                bne.s   loc_954C
                lea     $364(a2),a2
                cmpa.w  #$CA32,a2
                beq.w   loc_946C
                movea.w #(HmShots-M68K_RAM),a2
                bra.w   loc_946C


sub_9588:                               ; CODE XREF: ROM:loc_954C   p
                move.w  (word_FFD5B0).w,d0
                beq.w   rtss8
                add.w   (word_FFD5AE).w,d0
                bmi.w   rtss8
                cmp.w   (word_FFD5B2).w,d0
                bgt.w   rtss8
                move.w  (word_FFD5AE).w,d1
                move.w  d0,(word_FFD5AE).w
                andi.w  #$F,d0
                bne.w   loc_95B8
                bsr.w   sub_99C6
                clr.w   (word_FFD5B0).w
loc_95B8:                               ; CODE XREF: sub_9588+24   j
                andi.w  #$F,d1
                bne.w   loc_95DC
                move.w  d0,-(sp)
                cmp.w   #$E,d0
                bne.w   loc_95CE
                bsr.w   sub_9604
loc_95CE:                               ; CODE XREF: sub_9588+3E   j
                move.w  (sp)+,d0
                cmp.w   #2,d0
                bne.w   loc_95DC
                bsr.w   sub_960E
loc_95DC:                               ; CODE XREF: sub_9588+34   j
                                        ; sub_9588+4C   j ...
                move.w  (disflags).w,-(sp)
                bset    #2,(disflags).w
                movea.l #VDP_DATA,a0
                move.l  #$40020010,4(a0)
                move.w  #$FF98,d0
                add.w   (word_FFD5AE).w,d0
                move.w  d0,(a0)
                move.w  (sp)+,(disflags).w
                rts
; End of function sub_9588


sub_9604:                               ; CODE XREF: sub_9588+42   p
                move.w  (word_FFD5AE).w,d3
                lsr.w   #4,d3
                bra.w   sub_9744
; End of function sub_9604


sub_960E:                               ; CODE XREF: sub_9588+50   p
                move.w  (word_FFD5AE).w,d3
                lsr.w   #4,d3
                addq.w  #6,d3
                bra.w   sub_9744
; End of function sub_960E


sub_961A:                               ; CODE XREF: sub_945C+A0   p
                                        ; ROM:00009566   p
                jsr     (printz2).l
                ori.b   #6,(a2)
                btst    d1,d4
                bset    d5,($1506C61).l
                moveq   #$FFFFFFFB,d1
                btst    d3,d0
                lea     unk_990E(pc),a1
                moveq   #5,d3
                tst.w   (word_FFD5AC).w
                bmi.w   loc_9644
                adda.w  (a1),a1
                clr.w   d3
loc_9644:                               ; CODE XREF: sub_961A+22   j
                                        ; sub_961A+4A   j
                move.w  #$8000,(printa).w
                cmp.w   (word_FFD5AC).w,d3
                bne.w   loc_9658
                move.w  #$C000,(printa).w
loc_9658:                               ; CODE XREF: sub_961A+34   j
                jsr     (print2).l
                addq.w  #1,d3
                cmp.w   #5,d3
                blt.s   loc_9644
                jsr     (printz2).l
                ori.b   #4,a0
                movep.w $700(a1),d1
                moveq   #$16,d0
                moveq   #3,d1
                jsr     (Framer).l
                jsr     (printz).l
                ori.b   #$A,d6
                        #$FA
                andi.l  #$7001D078,0(a6)
                jsr     (sub_13508).l
                clr.w   (word_FFB030).w
                movea.w #(unk_FFC018-M68K_RAM),a3
                clr.l   d6
                tst.w   (word_FFD5AC).w
                bpl.w   loc_96B6
                bsr.w   sub_9F40
                bset    d0,d6
                subq.w  #1,d6
                not.l   d6
loc_96B6:                               ; CODE XREF: sub_961A+8E   j
                                        ; sub_961A+EA   j
                moveq   #$FFFFFFFF,d4
                st      d5
                bsr.w   sub_9F9A
                bra.w   loc_96FC
; ---------------------------------------------------------------------------
loc_96C2:                               ; CODE XREF: sub_961A:loc_96FC   j
                btst    d0,d6
                bne.w   loc_96FC
                clr.w   d2
                move.w  (word_FFD5AC).w,d1
                bmi.w   loc_96D6
                bsr.w   sub_9872
loc_96D6:                               ; CODE XREF: sub_961A+B4   j
                ext.l   d2
                asl.l   #8,d2
                movea.l $1E(a2),a1
                adda.w  (a1),a1
                move.w  d0,d1
                subq.w  #8,a1
loc_96E4:                               ; CODE XREF: sub_961A+CE   j
                addq.w  #8,a1
                adda.w  (a1),a1
                dbf     d1,loc_96E4
                move.b  #$FF,d2
                sub.b   (a1),d2
                cmp.l   d4,d2
                ble.w   loc_96FC
                move.l  d2,d4
                move.w  d0,d5
loc_96FC:                               ; CODE XREF: sub_961A+A4   j
                                        ; sub_961A+AA   j ...
                dbf     d0,loc_96C2
                bset    d5,d6
                move.b  d5,(a3)+
                bpl.s   loc_96B6
                moveq   #5,d0
loc_9708:                               ; CODE XREF: sub_961A+F2   j
                st      (a3,d0.w)
                dbf     d0,loc_9708
                move.w  a3,d0
                subi.w  #$C01E,d0
                bpl.w   loc_971C
                clr.w   d0
loc_971C:                               ; CODE XREF: sub_961A+FC   j
                asl.w   #4,d0
                move.w  d0,(word_FFD5B2).w
                cmp.w   (word_FFD5AE).w,d0
                bcc.w   loc_972E
                move.w  d0,(word_FFD5AE).w
loc_972E:                               ; CODE XREF: sub_961A+10C   j
                moveq   #5,d4
loc_9730:                               ; CODE XREF: sub_961A+122   j
                move.w  (word_FFD5AE).w,d3
                lsr.w   #4,d3
                add.w   d4,d3
                bsr.w   sub_9744
                dbf     d4,loc_9730
                bra.w   loc_95DC
; End of function sub_961A


sub_9744:                               ; CODE XREF: sub_9604+6   j
                                        ; sub_960E+8   j ...
                movea.w #(unk_FFC018-M68K_RAM),a4
                adda.w  d3,a4
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$43,d0 ; 'C'
                andi.w  #$1F,d3
                move.w  d3,(printy).w
                moveq   #$28,d0 ; '('
                moveq   #1,d1
                move.w  #$7FF,d2
                jsr     (eraser).l
                tst.b   (a4)
                bmi.w   rtss8
                subq.w  #1,(printy).w
                move.w  #1,(printx).w
                move.w  a4,d0
                subi.w  #$C017,d0
                moveq   #2,d1
                move.w  #$E000,(printa).w
                jsr     (sub_11D3A).l
                jsr     (print).l
                clr.w   d0
                move.b  (a4),d0
                jsr     (sub_18B26).l
                addq.w  #1,(printx).w
                move.w  #$8000,(printa).w
                jsr     (print).l
                move.w  #$11,(printx).w
                tst.w   (word_FFD5AC).w
                bmi.w   loc_97FC
                clr.w   d5
loc_97C2:                               ; CODE XREF: sub_9744+B2   j
                clr.w   d0
                move.b  (a4),d0
                move.w  d5,d1
                bsr.w   sub_9872
                move.w  d2,d0
                moveq   #4,d1
                jsr     (sub_11D3A).l
                move.w  #$8000,(printa).w
                cmp.w   (word_FFD5AC).w,d5
                bne.w   loc_97EA
                move.w  #$C000,(printa).w
loc_97EA:                               ; CODE XREF: sub_9744+9C   j
                jsr     (print).l
                addq.w  #1,d5
                cmp.w   #5,d5
                bne.s   loc_97C2
                bra.w   locret_9870
; ---------------------------------------------------------------------------
loc_97FC:                               ; CODE XREF: sub_9744+78   j
                clr.w   d0
                move.b  (a4),d0
                moveq   #3,d1
                bsr.w   sub_988E
                clr.w   d0
                move.b  (a4),d0
                moveq   #0,d1
                move.w  d2,-(sp)
                bsr.w   sub_988E
                move.w  (sp)+,d0
                move.w  d0,d3
                sub.w   d2,d0
                bpl.w   loc_981E
                clr.w   d0
loc_981E:                               ; CODE XREF: sub_9744+D4   j
                move.w  d0,d2
                moveq   #4,d1
                jsr     (sub_11D3A).l
                addq.w  #1,(printx).w
                jsr     (print).l
                move.w  d3,d0
                moveq   #4,d1
                jsr     (sub_11D3A).l
                addq.w  #2,(printx).w
                jsr     (print).l
                tst.w   d3
                beq.w   loc_9852
                mulu.w  #$64,d2 ; 'd'
                divu.w  d3,d2
loc_9852:                               ; CODE XREF: sub_9744+104   j
                move.w  d2,d0
                moveq   #4,d1
                jsr     (sub_11D3A).l
                addq.w  #2,(printx).w
                jsr     (print).l
                jsr     (printz).l
                ori.b   #0,d4
locret_9870:                            ; CODE XREF: sub_9744+B4   j
                rts
; End of function sub_9744


sub_9872:                               ; CODE XREF: sub_961A+B8   p
                                        ; sub_9744+84   p
                move.w  d0,-(sp)
                bsr.w   sub_9F40
                move.w  d0,d2
                move.w  (sp)+,d0
                cmp.w   d2,d0
                bge.w   sub_988E
                clr.w   d2
                        d1
                ori.b   #0,d6
                move.b  a2,$7201(a0)
; End of function sub_9872


sub_988E:                               ; CODE XREF: sub_9744+BE   p
                                        ; sub_9744+CA   p ...
                tst.w   d7
                bne.w   loc_98BA
                lea     unk_98FA(pc),a1
                asl.w   #2,d1
                adda.w  d1,a1
                move.w  (a1),d1
                add.w   d0,d1
                clr.w   d2
                move.b  (a2,d1.w),d2
                move.w  2(a1),d1
                bmi.w   rtss8
                add.w   d0,d1
                clr.w   d3
                move.b  (a2,d1.w),d3
                add.w   d3,d2
                rts
; ---------------------------------------------------------------------------
loc_98BA:                               ; CODE XREF: sub_988E+2   j
                asl.w   #2,d1
                add.w   d0,d0
                clr.w   d2
                bsr.w   sub_98CE
                addq.w  #2,d1
                bsr.w   sub_98CE
                lsr.w   #1,d0
                rts
; End of function sub_988E


sub_98CE:                               ; CODE XREF: sub_988E+32   p
                                        ; sub_988E+38   p
                movea.l #$98E6,a1
                tst.w   (a1,d1.w)
                beq.w   rtss8
                movea.w (a1,d1.w),a1
                add.w   (a1,d0.w),d2
                rts
; End of function sub_98CE
; ---------------------------------------------------------------------------


sub_99C6:                               ; CODE XREF: sub_945C+A4   p
                                        ; ROM:0000956A   p ...
                movem.l d0-d1/a1,-(sp)
                jsr     (printz2).l
                ori.b   #4,a2
                btst    d1,d2
                bset    d5,($1004240).l
                move.w  (word_FFD5AE).w,d1
                tst.w   d1
                sgt     d0
                neg.b   d0
                cmp.w   (word_FFD5B2).w,d1
                slt     d1
                neg.b   d1
                add.b   d1,d0
                add.b   d1,d0
                lea     unk_9A02(pc),a1
                jsr     (sub_13508).l
                movem.l (sp)+,d0-d1/a1
                rts
; End of function sub_99C6
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
                moveq   #9,d0
                moveq   #$1C,d1
                bsr.w   sub_9BD8
                jsr     (printz).l
                ori.b   #6,d6
                btst    d0,d0
                moveq   #$1C,d0
                moveq   #6,d1
                bsr.w   Framer
                jsr     (sub_11DE2).l
                ori.b   #9,(a4)
                subi.w  #$726F,d3
                move.l  -(a0),d0
                moveq   #$65,d2 ; 'e'
                moveq   #$FFFFFFBD,d1
                btst    d3,d1
                move.w  #$2C,d0 ; ','
                bsr.w   sub_8078
                addq.w  #4,(printx).w
                clr.w   d0
                bsr.w   sub_8078
                bsr.w   sub_9A84
loc_9A76:                               ; CODE XREF: ROM:00009A82   j
                bsr.w   sub_9FB8
                btst    #7,d1
                bne.w   loc_9CD8
                bra.s   loc_9A76


sub_9A84:                               ; CODE XREF: ROM:00009A72   p
                bsr.w   printz2
                ori.b   #4,(a6)
                andi.b  #$43,d4 ; 'C'
                moveq   #$65,d1 ; 'e'
                bgt.s   loc_9B08+2
                movea.l a4,a0
                bcs.s   loc_9B10
                bcs.s   loc_9B08
                move.w  (CwdExciteLvl).w,d0
                bsr.w   sub_9BB4
                bsr.w   printz2
                ori.b   #4,(a6)
                bcs.s   loc_9B26
                bsr.s   loc_9B1A+3
                bcs.s   loc_9AD8
loc_9AB8:                               ; CODE XREF: sub_9A84+38   j
                divu
                bge.s   loc_9AB8+3
                move.b  d0,d6
                move.l  (SumCwdExciteLvl).w,d0
                divu.w  (NumCwdExciteLvl).w,d0
                bsr.w   sub_9BB4
                bsr.w   printz2
                ori.b   #4,(a2)
                addq.w  #8,-(a5)
loc_9AD8:                               ; CODE XREF: sub_9A84+32   j
                bsr.s   loc_9B44+1
                movea.l a4,a0
                bcs.s   loc_9B50+4
                bcs.s   sub_9B4A+2
                move.w  (MaxCwdExciteLvl).w,d0
                bsr.w   sub_9BB4
                movem.l d0-d7/a0-a6,-(sp)
                tst.w   (word_FFD458).w
                bmi.w   loc_9BAE
                move.w  (HomeTeam).w,d1
                ext.l   d1
                movea.l #$FFFFCF36,a0
                jsr     (clrCrowdRAM?).l
loc_9B08:                               ; CODE XREF: sub_9A84+16   j
                                        ; sub_9A84+10   j
                move.b  8(a0),d0
                bne.w   loc_9B14
loc_9B10:                               ; CODE XREF: sub_9A84+14   j
                move.b  #$50,d0 ; 'P'
loc_9B14:                               ; CODE XREF: sub_9A84+88   j
                andi.w  #$FF,d0
                move.w  d0,-(sp)
loc_9B1A:                               ; CODE XREF: sub_9A84+30   p
                bsr.w   printz2
; End of function sub_9A84
                ori.b   #4,(a4)
loc_9B26:                               ; CODE XREF: sub_9A84+2E   j
                bcs.s   loc_9B94+2
                bsr.s   sub_9B4A
                addq.w  #1,-(a5)
                bls.s   loc_9B98+5
                moveq   #$64,d1 ; 'd'
                move.w  (sp)+,d0
                move.w  #3,d1
                jsr     (sub_11D3A).l
                jsr     (print).l
loc_9B44:                               ; CODE XREF: sub_9A84:loc_9AD8   p
                jsr     (printz).l


sub_9B4A:                               ; CODE XREF: ROM:00009B28   p
                                        ; sub_9A84+5A   j
                ori.b   #$64,d6 ; 'd'
                clr.b   d0
loc_9B50:                               ; CODE XREF: sub_9A84+58   j
                jsr     (sub_FEC5E).l
                move.w  d0,d1
                ext.l   d1
                movea.l #$FFFFCF36,a0
                jsr     (clrCrowdRAM?).l
                move.b  8(a0),d0
                bne.w   loc_9B72
                move.w  #$50,d0 ; 'P'
loc_9B72:                               ; CODE XREF: sub_9B4A+20   j
                andi.w  #$FF,d0
                move.w  d0,-(sp)
                bsr.w   printz2
                ori.b   #4,(a6)
                divul
                movea.l (a2),a0
                bcs.s   loc_9BEA+5
loc_9B8C:                               ; CODE XREF: sub_9B4A+44   j
                ble.s   loc_9BFE+2
                bcc.s   loc_9B8C+1
                move.b  d0,d6
                move.w  (sp)+,d0
loc_9B94:                               ; CODE XREF: ROM:loc_9B26   j
                move.w  #3,d1
loc_9B98:                               ; CODE XREF: ROM:00009B2C   j
                jsr     (sub_11D3A).l
                jsr     (print).l
                bsr.w   printz
                ori.b   #$64,d6 ; 'd'
                clr.b   d0
loc_9BAE:                               ; CODE XREF: sub_9A84+6E   j
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_9B4A


sub_9BB4:                               ; CODE XREF: sub_9A84+1E   p
                                        ; sub_9A84+44   p ...
                ext.l   d0
                asl.w   #2,d0
                bsr.w   sroot
                addi.w  #$41,d0 ; 'A'
                moveq   #3,d1
                jsr     (sub_11D3A).l
                bsr.w   print
                bsr.w   printz
                ori.b   #$64,d6 ; 'd'
                clr.b   d0
                rts
; End of function sub_9BB4


sub_9BD8:                               ; CODE XREF: ROM:000080D8   p
                                        ; ROM:000082E4   p ...
                movem.l d0-d1/a2,-(sp)
                bsr.w   forceblack
                bclr    #0,(disflags).w
                move.w  (disflags).w,-(sp)
loc_9BEA:                               ; CODE XREF: sub_9B4A+40   j
                bset    #2,(disflags).w
                move.w  (VSPRITES).w,d0
                bsr.w   Vmaddr
                move.l  #0,(a0)
loc_9BFE:                               ; CODE XREF: sub_9B4A:loc_9B8C   j
                move.w  #$8C81,4(a0)
                move.w  #6,(Map3col1).w
                move.w  #$8D00,4(a0)
                clr.w   d0
                bsr.w   Vmaddr
                move.l  #0,(a0)
                move.w  (sp)+,(disflags).w
                bclr    #1,(disflags).w
                move.w  (framercset).w,d4
                movea.l #unk_55B86,a2
                bsr.w   sub_1172C
                sub.b   d0,-(a3)
                or.l    d4,-$3211(a3)
                move.w  (word_FFB012).w,d4
                jsr     (sub_11F04).l
                bsr.w   printz
                ori.b   #0,d6
                ori.b   #$7C,d0 ; '|'
                ori.b   #$24,d5 ; '$'
                adda.l  4(a1),a1
                movea.w #$30A,a2
                clr.w   d0
                clr.w   d1
                move.w  (a1),d2
                move.w  2(a1),d3
                moveq   #1,d4
                moveq   #0,d5
                bsr.w   dobitmap
                bsr.w   printz
                ori.b   #0,d6
                ori.b   #$D7,d0
                subi.b  #$78,d3 ; 'x'
                cmp.b   $207C(a2),d0
                ori.b   #$24,d5 ; '$'
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                move.w  d1,d3
                sub.w   d0,d3
                move.w  d0,d1
                clr.w   d0
                moveq   #$28,d2 ; '('
                moveq   #$D,d5
                bsr.w   dobitmap
                move.w  d4,(word_FFB014).w
                movea.l #unk_AAC5A,a2
                bsr.w   sub_1172C
loc_9CAE:
                add.b   d0,-(a3)
                or.l    d4,-$3211(a3)
                bsr.w   printz
                ori.b   #0,d6
                ori.b   #$40,d0 ; '@'
                moveq   #$20,d1 ; ' '
                move.w  #$7FF,d2
                bsr.w   eraser
                move.w  #$18,(palcount).w
                movem.l (sp)+,d0-d1/a2
                rts
; End of function sub_9BD8
; ---------------------------------------------------------------------------
loc_9CD8:                               ; CODE XREF: ROM:00008176   j
                                        ; ROM:00008894   j ...
                bsr.w   forceblack


sub_9CDC:                               ; CODE XREF: ROM:0000A3D6   p
                                        ; sub_A528+2C   p
                move.w  (disflags).w,-(sp)
                bset    #2,(disflags).w
                move.w  (VSCRLPM).w,d0
                bsr.w   Vmaddr
                move.l  #0,(a0)
                move.w  #$8D00,d0
                move.b  (VSCRLPM).w,d0
                lsr.b   #2,d0
                move.w  d0,4(a0)
                move.w  #$8C00,4(a0)
                move.w  #5,(Map3col1).w
                move.w  (sp)+,(disflags).w
                bset    #1,(disflags).w
                move.w  (word_FFB018).w,d4
                movea.l #unk_56062,a2
                btst    #4,(word_FFC2F4).w
                beq.w   loc_9D32
                movea.l #unk_B5188,a2
loc_9D32:                               ; CODE XREF: sub_9CDC+4C   j
                bsr.w   sub_11738
                jsr     (sub_FEA52).l
                move.w  (word_FFB012).w,d4
                movea.l #unk_AAC5A,a2
                bsr.w   sub_1172C
                or.l    d4,-$3211(a3)
                move.w  (framercset).w,d4
                jsr     (sub_11F12).l
                jsr     (sub_16CAC).l
                jsr     (sub_16CC4).l
                jsr     (sub_16CD2).l
                jsr     (sub_16C96).l
                jmp     sub_1720C
; End of function sub_9CDC
; ---------------------------------------------------------------------------
                subq.w  #1,(dword_FFCF20).w
                subq.w  #1,(dword_FFCF20+2).w
                move.l  #unk_1988C,(dword_FFCF24).l
                bset    #2,$30(a2)
                bsr.w   printz
                ori.b   #5,d6
                cmpi.b  #$16,d0
                moveq   #6,d1
                bsr.w   Framer
                bsr.w   printz
                ori.b   #$C,(a0)
                bcs.s   loc_9E20+1
                eor.b   d6,(a1)
                btst    d7,d0
                movea.l $1E(a2),a1
                adda.w  4(a1),a1
                move.w  (a1),d0
                lsr.w   #1,d0
                sub.w   d0,(printx).w
                bsr.w   print
                movea.w #(HmShots-M68K_RAM),a2
                jsr     (sub_13098).l
                adda.w  #$364,a2
                jsr     (sub_13098).l
                moveq   #$78,d0 ; 'x'
                bra.w   waitx
; ---------------------------------------------------------------------------
                move.w  (dword_FFCF20).w,-(sp)
                move.w  (dword_FFCF20+2).w,-(sp)
                bsr.w   sub_9F40
                move.w  d0,(dword_FFCF20+2).w
                bsr.w   printz
                ori.b   #4,d6
                cmpi.b  #$18,d0
                moveq   #3,d1
                add.w   (dword_FFCF20+2).w,d1
                bsr.w   Framer
                move.w  $26(a2),d0
                bpl.w   loc_9E16
                moveq   #$FFFFFFFF,d0
loc_9E16:                               ; CODE XREF: ROM:00009E10   j
                addq.w  #1,d0
                move.w  d0,(dword_FFCF20).w
loc_9E1C:                               ; CODE XREF: ROM:00009E46   j
                                        ; ROM:00009E50   j ...
                bsr.w   loc_9E86
loc_9E20:                               ; CODE XREF: ROM:00009DB0   j
                bsr.w   sub_9FB8
                btst    #7,d1
                bne.w   loc_9E5E
                btst    #5,d1
                bne.w   loc_9E5E
                btst    #1,d1
                beq.w   loc_9E4C
                move.w  (dword_FFCF20).w,d0
                addq.w  #1,d0
                cmp.w   (dword_FFCF20+2).w,d0
                bgt.s   loc_9E1C
                move.w  d0,(dword_FFCF20).w
loc_9E4C:                               ; CODE XREF: ROM:00009E38   j
                btst    #0,d1
                beq.s   loc_9E1C
                subq.w  #1,(dword_FFCF20).w
                bpl.s   loc_9E1C
                clr.w   (dword_FFCF20).w
                bra.s   loc_9E1C
; ---------------------------------------------------------------------------
loc_9E5E:                               ; CODE XREF: ROM:00009E28   j
                                        ; ROM:00009E30   j
                move.w  (dword_FFCF20).w,d0
                subq.w  #1,d0
                bpl.w   loc_9E72
                cmpi.w  #$FFFF,$26(a2)
                blt.w   loc_9E7C
loc_9E72:                               ; CODE XREF: ROM:00009E64   j
                move.w  d0,$26(a2)
                jsr     (SetPersonel).l
loc_9E7C:                               ; CODE XREF: ROM:00009E6E   j
                move.w  (sp)+,(dword_FFCF20+2).w
                move.w  (sp)+,(dword_FFCF20).w
                rts
; ---------------------------------------------------------------------------
loc_9E86:                               ; CODE XREF: ROM:loc_9E1C   p
                move.w  #$D,(printy).w
                move.w  (dword_FFCF20+2).w,d1
                moveq   #0,d0
loc_9E92:                               ; CODE XREF: ROM:00009F3A   j
                move.w  #5,(printx).w
                move.w  #$A000,(printa).w
                cmp.w   (dword_FFCF20).w,d0
                bne.w   loc_9EAC
                move.w  #$8000,(printa).w
loc_9EAC:                               ; CODE XREF: ROM:00009EA2   j
                bsr.w   printz
                ori.b   #$20,(a0)+ ; ' '
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                tst.w   d0
                bne.w   loc_9EE6+2
                move.w  #$B,(printx).w
                bsr.w   printz
                ori.b   #$6F,a4 ; 'o'
                movea.l -(sp),a0
                ble.s   sub_9F40+1
                bge.s   loc_9F48+3
                bcs.w   loc_FEE2+2
loc_9EE6:                               ; CODE XREF: ROM:00009ECA   j
                ori.w   #$226A,a6
                ori.b   #$D1,(a6)+
                move.w  d0,d2
                subq.w  #1,d2
                bra.w   loc_9EFA
; ---------------------------------------------------------------------------
loc_9EF6:                               ; CODE XREF: ROM:loc_9EFA   j
                adda.w  (a1),a1
                addq.w  #8,a1
loc_9EFA:                               ; CODE XREF: ROM:00009EF2   j
                dbf     d2,loc_9EF6
                move.w  #8,(printx).w
                bsr.w   print
                move.b  (a1),d2
                lsr.b   #4,d2
                addi.b  #$30,d2 ; '0'
                move.b  d2,(word_FFBFA6).w
                move.b  (a1),d2
                andi.b  #$F,d2
                addi.b  #$30,d2 ; '0'
                move.b  d2,(word_FFBFA6+1).w
                movea.w #(mesarea-M68K_RAM),a1
                move.w  #4,(a1)
                move.w  #5,(printx).w
                bsr.w   print
                addq.w  #1,(printy).w
                addq.w  #1,d0
                dbf     d1,loc_9E92
                rts


sub_9F40:                               ; CODE XREF: ROM:loc_838E   p
                                        ; sub_8BA6+9E   p ...
                movem.l d1/a0,-(sp)
                movea.l $1E(a2),a0
loc_9F48:                               ; CODE XREF: ROM:00009EE0   j
                adda.w  $A(a0),a0
                move.w  (a0),d1
                clr.w   d0
loc_9F50:                               ; CODE XREF: sub_9F40+14   j
                addq.w  #1,d0
                asl.w   #4,d1
                bne.s   loc_9F50
                movem.l (sp)+,d1/a0
                rts
; End of function sub_9F40


sub_9F5C:                               ; CODE XREF: ROM:000FAB7E   p
                movem.l a0,-(sp)
                bsr.s   sub_9F40
                move.w  d0,-(sp)
                movea.l $1E(a2),a0
                adda.w  8(a0),a0
                move.b  3(a0),d0
                lsr.w   #4,d0
                andi.w  #$F,d0
                add.w   (sp)+,d0
                movem.l (sp)+,a0
                rts
; End of function sub_9F5C


sub_9F7E:                               ; CODE XREF: ROM:00008394   p
                movem.l a0,-(sp)
                movea.l $1E(a2),a0
                adda.w  8(a0),a0
                move.b  3(a0),d0
                lsr.w   #4,d0
                andi.w  #$F,d0
                movem.l (sp)+,a0
                rts
; End of function sub_9F7E


sub_9F9A:                               ; CODE XREF: ROM:000083AA   p
                                        ; sub_961A+A0   p ...
                movem.l a0,-(sp)
                movea.l $1E(a2),a0
                adda.w  (a0),a0
                clr.w   d0
loc_9FA6:                               ; CODE XREF: sub_9F9A+16   j
                addq.w  #1,d0
                adda.w  (a0),a0
                addq.w  #8,a0
                cmpi.w  #2,(a0)
                bne.s   loc_9FA6
                movem.l (sp)+,a0
                rts
; End of function sub_9F9A


sub_9FB8:                               ; CODE XREF: ROM:loc_9A76   p
                                        ; ROM:loc_9E20   p ...
                move.w  (vcount).w,d1
loc_9FBC:                               ; CODE XREF: sub_9FB8+8   j
                cmp.w   (vcount).w,d1
                beq.s   loc_9FBC
                bsr.w   sub_A41E
                bsr.w   nodiag
                tst.b   d1
                beq.s   sub_9FB8
                rts
; End of function sub_9FB8
; ---------------------------------------------------------------------------
                bclr    #0,(byte_FFC2F6).w
                bsr.w   forceblack
                move.w  (disflags).w,-(sp)
                bset    #3,(sflags2).w
                bclr    #4,(word_FFC2F4).w
                jsr     (ClrHor).l
                move.w  #$400,d0
                move.w  (VmMap3).w,d1
                move.w  #$7FF,d2
                bsr.w   DoFill
                move.w  (ExtraChars).w,d4
                movea.l #unk_BB4F6,a2
                jsr     (sub_11738).l
                jsr     (sub_A448).l
                bclr    #5,(sflags).w
                bclr    #5,(sflags3).w
                st      (byte_FFBE1E).w
                movea.l (recbpr).w,a4
loc_A02A:                               ; CODE XREF: ROM:0000A030   j
                bsr.w   sub_A4F6
                tst.w   d7
                bne.s   loc_A02A
                jsr     (SprSort).l
                jsr     (setvideo).l
                bclr    #1,(sflags3).w
                clr.l   (dword_FFBE7A).w
                clr.l   (dword_FFBE7E).w
                clr.l   (dword_FFBE82).w
                move.w  #$18,(palcount).w
                moveq   #1,d7
loc_A058:                               ; CODE XREF: ROM:0000A062   j
                                        ; ROM:0000A1D6   j ...
                move.w  (vcount).w,d0
                sub.w   (oldvcount).w,d0
                cmp.w   d0,d7
                bhi.s   loc_A058
                move.w  (vcount).w,(oldvcount).w
                tst.w   (word_FFDEB4).w
                bmi.w   loc_A084
                sub.w   d7,(word_FFDEB4).w
                bpl.w   loc_A084
                clr.w   (word_FFDEB4).w
                jsr     (sub_A48A).l
loc_A084:                               ; CODE XREF: ROM:0000A06E   j
                                        ; ROM:0000A076   j
                movem.l d0/a3,-(sp)
                movea.l #$FFFFB64A,a3
                move.w  #1,8(a3)
                movea.l #$FFFFB6CA,a3
                move.w  #1,8(a3)
                movem.l (sp)+,d0/a3
                moveq   #1,d7
                bsr.w   sub_A41E
                btst    #0,(byte_FFC2F6).w
                beq.w   loc_A0C4
                andi.w  #$FFF0,d0
                ori.w   #8,d0
                andi.w  #$FFF0,d1
                andi.w  #$FFF0,d3
loc_A0C4:                               ; CODE XREF: ROM:0000A0B0   j
                movea.w #(unk_FFBE08-M68K_RAM),a5
                btst    #5,(sflags3).w
                beq.w   loc_A0DC
                move.w  d1,d5
                andi.w  #$F,d5
                beq.w   loc_A25E
loc_A0DC:                               ; CODE XREF: ROM:0000A0CE   j
                btst    #3,d0
                bne.w   loc_A25E
                cmpi.w  #$FF60,(a5)
                bgt.w   loc_A0F4
                move.w  #0,(a5)
                bra.w   *+4
; ---------------------------------------------------------------------------
loc_A0F4:                               ; CODE XREF: ROM:0000A0E8   j
                                        ; ROM:0000A0F0   j
                cmpi.w  #$FED0,$14(a5)
                bgt.w   loc_A104
                move.w  #0,$14(a5)
loc_A104:                               ; CODE XREF: ROM:0000A0FA   j
                bset    #5,(sflags).w
                bne.w   loc_A118
                move.w  (Hpos).w,(a5)
                move.w  (Vpos).w,$14(a5)
loc_A118:                               ; CODE XREF: ROM:0000A10A   j
                move.w  d0,d5
                andi.w  #7,d5
                eori.w  #4,d5
                movea.w #(SortCords-M68K_RAM),a1
                st      d3
                bclr    #5,(sflags3).w
                beq.w   loc_A136
                move.w  $16(a5),d3
loc_A136:                               ; CODE XREF: ROM:0000A12E   j
                move.w  (a5),d0
                move.w  $14(a5),d1
                moveq   #$B,d2
                move.l  #$100,d4
                movem.w d0-d1,-(sp)
loc_A148:                               ; CODE XREF: ROM:0000A1AA   j
                cmp.w   $52(a1),d3
                beq.w   loc_A1A6
                movem.w (sp),d0-d1
                sub.w   (a1),d0
                sub.w   $14(a1),d1
                jsr     (vtoa).l
                btst    #3,d0
                bne.w   loc_A1A6
                sub.w   d5,d0
                addq.w  #1,d0
                andi.w  #7,d0
                cmp.w   #2,d0
                bhi.w   loc_A1A6
                movem.w (sp),d0-d1
                sub.w   (a1),d0
                sub.w   $14(a1),d1
                muls.w  d0,d0
                muls.w  d1,d1
                add.l   d1,d0
                cmp.l   #4,d0
                bls.w   loc_A1A6
                cmp.l   d4,d0
                bhi.w   loc_A1A6
                move.l  d0,d4
                move.w  $52(a1),$16(a5)
                bset    #5,(sflags3).w
loc_A1A6:                               ; CODE XREF: ROM:0000A14C   j
                                        ; ROM:0000A164   j ...
                adda.w  #$80,a1
                dbf     d2,loc_A148
                addq.w  #4,sp
                btst    #5,(sflags3).w
                beq.w   loc_A1DA
                move.w  $16(a5),d0
                asl.w   #7,d0
                movea.w #(SortCords-M68K_RAM),a3
                adda.w  d0,a3
                moveq   #4,d4
                bsr.w   sub_C656
                bsr.w   sub_A616
                jsr     (setvideo).l
                bra.w   loc_A058
; ---------------------------------------------------------------------------
loc_A1DA:                               ; CODE XREF: ROM:0000A1B6   j
                bset    #5,(sflags).w
                eori.w  #4,d5
                asl.w   #2,d5
                lea     unk_A23E(pc),a0
                move.w  (a0,d5.w),d0
                add.w   (a5),d0
                cmp.w   #$88,d0
                bgt.w   loc_A202
                cmp.w   #$FF78,d0
                blt.w   loc_A202
                move.w  d0,(a5)
loc_A202:                               ; CODE XREF: ROM:0000A1F4   j
                                        ; ROM:0000A1FC   j
                move.w  2(a0,d5.w),d1
                add.w   $14(a5),d1
                cmp.w   #$126,d1
                bgt.w   loc_A21E
                cmp.w   #$FEDA,d1
                blt.w   loc_A21E
                move.w  d1,$14(a5)
loc_A21E:                               ; CODE XREF: ROM:0000A20E   j
                                        ; ROM:0000A216   j
                movea.w a5,a3
                clr.w   $18(a5)
                andi.w  #$FFF,(word_FFBE78).w
                ori.w   #$E000,(word_FFBE78).w
                bsr.w   sub_A616
                jsr     (setvideo).l
                bra.w   loc_A058
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_A25E:                               ; CODE XREF: ROM:0000A0D8   j
                                        ; ROM:0000A0E0   j
                st      $18(a5)
                btst    #5,d1
                beq.w   loc_A27A
                btst    #0,(byte_FFC2F6).w
                bne.w   loc_A27A
                bchg    #1,(sflags3).w
loc_A27A:                               ; CODE XREF: ROM:0000A266   j
                                        ; ROM:0000A270   j
                btst    #6,d3
                beq.w   loc_A2B0
                btst    #0,(byte_FFC2F6).w
                bne.w   loc_A2B0
                bsr.w   sub_A4F6
                bsr.w   sub_A4F6
                bsr.w   sub_A4F6
                bsr.w   sub_A4F6
                jsr     (SprSort).l
                jsr     (setvideo).l
                moveq   #1,d7
                bclr    #1,(sflags3).w
loc_A2B0:                               ; CODE XREF: ROM:0000A27E   j
                                        ; ROM:0000A288   j
                btst    #0,(byte_FFC2F6).w
                bne.w   loc_A306
                btst    #4,d3
                beq.w   loc_A306
                btst    #6,d3
                beq.w   loc_A2EE
                bclr    #5,(sflags3).w
                bclr    #5,(sflags).w
                move.w  d0,-(sp)
                move.w  (word_FFBE78).w,d0
                andi.w  #$FFF,d0
                ori.w   #$E000,d0
                move.w  d0,(word_FFBE78).w
                move.w  (sp)+,d0
                bra.w   loc_A058
; ---------------------------------------------------------------------------
loc_A2EE:                               ; CODE XREF: ROM:0000A2C6   j
                bsr.w   sub_A528
                jsr     (SprSort).l
                jsr     (setvideo).l
                asl.w   #1,d7
                bclr    #1,(sflags3).w
loc_A306:                               ; CODE XREF: ROM:0000A2B6   j
                                        ; ROM:0000A2BE   j
                btst    #1,(sflags3).w
                beq.w   loc_A326
                st      (lastsfx).w
                bsr.w   sub_A528
                move.w  (lastsfx).w,-(sp)
                bsr.w   sfx
                jsr     (SprSort).l
loc_A326:                               ; CODE XREF: ROM:0000A30C   j
                jsr     (setvideo).l
                btst    #0,(byte_FFC2F6).w
                bne.w   loc_A358
                btst    #7,d1
                beq.w   loc_A058
                jsr     (sub_A4A8).l
                bclr    #1,(sflags3).w
                bset    #0,(byte_FFC2F6).w
                bne.w   loc_A358
                bra.w   loc_A058
; ---------------------------------------------------------------------------
loc_A358:                               ; CODE XREF: ROM:0000A332   j
                                        ; ROM:0000A350   j
                btst    #7,d1
                bne.w   loc_A39E
                btst    #6,d1
                bne.w   loc_A398
                btst    #4,d1
                bne.w   loc_A3A8
                btst    #5,d1
                beq.w   loc_A058
                bset    #6,(word_FFC2F4).w
                bclr    #0,(byte_FFC2F6).w
                jsr     (sub_A4D8).l
                bsr.w   sub_A528
                jsr     (SprSort).l
                bra.w   loc_A058
; ---------------------------------------------------------------------------
loc_A398:                               ; CODE XREF: ROM:0000A364   j
                jmp     loc_A058
; ---------------------------------------------------------------------------
loc_A39E:                               ; CODE XREF: ROM:0000A35C   j
                clr.w   (dword_FFCF20).w
                bset    #1,(byte_FFC2F6).w
loc_A3A8:                               ; CODE XREF: ROM:0000A36C   j
                bsr.w   forceblack
                ori.w   #$F000,(word_FFBE78).w
                bclr    #5,(sflags).w
                movea.l (recbpr).w,a4
                bclr    #4,(word_FFC2F4).w
                bsr.w   sub_A68C
                jsr     (SprSort).l
                bclr    #3,(sflags2).w
                move.w  (sp)+,(disflags).w
                jsr     (sub_9CDC).l
                jsr     (sub_16CAC).l
                jsr     (sub_16CC4).l
                jsr     (sub_16CD2).l
                jsr     (sub_16CEE).l
                btst    #4,(disflags).w
                beq.w   loc_A40A
                jsr     (sub_16D0A).l
                jsr     (sub_16CFC).l
loc_A40A:                               ; CODE XREF: ROM:0000A3FA   j
                jsr     (SetHor).l
                jsr     (setvideo).l
                move.w  #$18,(palcount).w
                rts


sub_A41E:                               ; CODE XREF: sub_7CF8+58   p
                                        ; ROM:0000816E   p ...
                tst.w   (FourWayPlay).w
                bne.w   loc_A434
loc_A426:                               ; CODE XREF: sub_A41E+1A   j
                btst    #1,(sflags).w
                bne.w   ReadJoy2
                bra.w   ReadJoy1
; ---------------------------------------------------------------------------
loc_A434:                               ; CODE XREF: sub_A41E+4   j
                tst.w   (word_FFC316).w
                beq.s   loc_A426
                cmpi.w  #3,(word_FFC316).w
                beq.w   ReadJoy3
                bra.w   ReadJoy4
; End of function sub_A41E


sub_A448:                               ; CODE XREF: ROM:0000A010   p
                                        ; sub_A528:loc_A5C4   p
                move.w  #$F0,(word_FFDEB4).w
                bsr.w   printz
                ori.b   #2,d6
                andi.b  #$20,d0 ; ' '
                moveq   #$55,d1 ; 'U'
                moveq   #8,d2
                moveq   #4,d3
                move.w  (word_FFB018).w,d4
                move.w  #0,d5
                movea.l #unk_5605A,a1
                btst    #4,(word_FFC2F4).w
                beq.w   loc_A47E
                movea.l #unk_B5180,a1
loc_A47E:                               ; CODE XREF: sub_A448+2C   j
                adda.l  4(a1),a1
                movea.w #$30A,a2
                bra.w   dobitmap
; End of function sub_A448


sub_A48A:                               ; CODE XREF: ROM:0000A07E   p
                jsr     (printz).l
                ori.b   #2,d6
                andi.b  #$3C,d0 ; '<'
                ori.b   #$3C,a0 ; '<'
                ori.b   #$3C,d4 ; '<'
                        d3
                jmp     eraser
; End of function sub_A48A


sub_A4A8:                               ; CODE XREF: ROM:0000A33E   p
                st      (word_FFDEB4).w
                bsr.w   printz
                ori.b   #2,d6
                ori.b   #0,d0
                moveq   #0,d1
                moveq   #$10,d2
                moveq   #$B,d3
                move.w  (ExtraChars).w,d4
                move.w  #0,d5
                movea.l #unk_BB4EE,a1
                adda.l  4(a1),a1
                movea.w #$30A,a2
                bra.w   dobitmap
; End of function sub_A4A8


sub_A4D8:                               ; CODE XREF: ROM:0000A384   p
                jsr     (printz).l
                ori.b   #2,d6
                andi.b  #$3C,d0 ; '<'
                ori.b   #$3C,(a0) ; '<'
                ori.b   #$3C,a3 ; '<'
                        d3
                jmp     eraser
; End of function sub_A4D8


sub_A4F6:                               ; CODE XREF: ROM:loc_A02A   p
                                        ; ROM:0000A28C   p ...
                cmpa.l  #$FFFF0000,a4
                bne.w   loc_A510
                btst    #4,(sflags).w
                beq.w   loc_A520
                movea.l #$FFFFAF54,a4
loc_A510:                               ; CODE XREF: sub_A4F6+6   j
                suba.w  #$62,a4 ; 'b'
                cmpa.l  (recbpr).w,a4
                bne.w   sub_A68C
                adda.w  #$62,a4 ; 'b'
loc_A520:                               ; CODE XREF: sub_A4F6+10   j
                bsr.w   sub_A68C
                clr.w   d7
                rts
; End of function sub_A4F6


sub_A528:                               ; CODE XREF: ROM:loc_A2EE   p
                                        ; ROM:0000A314   p ...
                bclr    #6,(word_FFC2F4).w
                beq.w   loc_A5D4
                movem.l d0-d7/a0-a6,-(sp)
                bchg    #4,(word_FFC2F4).w
                move.w  (Hpos).w,-(sp)
                move.w  (Vpos).w,-(sp)
                bsr.w   forceblack2
                jsr     (sub_80BA).l
                jsr     (sub_80BA).l
                jsr     (sub_9CDC).l
                clr.w   (Hpos).w
                clr.w   (Vpos).w
                move.w  #$7D0,(Oldrow).w
                move.w  #1,d0
loc_A56C:                               ; CODE XREF: sub_A528+50   j
                jsr     (setvideo).l
                jsr     (sub_80BA).l
                dbf     d0,loc_A56C
                move.w  (sp)+,(Vpos).w
                move.w  (sp)+,(Hpos).w
                move.w  #1,d0
                jsr     (setvideo).l
loc_A58E:                               ; CODE XREF: sub_A528+6C   j
                jsr     (sub_80BA).l
                dbf     d0,loc_A58E
                movem.l a0,-(sp)
                movea.l #$FFFFB64A,a0
                move.w  #1,8(a0)
                adda.w  #$80,a0
                move.w  #1,8(a0)
                movem.l (sp)+,a0
                bsr.w   sub_A67C
                btst    #5,(sflags).w
                beq.w   *+4
loc_A5C4:                               ; CODE XREF: sub_A528+98   j
                jsr     (sub_A448).l
                move.w  #$64,(palcount).w ; 'd'
                movem.l (sp)+,d0-d7/a0-a6
loc_A5D4:                               ; CODE XREF: sub_A528+6   j
                clr.w   d7
                btst    #2,(sflags2).w
                beq.w   loc_A5F4
                movem.l a4,-(sp)
                bsr.w   sub_A600
                cmpa.l  (recbpr).w,a4
                movem.l (sp)+,a4
                beq.w   rtss8
loc_A5F4:                               ; CODE XREF: sub_A528+B4   j
                cmpa.l  (recbpr).w,a4
                beq.w   rtss8
                bsr.w   sub_A68C
; End of function sub_A528


sub_A600:                               ; CODE XREF: sub_A528+BC   p
                adda.w  #$62,a4 ; 'b'
                cmpa.l  #$FFFFAF54,a4
                bne.w   rtss8
                movea.l #$FFFF0000,a4
                rts
; End of function sub_A600


sub_A616:                               ; CODE XREF: ROM:0000A1CC   p
                                        ; ROM:0000A230   p ...
                movem.l d0-d2,-(sp)
                move.w  (a3),d0
                btst    #7,(word_FFC2F4).w
                beq.w   loc_A628
                neg.w   d0
loc_A628:                               ; CODE XREF: sub_A616+C   j
                move.w  d0,(a5)
                move.w  $14(a3),d1
                btst    #7,(word_FFC2F4).w
                beq.w   loc_A63A
                neg.w   d1
loc_A63A:                               ; CODE XREF: sub_A616+1E   j
                move.w  d1,$14(a5)
                cmp.w   #$3C,d0 ; '<'
                blt.w   loc_A64A
                move.w  #$3C,d0 ; '<'
loc_A64A:                               ; CODE XREF: sub_A616+2C   j
                cmp.w   #$FFC4,d0
                bgt.w   loc_A656
                move.w  #$FFC4,d0
loc_A656:                               ; CODE XREF: sub_A616+38   j
                move.w  d0,(Hpos).w
                cmp.w   #$100,d1
                blt.w   loc_A666
                move.w  #$100,d1
loc_A666:                               ; CODE XREF: sub_A616+48   j
                cmp.w   #$FF38,d1
                bgt.w   loc_A672
                move.w  #$FF38,d1
loc_A672:                               ; CODE XREF: sub_A616+54   j
                move.w  d1,(Vpos).w
                movem.l (sp)+,d0-d2
                rts
; End of function sub_A616


sub_A67C:                               ; CODE XREF: sub_A528+8E   p
                btst    #4,(word_FFC2F4).w
                beq.w   sub_A68C
                bset    #7,(word_FFC2F4).w
; End of function sub_A67C


sub_A68C:                               ; CODE XREF: ROM:0000A3C2   p
                                        ; sub_A4F6+22   j ...
                movem.l d0-d2/a0/a6,-(sp)
                movea.l #unk_F600E,a6
                movea.l a4,a0
                moveq   #$F,d1
                movea.w #(SortCords-M68K_RAM),a3
loc_A69E:                               ; CODE XREF: sub_A68C+10C   j
                move.w  2(a0),d2
                andi.w  #$3FF,d2
                btst    #9,d2
                beq.w   loc_A6B2
                ori.w   #$FC00,d2
loc_A6B2:                               ; CODE XREF: sub_A68C+1E   j
                btst    #4,(word_FFC2F4).w
                beq.w   loc_A6BE
                neg.w   d2
loc_A6BE:                               ; CODE XREF: sub_A68C+2C   j
                move.w  d2,(a3)
                move.l  (a0),d2
                asr.l   #4,d2
                asr.w   #6,d2
                btst    #9,d2
                beq.w   loc_A6D2
                ori.w   #$FC00,d2
loc_A6D2:                               ; CODE XREF: sub_A68C+3E   j
                btst    #4,(word_FFC2F4).w
                beq.w   loc_A6E8
                neg.w   d2
                cmp.w   #0,d1
                bne.w   loc_A6E8
                addq.w  #2,d2
loc_A6E8:                               ; CODE XREF: sub_A68C+4C   j
                                        ; sub_A68C+56   j
                move.w  d2,$14(a3)
                move.w  (a0),d2
                asr.w   #4,d2
                andi.w  #$3FF,d2
                btst    #4,(word_FFC2F4).w
                beq.w   loc_A738
                asl.w   #1,d2
                move.w  (a6,d2.w),d2
                cmpi.w  #$F,$52(a3)
                bne.w   loc_A71C
                cmp.w   #$18A,d2
                beq.w   loc_A71C
                move.w  #$FC00,$14(a3)
loc_A71C:                               ; CODE XREF: sub_A68C+7E   j
                                        ; sub_A68C+86   j
                cmp.w   #1,d2
                blt.w   loc_A730
                cmp.w   #$34E,d2
                bge.w   loc_A730
                bra.w   loc_A738
; ---------------------------------------------------------------------------
loc_A730:                               ; CODE XREF: sub_A68C+94   j
                                        ; sub_A68C+9C   j
                move.w  (a0),d2
                asr.w   #4,d2
                andi.w  #$3FF,d2
loc_A738:                               ; CODE XREF: sub_A68C+6E   j
                                        ; sub_A68C+A0   j
                move.w  d2,6(a3)
                cmp.w   #$28D,d2
                blt.w   loc_A75C
                cmp.w   #$292,d2
                bge.w   loc_A75C
                btst    #4,(word_FFC2F4).w
                beq.w   loc_A75C
                move.w  #$190,$14(a3)
loc_A75C:                               ; CODE XREF: sub_A68C+B4   j
                                        ; sub_A68C+BC   j ...
                move.w  (a0),d2
                asr.w   #3,d2
                andi.w  #$1800,d2
                andi.w  #$E7FF,4(a3)
                or.w    d2,4(a3)
                btst    #4,(word_FFC2F4).w
                beq.w   loc_A792
                move.w  6(a3),d2
                cmp.w   #$162,d2
                blt.w   loc_A792
                cmp.w   #$179,d2
                bge.w   loc_A792
                bchg    #3,4(a3)
loc_A792:                               ; CODE XREF: sub_A68C+E8   j
                                        ; sub_A68C+F4   j ...
                addq.w  #4,a0
                adda.w  #$80,a3
                dbf     d1,loc_A69E
                moveq   #5,d2
                movea.w #(SortCords-M68K_RAM),a3
loc_A7A2:                               ; CODE XREF: sub_A68C+15C   j
                move.b  (a0)+,$6F(a3)
                move.b  (a0),d0
                andi.w  #$F,d0
                cmp.w   #$F,d0
                bne.w   loc_A7B6
                moveq   #$FFFFFFFF,d0
loc_A7B6:                               ; CODE XREF: sub_A68C+124   j
                move.w  d0,$34(a3)
                adda.w  #$80,a3
                move.b  (a0)+,d0
                lsr.b   #4,d0
                move.b  d0,$6F(a3)
                move.b  (a0),d0
                asl.b   #4,d0
                or.b    d0,$6F(a3)
                move.b  (a0)+,d0
                lsr.b   #4,d0
                andi.w  #$F,d0
                cmp.w   #$F,d0
                bne.w   loc_A7E0
                moveq   #$FFFFFFFF,d0
loc_A7E0:                               ; CODE XREF: sub_A68C+14E   j
                move.w  d0,$34(a3)
                adda.w  #$80,a3
                dbf     d2,loc_A7A2
                move.b  (a0)+,d0
                ext.w   d0
                move.w  d0,(puckz).w
                move.b  (a0)+,d0
                ext.w   d0
                move.w  d0,(unk_FFB7E2).w
                move.b  (a0)+,d0
                ext.w   d0
                move.w  d0,(lastsfx).w
                clr.w   d7
                move.b  (a0)+,d7
                move.w  (a0)+,d0
                andi.w  #$FFF,d0
                andi.w  #$F000,(word_FFBE78).w
                or.w    d0,(word_FFBE78).w
                move.w  (a0)+,(crowdframe).w
                move.w  (a0)+,(glovecords).w
                move.b  (a0)+,(PBnum).w
                clr.w   d0
                move.b  (a0)+,d0
                lsl.w   #4,d0
                ori.w   #$F00F,d0
                move.w  d0,(word_FFBE86).w
                btst    #5,(sflags).w
                beq.w   loc_A860
                movea.w a5,a3
                btst    #5,(sflags3).w
                beq.w   loc_A858
                clr.w   $18(a5)
                move.w  $16(a5),d0
                asl.w   #7,d0
                movea.w #(SortCords-M68K_RAM),a3
                adda.w  d0,a3
loc_A858:                               ; CODE XREF: sub_A68C+1B8   j
                bsr.w   sub_A616
                bra.w   loc_A880
; ---------------------------------------------------------------------------
loc_A860:                               ; CODE XREF: sub_A68C+1AC   j
                move.w  (a0)+,(Hpos).w
                move.w  (a0)+,(Vpos).w
                btst    #4,(word_FFC2F4).w
                beq.w   loc_A880
                neg.w   (Hpos).w
                neg.w   (Vpos).w
                jsr     (sub_A88C).l
loc_A880:                               ; CODE XREF: sub_A68C+1D0   j
                                        ; sub_A68C+1E2   j
                bclr    #7,(word_FFC2F4).w
                movem.l (sp)+,d0-d2/a0/a6
                rts
; End of function sub_A68C


sub_A88C:                               ; CODE XREF: sub_A68C+1EE   p
                move.w  d0,-(sp)
                move.w  #$3C,d0 ; '<'
                cmp.w   (Hpos).w,d0
                blt.w   loc_A8A6
                move.w  #$FFC4,d0
                cmp.w   (Hpos).w,d0
                ble.w   loc_A8AA
loc_A8A6:                               ; CODE XREF: sub_A88C+A   j
                move.w  d0,(Hpos).w
loc_A8AA:                               ; CODE XREF: sub_A88C+16   j
                move.w  #$100,d0
                cmp.w   (Vpos).w,d0
                blt.w   loc_A8C2
                move.w  #$FF38,d0
                cmp.w   (Vpos).w,d0
                ble.w   loc_A8C6
loc_A8C2:                               ; CODE XREF: sub_A88C+26   j
                move.w  d0,(Vpos).w
loc_A8C6:                               ; CODE XREF: sub_A88C+32   j
                move.w  (sp)+,d0
                rts
; End of function sub_A88C


sub_A8CA:                               ; CODE XREF: Gameloop+46   p
                btst    #4,(gmode).w
                bne.w   rtss8
                btst    #2,(sflags2).w
                beq.w   loc_A8F6
                tst.w   (word_FFDEF0).w
                beq.w   loc_A918
                subq.w  #1,(word_FFDEF0).w
                bpl.w   loc_A8F6
                clr.w   (word_FFDEF0).w
                bra.w   loc_A918
; ---------------------------------------------------------------------------
loc_A8F6:                               ; CODE XREF: sub_A8CA+10   j
                                        ; sub_A8CA+20   j
                addi.l  #$62,(recbpr).w ; 'b'
                cmpi.l  #$FFFFAF54,(recbpr).w
                bne.w   loc_A918
                bset    #4,(sflags).w
                move.l  #$FFFF0000,(recbpr).w
loc_A918:                               ; CODE XREF: sub_A8CA+18   j
                                        ; sub_A8CA+28   j ...
                movea.l (recbpr).w,a0
                moveq   #$F,d2
                movea.w #(SortCords-M68K_RAM),a3
loc_A922:                               ; CODE XREF: sub_A8CA+8A   j
                clr.l   (a0)
                move.w  (a3),d1
                andi.w  #$3FF,d1
                move.w  d1,2(a0)
                clr.l   d1
                move.w  $14(a3),d1
                asl.w   #6,d1
                asl.l   #4,d1
                or.l    d1,(a0)
                move.w  6(a3),d1
                asl.w   #4,d1
                or.w    d1,(a0)
                move.w  4(a3),d1
                andi.w  #$1800,d1
                asl.w   #3,d1
                or.w    d1,(a0)
                addq.w  #4,a0
                adda.w  #$80,a3
                dbf     d2,loc_A922
                moveq   #5,d2
                movea.w #(SortCords-M68K_RAM),a3
loc_A95E:                               ; CODE XREF: sub_A8CA+CE   j
                move.b  $6F(a3),(a0)+
                move.w  $34(a3),d0
                bpl.w   loc_A96C
                moveq   #$F,d0
loc_A96C:                               ; CODE XREF: sub_A8CA+9C   j
                andi.w  #$F,d0
                move.b  d0,(a0)
                adda.w  #$80,a3
                move.b  $6F(a3),d0
                asl.w   #4,d0
                or.b    d0,(a0)+
                move.b  $6F(a3),d0
                lsr.b   #4,d0
                move.b  d0,(a0)
                move.w  $34(a3),d0
                bpl.w   loc_A990
                moveq   #$F,d0
loc_A990:                               ; CODE XREF: sub_A8CA+C0   j
                asl.w   #4,d0
                or.b    d0,(a0)+
                adda.w  #$80,a3
                dbf     d2,loc_A95E
                move.b  (puckz+1).w,(a0)+
                move.b  (byte_FFB7E3).w,(a0)+
                move.b  (lastsfx+1).w,(a0)+
                bset    #7,(lastsfx+1).w
                move.b  d7,(a0)+
                move.w  (word_FFBE78).w,(a0)+
                move.w  (crowdframe).w,(a0)+
                move.w  (glovecords).w,(a0)+
                move.b  (PBnum).w,(a0)+
                move.w  d0,-(sp)
                move.w  (word_FFBE86).w,d0
                lsr.w   #4,d0
                move.b  d0,(a0)+
                move.w  (sp)+,d0
                move.w  (Hpos).w,(a0)+
                move.w  (Vpos).w,(a0)+
rtss8:                                  ; CODE XREF: periodiceevents+20   j
                                        ; periodiceevents+28   j ...
                rts
; End of function sub_A8CA


; this routine calls all collision/animation/assignment code for all players
; d7 = elapse frames since last call
updateplayers:                          ; CODE XREF: Gameloop+14   p
                btst    #7,(sflags).w   ; check if screen is in horiz mode
                bne.w   _checkcrowd     ; jump if horiz mode
                ori.w   #$F,(word_FFBE78).w
                cmpi.w  #5,(puckz).w    ; check puckz with 5
                bgt.w   _gt             ; branch if greater
_clrcnt:                                ; CODE XREF: updateplayers+34   j
                clr.w   (PuckZCntr).w   ; clear counter
                bra.w   _checkcrowd
; ---------------------------------------------------------------------------
_gt:                                    ; CODE XREF: updateplayers+16   j
                move.w  (TmpPuckZ).w,d0
                cmp.w   (puckz).w,d0
                beq.w   _pzeq           ; branch if puckz equal to TmpPuckZ
                move.w  (puckz).w,(TmpPuckZ).w
                bra.s   _clrcnt
; ---------------------------------------------------------------------------
_pzeq:                                  ; CODE XREF: updateplayers+2A   j
                addq.w  #1,(PuckZCntr).w ; add 1 to counter
                cmpi.w  #$10,(PuckZCntr).w ; compare counter to 10 (16 decmial)
                blt.w   _checkcrowd     ; branch if less than
                clr.w   (PuckZCntr).w   ; clear counter
                subq.w  #1,(puckz).w    ; subtract 1 from puckz
_checkcrowd:                            ; CODE XREF: updateplayers+6   j
                                        ; updateplayers+1E   j ...
                bclr    #6,(byte_FFC2FC).w ; Bit 6 = Crowd Meter bit
                move.w  (CurCrowdMeter).w,d0 ; Move cur crowd meter to d0
                cmp.w   (CrowdRecord).w,d0 ; compare with crowd record
                blt.w   _nobreak        ; branch if less than
                bset    #6,(byte_FFC2FC).w ; set Crowd Meter bit
_nobreak:                               ; CODE XREF: updateplayers+5A   j
                jsr     (set_bit1_C2FE).l ; jump to turn on bit 1 of C2FE
                tst.w   (puckc).w
                bmi.w   _scload         ; branch if no puck carrier
                bclr    #7,(byte_FFC2FE).w
                bclr    #1,(word_FFC2F8).w
                move.w  (puckc).w,d0    ; move puckc SCnum into d0
                asl.w   #7,d0
                movea.l #$FFFFB04A,a3   ; start of player SCstructs
                adda.w  d0,a3           ; add offset to a3
                btst    #1,$64(a3)      ; checks if there is a breakaway
                beq.w   _scload         ; branch if no breakaway
                bclr    #4,(word_FFC2FA).w ; clear if breakaway
_scload:                                ; CODE XREF: updateplayers+6E   j
                                        ; updateplayers+92   j
                movea.w #(SortCords-M68K_RAM),a3
_top:                                   ; CODE XREF: updateplayers+508   j
                move.l  (a3),$1C(a3)    ; Xpos, oldXpos
                move.l  $14(a3),$20(a3) ; Ypos, oldYpos
                move.l  $18(a3),$24(a3) ; Zpos, oldZpos
                btst    #5,$64(a3)      ; falling down?
                beq.w   _top2           ; branch if not
                clr.w   $28(a3)         ; clear Xvel
                clr.w   $2A(a3)         ; clear Yvel
                tst.w   $5A(a3)         ; check animation index
                bne.w   loc_AAAA        ; branch if index not 0
                jsr     (sub_FEB54).l
                bra.w   _top2
; ---------------------------------------------------------------------------
loc_AAAA:                               ; CODE XREF: updateplayers+C6   j
                cmpi.w  #$193E,$58(a3)  ; check animation
                beq.w   loc_AB74
                cmpi.w  #$1A00,$58(a3)
                beq.w   loc_AB48
                cmpi.w  #$18CC,$58(a3)
                beq.w   loc_AB5E
                cmpi.w  #$17E8,$58(a3)
                beq.w   loc_AB32
                cmpi.w  #$1776,$58(a3)
                beq.w   loc_AAEA
                cmpi.w  #$185A,$58(a3)
                beq.w   loc_AB0E
                bra.w   _top2
; ---------------------------------------------------------------------------
loc_AAEA:                               ; CODE XREF: updateplayers+102   j
                move.w  #$124,d0
                cmpi.w  #$56,(FallXPos).w ; 'V'
                bgt.w   loc_AB02
                cmpi.w  #$FFAA,(FallXPos).w
                bgt.w   loc_AB06
loc_AB02:                               ; CODE XREF: updateplayers+11E   j
                move.w  #$116,d0
loc_AB06:                               ; CODE XREF: updateplayers+128   j
                move.w  d0,$14(a3)
                bra.w   _top2
; ---------------------------------------------------------------------------
loc_AB0E:                               ; CODE XREF: updateplayers+10C   j
                move.w  #$FEDC,d0
                cmpi.w  #$56,(FallXPos).w ; 'V'
                bgt.w   loc_AB26
                cmpi.w  #$FFAA,(FallXPos).w
                bgt.w   loc_AB2A
loc_AB26:                               ; CODE XREF: updateplayers+142   j
                move.w  #$FEEA,d0
loc_AB2A:                               ; CODE XREF: updateplayers+14C   j
                move.w  d0,$14(a3)
                bra.w   _top2
; ---------------------------------------------------------------------------
loc_AB32:                               ; CODE XREF: updateplayers+F8   j
                move.w  #$82,(a3)
                btst    #3,4(a3)
                beq.w   _top2
                move.w  #$FF7E,(a3)
                bra.w   _top2
; ---------------------------------------------------------------------------
loc_AB48:                               ; CODE XREF: updateplayers+E4   j
                move.w  #$88,(a3)
                btst    #3,4(a3)
                beq.w   _top2
                move.w  #$FF78,(a3)
                bra.w   _top2
; ---------------------------------------------------------------------------
loc_AB5E:                               ; CODE XREF: updateplayers+EE   j
                move.w  #$FF7E,(a3)
                btst    #3,4(a3)
                beq.w   _top2
                move.w  #$82,(a3)
                bra.w   _top2
; ---------------------------------------------------------------------------
loc_AB74:                               ; CODE XREF: updateplayers+DA   j
                move.w  #$FF78,(a3)
                btst    #3,4(a3)
                beq.w   _top2
                move.w  #$88,(a3)
_top2:                                  ; CODE XREF: updateplayers+B6   j
                                        ; updateplayers+D0   j ...
                tst.w   $34(a3)         ; check if on ice
                bmi.w   _nf1            ; branch if not on ice
                move.w  $52(a3),d0
                cmp.w   (puckc).w,d0    ; check if player has puck
                beq.w   _top3           ; branch if puck carrier
                bclr    #1,$64(a3)      ; clear breakaway bit
                bclr    #0,$64(a3)      ; clear offsides bit
_top3:                                  ; CODE XREF: updateplayers+1C0   j
                bsr.w   updateanim
                sub.b   d7,$5E(a3)      ; no puck control
                bpl.w   _np
                clr.b   $5E(a3)         ; clear upper byte of nopuck
_np:                                    ; CODE XREF: updateplayers+1D8   j
                sub.b   d7,$5F(a3)      ; subtract # of frames from nopuck+1
                bpl.w   loc_ABC2
                clr.b   $5F(a3)         ; clear lower byte of nopuck
loc_ABC2:                               ; CODE XREF: updateplayers+1E4   j
                btst    #6,(sflags3).w  ; ??
                beq.w   loc_ABE6
                clr.w   d0
                move.b  $66(a3),d0      ; player offset on roster
                bmi.w   loc_ABE6
                add.w   d0,d0
                addi.w  #$136,d0
                jsr     (loadTeamStruct).l
                addq.w  #1,(a2,d0.w)    ; add 1 to TOI for player
loc_ABE6:                               ; CODE XREF: updateplayers+1F2   j
                                        ; updateplayers+1FC   j
                cmpi.w  #$145C,$58(a3)  ; check animation
                beq.w   _done
                cmpi.w  #$1AF4,$58(a3)  ; check animation
                beq.w   _done
                moveq   #$11,d4
                tst.w   (word_FFD06E).w
                beq.w   _notoside
                moveq   #$16,d4
_notoside:                              ; CODE XREF: updateplayers+22A   j
                mulu.w  d7,d4           ; update velocity
                tst.w   $18(a3)         ; Zpos
                bne.w   _y2             ; no deceleration
                moveq   #6,d2
                btst    #0,$62(a3)      ; pfdoff - player deceleration
                beq.w   _off
                moveq   #9,d2
_off:                                   ; CODE XREF: updateplayers+242   j
                move.w  $28(a3),d0      ; Xvel
                beq.w   _x2
                asr.w   d2,d0           ; shift d0 right d2 times
                bne.w   _x1             ; branch if d0 not zero
                moveq   #1,d0           ; make d0 1 if it was 0
_x1:                                    ; CODE XREF: updateplayers+252   j
                sub.w   d0,$28(a3)      ; Xvel
_x2:                                    ; CODE XREF: updateplayers+24C   j
                move.w  $2A(a3),d0      ; Yvel
                beq.w   _y2             ; branch if d0 is 0
                asr.w   d2,d0           ; shift d0 to the right d2 times
                bne.w   _y1             ; branch if d0 not 0
                moveq   #1,d0           ; make d0 1 if it was 0
_y1:                                    ; CODE XREF: updateplayers+266   j
                sub.w   d0,$2A(a3)      ; sub d0 from Yvel
_y2:                                    ; CODE XREF: updateplayers+236   j
                                        ; updateplayers+260   j
                move.w  $28(a3),d0      ; Xvel
                beq.w   _x3             ; branch if d0 is 0
                muls.w  d4,d0           ; mult d0 by d4
                add.l   d0,(a3)         ; add to Xpos
_x3:                                    ; CODE XREF: updateplayers+274   j
                move.w  $2A(a3),d0      ; Yvel
                beq.w   _y3             ; branch if d0 is 0
                muls.w  d4,d0           ; mult d0 by d4
                add.l   d0,$14(a3)      ; add to Ypos
_y3:                                    ; CODE XREF: updateplayers+280   j
                tst.w   $18(a3)         ; check Zpos
                bmi.w   _done           ; branch if negative
                bne.w   _z1             ; branch if not 0
                tst.w   $2C(a3)         ; check Zvel
                beq.w   _done           ; branch if 0
_z1:                                    ; CODE XREF: updateplayers+292   j
                asl.w   #1,d4           ; mult d4 by 2
                sub.w   d4,$2C(a3)      ; sub d4 from Zvel
                asl.w   #1,d4           ; mult d4 by 2
                sub.w   d4,$2C(a3)      ; sub d4 from Zvel
                lsr.w   #2,d4           ; divide d4 by 4
                move.w  $2C(a3),d0      ; move Zvel into d0
                muls.w  d4,d0           ; mult d0 by d4
                add.l   d0,$18(a3)      ; add d0 to Zpos
                bpl.w   _done           ; branch if d0+Zpos is positive
                clr.l   $18(a3)         ; clear Zpos
                neg.w   $2C(a3)         ; negate Zvel
                asr     $2C(a3)         ; divide Zvel by 2
                moveq   #5,d0           ; move 5 into d0
                sub.b   $2C(a3),d0      ; sub Zvel from d0
                bpl.w   _chkpuck        ; branch if result is positive
                clr.w   d0              ; clear d0
_chkpuck:                               ; CODE XREF: updateplayers+2CC   j
                cmp.w   #3,d0           ; compare d0 to 3
                bhi.w   _done           ; branch if higher than 3
                addi.w  #$2C,d0 ; ','   ; #SFXpuckice
                move.w  d0,-(sp)
                bsr.w   sfx
_done:                                  ; CODE XREF: updateplayers+216   j
                                        ; updateplayers+220   j ...
                move.w  $52(a3),d6      ; SCnum
                cmp.w   (puckc).w,d6    ; check if puck carrier
                bne.w   _tp             ; not puck carrier
                btst    #0,$63(a3)      ; pf2fight - check if fighting
                bne.w   _tp
                btst    #7,(sflags).w   ; #sfhor - check if in horiz mode
                bne.w   _tp
                moveq   #$FFFFFFFE,d4   ; -2 - pad index for puck carrier
                bsr.w   sub_C656
_tp:                                    ; CODE XREF: updateplayers+2EC   j
                                        ; updateplayers+2F6   j ...
                btst    #0,(sflags2).w  ; sf2faceoff- check for faceoff
                bne.w   _tp2            ; branch if faceoff
                tst.w   (word_FFD412).w
                beq.w   _tp2
                subq.w  #1,(word_FFD412).w
                beq.w   loc_ACFE
                bpl.w   _tp2
loc_ACFE:                               ; CODE XREF: updateplayers+320   j
                clr.w   (word_FFD412).w
                move.w  #$1111,(word_FFBF06).w
                move.w  #$1111,(word_FFBF08).w
_tp2:                                   ; CODE XREF: updateplayers+310   j
                                        ; updateplayers+318   j ...
                cmp.w   (c1playernum).w,d6 ; check if cont 1 is puck carrier
                bne.w   _t0
                bsr.w   ReadJoy1
                clr.w   d4              ; pad index for cont 1 player
                move.w  #$FFFF,(word_FFC318).w
                bsr.w   doinput         ; B button
                bra.w   _t1
; ---------------------------------------------------------------------------
_t0:                                    ; CODE XREF: updateplayers+33C   j
                cmp.w   (c2playernum).w,d6 ; check if cont 2 is puck carrier
                bne.w   _t1
                bsr.w   ReadJoy2
                moveq   #2,d4           ; pad index for cont 2 player
                move.w  #$FFFF,(word_FFC318).w
                bsr.w   doinput         ; B button
_t1:                                    ; CODE XREF: updateplayers+350   j
                                        ; updateplayers+358   j
                cmp.w   #$B,d6          ; check if SCnum 0-11 were puck carrier (players)
                bgt.w   _t1cont         ; jump if not
                tst.w   (cont3team).w   ; check if there is 3 controllers?
                beq.w   loc_ADE2
                cmp.w   (c3playernum).w,d6
                bne.w   loc_ADE2
                jsr     (ReadJoy3).l
                clr.l   d4
                clr.w   (word_FFC318).w
                move.w  (cont1team).w,-(sp)
                move.w  (cont3team).w,(cont1team).w
                move.w  (c1playernum).w,-(sp)
                move.w  (c3playernum).w,(c1playernum).w
                move.w  (word_FFBF06).w,-(sp)
                move.w  (word_FFBF08).w,(word_FFBF06).w
                move.w  (word_FFBF0E).w,-(sp)
                move.w  (word_FFBF0A).w,(word_FFBF0E).w
                move.w  (word_FFD41E).w,-(sp)
                move.w  (word_FFD420).w,(word_FFD41E).w
                move.w  (word_FFBE78).w,-(sp)
                move.w  (word_FFBE86).w,(word_FFBE78).w
                bsr.w   doinput         ; B button
                move.w  (word_FFBE78).w,(word_FFBE86).w
                move.w  (sp)+,(word_FFBE78).w
                move.w  (word_FFD41E).w,(word_FFD420).w
                move.w  (sp)+,(word_FFD41E).w
                move.w  (word_FFBF0E).w,(word_FFBF0A).w
                move.w  (sp)+,(word_FFBF0E).w
                move.w  (word_FFBF06).w,(word_FFBF08).w
                move.w  (sp)+,(word_FFBF06).w
                move.w  (c1playernum).w,(c3playernum).w
                move.w  (sp)+,(c1playernum).w
                move.w  (cont1team).w,(cont3team).w
                move.w  (sp)+,(cont1team).w
loc_ADE2:                               ; CODE XREF: updateplayers+378   j
                                        ; updateplayers+380   j
                tst.w   (cont4team).w   ; check if there is 4 controllers?
                beq.w   _t1cont
                cmp.w   (c4playernum).w,d6
                bne.w   _t1cont
                jsr     (ReadJoy4).l
                moveq   #2,d4
                move.w  #1,(word_FFC318).w
                move.w  (cont2team).w,-(sp)
                move.w  (cont4team).w,(cont2team).w
                move.w  (c2playernum).w,-(sp)
                move.w  (c4playernum).w,(c2playernum).w
                move.w  (word_FFBF06).w,-(sp)
                move.w  (word_FFBF08).w,(word_FFBF06).w
                move.w  (word_FFBF10).w,-(sp)
                move.w  (word_FFBF0C).w,(word_FFBF10).w
                move.w  (word_FFD41E).w,-(sp)
                move.w  (word_FFD420).w,(word_FFD41E).w
                move.w  (word_FFBE78).w,-(sp)
                move.w  (word_FFBE86).w,(word_FFBE78).w
                bsr.w   doinput         ; B button
                move.w  (word_FFBE78).w,(word_FFBE86).w
                move.w  (sp)+,(word_FFBE78).w
                move.w  (word_FFD41E).w,(word_FFD420).w
                move.w  (sp)+,(word_FFD41E).w
                move.w  (word_FFBF10).w,(word_FFBF0C).w
                move.w  (sp)+,(word_FFBF10).w
                move.w  (word_FFBF06).w,(word_FFBF08).w
                move.w  (sp)+,(word_FFBF06).w
                move.w  (c2playernum).w,(c4playernum).w
                move.w  (sp)+,(c2playernum).w
                move.w  (cont2team).w,(cont4team).w
                move.w  (sp)+,(cont2team).w
_t1cont:                                ; CODE XREF: updateplayers+370   j
                                        ; updateplayers+410   j ...
                move.w  $36(a3),d0      ; assnum
                clr.w   d1
                move.b  $38(a3,d0.w),d1 ; asslist of SCstruct
                asl.w   #2,d1           ; mult by 4
                movea.l #asstab,a0
                movea.l (a0,d1.w),a0
                jsr     (loadTeamStruct).l
                jsr     (a0)            ; call assignment for this player
                clr.w   $4E(a3)         ; clear wallcos
                clr.w   $50(a3)         ; clear wallsin
                move.w  (a3),d2         ; Xpos
                move.w  $14(a3),d3      ; Ypos
                cmp.w   $1C(a3),d2      ; compare to oldXpos
                bne.w   _cc             ; branch if not equal
                cmp.w   $20(a3),d3      ; compare to oldYpos
                beq.w   _nf             ; branch if equal
_cc:                                    ; CODE XREF: updateplayers+4D6   j
                jsr     (checkcoll).l   ; check for collisions
_nf:                                    ; CODE XREF: updateplayers+4DE   j
                move.w  d7,d0           ; move d7 into d0 (elapsed frames)
                asl.w   #1,d0           ; mult by 2
                sub.w   d0,$32(a3)      ; reduce impact at a constant rate
                bpl.w   _nf1            ; branch if positive
                clr.w   $32(a3)         ; clear impact if negative or zero
_nf1:                                   ; CODE XREF: updateplayers+1B4   j
                                        ; updateplayers+4F0   j
                move.w  $32(a3),$30(a3) ; move impact into limpact
                adda.w  #$80,a3         ; SCstruct size
                cmpi.w  #$F,-$2E(a3)    ; compare Sortobjs-1 to SCnum-SCstruct
                blt.w   _top            ; loop for all Sort objects
                rts
; End of function updateplayers


updateanim:                             ; CODE XREF: updateplayers:_top3   p
                tst.w   $58(a3)
                bne.w   loc_AEFA
                bclr    #5,$62(a3)
                bclr    #1,$63(a3)
                rts
; ---------------------------------------------------------------------------
loc_AEFA:                               ; CODE XREF: updateanim+4   j
                movea.l #$5B1C,a0
                adda.w  $58(a3),a0
                move.w  $10(a0),d1
                move.w  $54(a3),d0
                btst    #7,(sflags).w
                beq.w   loc_AF26
                cmpi.w  #$C,$52(a3)
                bge.w   loc_AF26
                subq.w  #2,d0
                andi.w  #7,d0
loc_AF26:                               ; CODE XREF: updateanim+2E   j
                                        ; updateanim+38   j
                btst    #3,4(a3)
                beq.w   loc_AF38
                neg.w   d0
                addq.w  #8,d0
                andi.w  #7,d0
loc_AF38:                               ; CODE XREF: updateanim+48   j
                asl.w   #1,d0
                adda.w  (a0,d0.w),a0
                move.w  $5A(a3),d0
                move.w  (a0,d0.w),d2
                tst.w   $5C(a3)
                bmi.w   loc_AF88
                sub.w   d7,$5C(a3)
                bpl.w   loc_AF96
                addq.w  #4,$5A(a3)
                addq.w  #4,d0
                tst.w   -2(a0,d0.w)
                bpl.w   loc_AF88
                clr.w   d0
                clr.w   $5A(a3)
                bclr    #5,$62(a3)
                bclr    #1,$63(a3)
                bclr    #5,$64(a3)
                btst    #0,d1
                bne.w   loc_AF88
                clr.w   $58(a3)
loc_AF88:                               ; CODE XREF: updateanim+66   j
                                        ; updateanim+7C   j ...
                move.w  2(a0,d0.w),d0
                bpl.w   loc_AF92
                neg.w   d0
loc_AF92:                               ; CODE XREF: updateanim+A8   j
                move.w  d0,$5C(a3)
loc_AF96:                               ; CODE XREF: updateanim+6E   j
                sub.b   d7,$65(a3)
                bpl.w   locret_AFB4
                clr.b   $65(a3)
                cmp.w   6(a3),d2
                beq.w   locret_AFB4
                move.w  d2,6(a3)
                move.b  #4,$65(a3)
locret_AFB4:                            ; CODE XREF: updateanim+B6   j
                                        ; updateanim+C2   j
                rts
; End of function updateanim


freezewindow:                           ; CODE XREF: clockcont+28   p
                                        ; sub_F37C   p ...
                move.w  (Vpos).w,(yc1).w
                move.w  (Hpos).w,(xc1).w
                bset    #6,(sflags).w
                rts
; End of function freezewindow


checkwindow:                            ; CODE XREF: Gameloop+42   p
                                        ; puckpenshot:loc_F06C   p ...
                move.w  (yc1).w,d2
                move.w  (xc1).w,d3
                btst    #6,(sflags).w
                bne.w   loc_B042
                movea.w #(puckx-M68K_RAM),a3
                move.w  (puckc).w,d0
                bmi.w   loc_B02A
                asl.w   #7,d0
                movea.w #(SortCords-M68K_RAM),a3
                adda.w  d0,a3
                move.w  d7,d0
                add.w   d0,d0
                btst    #7,$62(a3)
                beq.w   loc_B016
                add.w   d0,(yleader).w
                cmpi.w  #$32,(yleader).w ; '2'
                blt.w   loc_B02A
                move.w  #$32,(yleader).w ; '2'
                bra.w   loc_B02A
; ---------------------------------------------------------------------------
loc_B016:                               ; CODE XREF: checkwindow+30   j
                sub.w   d0,(yleader).w
                cmpi.w  #$FFCE,(yleader).w
                bgt.w   loc_B02A
                move.w  #$FFCE,(yleader).w
loc_B02A:                               ; CODE XREF: checkwindow+1A   j
                                        ; checkwindow+3E   j ...
                move.w  $2A(a3),d2
                asr.w   #7,d2
                add.w   $14(a3),d2
                add.w   (yleader).w,d2
                move.w  (a3),d3
                move.w  d2,(yc1).w
                move.w  d3,(xc1).w
loc_B042:                               ; CODE XREF: checkwindow+E   j
                move.w  d2,d0
                sub.w   (Vpos).w,d0
                cmp.w   #$FFF6,d0
                bge.w   loc_B066
                move.w  d2,d1
                subi.w  #$FFF6,d1
                cmp.w   #$FF38,d1
                bgt.w   loc_B080
                move.w  #$FF38,d1
                bra.w   loc_B080
; ---------------------------------------------------------------------------
loc_B066:                               ; CODE XREF: checkwindow+82   j
                cmp.w   #$A,d0
                ble.w   loc_B094
                move.w  d2,d1
                subi.w  #$A,d1
                cmp.w   #$100,d1
                blt.w   loc_B080
                move.w  #$100,d1
loc_B080:                               ; CODE XREF: checkwindow+90   j
                                        ; checkwindow+98   j ...
                sub.w   (Vpos).w,d1
                beq.w   loc_B094
                asr.w   #4,d1
                bne.w   loc_B090
                addq.w  #1,d1
loc_B090:                               ; CODE XREF: checkwindow+C0   j
                add.w   d1,(Vpos).w
loc_B094:                               ; CODE XREF: checkwindow+A0   j
                                        ; checkwindow+BA   j
                move.w  d3,d0
                sub.w   (Hpos).w,d0
                cmp.w   #$FFD8,d0
                bge.w   loc_B0B8
                move.w  d3,d1
                subi.w  #$FFD8,d1
                cmp.w   #$FFC4,d1
                bge.w   loc_B0D2
                move.w  #$FFC4,d1
                bra.w   loc_B0D2
; ---------------------------------------------------------------------------
loc_B0B8:                               ; CODE XREF: checkwindow+D4   j
                cmp.w   #$28,d0 ; '('
                ble.w   locret_B0E6
                move.w  d3,d1
                subi.w  #$28,d1 ; '('
                cmp.w   #$3C,d1 ; '<'
                ble.w   loc_B0D2
                move.w  #$3C,d1 ; '<'
loc_B0D2:                               ; CODE XREF: checkwindow+E2   j
                                        ; checkwindow+EA   j ...
                sub.w   (Hpos).w,d1
                beq.w   locret_B0E6
                asr.w   #4,d1
                bne.w   loc_B0E2
                addq.w  #1,d1
loc_B0E2:                               ; CODE XREF: checkwindow+112   j
                add.w   d1,(Hpos).w
locret_B0E6:                            ; CODE XREF: checkwindow+F2   j
                                        ; checkwindow+10C   j
                rts
; End of function checkwindow


; process controller input
; d0 = dpad
; d1 = new buttons
; d2 = changed buttons
; d3 = held buttons
; d4 = controller 0/2
doinput:                                ; CODE XREF: updateplayers+34C   p
                                        ; updateplayers+368   p ...
                btst    #4,d1           ; B button
                beq.w   loc_B106        ; branch if not pressed
                btst    #5,d1           ; C button
                beq.w   loc_B106        ; branch if not pressed
                bclr    #4,d1
                bset    #6,$64(a3)
                bra.w   loc_B140
; ---------------------------------------------------------------------------
loc_B106:                               ; CODE XREF: doinput+4   j
                                        ; doinput+C   j
                btst    #4,d1
                beq.w   loc_B114
                bclr    #6,$64(a3)
loc_B114:                               ; CODE XREF: doinput+22   j
                btst    #4,d2
                beq.w   loc_B140
                bclr    #6,$64(a3)
                beq.w   loc_B140
                tst.w   d4
                bne.w   loc_B136
                move.b  #$11,(word_FFBF06).w
                bra.w   loc_B13C
; ---------------------------------------------------------------------------
loc_B136:                               ; CODE XREF: doinput+40   j
                move.b  #$11,(word_FFBF06+1).w
loc_B13C:                               ; CODE XREF: doinput+4A   j
                bclr    #4,d2
loc_B140:                               ; CODE XREF: doinput+1A   j
                                        ; doinput+30   j ...
                btst    #7,(word_FFC2FA).w
                beq.w   loc_B158
                cmp.b   #8,d0
                beq.w   loc_B158
                jsr     (sub_FE1AA).l
loc_B158:                               ; CODE XREF: doinput+5E   j
                                        ; doinput+66   j
                move.w  d0,(word_FFBF12).w
                andi.w  #$F,(word_FFBF12).w
                bsr.w   sub_C656
                btst    #7,d1           ; start button
                beq.w   loc_B194        ; branch if no start button pressed
                tst.w   (word_FFC318).w
                bpl.w   loc_B180
                tst.w   d4
                beq.w   startpause1
                bra.w   startpause2
; ---------------------------------------------------------------------------
loc_B180:                               ; CODE XREF: doinput+8A   j
                btst    #7,d1
                beq.w   loc_B194
                tst.w   (word_FFC318).w
                beq.w   loc_7CDC
                bra.w   loc_7CEA
; ---------------------------------------------------------------------------
loc_B194:                               ; CODE XREF: doinput+82   j
                                        ; doinput+9C   j
                btst    #7,(sflags).w
                beq.w   _nhor
                btst    #3,d0
                bne.w   _nhor
                addq.w  #2,d0
                andi.w  #7,d0
_nhor:                                  ; CODE XREF: doinput+B2   j
                                        ; doinput+BA   j
                btst    #0,(sflags2).w
                bne.w   faceoffinput
                btst    #3,$63(a3)
                bne.w   lineinput
                btst    #3,$62(a3)
                beq.w   locret_B46E
                movem.l d0-d2/a0/a3,-(sp)
                move.w  (lastplayer).w,d0
                cmp.w   $52(a3),d0
                bne.w   loc_B240
                tst.w   (word_FFBEE0).w
                bmi.w   loc_B240
                tst.w   (word_FFBF6C).w
                bpl.w   loc_B240
                btst    #5,d1
                beq.w   loc_B240
                move.w  (word_FFBEE0).w,d0
                asl.w   #7,d0
                movea.l #$FFFFB04A,a3
                adda.w  d0,a3
                tst.w   $34(a3)
                beq.w   loc_B240
                jsr     (sub_F6C44).l
                beq.w   loc_B240
                btst    #3,$62(a3)
                bne.w   loc_B240
                btst    #3,$64(a3)
                bne.w   loc_B240
                move.w  d4,(word_FFDED8).w
                move.w  (word_FFC318).w,(word_FFDEDA).w
                move.w  #$23,d0 ; '#'   ; assonetimer
                jsr     (assreplace).l
                movem.l (sp)+,d0-d2/a0/a3
                rts
; ---------------------------------------------------------------------------
loc_B240:                               ; CODE XREF: doinput+EE   j
                                        ; doinput+F6   j ...
                movem.l (sp)+,d0-d2/a0/a3
                btst    #3,$64(a3)
                bne.w   loc_B258
                btst    #5,$62(a3)
                bne.w   loc_B81A
loc_B258:                               ; CODE XREF: doinput+162   j
                btst    #0,$63(a3)
                bne.w   fightinput
                move.w  (puckc).w,d5
                cmp.w   $52(a3),d5
                beq.w   loc_B72E
                tst.w   $34(a3)
                beq.w   loc_B28C
                btst    #3,$64(a3)
                beq.w   loc_B284
                bra.w   loc_B28C
; ---------------------------------------------------------------------------
loc_B284:                               ; CODE XREF: doinput+194   j
                btst    #6,d1
                bne.w   holdplayer
loc_B28C:                               ; CODE XREF: doinput+18A   j
                                        ; doinput+198   j
                tst.w   $34(a3)
                beq.w   loc_B2A2
                btst    #2,(BA_PS_flags).w
                bne.w   loc_B42E
                bra.w   loc_B2DA
; ---------------------------------------------------------------------------
loc_B2A2:                               ; CODE XREF: doinput+1A8   j
                btst    #6,(byte_FFC2F6).w
                bne.w   loc_B2DA
                tst.w   d4
                beq.w   loc_B2BA
                tst.w   (word_FFD05C).w
                bra.w   loc_B2BE
; ---------------------------------------------------------------------------
loc_B2BA:                               ; CODE XREF: doinput+1C6   j
                tst.w   (word_FFD05A).w
loc_B2BE:                               ; CODE XREF: doinput+1CE   j
                beq.w   loc_B2DA
                movem.w d0,-(sp)
                move.w  $52(a3),d0
                cmp.w   (puckc).w,d0
                movem.w (sp)+,d0
                beq.w   loc_B2DA
                bra.w   changeplayer
; ---------------------------------------------------------------------------
loc_B2DA:                               ; CODE XREF: doinput+1B6   j
                                        ; doinput+1C0   j ...
                btst    #4,d3
                beq.w   loc_B35C
                tst.w   (word_FFD412).w
                bne.w   loc_B35C
                tst.w   d4
                beq.w   loc_B328
                tst.b   (word_FFBF06+1).w
                beq.w   loc_B42E
                subq.b  #1,(word_FFBF06+1).w
                bpl.w   loc_B306
                move.b  #0,(word_FFBF06+1).w
loc_B306:                               ; CODE XREF: doinput+214   j
                tst.b   (word_FFBF06+1).w
                bne.w   loc_B35C
                tst.w   d4
                beq.w   loc_B31C
                tst.w   (word_FFD05C).w
                bra.w   loc_B320
; ---------------------------------------------------------------------------
loc_B31C:                               ; CODE XREF: doinput+228   j
                tst.w   (word_FFD05A).w
loc_B320:                               ; CODE XREF: doinput+230   j
                bne.w   loc_B35C
                bra.w   loc_B3E4
; ---------------------------------------------------------------------------
loc_B328:                               ; CODE XREF: doinput+204   j
                tst.b   (word_FFBF06).w
                beq.w   loc_B42E
                subq.b  #1,(word_FFBF06).w
                bpl.w   loc_B33E
                move.b  #0,(word_FFBF06).w
loc_B33E:                               ; CODE XREF: doinput+24C   j
                tst.w   d4
                beq.w   loc_B34C
                tst.w   (word_FFD05C).w
                bra.w   loc_B350
; ---------------------------------------------------------------------------
loc_B34C:                               ; CODE XREF: doinput+258   j
                tst.w   (word_FFD05A).w
loc_B350:                               ; CODE XREF: doinput+260   j
                bne.w   loc_B35C
                tst.b   (word_FFBF06).w
                beq.w   loc_B3E4
loc_B35C:                               ; CODE XREF: doinput+1F6   j
                                        ; doinput+1FE   j ...
                btst    #4,d1
                beq.w   loc_B37E
                tst.w   d4
                bne.w   loc_B374
                move.b  #$11,(word_FFBF06).w
                bra.w   loc_B42E
; ---------------------------------------------------------------------------
loc_B374:                               ; CODE XREF: doinput+27E   j
                move.b  #$11,(word_FFBF06+1).w
                bra.w   loc_B42E
; ---------------------------------------------------------------------------
loc_B37E:                               ; CODE XREF: doinput+278   j
                btst    #4,d2
                beq.w   loc_B42E
                btst    #4,d3
                bne.w   loc_B42E
                move.w  (word_FFBF06).w,d0
                tst.w   d4
                beq.w   loc_B3C0
                move.b  #$11,(word_FFBF06+1).w
                andi.w  #$FF,d0
                bne.w   changeplayer
                tst.w   d4
                beq.w   loc_B3B4
                tst.w   (word_FFD05C).w
                bra.w   loc_B3B8
; ---------------------------------------------------------------------------
loc_B3B4:                               ; CODE XREF: doinput+2C0   j
                tst.w   (word_FFD05A).w
loc_B3B8:                               ; CODE XREF: doinput+2C8   j
                bne.w   changeplayer
                bra.w   loc_B3E4
; ---------------------------------------------------------------------------
loc_B3C0:                               ; CODE XREF: doinput+2AC   j
                move.b  #$11,(word_FFBF06).w
                andi.w  #$FF00,d0
                bne.w   changeplayer
                tst.w   d4
                beq.w   loc_B3DC
                tst.w   (word_FFD05C).w
                bra.w   loc_B3E0
; ---------------------------------------------------------------------------
loc_B3DC:                               ; CODE XREF: doinput+2E8   j
                tst.w   (word_FFD05A).w
loc_B3E0:                               ; CODE XREF: doinput+2F0   j
                bne.w   changeplayer
loc_B3E4:                               ; CODE XREF: doinput+23C   j
                                        ; doinput+270   j ...
                tst.w   (word_FFD412).w
                bne.w   changeplayer
                move.w  #5,d0
                cmp.w   #5,d6
                ble.w   loc_B3FC
                move.w  #$B,d0
loc_B3FC:                               ; CODE XREF: doinput+30C   j
                jsr     (getGoalieSCnum).l
                tst.w   d0
                bmi.w   locret_B46E
                movem.l d0/a3,-(sp)
                movea.l #$FFFFB04A,a3
                asl.w   #7,d0
                adda.w  d0,a3
                btst    #3,$62(a3)
                movem.l (sp)+,d0/a3
                bne.w   locret_B46E
                tst.w   d4
                beq.w   setc1player
                bra.w   setc2player
; ---------------------------------------------------------------------------
loc_B42E:                               ; CODE XREF: doinput+1B2   j
                                        ; doinput+20C   j ...
                tst.w   $34(a3)
                bne.w   loc_B6BA
                btst    #6,d1
                beq.w   loc_B470
                move.w  (word_FFBF12).w,d0
                cmp.b   #8,d0
                beq.w   loc_B470
                move.w  d0,$54(a3)
                move.b  #8,$5E(a3)
                move.w  #$2F4,d1        ; goalie dive animation
                bsr.w   SetSPA
                bset    #1,$63(a3)
                bset    #5,$62(a3)
                addi.w  #$96,(crowdlevel).w
locret_B46E:                            ; CODE XREF: doinput+DE   j
                                        ; doinput+31C   j ...
                rts
; ---------------------------------------------------------------------------
loc_B470:                               ; CODE XREF: doinput+352   j
                                        ; doinput+35E   j
                btst    #5,d1
                bne.w   loc_B4D0
                btst    #5,d3
                bne.w   loc_B48A
                bclr    #7,$63(a3)
                bra.w   loc_B616
; ---------------------------------------------------------------------------
loc_B48A:                               ; CODE XREF: doinput+394   j
                btst    #7,$63(a3)
                beq.w   loc_B616
                movem.l d0-d3/a0-a3,-(sp)
                movea.l #$5B1C,a0
                adda.w  $58(a3),a0
                move.w  $54(a3),d0
                btst    #3,4(a3)
                beq.w   loc_B4B8
                neg.w   d0
                addq.w  #8,d0
                andi.w  #7,d0
loc_B4B8:                               ; CODE XREF: doinput+3C4   j
                asl.w   #1,d0
                adda.w  (a0,d0.w),a0
                tst.b   $5B(a3)
                movem.l (sp)+,d0-d3/a0-a3
                bpl.s   locret_B46E
                move.w  #$A,$5C(a3)
                rts
; ---------------------------------------------------------------------------
loc_B4D0:                               ; CODE XREF: doinput+38C   j
                btst    #5,$62(a3)
                bne.w   loc_B616
                movem.w d0-d1,-(sp)
                move.w  (puckx).w,d0
                sub.w   (a3),d0
                move.w  (pucky).w,d1
                sub.w   $14(a3),d1
                bsr.w   vtoa
                move.w  d0,$54(a3)
                movem.w (sp)+,d0-d1
                move.w  (word_FFBF12).w,d0
                bclr    #0,(BA_PS_flags).w
                move.w  (gameclock).w,d0
                andi.w  #7,d0
                asl.w   #4,d0
                addi.w  #$A0,d0
                cmpi.w  #$DB,(pucky).w
                bgt.w   loc_B524
                cmpi.w  #$FF25,(pucky).w
                bgt.w   loc_B528
loc_B524:                               ; CODE XREF: doinput+42E   j
                subi.w  #$40,d0 ; '@'
loc_B528:                               ; CODE XREF: doinput+438   j
                move.w  d0,d1
                muls.w  (puckvx).w,d0
                swap    d0
                add.w   (puckx).w,d0
                muls.w  (puckvy).w,d1
                swap    d1
                add.w   (pucky).w,d1
                bsr.w   sub_B5D8
                movem.w d0-d1,-(sp)
                muls.w  d0,d0
                muls.w  d1,d1
                add.l   d1,d0
                cmp.l   #$384,d0
                bhi.w   loc_B55E
                movem.w (sp)+,d0-d1
                bra.w   loc_B582
; ---------------------------------------------------------------------------
loc_B55E:                               ; CODE XREF: doinput+46A   j
                bsr.w   sroot
                moveq   #1,d2
                add.w   d0,d2
                moveq   #$12,d4
                btst    #3,(sflags).w
                beq.w   loc_B574
                addq.w  #8,d4
loc_B574:                               ; CODE XREF: doinput+486   j
                movem.w (sp)+,d0-d1
                muls.w  d4,d1
                addq.w  #8,d4
                muls.w  d4,d0
                divs.w  d2,d0
                divs.w  d2,d1
loc_B582:                               ; CODE XREF: doinput+472   j
                add.w   d3,d1
                move.w  d1,d2
                cmpi.w  #$22,2(a0) ; '"'
                cmpi.w  #$18,(a0)
                cmpi.w  #$FFE8,(a0)
                cmpi.w  #$C,2(a0)
                cmpi.w  #$108,(pucky).w
                cmpi.w  #$FEF8,(pucky).w
                bset    #1,$63(a3)
                bne.w   loc_B616
                movem.l d0-d7/a0-a6,-(sp)
                movea.l #$FFFFBEE6,a0   ; puckcross
                move.w  #$108,d3
                btst    #7,$62(a3)      ; check which net shooting on
                beq.w   loc_B5CC        ; branch if bottom net
                neg.w   d3              ; negate d3 (-108 hex)
                addq.w  #4,a0           ; puckcross+4 (for bottom goalie)
loc_B5CC:                               ; CODE XREF: doinput+4DC   j
                jsr     (goaliesave).l
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function doinput


sub_B5D8:                               ; CODE XREF: doinput+456   p
                move.w  (puckc).w,d2
                cmp.w   $52(a3),d2
                bne.w   loc_B5E6
                clr.w   d0
loc_B5E6:                               ; CODE XREF: sub_B5D8+8   j
                cmp.w   #$103,d1
                blt.w   loc_B5F2
                move.w  #$103,d1
loc_B5F2:                               ; CODE XREF: sub_B5D8+12   j
                cmp.w   #$FEFD,d1
                bgt.w   loc_B5FE
                move.w  #$FEFD,d1
loc_B5FE:                               ; CODE XREF: sub_B5D8+1E   j
                sub.w   d3,d1
                rts
; End of function sub_B5D8
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_B616:                               ; CODE XREF: doinput+39E   j
                                        ; doinput+3A8   j ...
                btst    #1,$63(a3)
                beq.w   loc_B622
                rts
; ---------------------------------------------------------------------------
loc_B622:                               ; CODE XREF: ROM:0000B61C   j
                tst.w   $34(a3)
                bne.w   doplayeracc
                bclr    #1,(BA_PS_flags).w
                cmpi.w  #$24,(a3) ; '$'
                ble.w   loc_B64E
                tst.w   $28(a3)
                bmi.w   loc_B64E
                beq.w   loc_B64E
                bset    #1,(BA_PS_flags).w
                clr.w   $28(a3)
loc_B64E:                               ; CODE XREF: ROM:0000B634   j
                                        ; ROM:0000B63C   j ...
                cmpi.w  #$FFDC,(a3)
                bge.w   loc_B668
                tst.w   $28(a3)
                bpl.w   loc_B668
                bset    #1,(BA_PS_flags).w
                clr.w   $28(a3)
loc_B668:                               ; CODE XREF: ROM:0000B652   j
                                        ; ROM:0000B65A   j
                cmpi.w  #$E7,$14(a3)
                bgt.w   loc_B6A8
                cmpi.w  #$FF19,$14(a3)
                ble.w   loc_B6A8
                bra.w   *+4
; ---------------------------------------------------------------------------
loc_B680:                               ; CODE XREF: ROM:0000B67C   j
                movem.w d0-d1,-(sp)
                move.w  $14(a3),d0
                move.w  $2A(a3),d1
                eor.w   d1,d0
                movem.w (sp)+,d0-d1
                bpl.w   loc_B6A8
                tst.w   $2A(a3)
                beq.w   loc_B6A8
                bset    #1,(BA_PS_flags).w
                clr.w   $2A(a3)
loc_B6A8:                               ; CODE XREF: ROM:0000B66E   j
                                        ; ROM:0000B678   j ...
                btst    #1,(BA_PS_flags).w
                bne.w   locret_B46E
                move.w  (word_FFBF12).w,d0
                bra.w   doplayeracc
; ---------------------------------------------------------------------------
loc_B6BA:                               ; CODE XREF: doinput+34A   j
                move.w  (word_FFBF12).w,d0
                btst    #3,$64(a3)
                bne.w   rtss7
                btst    #5,d1
                beq.w   doplayeracc
                movem.l d7-a0,-(sp)
                move.w  (lastplayer).w,d7
                asl.w   #7,d7
                movea.l #$FFFFB04A,a0
                adda.w  d7,a0
                tst.w   $34(a0)
                movem.l (sp)+,d7-a0
                beq.w   burst
                movem.w d7,-(sp)
                move.w  $52(a3),d7
                cmp.w   (word_FFBEE0).w,d7
                movem.w (sp)+,d7
                bne.w   burst
                tst.w   (puckc).w
                bpl.w   burst
                jsr     (sub_F6C44).l
                beq.w   burst
                move.w  d0,-(sp)
                move.w  d4,(word_FFDED8).w
                move.w  (word_FFC318).w,(word_FFDEDA).w
                move.w  #$23,d0 ; '#'   ; assonetimer
                jsr     (assreplace).l
                move.w  (sp)+,d0
                rts
; ---------------------------------------------------------------------------
loc_B72E:                               ; CODE XREF: doinput+182   j
                bsr.w   sub_E62E
                tst.w   $34(a3)
                bne.w   loc_B744
                btst    #1,$63(a3)
                bne.w   locret_B46E
loc_B744:                               ; CODE XREF: ROM:0000B736   j
                btst    #2,(sflags).w
                bne.w   passmode
                btst    #3,(sflags).w
                bne.w   ShotMode
                btst    #4,d1
                beq.w   loc_B76A
                jsr     (sub_FEE60).l
                bra.w   setpassmode
; ---------------------------------------------------------------------------
loc_B76A:                               ; CODE XREF: ROM:0000B75C   j
                btst    #6,d1
                beq.w   loc_B788
                tst.w   d4
                beq.w   loc_B782
                move.b  #$F,(word_FFD41E+1).w
                bra.w   loc_B788
; ---------------------------------------------------------------------------
loc_B782:                               ; CODE XREF: ROM:0000B774   j
                move.b  #$F,(word_FFD41E).w
loc_B788:                               ; CODE XREF: ROM:0000B76E   j
                                        ; ROM:0000B77E   j
                btst    #6,d3
                beq.w   loc_B7E2
                tst.w   d4
                beq.w   loc_B7BC
                subq.b  #1,(word_FFD41E+1).w
                bpl.w   loc_B7A4
                move.b  #0,(word_FFD41E+1).w
loc_B7A4:                               ; CODE XREF: ROM:0000B79A   j
                tst.b   (word_FFD41E+1).w
                bne.w   loc_B7E2
                bset    #3,(byte_FFC2F6).w
                jsr     (setpassmode).l
                bra.w   sub_B8F2
; ---------------------------------------------------------------------------
loc_B7BC:                               ; CODE XREF: ROM:0000B792   j
                subq.b  #1,(word_FFD41E).w
                bpl.w   loc_B7CA
                move.b  #0,(word_FFD41E).w
loc_B7CA:                               ; CODE XREF: ROM:0000B7C0   j
                tst.b   (word_FFD41E).w
                bne.w   loc_B7E2
                bset    #3,(byte_FFC2F6).w
                jsr     (setpassmode).l
                bra.w   sub_B8F2
; ---------------------------------------------------------------------------
loc_B7E2:                               ; CODE XREF: ROM:0000B78C   j
                                        ; ROM:0000B7A8   j ...
                btst    #6,d3
                bne.w   loc_B7FC
                btst    #6,d2
                beq.w   loc_B7FC
                bset    #3,(byte_FFC2F6).w
                bra.w   setpassmode
; ---------------------------------------------------------------------------
loc_B7FC:                               ; CODE XREF: ROM:0000B7E6   j
                                        ; ROM:0000B7EE   j ...
                tst.w   $34(a3)
                bne.w   loc_B808
                bra.w   doplayeracc
; ---------------------------------------------------------------------------
loc_B808:                               ; CODE XREF: ROM:0000B800   j
                btst    #5,d1
                beq.w   doplayeracc
                jsr     (sub_FEE60).l
                bra.w   SetShotMode
; ---------------------------------------------------------------------------
loc_B81A:                               ; CODE XREF: doinput+16C   j
                move.w  (puckc).w,d5
                cmp.w   $52(a3),d5
                beq.w   locret_B46E
                btst    #4,d1
                beq.w   rtss7
                btst    #6,(byte_FFC2F6).w
                bne.w   rtss7
                bsr.w   changeplayer
                movem.l d0/a0,-(sp)
                move.w  (c1playernum).w,d0
                tst.w   d4
                beq.w   loc_B84E
                move.w  (c2playernum).w,d0
loc_B84E:                               ; CODE XREF: ROM:0000B846   j
                tst.w   d0
                bmi.w   loc_B864
                asl.w   #7,d0
                movea.l #$FFFFB04A,a0
                adda.w  d0,a0
                bset    #6,$64(a0)
loc_B864:                               ; CODE XREF: ROM:0000B850   j
                movem.l (sp)+,d0/a0
rtss7:                                  ; CODE XREF: ROM:0000B6C4   j
                                        ; ROM:0000B82A   j ...
                rts


; Find goalie SCnum, store in d0
; If no goalie, store FFFF in d0
getGoalieSCnum:                         ; CODE XREF: doinput:loc_B3FC   p
                                        ; prepshot:_getGoalie   p ...
                movem.l d1/a0,-(sp)
                movea.l #$FFFFB04A,a0
                asl.w   #7,d0
                adda.w  d0,a0
                move.w  #5,d1
loop:                                   ; CODE XREF: getGoalieSCnum+1E   j
                tst.w   $34(a0)
                beq.w   _goalie
                suba.w  #$80,a0
                dbf     d1,loop
                move.w  #$FFFF,d0
                bra.w   _end
; ---------------------------------------------------------------------------
_goalie:                                ; CODE XREF: getGoalieSCnum+16   j
                move.w  $52(a0),d0
_end:                                   ; CODE XREF: getGoalieSCnum+26   j
                movem.l (sp)+,d1/a0
                rts
; End of function getGoalieSCnum
faceoffinput:                           ; CODE XREF: doinput+CA   j
                btst    #6,(byte_FFC2F6).w
                beq.w   glb_B8AA
                rts
; ---------------------------------------------------------------------------
glb_B8AA:                               ; CODE XREF: ROM:0000B8A4   j
glb_B8AA:                               ; move assnum into d4
                move.w  $36(a3),d4
                cmpi.b  #$17,$38(a3,d4.w) ; check if afaceoffpl is in asslist at assnum position
                bne.s   rtss7           ; exit if this is not a faceoff player
                movea.w #(fodir1-M68K_RAM),a0 ; faceoff direction of puck control variable
                btst    #7,$62(a3)      ; check which goal shooting on
                beq.w   glb_B8C8        ; branch if bottom goal
                movea.w #(fodir2-M68K_RAM),a0
glb_B8C8:                               ; CODE XREF: ROM:0000B8C0   j
glb_B8C8:                               ; store dpad for faceoff pull
                move.w  d0,(a0)
                btst    #1,$63(a3)      ; check if anim in progress
                bne.s   rtss7           ; exit if anim in progress
                btst    #4,d1           ; test for b button press
                beq.w   glb_B8E8        ; branch if pressed
                move.w  #$FEA,d1        ; SPAfaceoff anim
                bset    #1,$63(a3)      ; set anim in progress
                bra.w   SetSPA
; ---------------------------------------------------------------------------
glb_B8E8:                               ; CODE XREF: ROM:0000B8D6   j
glb_B8E8:                               ; #SPAfaceoffr anim
                move.w  #$1014,d1
                bra.w   SetSPA


fightinput:                             ; CODE XREF: doinput+176   j
                rts                     ; controller processing for fighting
; End of function fightinput


sub_B8F2:                               ; CODE XREF: ROM:0000B7B8   j
                                        ; ROM:0000B7DE   j ...
                tst.w   (OptLine).w
                bne.w   rtss7
                btst    #4,(byte_FFC2FC).w
                bne.w   rtss7
                bsr.w   loadTeamStruct
                bset    #1,$30(a2)
                bne.w   rtss7
                btst    #3,(byte_FFC2F6).w
                bne.w   loc_B922
                bclr    #2,(sflags).w
loc_B922:                               ; CODE XREF: sub_B8F2+26   j
                bclr    #3,(sflags).w
                bset    #3,$63(a3)
; End of function sub_B8F2


sub_B92E:                               ; CODE XREF: ROM:0000BAC2   p
                                        ; sub_F64E+32   j ...
                bsr.w   sub_B9C2
                cmpi.w  #$F,(printy).w
                blt.w   loc_B946
                bset    #0,(sflags3).w
                bra.w   loc_B950
; ---------------------------------------------------------------------------
loc_B946:                               ; CODE XREF: sub_B92E+A   j
                jsr     (sub_18A56).l
                bsr.w   sub_B9C2
loc_B950:                               ; CODE XREF: sub_B92E+14   j
                bsr.w   Framer
                subq.w  #2,(printy).w
                addq.w  #1,(printx).w
                moveq   #2,d4
loc_B95E:                               ; CODE XREF: sub_B92E:loc_B9AC   j
                move.w  d4,d0
                bsr.w   getlchoice
                tst.w   d0
                bmi.w   loc_B9AC
                btst    #1,$30(a2)
                bne.w   loc_B980
                cmp.w   $2E(a2),d4
                bne.w   loc_B9A8
                move.w  $16(a2),d0
loc_B980:                               ; CODE XREF: sub_B92E+42   j
                movea.w #(mesarea-M68K_RAM),a1
                move.l  #unk_44120,(a1)
                add.b   d4,2(a1)
                bsr.w   print
                move.w  d0,-(sp)
                movea.l #FaceOffsprites,a1
                bsr.w   sub_13508
                move.w  (sp)+,d0
                bsr.w   sub_12E66
                subq.w  #5,(printx).w
loc_B9A8:                               ; CODE XREF: sub_B92E+4A   j
                subq.w  #1,(printy).w
loc_B9AC:                               ; CODE XREF: sub_B92E+38   j
                dbf     d4,loc_B95E
                movea.l $1E(a2),a1
                adda.w  4(a1),a1
                adda.w  (a1),a1
                addq.w  #2,(printx).w
                bra.w   print
; End of function sub_B92E


sub_B9C2:                               ; CODE XREF: sub_B92E   p
                                        ; sub_B92E+1E   p ...
                clr.w   d0
                cmpa.w  #$C6CE,a2
                bne.w   loc_B9D0
                eori.w  #$16,d0
loc_B9D0:                               ; CODE XREF: sub_B9C2+6   j
                btst    #1,(gmode).w
                beq.w   loc_B9DE
                eori.w  #$16,d0
loc_B9DE:                               ; CODE XREF: sub_B9C2+14   j
                bsr.w   printz
                ori.b   #$16,d6
                ori.b   #$78,d0 ; 'x'
                cmp.b   $7002(a2),d0
                bsr.w   getlchoice
                moveq   #6,d1
                tst.w   d0
                bpl.w   loc_BA00
                subq.w  #1,d1
                addq.w  #1,(printy).w
loc_BA00:                               ; CODE XREF: sub_B9C2+34   j
                moveq   #9,d0
                rts
; End of function sub_B9C2


getlchoice:                             ; CODE XREF: sub_B92E+32   p
                                        ; sub_B9C2+2C   p ...
                movem.l d1-d2,-(sp)
                move.w  $388(a2),d2
                cmpa.w  #$C6CE,a2
                beq.w   getlchoice2
                move.w  -$340(a2),d2
getlchoice2:                            ; CODE XREF: getlchoice+C   j
                sub.w   $24(a2),d2
                beq.w   loc_BA2E
                addi.w  #$15,d0
                tst.w   d2
                bmi.w   loc_BA2E
                addi.w  #$15,d0
loc_BA2E:                               ; CODE XREF: getlchoice+18   j
                                        ; getlchoice+22   j
                move.w  $16(a2),d1
                add.w   d1,d0
                add.w   d1,d0
                add.w   d1,d0
                lea     _tab(pc),a0
                move.b  (a0,d0.w),d0
                ext.w   d0
                movem.l (sp)+,d1-d2
                rts
; End of function getlchoice
; ---------------------------------------------------------------------------
lineinput:                              ; CODE XREF: doinput+D4   j
                btst    #3,(byte_FFC2F6).w
                beq.w   loc_BAA0
                movem.l d0-d7/a0-a6,-(sp)
                jsr     (passmode).l
                movem.l (sp)+,d0-d7/a0-a6
loc_BAA0:                               ; CODE XREF: ROM:0000BA8E   j
                move.w  d1,-(sp)
                movea.w #(HmShots-M68K_RAM),a2
                btst    #6,$62(a3)
                beq.w   loc_BAB4
                adda.w  #$364,a2
loc_BAB4:                               ; CODE XREF: ROM:0000BAAC   j
                bclr    #0,$30(a2)
                beq.w   loc_BAC6
                bsr.w   sub_BB36
                bsr.w   sub_B92E
loc_BAC6:                               ; CODE XREF: ROM:0000BABA   j
                move.w  (sp)+,d1
                clr.w   d2
                btst    #6,d1
                bne.w   lcfound
                addq.w  #1,d2
                btst    #4,d1
                bne.w   lcfound
                addq.w  #1,d2
                btst    #5,d1
                bne.w   lcfound
                btst    #3,$62(a3)
                beq.w   locret_BB04
                btst    #5,$62(a3)
                bne.w   locret_BB04
                btst    #0,$63(a3)
                beq.w   doplayeracc
locret_BB04:                            ; CODE XREF: ROM:0000BAEC   j
                                        ; ROM:0000BAF6   j
                rts


; d2 = choice made 0-2
lcfound:                                ; CODE XREF: ROM:0000BACE   j
                                        ; ROM:0000BAD8   j ...
                move.w  d2,d0
                move.w  d2,$2E(a2)
                bsr.w   getlchoice      ; translate choice 0-2 into line number 0-6
                tst.w   d0
                bmi.w   rtss8
                bclr    #3,$63(a3)
                bset    #3,$62(a3)
                bsr.w   loadTeamStruct
                bclr    #1,$30(a2)
                move.w  d0,$16(a2)
                jsr     (SetPersonel).l
; End of function lcfound


sub_BB36:                               ; CODE XREF: ROM:0000BABE   p
                                        ; ROM:000188B2   p ...
                btst    #7,(sflags).w
                bne.w   rtss
                bsr.w   sub_B9C2
                cmpi.w  #$F,(printy).w
                blt.w   loc_BB54
                bclr    #0,(sflags3).w
loc_BB54:                               ; CODE XREF: sub_BB36+14   j
                addq.w  #1,d1
                move.w  #$7FF,d2
                bsr.w   eraser
                bra.w   PrintScores1
; End of function sub_BB36


; c button press check/speed
burst:                                  ; CODE XREF: ROM:0000B6EA   j
                                        ; ROM:0000B6FE   j ...
                jsr     (getpde).l      ; get players energy
                tst.w   (OptLine).w
                bne.w   _0
                subi.w  #$CC,d0
                jsr     (setpde).l      ; decrease players energy
                btst    #4,(byte_FFC2FC).w
                beq.w   _0
                move.w  #$1000,d0
_0:                                     ; CODE XREF: burst+A   j
                                        ; burst+1E   j
                lsr.w   #7,d0           ; d0 will be $1000 with lines off
                                        ; d0 / 64 will be 20 hex if max energy
                move.w  d0,d1           ; energy = speed increase (check violence)
                move.w  $54(a3),d2      ; facedir
                asl.w   #2,d2
                movea.l #dirtab,a0
                muls.w  (a0,d2.w),d0
                muls.w  2(a0,d2.w),d1
                add.w   d0,$28(a3)      ; add to X Vel
                add.w   d1,$2A(a3)      ; add to Y Vel
                bset    #5,$62(a3)      ; lock in this animation
                move.w  #$C5E,d1        ; #SPAburst
                bra.w   SetSPA
; End of function burst


; A button press hold
; CPU hold jumps in at Acheck
;
; a3 = holder
; a0 = player being held
holdplayer:                             ; CODE XREF: doinput+1A0   j
                bset    #5,$62(a3)      ; lock animation
                move.w  #$1122,d1       ; move anim into d1 - normal hold check
                tst.w   $32(a3)         ; check if impact = 0
                beq.w   SetSPA          ; set anim if 0
                movea.w #(SortCords-M68K_RAM),a0 ; move SortCord into a0
                move.w  $2E(a3),d0      ; move last impact player into d0
                asl.w   #7,d0           ; calc offset
                adda.w  d0,a0           ; add offset to a0
Acheck:                                 ; CODE XREF: check4check+96   j
                                        ; check4check+A8   j
                bset    #5,$62(a3)      ; lock animation
                move.w  #$1122,d1       ; move anim into d1 - normal hold check
                tst.w   $32(a3)         ; check if impact = 0
                beq.w   _ex             ; branch if 0
                move.w  $14(a3),d0      ; move Ypos checker into d0
                sub.w   $14(a0),d0      ; sub Ypos of player
                btst    #7,$62(a3)      ; check goal checker is shooting at
                beq.w   _air            ; jump if bottom
                neg.w   d0              ; make d0 negative
_air:                                   ; CODE XREF: holdplayer+3E   j
                bmi.w   _ex
                move.w  #$C90,d1        ; set anim - hold check stick in air
_ex:                                    ; CODE XREF: holdplayer+2C   j
                                        ; holdplayer:_air   j
                bra.w   SetSPA
; End of function holdplayer


; initialize pass mode
setpassmode:                            ; CODE XREF: ROM:0000B766   j
                                        ; ROM:0000B7B2   p ...
                move.w  $54(a3),(passdir).w ; facedir, default pass direction
                andi.w  #7,(passdir).w  ; Passes first 3 bits of passdir
                btst    #2,(BA_PS_flags).w
                beq.w   loc_BC38
                bclr    #2,(word_FFC2FA).w
                bset    #5,(BA_PS_flags).w
                bne.w   rtss7
                bclr    #5,(word_FFC2FA).w
                move.w  #$64,(word_FFC31C).w ; 'd'
loc_BC38:                               ; CODE XREF: setpassmode+12   j
                bset    #2,(sflags).w   ; #sfspdir - set pass dir mode
rtss:                                   ; CODE XREF: sub_BB36+6   j
                                        ; passmode+16   j
                rts
; End of function setpassmode


; start passing sequence
passmode:                               ; CODE XREF: ROM:0000B74A   j
                                        ; ROM:0000BA96   p
                btst    #4,d2           ; has b button changed?
                bne.w   dopass          ; yes
                btst    #3,(byte_FFC2F6).w ; Not in NHL Hockey Source
                bne.w   dopass
                btst    #3,d0           ; look for dpad
                bne.s   rtss
                andi.w  #7,d0           ; pass first 3 bits of d0
                move.w  d0,(passdir).w  ; new pass dir
                bset    #3,d0
dopass:                                 ; CODE XREF: passmode+4   j
                                        ; passmode+E   j ...
                movem.l d0-d5/a0-a1,-(sp)
                bclr    #2,(sflags).w   ; #sfspdir
                st      (puckc).w       ; player is not puck handler anymore
                move.b  #$10,$5E(a3)    ; $5E = nopuck
                move.w  $52(a3),(lastplayer).w ; $52 = offset of player on ice
                bclr    #3,(byte_FFC2F6).w ; Not in NHL Hockey Source
                beq.w   loc_BCAE
                jsr     (sub_F67E4).l
                move.w  #$12,(word_FFD418).w
                btst    #2,(word_FFC2F8).w
                beq.w   loc_BCA4
                move.w  #$3A,(word_FFD418).w ; ':'
loc_BCA4:                               ; CODE XREF: passmode+5A   j
                jsr     (sub_F6778).l
                bra.w   _exit
; ---------------------------------------------------------------------------
loc_BCAE:                               ; CODE XREF: passmode+44   j
                moveq   #8,d0           ; moves 8 into d0
                tst.w   $34(a3)         ; checks if goalie
                beq.w   _calc           ; jump if goalie
_LoadPassAttribForPassStart:            ; Passacc
                move.b  $6E(a3),d0
_calc:                                  ; CODE XREF: passmode+74   j
                asl.w   #2,d0           ; d0 = passacc for player, 8 for goalie
                asr.w   #1,d0           ; change from NHL Hockey Source,
                                        ; because max passacc can be 30
                                        ; (15 in 92)
                addi.w  #$A0,d0
                move.w  d0,(passspeed).w ; Passspeed = PassAcc (0 to 30 decimal) * 2 + A0 (160 decimal)
                btst    #0,$6E(a3)      ; Checks to see if bit 0 in Passacc is 0
                beq.w   _findplayer     ; Jumps if 0 (even number)
                asr.w   #4,d0           ; divide d0 by 16
                add.w   d0,(passspeed).w ; add d0 to passspeed
_findplayer:                            ; CODE XREF: passmode+8E   j
                moveq   #-1,d4          ; look for closest and best player to pass to
                moveq   #5,d3           ; Set total number of players (6 total, set to 5)
                movea.w #(SortCords-M68K_RAM),a1 ; B04A - Start of Home Players on Ice Arrays
                cmpi.w  #6,$52(a3)      ; compares 6 to offset 52 from a3 (current player with puck) to check if player is away team or home team
                blt.w   _0              ; Jump if player is Home, continue if Away
                adda.w  #$300,a1        ; Switch to Away Team Players
                btst    #2,(BA_PS_flags).w
                bne.w   _nopp
_0:                                     ; CODE XREF: passmode+A6   j
                                        ; passmode+11A   j
                cmpa.l  a1,a3           ; Check to see if passing to self
                beq.w   _next           ; skip if this is passing player
                tst.w   $34(a1)         ; position(a1)
                beq.w   _next           ; skip if goalie
                btst    #2,$63(a1)      ; pflags2(a1)
                bne.w   _next           ; player unavailable
                move.w  (a1),d0         ; X Position
                sub.w   (puckx).w,d0
                move.w  $14(a1),d1      ; Y position
                sub.w   (pucky).w,d1
                movem.w d0-d1,-(sp)
                bsr.w   vtoa
                movem.w (sp)+,d1-d2
                sub.w   (passdir).w,d0
                andi.w  #7,d0           ; pass only lower 3 bits in d0
                asl.b   #5,d0           ; Multiply d0 by 32 (224 decimal is max)
                ext.w   d0              ; sign extend d0 byte to d0 word
                asl.w   #3,d0           ; mult d0 by 8 (700 decimal max)
                muls.w  d0,d0           ; square d0 = max is 490000 decimal
                cmp.l   #256^2,d0       ; compare to 65536 decimal
                bhi.w   _next
                muls.w  d1,d1
                muls.w  d2,d2
                add.l   d1,d2
                add.l   d0,d2
                cmp.l   d4,d2
                bhi.w   _next
                move.l  d2,d4
                movea.l a1,a0
_next:                                  ; CODE XREF: passmode+BA   j
                                        ; passmode+C2   j ...
                adda.w  #$80,a1         ; Skip to next player (80 hex is length of player struct)
                dbf     d3,_0
                tst.l   d4
                bmi.w   _nopp           ; skip if no player to pass to
                bsr.w   passto
                bra.w   _exit
; ---------------------------------------------------------------------------
_nopp:                                  ; CODE XREF: passmode+B4   j
                                        ; passmode+120   j
                move.w  (passdir).w,d0  ; just hit puck in pass dir not to any player
                asl.w   #2,d0
                movea.l #dirtab,a0
                move.w  2(a0,d0.w),d1   ; y inc
                muls.w  (passspeed).w,d1
                moveq   #$A,d2
                asl.l   d2,d1
                divs.w  #$BB8,d1        ; #runspeed * 15
                add.w   $2A(a3),d1      ; Yvel
                move.w  d1,(puckvy).w
                move.w  (a0,d0.w),d1    ; X inc
                muls.w  (passspeed).w,d1
                asl.l   d2,d1
                divs.w  #$BB8,d1        ; #runspeed * 15
                add.w   $28(a3),d1      ; Xvel
                move.w  d1,(puckvx).w
                move.w  #$1000,d0
                bsr.w   randomd0
                move.w  d0,(puckvz).w
_exit:                                  ; CODE XREF: passmode+6A   j
                                        ; passmode+128   j
                tst.w   $34(a3)         ; $34 = position
                bne.w   _notgoalie
                tst.w   (puckvy).w
                btst    #7,$62(a3)      ; $62 = pflags Checks for what goal team is shooting at (0=bottom, 1=top)
                beq.w   _g0
                bmi.w   _nvy
                bra.w   _notgoalie
; ---------------------------------------------------------------------------
_g0:                                    ; CODE XREF: passmode+184   j
                bmi.w   _notgoalie
_nvy:                                   ; CODE XREF: passmode+188   j
                neg.w   (puckvy).w      ; negative velocity on puck
_notgoalie:                             ; CODE XREF: passmode+176   j
                                        ; passmode+18C   j ...
                move.w  (puckvx).w,d0
                move.w  (puckvy).w,d1
                bsr.w   vtoa
                move.w  #$366,d1        ; #SPAgswing Note: SPA = Sprite Animation
                tst.w   $34(a3)         ; $34 = position
                beq.w   _e1             ; goalie anim.
                move.w  #$718,d1        ; #SPApassf
                bsr.w   Findhittype
                beq.w   _e1
                move.w  #$78A,d1        ; #SPApassb
_e1:                                    ; CODE XREF: passmode+1AC   j
                                        ; passmode+1B8   j
                bsr.w   SetSPA
                bset    #5,$62(a3)      ; #pfalock, $62 = pflags
                moveq   #$C,d0          ; Rest to rts, not in NHL Hockey Source
                                        ; Used to make puck sound
                sub.b   (puckvz).w,d0
                lsr.w   #2,d0
                andi.w  #3,d0
                addi.w  #$10,d0
                move.w  d0,-(sp)        ; #SFXpass
                bsr.w   sfx
                movem.l (sp)+,d0-d5/a0-a1
                rts
; End of function passmode


; pass puck to player a0
; a3 = passer
passto:                                 ; CODE XREF: passmode+124   p
                btst    #3,$62(a3)
                beq.w   passtoa0
                tst.w   $34(a3)
                bne.w   passtoa0
                movem.l d0-d1,-(sp)
                btst    #3,$62(a0)
                bne.w   _stack
                bset    #6,$64(a0)      ; pflags3 bit 6
                move.w  (cont1team).w,d1
                cmp.w   (cont2team).w,d1 ; checks to see if 2 player co-op (on same team)
                bne.w   _h2hor1p
                move.w  $52(a0),d0      ; SCnum of receiver into d0
                move.w  $52(a3),d1      ; SCnum of passer into d1
                cmp.w   (c1playernum).w,d1 ; checks if cont 1 controlling passer
                bne.w   _p2passing
                jsr     (setc1player).l
                bra.w   _stack
; ---------------------------------------------------------------------------
_p2passing:                             ; CODE XREF: passto+3E   j
                jsr     (setc2player).l
                bra.w   _stack
; ---------------------------------------------------------------------------
_h2hor1p:                               ; CODE XREF: passto+2E   j
                move.w  #1,d1
                btst    #6,$62(a3)      ; check if home or away team
                beq.w   loc_BE8E        ; branch if home
                move.w  #2,d1           ; away team
loc_BE8E:                               ; CODE XREF: passto+60   j
                move.w  $52(a0),d0      ; move SCnum of receiver into d0
                cmp.w   (cont1team).w,d1 ; compare cont1 team with d1 (1=home, 2=away)
                bne.w   _diffteam
                jsr     (setc1player).l
                bra.w   _stack
; ---------------------------------------------------------------------------
_diffteam:                              ; CODE XREF: passto+70   j
                jsr     (setc2player).l
_stack:                                 ; CODE XREF: passto+1C   j
                                        ; passto+48   j ...
                movem.l (sp)+,d0-d1
passtoa0:                               ; CODE XREF: passto+6   j
                                        ; passto+E   j
                bsr.w   loadTeamStruct
                addq.w  #1,$12(a2)      ; add 1 to total pass attempts
                move.w  $52(a0),(word_FFBEE0).w ; Moves index number for a0 player
                move.w  (passspeed).w,d5 ; passspeed = pix/sec
                asr.w   #2,d5           ; divides pass speed by 4
                exg     a0,a3           ; tell pass recipient to get puck - swaps a3 and a0 for assinsert
                move.l  #$13,d0         ; #apassrec - assignment for receiving pass
                bsr.w   assinsert
                exg     a0,a3
                move.l  a0,-(sp)        ; This routine uses passspeed and player's a0 x/y speed to determine the x/y velocity of the puck so it will meet player a0
                bsr.w   GetHot
                add.w   (a0),d0         ; Xpos
                sub.w   (puckx).w,d0
                add.w   $14(a0),d1      ; Ypos
                sub.w   (pucky).w,d1
                movem.w d0-d1,-(sp)
                movem.w (sp),d2-d3      ; pop d0-d1 off into d2-d3
                asr.w   #2,d2           ; d2 divide by 4
                asr.w   #2,d3           ; d3 divide by 4
                move.w  $28(a0),d0      ; Xvel
                muls.w  #$F0,d0         ; #(16 * 60)/4 = $F0 xpix / (1/4) sec
                swap    d0              ; swap upper and lower bytes
                move.w  $2A(a0),d1      ; Yvel
                muls.w  #$F0,d1
                swap    d1              ; swap upper and lower bytes
                movem.w d0-d1,-(sp)     ; push on stack
                muls.w  d2,d0           ; d0 = (d2 = Xpos puck / 4) * d0 (x pix per 1/4 sec)
                muls.w  d3,d1           ; d1 = (d3 = Ypos puck /4) * d1 (y pix per 1/4 sec)
                add.w   d1,d0           ; add d1 to d0
                asl.w   #1,d0           ; d0 mult by 2
                move.w  d0,d4           ; j = move d0 into d4
                movem.w (sp),d0-d1      ; pop d0 and d1 off stack
                muls.w  d0,d0           ; (x pix per 1/4 sec)^2
                muls.w  d1,d1           ; (y pix per 1/4 sec)^2
                muls.w  d5,d5           ; passspeed^2
                neg.l   d5              ; negative d5
                add.l   d0,d5           ; add d0 to d5
                add.l   d1,d5           ; k = add d1 to d5
                muls.w  d2,d2
                muls.w  d3,d3
                add.l   d2,d3           ; a^2 = add d2 to d3
                muls.w  d5,d3           ; multiply k * a^2
                asl.l   #2,d3           ; divide by 4
                move.w  d4,d0           ; d0 = j
                muls.w  d0,d0           ; j^2
                sub.l   d3,d0           ; j^2 - ((k*a^2)/4)
                bsr.w   sroot           ; square root of d0
                moveq   #1,d3           ; limit infinite loop
                asr.w   #2,d5           ; k divide by 4
                bne.w   _0
                moveq   #1,d5           ; no div by zero
_0:                                     ; CODE XREF: passto+114   j
                                        ; passto+124   j
                move.w  d0,d2
                neg.w   d0
                sub.w   d4,d2
                ext.l   d2
                divs.w  d5,d2
                dbpl    d3,_0
                bne.w   _1
                addq.w  #1,d2           ; can't be zero
_1:                                     ; CODE XREF: passto+128   j
                cmp.w   #$18,d2         ; limit to 3 sec.
                bls.w   _2
                moveq   #$18,d2         ; d2 = time in 1/8 sec to intersection
_2:                                     ; CODE XREF: passto+132   j
                move.b  d2,(puckvz).w
                cmp.w   #$C,d2
                blt.w   _3
                move.b  #$C,(puckvz).w
_3:                                     ; CODE XREF: passto+140   j
                move.w  d2,d0
                asl.w   #3,d0
                subi.w  #$A,d0          ; only subtract #6 in NHL Hockey
                move.b  d0,$40(a0)      ; $40 = temp1
                subq.w  #6,d0           ; sub. #10 in NHL Hockey
                move.b  d0,(puckx_nopuck).w
                movem.w (sp)+,d0-d1
                muls.w  d2,d0
                asr.l   #1,d0
                add.w   (sp)+,d0        ; x distance
                move.w  (puckx).w,$44(a0)
                add.w   d0,$44(a0)      ; $44 = temp3
                muls.w  d2,d1
                asr.l   #1,d1
                add.w   (sp)+,d1        ; y distance
                move.w  (pucky).w,$46(a0)
                add.w   d1,$46(a0)      ; $46 = temp4
                mulu.w  #$78,d2 ; 'x'   ; $78 = 60*2
                swap    d0
                divs.w  d2,d0
                move.w  d0,(puckvx).w
                swap    d1
                divs.w  d2,d1
                move.w  d1,(puckvy).w
                rts
; End of function passto


; Attributes: thunk
changeplayer:                           ; CODE XREF: doinput+1EE   j
                                        ; doinput+2BA   j ...
                jmp     chgplayer
; End of function changeplayer
; ---------------------------------------------------------------------------
                bne.w   locret_C0AC
                movem.l d0-d6/a0-a1,-(sp)
                move.w  (puckvx).w,d0
                asr.w   #8,d0
                add.w   (puckx).w,d0
                move.w  (puckvy).w,d1
                asr.w   #8,d1
                add.w   (pucky).w,d1
                movem.w d0-d1,-(sp)
                moveq   #5,d2
                move.w  d4,d3
                eori.w  #2,d3
                moveq   #$FFFFFFFF,d5
                movea.w #(SortCords-M68K_RAM),a0
                movea.w #(cont1team-M68K_RAM),a1
                cmpi.w  #1,(a1,d4.w)
                beq.w   loc_C002
                adda.w  #$300,a0
loc_C002:                               ; CODE XREF: ROM:0000BFFA   j
                movea.w #(c1playernum-M68K_RAM),a1
loc_C006:                               ; CODE XREF: ROM:0000C088   j
                tst.w   $34(a0)
                ble.w   loc_C084
                btst    #2,$63(a0)
                bne.w   loc_C084
                btst    #3,$62(a0)
                bne.w   loc_C084
                btst    #2,(BA_PS_flags).w
                beq.w   loc_C054
                movem.l d0,-(sp)
                move.w  (BA_Sktr_SCnum).w,d0
                cmp.w   $52(a0),d0
                movem.l (sp)+,d0
                beq.w   loc_C054
                movem.l d0,-(sp)
                move.w  (BA_Goalie_SCnum).w,d0
                cmp.w   $52(a0),d0
                movem.l (sp)+,d0
                bne.w   loc_C084
loc_C054:                               ; CODE XREF: ROM:0000C028   j
                                        ; ROM:0000C03C   j
                btst    #5,$62(a0)
                bne.w   loc_C084
                movem.w (sp),d0-d1
                sub.w   (a0),d0
                muls.w  d0,d0
                sub.w   $14(a0),d1
                muls.w  d1,d1
                add.l   d1,d0
                cmp.l   d5,d0
                bhi.w   loc_C084
                move.w  $52(a0),d1
                cmp.w   (a1,d3.w),d1
                beq.w   loc_C084
                move.l  d0,d5
                move.w  d1,d6
loc_C084:                               ; CODE XREF: ROM:0000C00A   j
                                        ; ROM:0000C014   j ...
                adda.w  #$80,a0
                dbf     d2,loc_C006
                addq.w  #4,sp
                pea     (loc_C0A8).l
                cmp.w   (a1,d4.w),d6
                beq.w   Sweepcheck
                move.w  d6,d0
                tst.w   d4
                beq.w   setc1player
                bra.w   setc2player
; ---------------------------------------------------------------------------
loc_C0A8:                               ; DATA XREF: ROM:0000C08E   o
                movem.l (sp)+,d0-d6/a0-a1
locret_C0AC:                            ; CODE XREF: ROM:0000BFC2   j
                rts


Sweepcheck:                             ; CODE XREF: ROM:0000C098   j
                                        ; skatetopuck+98   j ...
                bset    #5,$62(a3)
                move.w  #$B24,d1
                bra.w   SetSPA
; End of function Sweepcheck


; restore old player and switch to new d0 player on cont. 1
setc1player:                            ; CODE XREF: doinput+33E   j
                                        ; passto+42   p ...
                cmp.w   (c1playernum).w,d0
                beq.w   _ex
                movem.l d1/a0-a1,-(sp)
                move.w  (c1playernum).w,d1
                bsr.w   restorep1
                move.w  d0,(c1playernum).w
                movem.l (sp)+,d1/a0-a1
_ex:                                    ; CODE XREF: setc1player+4   j
                rts
; End of function setc1player


; restore old player and switch to new d0 player on cont. 2
setc2player:                            ; CODE XREF: doinput+342   j
                                        ; passto:_p2passing   p ...
                cmp.w   (c2playernum).w,d0
                beq.w   _ex
                movem.l d1/a0-a1,-(sp)
                move.w  (c2playernum).w,d1
                bsr.w   restorep1
                move.w  d0,(c2playernum).w
                movem.l (sp)+,d1/a0-a1
_ex:                                    ; CODE XREF: setc2player+4   j
                rts
; End of function setc2player


; d1 = old player
restorep1:                              ; CODE XREF: setc1player+10   p
                                        ; setc2player+10   p
                movea.w #(SortCords-M68K_RAM),a0
                tst.w   d1
                blt.w   _spd
                cmp.w   #$B,d1
                bgt.w   _spd
                asl.w   #7,d1           ; multiply d0 by 80 hex (SCsize)
                btst    #3,$63(a0,d1.w) ; #pfnp - no joystick pad
                beq.w   _cont
                lsr.w   #7,d1           ; divide by 80 hex
                move.w  d1,d0
                rts
; ---------------------------------------------------------------------------
_cont:                                  ; CODE XREF: restorep1+1A   j
                bclr    #3,$62(a0,d1.w) ; #pfjoycon
                btst    #3,$64(a0,d1.w) ; bit 3, pflags3
                bne.w   _spd
                bset    #1,$62(a0,d1.w) ; #pfna - new assignment
_spd:                                   ; CODE XREF: restorep1+6   j
                                        ; restorep1+E   j ...
                tst.w   d0              ; checks if d0 0 or higher
                blt.w   _ex
                cmp.w   #$B,d0          ; checks if d0 11 or less
                bgt.w   _ex
                move.w  d0,d1           ; copies d0 into d1
                asl.w   #7,d1
                btst    #2,(BA_PS_flags).w
                bne.w   chkgoalie
                btst    #0,(word_FFC2FA).w
                beq.w   loc_C190
chkgoalie:                              ; CODE XREF: restorep1+52   j
                tst.w   $34(a0,d1.w)
                bne.w   loc_C190
                btst    #6,$62(a0,d1.w) ; check if home or away
                beq.w   loc_C172
                tst.w   (word_FFD05C).w
                bra.w   loc_C176
; ---------------------------------------------------------------------------
loc_C172:                               ; CODE XREF: restorep1+6E   j
                tst.w   (word_FFD05A).w
loc_C176:                               ; CODE XREF: restorep1+76   j
                beq.w   loc_C190
                move.w  #0,d0           ; first position of home SCNum
                btst    #6,$62(a0,d1.w) ; check if home or away
                beq.w   loc_C18C
                move.w  #6,d0           ; first position of away SCNum
loc_C18C:                               ; CODE XREF: restorep1+8C   j
                bra.w   _ex
; ---------------------------------------------------------------------------
loc_C190:                               ; CODE XREF: restorep1+5C   j
                                        ; restorep1+64   j ...
                bset    #3,$62(a0,d1.w) ; set pfjoycon for SCNum
_ex:                                    ; CODE XREF: restorep1+3C   j
                                        ; restorep1+44   j ...
                rts
; End of function restorep1


; look for type of swing (forehand or backhand)
; input d0 = launch dir
Findhittype:                            ; CODE XREF: passmode+1B4   p
                                        ; SetShotMode+58   p
                neg.w   d0
                add.w   $54(a3),d0      ; facedir
                andi.w  #7,d0
                btst    #3,4(a3)        ; attribute bit 3
                beq.w   loc_C1B2
                        d0
; End of function Findhittype
loc_C1B2:                               ; CODE XREF: Findhittype+10   j
                        d0
                ori.b   #$75,(a6)+ ; 'u'


; initiate shot by player a3
SetShotMode:                            ; CODE XREF: ROM:0000B816   j
                                        ; assshoot+14   j
                btst    #2,(BA_PS_flags).w
                beq.w   _start
                bclr    #2,(word_FFC2FA).w
                bset    #5,(BA_PS_flags).w
                bne.w   rtss7
                bclr    #5,(word_FFC2FA).w
                move.w  #$64,(word_FFC31C).w ; 'd'
_start:                                 ; CODE XREF: SetShotMode+6   j
                move.w  #8,(passdir).w  ; default shot direction
                bset    #3,(sflags).w   ; #sfssdir
                clr.w   d0              ; find dx/dy for shot
                move.w  #$128,d1        ; #296
                btst    #7,$62(a3)      ; #pfgoal - which goal to shoot on
                bne.w   _ck0            ; branch if top goal
                neg.w   d1              ; flip if bottom goal
_ck0:                                   ; CODE XREF: SetShotMode+3E   j
                sub.w   (a3),d0         ; Xpos
                sub.w   $14(a3),d1      ; Ypos
                bsr.w   vtoa
                move.w  #$F,(passspeed).w
                move.w  #$7FC,d1        ; #SPAshotf
                bsr.s   Findhittype
                beq.w   _ck1
                move.w  #$92E,d1        ; #SPAshotb
                move.w  #$F,(passspeed).w ; minimum shot speed
_ck1:                                   ; CODE XREF: SetShotMode+5A   j
                bra.w   SetSPA
; End of function SetShotMode


; shot input
ShotMode:                               ; CODE XREF: ROM:0000B754   j
                                        ; assshoot+28   j ...
                cmpi.w  #$1C,$5A(a3)
                bge.w   prepshot        ; end of animation so shoot
                btst    #3,d0
                bne.w   _ss0
                andi.w  #7,d0
                move.w  d0,(passdir).w  ; set shot direction
_ss0:                                   ; CODE XREF: ShotMode+E   j
                cmpi.w  #$10,$5A(a3)
                bge.w   _end            ; past full windup so no more passspeed
                add.w   d7,(passspeed).w
                cmpi.b  #$14,$6C(a3)    ; 6C = shot speed
                bge.w   _checkcbut
                cmpi.w  #8,$5A(a3)      ; SPANum
                bgt.w   _chganim
_checkcbut:                             ; CODE XREF: ShotMode+2E   j
                btst    #5,d2           ; 5 = #cbut
                beq.w   _end            ; button hasnt changed so continue windup
_chganim:                               ; CODE XREF: ShotMode+38   j
                neg.w   $5A(a3)         ; end windup and swing through
                addi.w  #$1C,$5A(a3)    ; Add to SPANum
_end:                                   ; CODE XREF: ShotMode+20   j
                                        ; ShotMode+40   j
                rts
; End of function ShotMode


; Check certain conditions before shooting
prepshot:                               ; CODE XREF: ShotMode+6   j
                bclr    #4,(byte_FFC2F6).w
                move.w  #$B,d0
                btst    #6,$62(a3)      ; check if home or away
                beq.w   _getGoalie      ; gets opponents Goalie SCnum
                move.w  #5,d0           ; opponent is home
_getGoalie:                             ; CODE XREF: prepshot+10   j
                jsr     (getGoalieSCnum).l
                tst.w   d0
                bmi.w   _nogoalie
                movem.l a0,-(sp)
                asl.w   #7,d0
                movea.l #$FFFFB04A,a0
                cmpi.w  #$250,$58(a0,d0.w) ; Checking goalie animations
                beq.w   _svgoalie
                cmpi.w  #$2A2,$58(a0,d0.w) ; Checking another goalie animation
_svgoalie:                              ; CODE XREF: prepshot+36   j
                movem.l (sp)+,a0        ; pop stack value into a0
                bne.w   _cont
_nogoalie:                              ; CODE XREF: prepshot+20   j
                cmpi.w  #1,(passdir).w
                ble.w   _dir017         ; branch if passdir is 0 or 1
                cmpi.w  #7,(passdir).w
                bne.w   _cont           ; branch if passdir is not 7
_dir017:                                ; CODE XREF: prepshot+4E   j
                move.w  (pucky).w,d0
                btst    #7,$62(a3)      ; #pfgoal - goal to shoot at (0=bottom, 1=top)
                bne.w   _cmppuck        ; branch if top
                neg.w   d0              ; flips d0 for compare calc
_cmppuck:                               ; CODE XREF: prepshot+66   j
                cmp.w   #$D8,d0         ; compares location of puck
                blt.w   _cont
                bset    #4,(byte_FFC2F6).w
_cont:                                  ; CODE XREF: prepshot+44   j
                                        ; prepshot+58   j ...
                bra.w   *+4
; End of function prepshot


; stick is at puck so launch puck toward goal
; a3 = shooter
doshot:                                 ; CODE XREF: prepshot:_cont   j
                                        ; onetimershot+6   p
                movem.l d0-d7/a0-a3,-(sp)
                bclr    #4,(word_FFC2FA).w
                btst    #1,$64(a3)      ; check if player on breakaway
                beq.w   _cont
                bset    #4,(word_FFC2FA).w ; set if breakaway
_cont:                                  ; CODE XREF: doshot+10   j
                bsr.w   sub_C566
                move.w  #5,-(sp)        ; #SFXshotwiff - sound effect
                move.w  $52(a3),(shotplayer).w
                bclr    #3,(sflags).w   ; #sfssdir - shot direction mode
                bset    #5,$62(a3)      ; #pfalock
                btst    #3,$64(a3)      ; check if shooting one timer
                bne.w   _shottype       ; jump if yes
                move.w  (puckc).w,d0    ; puck carrier SCnum into d0
                cmp.w   $52(a3),d0      ; is player puck carrier?
                bne.w   _ex             ; wiffed shot
_shottype:                              ; CODE XREF: doshot+3A   j
                move.w  #$18,(sp)       ; #SFXshotfh
                bset    #4,(sflags2).w  ; #sf2shot - shot was taken
                cmpi.w  #$92E,$58(a3)   ; #SPAshotb
                bne.w   _nbh            ; no backhand
                move.w  #$14,(sp)       ; #SFXshotbh
                move.w  (passspeed).w,d0
                lsr.w   #2,d0           ; sub 25% for backhand shots
                sub.w   d0,(passspeed).w
_nbh:                                   ; CODE XREF: doshot+5A   j
                btst    #3,$64(a3)      ; check if shooting one timer
                beq.w   _cont2          ; jump if not
                movem.l d0-d1,-(sp)     ; push d0-d1 on stack
                move.w  #$1F,d0         ; 1F into d0 - one timer min speed
                move.w  d0,(passspeed).w ; make passspeed start with a higher value
                movem.l (sp)+,d0-d1     ; Pop off stack d0-d1
_cont2:                                 ; CODE XREF: doshot+72   j
                clr.w   d0
                move.b  $6C(a3),d0      ; 6C = shotspd (ShP)
                lsr.b   #1,d0           ; divide by 2
                movea.l a3,a0
                jsr     (makepde).l
                addi.w  #$14,d0
                mulu.w  (passspeed).w,d0 ; shot speed ranged by energy level
                mulu.w  #$5249,d0       ; ($4000*45)/35
                swap    d0
                move.w  d0,(passspeed).w
                btst    #0,$6C(a3)      ; checks if ShP value is even or odd
                beq.w   even
                asr.w   #4,d0           ; divide by 16
                add.w   (passspeed).w,d0 ; add passspeed to d0
even:                                   ; CODE XREF: doshot+AE   j
                lsr.w   #4,d0           ; divide by 16 (d0 is passspeed)
                neg.w   d0              ; negative
                addq.w  #3,d0           ; add 3 to d0
                bpl.w   _nbh2
                clr.w   d0              ; clear if negative
_nbh2:                                  ; CODE XREF: doshot+BE   j
                add.w   d0,(sp)         ; add to stack current value
                st      (puckc).w       ; clear puck carrier
                move.b  #$10,$5E(a3)    ; 5E = nopuck - no puck collision till 0
                move.w  $52(a3),(lastplayer).w ; SCNum
                move.w  #$108,d1        ; $108 = top goal line Y position
                btst    #7,$62(a3)      ; pfgoal, pflags
                bne.w   _0
                neg.w   d1              ; flip d1 if shooting down
_0:                                     ; CODE XREF: doshot+E0   j
                move.w  (passdir).w,d2
                asl.w   #2,d2           ; mult by 4
                lea     shotsets(pc),a0 ; table of shot directions
                move.w  (a0,d2.w),d0    ; xoffset
                move.w  2(a0,d2.w),d2   ; z offset
                sub.w   (puckx).w,d0
                sub.w   (pucky).w,d1
                movem.w d0-d2,-(sp)     ; push d0-d2 on stack
                muls.w  d0,d0
                muls.w  d1,d1
                add.l   d1,d0
                bsr.w   sroot
                tst.w   d0              ; distance in pix to goal
                bne.w   _1
                addq.w  #1,d0
_1:                                     ; CODE XREF: doshot+110   j
                move.w  d0,d3
                btst    #4,(gmode).w    ; check if highlight (always perfect)
                bne.w   _perf
                cmp.w   #$C8,d3         ; C8 = 200 decimal
                bhi.w   _notperf        ; too far away from perfect shot
                jsr     (ReadGoaliePulled).l
                bmi.w   _perf
                btst    #0,(word_FFC2FA).w
                bne.w   _perf
                moveq   #$10,d0
                add.b   $6D(a3),d0      ; shotacc(a3)
                bsr.w   randomd0
                cmp.w   #$E,d0          ; chance of perfect shot
                bgt.w   _perf           ; is perfect
_notperf:                               ; CODE XREF: doshot+126   j
                clr.w   d0
                move.b  $6D(a3),d0      ; shotacc(a3)
                lsr.w   #1,d0           ; divide by 2
                move.b  d0,-(sp)        ; push on stack
                move.w  (passspeed).w,d0
                lsr.w   #4,d0           ; divide by 16
                sub.b   (sp)+,d0        ; shotacc(a3)
                addi.b  #$10,d0
                mulu.w  d3,d0
                lsr.w   #6,d0           ; shot accuracy adjust
                cmp.w   #$FA,d3
                bhi.w   _chkvalue
                lsr.w   #1,d0           ; shot accuracy adjust
_chkvalue:                              ; CODE XREF: doshot+16E   j
                cmp.w   #$88,d0
                blt.w   _cont3
                move.w  #$88,d0         ; sets max value for d0
_cont3:                                 ; CODE XREF: doshot+178   j
                move.w  d0,-(sp)        ; push on stack
                bsr.w   randomd0s
                add.w   d0,2(sp)        ; x dist
                move.w  (sp),d0         ; pop stack
                cmp.w   #$3C,d0 ; '<'
                bls.w   _lessx
                moveq   #$3C,d0 ; '<'   ; sets max x distance
                move.w  d0,(sp)
_lessx:                                 ; CODE XREF: doshot+190   j
                tst.w   4(sp)
                bpl.w   _ycalc
                lsr.w   #1,d0           ; divide d0 by 2
_ycalc:                                 ; CODE XREF: doshot+19C   j
                bsr.w   randomd0s
                add.w   d0,4(sp)        ; y dist
                move.w  (sp)+,d0
                lsr.w   #1,d0           ; divide by 2
                bsr.w   randomd0
                add.w   d0,4(sp)
_perf:                                  ; CODE XREF: doshot+11E   j
                                        ; doshot+130   j ...
                move.w  (passspeed).w,d2 ; shot speed
                muls.w  #$44,d2 ; 'D'   ; 1024/15
                muls.w  (sp)+,d2
                divs.w  d3,d2
                move.w  d2,(puckvx).w
                move.w  (passspeed).w,d2
                muls.w  #$44,d2 ; 'D'   ; 1024/15
                muls.w  (sp)+,d2
                divs.w  d3,d2
                move.w  d2,(puckvy).w
                move.w  #$8000,d1
                btst    #7,$62(a3)      ; check direction of shooting net
                beq.w   loc_C4D8        ; branch if bottom goal
                clr.w   d1
loc_C4D8:                               ; CODE XREF: doshot+1E0   j
                eor.w   d2,d1
                bpl.w   loc_C4F4
                move.w  #$3810,(puckvy).w
                btst    #7,$62(a3)
                bne.w   loc_C4F4
                move.w  #$C7F0,(puckvy).w
loc_C4F4:                               ; CODE XREF: doshot+1E8   j
                                        ; doshot+1F8   j
                move.w  (sp)+,d1        ; pix height in goal
                beq.w   _ex
                mulu.w  (passspeed).w,d1
                mulu.w  #$44,d1 ; 'D'   ; 1024/15
                divu.w  d3,d1           ; d3 = distance in pix to goal
                mulu.w  #$B33,d3        ; (1024*42)/15
                divu.w  (passspeed).w,d3
                add.w   d1,d3
                cmp.w   #$1800,d3
                bls.w   _noup
                move.w  #$1800,d3
_noup:                                  ; CODE XREF: doshot+220   j
                move.w  d3,(puckvz).w
                bclr    #4,(byte_FFC2F6).w
                beq.w   _ex
                btst    #3,$64(a3)      ; check if one timer
                bne.w   _ex
                jsr     (onetimershotadj).l
_ex:                                    ; CODE XREF: doshot+46   j
                                        ; doshot+204   j ...
                bsr.w   sfx
                movem.l (sp)+,d0-d7/a0-a3
                rts
; End of function doshot
; ---------------------------------------------------------------------------
shotsets:       dc.w 0                  ; DATA XREF: doshot+EC   o
                                        ; offsets for different directions on the shot
                dc.w $C
                dc.w $10
                dc.w $C
                dc.w $10
                dc.w 6
                dc.w $10
                dc.w 0
                dc.w 0
                dc.w 0
                dc.w $FFF0
                dc.w 0
                dc.w $FFF0
                dc.w 6
                dc.w $FFF0
                dc.w $C
                dc.w 0
                dc.w 6


; a3 = shooter
sub_C566:                               ; CODE XREF: doshot:_cont   p
                btst    #3,$64(a3)      ; check if shooting one timer
                bne.w   loc_C57A        ; jump if shooting one timer
                btst    #3,$62(a3)      ; pfjoycon - checks if player is joystick controlled
                bne.w   _ex             ; exit if joystick
loc_C57A:                               ; CODE XREF: sub_C566+6   j
                moveq   #8,d0
                moveq   #5,d1
                movea.w #(unk_FFAFCA-M68K_RAM),a0 ; ??
                btst    #6,$62(a3)      ; pfteam - check if home or away
                bne.w   _loop           ; jump if away
                adda.w  #$300,a0
_loop:                                  ; CODE XREF: sub_C566+22   j
                                        ; sub_C566+32   j
                adda.w  #$80,a0
                tst.w   $34(a0)         ; check if goalie. Find opponents goalie
                dbeq    d1,_loop
                bne.w   loc_C624
                move.b  $28(a0),d0      ; Xvel
                ext.w   d0
                asr.w   #1,d0
                add.w   (a0),d0         ; Xpos
                sub.w   (puckx).w,d0
                move.b  $2A(a0),d1      ; Yvel
                ext.w   d1
                asr.w   #1,d1
                add.w   $14(a0),d1      ; Ypos
                sub.w   (pucky).w,d1
                movem.w d0-d1,-(sp)
                muls.w  d0,d0
                muls.w  d1,d1
                add.l   d1,d0
                addq.l  #1,d0
                bsr.w   sroot
                move.w  d0,d2
                movem.w (sp)+,d0-d1
                moveq   #$12,d3         ; post?
                move.w  #$108,d4        ; Goal line
                btst    #7,$62(a3)      ; check which goal shooting at
                bne.w   loc_C5E6        ; jump if top goal
                neg.w   d4              ; negate if bottom goal
loc_C5E6:                               ; CODE XREF: sub_C566+7A   j
                movem.w d3-d4,-(sp)
                bsr.w   sub_C644
                move.w  d4,d5
                movem.w (sp)+,d3-d4
                neg.w   d3
                bsr.w   sub_C644
                add.w   d5,d4
                clr.w   d0
                cmp.w   #$2C,d4 ; ','   ; 2C - X edge of crease?
                bgt.w   loc_C624
                cmp.w   #$FFD4,d4       ; FFD4 - X edge of crease?
                blt.w   loc_C624
                btst    #7,$62(a3)
                beq.w   loc_C61A
                neg.w   d4
loc_C61A:                               ; CODE XREF: sub_C566+AE   j
                moveq   #2,d0
                tst.w   d4
                bpl.w   loc_C624
                moveq   #6,d0
loc_C624:                               ; CODE XREF: sub_C566+36   j
                                        ; sub_C566+9C   j ...
                move.w  d0,(passdir).w
                btst    #2,(BA_PS_flags).w
                bne.w   loc_C63C
                btst    #0,(word_FFC2FA).w
                beq.w   _ex
loc_C63C:                               ; CODE XREF: sub_C566+C8   j
                jsr     (sub_FE71C).l
_ex:                                    ; CODE XREF: sub_C566+10   j
                                        ; sub_C566+D2   j
                rts
; End of function sub_C566


sub_C644:                               ; CODE XREF: sub_C566+84   p
                                        ; sub_C566+90   p
                sub.w   (puckx).w,d3
                sub.w   (pucky).w,d4
                muls.w  d0,d4
                muls.w  d1,d3
                sub.l   d3,d4
                divs.w  d2,d4
                rts
; End of function sub_C644


; copy info into pad cont so graphics know which player/number
sub_C656:                               ; CODE XREF: ROM:0000A1C8   p
                                        ; updateplayers+306   p ...
                movem.l d0-d1,-(sp)
                moveq   #2,d0
                add.w   d4,d0
                add.w   d0,d0
                move.w  #$FFF0,d1
                rol.w   d0,d1
                and.w   d1,(word_FFBE78).w
                move.w  $52(a3),d1
                asl.w   d0,d1
                or.w    d1,(word_FFBE78).w
                movem.l (sp)+,d0-d1
rtss3:                                  ; CODE XREF: check4bench+6   j
                                        ; check4bench+E   j ...
                rts
; End of function sub_C656


check4bench:                            ; CODE XREF: assbench+14   p
                                        ; assdefo+12   p ...
                btst    #2,(BA_PS_flags).w
                bne.s   rtss3
                btst    #3,$62(a3)
                bne.s   rtss3
                btst    #4,$63(a3)
                bne.s   rtss3
                tst.b   $60(a3)
                bpl.w   loc_C6A0
                tst.b   $61(a3)
                bmi.s   rtss3
loc_C6A0:                               ; CODE XREF: check4bench+1C   j
                move.b  $61(a3),d0
                cmp.b   $66(a3),d0
                beq.w   loc_C6D8
                move.w  $36(a3),d0
                cmpi.b  #$B,$38(a3,d0.w)
                beq.s   rtss3
                move.w  $52(a3),d0
                cmp.w   (puckc).w,d0
                beq.s   rtss3
                addq.w  #4,sp
                bset    #2,$63(a3)      ; set player unavailable (pf2unav)
                clr.w   $40(a3)
                move.l  #$B,d0          ; assbench
                bra.w   assreplace
; ---------------------------------------------------------------------------
loc_C6D8:                               ; CODE XREF: check4bench+2E   j
                addq.w  #4,sp
                bclr    #2,$63(a3)
                bclr    #2,$62(a3)
                st      $61(a3)
                st      $60(a3)
                move.w  $34(a3),d0
                tst.b   $60(a3)
                bpl.w   loc_C700
                jmp     Setplass
; ---------------------------------------------------------------------------
loc_C700:                               ; CODE XREF: check4bench+7C   j
                move.b  $60(a3),d0
                ext.w   d0
                move.w  d0,$34(a3)
                jmp     Setplass
; End of function check4bench


; player a3 should go to bench
assbench:                               ; DATA XREF: ROM:00018DA8   o
                btst    #5,$62(a3)
                bne.w   rtss3
                cmpi.w  #$64,$40(a3) ; 'd'
                beq.w   _done
                bsr.w   check4bench
                btst    #4,$63(a3)
                bne.w   assexit
                bclr    #1,$62(a3)
                beq.w   _nna
                move.w  #8,$42(a3)
                moveq   #$50,d0 ; 'P'
                btst    #6,$62(a3)
                bne.w   _0
                neg.w   d0
_0:                                     ; CODE XREF: assbench+3A   j
                move.w  d0,$46(a3)
                move.w  #$88,$44(a3)
                neg.w   $44(a3)
                subq.w  #8,$44(a3)
                clr.w   $40(a3)
_nna:                                   ; CODE XREF: assbench+28   j
                move.b  $61(a3),d0
                cmp.b   $66(a3),d0
                beq.w   _nobench
                sub.w   d7,$40(a3)
                bpl.w   _nodec
                addq.w  #8,$40(a3)
                move.w  $14(a3),d0
                sub.w   $46(a3),d0
                cmp.w   #$28,d0 ; '('
                bgt.w   _nodec
                cmp.w   #$FFD8,d0
                blt.w   _nodec
                move.w  (a3),d0
                sub.w   $44(a3),d0
                cmp.w   #$20,d0 ; ' '
                bgt.w   _nodec
                move.w  #$50C,d1
                tst.w   $34(a3)
                bne.w   _gli
                move.w  #2,d1
_gli:                                   ; CODE XREF: assbench+9C   j
                bsr.w   SetSPA
                bset    #2,$62(a3)
                cmpi.w  #4,$54(a3)
                beq.w   _ok
                addq.w  #1,$54(a3)
                andi.w  #7,$54(a3)
_ok:                                    ; CODE XREF: assbench+B4   j
                clr.w   $2A(a3)
                move.w  #$F800,$28(a3)
                cmp.w   #$10,d0
                bgt.w   locret_C812
                clr.w   $28(a3)
                cmpi.w  #4,$54(a3)
                bne.w   locret_C812
                move.w  #$F800,$28(a3)
                move.w  #2,$54(a3)
                move.w  #$FAC,d1
                bsr.w   SetSPA
                bset    #5,$62(a3)
                move.w  #$64,$40(a3) ; 'd'
locret_C812:                            ; CODE XREF: assbench+D0   j
                                        ; assbench+DE   j ...
                rts
; ---------------------------------------------------------------------------
_done:                                  ; CODE XREF: assbench+10   j
                clr.w   6(a3)
                clr.w   d0
                move.b  $66(a3),d0
                add.w   d0,d0
                movea.l #$FFFFC6CE,a0
                btst    #6,$62(a3)
                beq.w   _t0
                adda.w  #$364,a0
_t0:                                    ; CODE XREF: assbench+11C   j
                move.w  #$FFFE,$66(a0,d0.w)
                move.b  $61(a3),d3
                bsr.w   _nobench2
                jmp     setplayer
; ---------------------------------------------------------------------------
_nodec:                                 ; CODE XREF: assbench+66   j
                                        ; assbench+7A   j ...
                btst    #2,$62(a3)
                bne.s   locret_C812
                move.w  $44(a3),d0
                move.w  $46(a3),d1
                movea.l #$E594,a0
                bra.w   skateto
; ---------------------------------------------------------------------------
_nobench:                               ; CODE XREF: assbench+5E   j
                bclr    #2,$63(a3)
; End of function assbench


_nobench2:                              ; CODE XREF: assbench+12E   p
                move.b  $60(a3),d0
                ext.w   d0
                move.w  d0,$34(a3)
                jsr     (Setplass).l
                st      $61(a3)
                st      $60(a3)
; End of function _nobench2
rtss4:                                  ; CODE XREF: assben+6   j
                                        ; asspenalty+6   j ...
                rts


; player a3 should exit bench area
assben:                                 ; DATA XREF: ROM:00018DA0   o
                btst    #5,$62(a3)
                bne.s   rtss4
                bclr    #1,$62(a3)
                beq.w   loc_C8CA
                clr.w   $28(a3)
                clr.w   $2A(a3)
                move.w  $52(a3),d0
                subq.w  #6,d0
                bmi.w   loc_C8A8
                addq.w  #1,d0
loc_C8A8:                               ; CODE XREF: assben+20   j
                muls.w  #$E,d0
                move.w  d0,$14(a3)
                move.w  #$88,(a3)
                neg.w   (a3)
                move.w  #2,$54(a3)
                bset    #5,$62(a3)
                move.w  #$F6E,d1
                bra.w   SetSPA
; ---------------------------------------------------------------------------
loc_C8CA:                               ; CODE XREF: assben+E   j
                move.w  #4,$54(a3)
                bclr    #2,$62(a3)
                bclr    #5,$63(a3)
                bclr    #2,$63(a3)
                clr.w   $58(a3)
                move.w  #$1000,$28(a3)
                bra.w   assexit
; End of function assben


; player a3 should go to penalty box
asspenalty:                             ; DATA XREF: ROM:00018DAC   o
                btst    #5,$62(a3)
                bne.s   rtss4
                bclr    #1,$62(a3)
                beq.w   _nna
                bset    #2,$63(a3)      ; set player unavailable (pf2unav)
                bsr.w   _clrplayer
                moveq   #$FFFFFFFE,d4   ; move -2 into d4
                bsr.w   sub_C656        ; moves player number into a temp value so graphics know who it is
                move.w  #8,$42(a3)      ; move 8 into temp2
                moveq   #$B,d0          ; move 11 dec into d0
                move.b  (PBnum).w,d1    ; gets number of players in PB. 00HV (H=Home, V=Visitors)
                btst    #6,$62(a3)      ; checks if player is home or away
                bne.w   _0              ; branch if away
                lsr.w   #4,d1           ; shift 4 bits to get Home players in PB
                neg.w   d0              ; make d0 negative (different box)
_0:                                     ; CODE XREF: asspenalty+34   j
                andi.w  #$F,d1          ; pass the first 4 bits of d1 (the team's player total in PB)
                cmp.w   #2,d1           ; compare to 2
                bls.w   _1              ; branch if less than (1 player in box or less)
                moveq   #2,d1           ; add 2 if more than 1 player in box
_1:                                     ; CODE XREF: asspenalty+44   j
                addq.w  #3,d1           ; add 3 to d1
                muls.w  d0,d1           ; mult d0 with d1, store result in d1
                move.w  d1,$46(a3)      ; move d1 into temp4 (skateto YPos)
                move.w  #$88,$44(a3)    ; move 136 decimal into temp3 (skateto XPos)
                clr.w   $40(a3)         ; clear temp1
                bset    #5,$63(a3)      ; set bit for no player collision
                clr.w   $4E(a3)         ; clear wallCos (angle of last collision)
                clr.w   $50(a3)         ; clear wallSin (angle of last collision)
_nna:                                   ; CODE XREF: asspenalty+E   j
                move.w  $14(a3),d0      ; Current Ypos of player
                sub.w   $46(a3),d0      ; sub temp4 (Y pos to skate to) from Ypos
                cmp.w   #$C,d0          ; compare to 13 decimal
                bgt.w   _st             ; branch if greater than (still skateto)
                                        ; If its within 13 decimal, it will start the animation for hopping over the board
                cmp.w   #$FFF4,d0
                blt.w   _st
                move.w  (a3),d0
                sub.w   $44(a3),d0
                cmp.w   #$FFE8,d0
                blt.w   _st
                sub.w   d7,$40(a3)
                bpl.w   rtss4
                addq.w  #8,$40(a3)
                bset    #2,$62(a3)
                move.w  #$50C,d1
                bsr.w   SetSPA
                moveq   #6,d2
                tst.b   $76(a3)
                beq.w   _left
                moveq   #2,d2
_left:                                  ; CODE XREF: asspenalty+B0   j
                cmp.w   $54(a3),d2
                beq.w   _ok
                addq.w  #1,$54(a3)
                andi.w  #7,$54(a3)
_ok:                                    ; CODE XREF: asspenalty+BA   j
                clr.w   $2A(a3)
                move.w  #$1000,$28(a3)
                cmp.w   #$FFF8,d0
                blt.w   rtss4
                clr.w   $28(a3)
                cmp.w   $54(a3),d2
                bne.w   rtss4
                bset    #5,$62(a3)
                move.w  #2,$54(a3)
                move.w  #$F6E,d1
                bsr.w   SetSPA
                bclr    #4,$63(a3)
                move.l  #$D,d0          ; assdopen
                bra.w   assreplace
; ---------------------------------------------------------------------------
_st:                                    ; CODE XREF: asspenalty+76   j
                                        ; asspenalty+7E   j ...
                move.w  $44(a3),d0
                move.w  $46(a3),d1
                movea.l #rtss2,a0
                bra.w   skateto
; ---------------------------------------------------------------------------
_clrplayer:                             ; CODE XREF: asspenalty+18   p
                btst    #3,$62(a3)
                beq.w   rtss4
                clr.w   d4
                move.w  $52(a3),d0
                cmp.w   (c1playernum).w,d0
                beq.w   changeplayer
                moveq   #2,d4
                bra.w   changeplayer
; End of function asspenalty


; add player a3 to penalty box
assdopen:                               ; DATA XREF: ROM:00018DB0   o
                btst    #5,$62(a3)
                bne.w   rtss4
                moveq   #$10,d0
                btst    #6,$62(a3)
                beq.w   _1
                moveq   #1,d0
_1:                                     ; CODE XREF: assdopen+12   j
                add.b   d0,(PBnum).w
                st      $34(a3)
                clr.w   6(a3)
                rts
; End of function assdopen


; player a3 should exit penalty area
assepen:                                ; DATA XREF: ROM:00018DA4   o
                btst    #5,$62(a3)
                bne.w   rtss4
                bclr    #1,$62(a3)
                beq.w   _nna
                bset    #2,$62(a3)      ; set player in no collision mode
                bset    #2,$63(a3)      ; set player unavailable
                moveq   #$10,d0
                moveq   #$FFFFFFC4,d1
                btst    #6,$62(a3)
                beq.w   _0
                moveq   #1,d0
                neg.w   d1
_0:                                     ; CODE XREF: assepen+2A   j
                sub.b   d0,(PBnum).w
                move.w  d1,$14(a3)
                clr.w   $28(a3)
                clr.w   $2A(a3)
                move.w  #$86,(a3)
                move.w  #2,$54(a3)
                bset    #5,$62(a3)
                move.w  #$FAC,d1
                bsr.w   SetSPA
                jmp     SprSort
; ---------------------------------------------------------------------------
_nna:                                   ; CODE XREF: assepen+10   j
                move.w  #4,$54(a3)
                st      $61(a3)
                st      $60(a3)
                bclr    #3,$62(a3)
                bclr    #2,$62(a3)
                bclr    #5,$63(a3)
                bclr    #2,$63(a3)
                move.w  #$F000,$28(a3)
                bra.w   assexit
; End of function assepen


; moves the goalie not being used during shootout/pen shot off the screen
; a3 = goalie who is to be taken off ice
assgoaliebreakwait:                     ; DATA XREF: ROM:00018DFC   o
                btst    #5,$62(a3)      ; check if animation locked
                bne.w   _exit           ; exit if so
                btst    #2,(BA_PS_flags).w ; check if pen shot
                bne.w   _1              ; branch if so
                btst    #0,(word_FFC2FA).w ; check for shootout
                bne.w   _1              ; branch if so
                nop
                bra.w   assexit
; ---------------------------------------------------------------------------
_1:                                     ; CODE XREF: assgoaliebreakwait+10   j
                                        ; assgoaliebreakwait+1A   j
                clr.w   $28(a3)         ; clear Xvel
                clr.w   $2A(a3)         ; clear Yvel
                movem.l d0/a0,-(sp)     ; push d0 and a0 on stack
                movea.l #$FFFFB04A,a0   ; Home SC Sctruct start
                move.w  (BA_Goalie_SCnum).w,d0 ; move Goalie SCNum into d0
                asl.w   #7,d0           ; shift d0 7 bits left
                adda.w  d0,a0           ; add d0 to address a0
                move.w  #$191,$14(a3)   ; move 401 decimal into Ypos
                btst    #7,$62(a0)      ; check if shooting up or down (a0 is goalie being shot on)
                bne.w   _popstack       ; branch if shooting up
                move.w  #$FE6F,$14(a3)  ; move -191 decimal into Ypos (goalie not being shot on)
_popstack:                              ; CODE XREF: assgoaliebreakwait+4A   j
                movem.l (sp)+,d0/a0
_exit:                                  ; CODE XREF: assgoaliebreakwait+6   j
                rts
; End of function assgoaliebreakwait


; players do nothing until faceoff is over
assfaceoff:                             ; DATA XREF: ROM:00018DD4   o
                btst    #5,$62(a3)
                bne.w   _exit
                btst    #0,(sflags2).w
                beq.w   assexit
_exit:                                  ; CODE XREF: assfaceoff+6   j
                rts
; End of function assfaceoff


; assignment for players actually participating in faceoff
; a3 = player
assfaceoffpl:                           ; DATA XREF: ROM:00018DD8   o
                btst    #5,$62(a3)
                bne.w   _exit2
                btst    #0,(sflags2).w
                beq.w   exit
                bclr    #1,$62(a3)
                beq.w   _nna
                clr.w   $40(a3)
_nna:                                   ; CODE XREF: assfaceoffpl+1A   j
                movea.l #$FFFFBDA8,a0
                btst    #6,$62(a3)
                beq.w   _0
                addq.w  #4,a0
_0:                                     ; CODE XREF: assfaceoffpl+2E   j
                move.w  $5A(a3),d0
                lsr.w   #2,d0
                addq.w  #1,d0
                tst.b   $76(a3)
                bne.w   _lefty
                addq.w  #3,d0
_lefty:                                 ; CODE XREF: assfaceoffpl+40   j
                move.w  d0,(a0)
                btst    #3,$62(a3)
                bne.w   _exit2
                bset    #1,$63(a3)
                bne.w   _exit2
                move.w  #$FEA,d1
                cmpi.w  #$10,(word_FFB78A).w
                bls.w   _d
                moveq   #8,d0
                bsr.w   randomd0
                tst.w   d0
                beq.w   _d
                move.w  #$1014,d1
_d:                                     ; CODE XREF: assfaceoffpl+66   j
                                        ; assfaceoffpl+72   j
                bset    #1,$63(a3)
                bra.w   SetSPA
; ---------------------------------------------------------------------------
exit:                                   ; CODE XREF: assfaceoffpl+10   j
                move.b  #$14,$5E(a3)
                bra.w   assexit
; ---------------------------------------------------------------------------
_exit2:                                 ; CODE XREF: assfaceoffpl+6   j
                                        ; assfaceoffpl+4E   j ...
                rts
; End of function assfaceoffpl
; ---------------------------------------------------------------------------
assfight:                               ; DATA XREF: ROM:00018DCC   o
                rts                     ; assfight - possible location where fighting logic used to be
; ---------------------------------------------------------------------------
assfwatch:                              ; CODE XREF: assnothing+6   j
                                        ; assnothing+E   j ...
                rts                     ; assfwatch - possible location where players watching fight


; player should do nothing
assnothing:                             ; CODE XREF: assdefo+E   j
                                        ; assdefd+10   j ...
                btst    #5,$62(a3)      ; #pfalock
                bne.s   assfwatch
                btst    #3,$62(a3)      ; #pfjoycon
                bne.s   assfwatch
                moveq   #8,d0
                bra.w   doplayeracc
; End of function assnothing


; player skates with stanley cup overhead
assstanley:                             ; DATA XREF: ROM:00018D9C   o
                btst    #5,$62(a3)
                bne.s   assfwatch
                bclr    #1,$62(a3)
                beq.w   _nna
                move.w  #$5A,$44(a3) ; 'Z'
                tst.w   (Hpos).w
                bpl.w   _0
                neg.w   $44(a3)
_0:                                     ; CODE XREF: assstanley+1C   j
                move.w  (Vpos).w,$46(a3)
                move.w  #$109E,d1
                bsr.w   SetSPA
_nna:                                   ; CODE XREF: assstanley+E   j
                move.w  $44(a3),d0
                sub.w   (a3),d0
                move.w  $46(a3),d1
                sub.w   $14(a3),d1
                bsr.w   vtoa
                cmp.w   #7,d0
                bgt.s   assfwatch
                move.w  d0,d2
                move.w  d2,$54(a3)
                bra.w   playeracc
; End of function assstanley


; player a3 celebrates, if scoreing player then do arm pump
assscore:                               ; DATA XREF: ROM:00018D98   o
                btst    #5,$62(a3)
                bne.s   assfwatch
                bclr    #1,$62(a3)
                beq.w   _nna
                bsr.w   _1
                move.w  #8,$42(a3)
                move.w  #$5A,$44(a3) ; 'Z'
                tst.w   (Hpos).w
                bpl.w   _0
                neg.w   $44(a3)
_0:                                     ; CODE XREF: assscore+26   j
                move.w  (Vpos).w,$46(a3)
_nna:                                   ; CODE XREF: assscore+E   j
                movea.l #rtss2,a0
                move.w  $44(a3),d0
                move.w  $46(a3),d1
                btst    #0,(word_FFC2FA).w ; start of code not in 92
                beq.w   loc_CCC2
                tst.w   (word_FFDED0).w
                beq.w   loc_CCB0
                subq.w  #1,(word_FFDED0).w
                bne.w   loc_CCB0
                bset    #2,(sflags2).w
loc_CCB0:                               ; CODE XREF: assscore+50   j
                                        ; assscore+58   j
                cmpi.w  #$88,(a3)
                bgt.w   loc_CCC0
                cmpi.w  #$FF78,(a3)
                bgt.w   loc_CCC2
loc_CCC0:                               ; CODE XREF: assscore+66   j
                clr.w   d1              ; end of code not in 92
loc_CCC2:                               ; CODE XREF: assscore+48   j
                                        ; assscore+6E   j
                sub.w   d7,$40(a3)
                bpl.w   _ckcon
                bset    #5,$62(a3)
                move.w  #$E8A,d1
                move.w  (shotplayer).w,d0
                cmp.w   $52(a3),d0
                bne.w   _nopump
                move.w  #$EFC,d1
_nopump:                                ; CODE XREF: assscore+8E   j
                bsr.w   SetSPA
_1:                                     ; CODE XREF: assscore+12   p
                moveq   #$78,d0 ; 'x'
                bsr.w   randomd0
                move.w  d0,$40(a3)
                rts
; ---------------------------------------------------------------------------
_ckcon:                                 ; CODE XREF: assscore+78   j
                btst    #3,$62(a3)
                beq.w   skateto
rtss6:                                  ; CODE XREF: assdefo+6   j
                                        ; assdefo+1C   j ...
                rts
; End of function assscore


; player a3 is defensive player on offense
assdefo:                                ; DATA XREF: ROM:00018D80   o
                btst    #5,$62(a3)
                bne.s   rtss6
                btst    #0,(gmode).w    ; #gmclock
                bne.w   assnothing      ; Whistle blown, do nothing
                bsr.w   check4bench     ; check if player should go to bench
                btst    #3,$62(a3)      ; #pfjoycon - is player joystick controlled
                bne.s   rtss6           ; yes, then exit
                bclr    #1,$62(a3)      ; #pfna - checks if theres a new assignment
                beq.w   _nna
                clr.w   $40(a3)         ; clears temp1 if new assignment
                move.w  #8,$42(a3)      ; moves 8 into temp2 if new assignment
_nna:                                   ; CODE XREF: assdefo+24   j
                sub.b   d7,$40(a3)      ; subtract frames elapsed since last call from temp1
                bpl.w   _nodec          ; temp1 not zero or negative
                move.b  $6A(a3),$40(a3) ; Loads aioff into temp1
                jsr     (ReadGoaliePulled).l
                bmi.w   _boost          ; branch if goalie is pulled
                btst    #6,(byte_FFC2FC).w ; check if crowd meter broken
                beq.w   _noboost        ; branch if not
                tst.b   $40(a3)         ; check if temp1 is 0
                beq.w   _noboost        ; branch if so
_boost:                                 ; CODE XREF: assdefo+46   j
                subq.b  #1,$40(a3)      ; sub 1 from temp1
_noboost:                               ; CODE XREF: assdefo+50   j
                                        ; assdefo+58   j
                move.l  #2,d0           ; assdefd
                btst    #4,$30(a2)      ; check if team is offsides
                bne.w   assreplace      ; if so, assreplace (assdefd)
                move.w  (pucky).w,d1    ; move pucky into d1
                btst    #7,$62(a3)      ; #pfgoal - check which net to score on
                bne.w   _de1            ; branch if top
                neg.w   d1              ; Negates d1- shooting on bottom net
_de1:                                   ; CODE XREF: assdefo+7A   j
                cmp.w   #$5D,d1 ; ']'   ; slightly above top blueline - checks Y position of puck
                blt.w   assreplace      ; not in offensive zone, change assignment
                move.w  (puckc).w,d1    ; puck carrier (SCnum) into d1
                bmi.w   _nodec          ; branch if no puckc
                subq.w  #6,d1           ; sub 6 from d1
                move.w  $52(a3),d2      ; move SCnum into d2
                subq.w  #6,d2           ; sub 6 from d2
                eor.w   d2,d1           ; EOR d2 with d1
                bmi.w   assreplace      ; ass replace if puckc not on same team
_nodec:                                 ; CODE XREF: assdefo+36   j
                                        ; assdefo+8C   j
                lea     EvadePC(pc),a0  ; EvadePC, extra collision routine for skateto
                moveq   #$50,d0 ; 'P'   ; move 80 dec into d0
                cmpi.w  #2,$34(a3)      ; position(a3) - checks that player is RD
                beq.w   _1              ; branch if RD
                neg.w   d0              ; player is LD, so negates d0
_1:                                     ; CODE XREF: assdefo+AA   j
                move.w  #$62,d1 ; 'b'   ; just inside of blueline
                btst    #7,$62(a3)      ; #pfgoal
                bne.w   _0              ; branch if top net shooting
                neg.w   d0              ; shooting on bottom net, so negate d0 and d1
                neg.w   d1
_0:                                     ; CODE XREF: assdefo+BA   j
                move.w  (puckx).w,d2    ; move puckx into d2
                eor.w   d0,d2           ; XOR d0 with d2
                bmi.w   _2              ; branch if puck on the other side of X center
                move.w  (puckx).w,d0    ; move puckx to d0
                bra.w   skateto         ; d0/d1 are x/y positions, a0 is extra collision routine
; ---------------------------------------------------------------------------
_2:                                     ; CODE XREF: assdefo+C8   j
                move.w  (puckx).w,d2    ; move puckx into d2
                asr.w   #1,d2           ; divide by 2
                add.w   d2,d0           ; add d2 to d0
                bra.w   skateto         ; skateto routine
; End of function assdefo


; player a3 is defensive player on defense
assdefd:                                ; DATA XREF: ROM:00018D84   o
                btst    #5,$62(a3)      ; check if locked in animiation
                bne.w   rtss6           ; exit if so
                btst    #0,(gmode).w    ; check if clock running
                bne.w   assnothing      ; assnothing if no clock
                bsr.w   check4bench     ; check if going to bench
                btst    #3,$62(a3)      ; check if joystick controlled
                bne.w   rtss6           ; exit if so
                bclr    #1,$62(a3)      ; clear new assignment bit
                beq.w   _nna            ; branch if no new assignment
                clr.w   $40(a3)         ; clear temp1
                move.w  #8,$42(a3)      ; move 8 into temp2
_nna:                                   ; CODE XREF: assdefd+28   j
                sub.b   d7,$40(a3)      ; sub frames elapsed from temp1
                bpl.w   _nodec          ; branch if not 0
                move.b  $6B(a3),$40(a3) ; move DfA into temp1
                btst    #6,(byte_FFC2FC).w ; check if crowd meter currently broken
                beq.w   _noboost        ; branch if not
                tst.b   $40(a3)         ; check if temp1 is 0
                beq.w   _noboost        ; branch if so
                subq.b  #1,$40(a3)      ; sub 1 from temp1
_noboost:                               ; CODE XREF: assdefd+4A   j
                                        ; assdefd+52   j
                move.w  (pucky).w,d1    ; move pucky into d1
                move.w  (puckvy).w,d3   ; move puckvy into d3
                asr.w   #6,d3           ; divide by 64
                btst    #7,$62(a3)      ; check which net shooting on
                bne.w   _de00           ; branch if top
                neg.w   d1              ; negate d1 and d3 if bottom
                neg.w   d3
_de00:                                  ; CODE XREF: assdefd+6A   j
                tst.w   d3              ; check if d3 is zero
                bpl.w   _de000          ; branch if positive
                clr.w   d3              ; clear d3
_de000:                                 ; CODE XREF: assdefd+74   j
                add.w   d1,d3           ; add d1 to d3
                cmp.w   #$58,d3 ; 'X'   ; compare top blueline to d3
                blt.w   _de0
                btst    #4,$30(a2)      ; check if team is offsides
                bne.w   _de0            ; branch if offsides
                move.w  (puckc).w,d1    ; move puckc into d1
                bmi.w   _de0            ; branch if no puckc
                bsr.w   chkpk           ; check if theres a PK
                beq.w   _de0            ; branch if on PK
                move.l  #1,d0           ; assdefo into d0
                subq.w  #6,d1           ; sub 6 from d1
                move.w  $52(a3),d2      ; move SCnum into d2
                subq.w  #6,d2           ; sub 6 from d2
                eor.w   d2,d1           ; EOR d2 and d1
                bpl.w   assreplace      ; assreplace if puckc on same team
_de0:                                   ; CODE XREF: assdefd+80   j
                                        ; assdefd+8A   j ...
                move.w  #$41,$44(a3) ; 'A' ; move 65 dec into temp3
                cmpi.w  #2,$34(a3)      ; compare if player is RD
                beq.w   _de1            ; branch if RD
                neg.w   $44(a3)         ; negate temp3 if LD
_de1:                                   ; CODE XREF: assdefd+BE   j
                movea.w #(SortCords-M68K_RAM),a0 ; move SC struct start into a0
                cmpi.w  #6,$52(a3)      ; compare 6 with player SCnum
                bge.w   _de2            ; branch if away team
                adda.w  #$300,a0        ; add 300 to a0 (start at away SC Struct)
_de2:                                   ; CODE XREF: assdefd+D0   j
                moveq   #5,d2           ; move 5 into d2
                move.w  #$FC18,d0       ; move -1000 dec into d0
                btst    #7,$62(a3)      ; check what net shooting at
                beq.w   _gdwn           ; branch if bottom net
                neg.w   d0              ; negate d0
_gup:                                   ; CODE XREF: assdefd+118   j
                btst    #2,$63(a0)      ; check if a0 player unavailable
                bne.w   _gu0            ; branch if so
                tst.w   $34(a0)         ; check a0 position
                bmi.w   _gu0            ; branch if empty position
                move.w  $2A(a0),d1      ; move Yvel of a0 into d1
                bmi.w   _gu2            ; branch if Yvel was negative
                clr.w   d1              ; clear d1
_gu2:                                   ; CODE XREF: assdefd+100   j
                asr.w   #4,d1           ; divide d1 by 16
                add.w   $14(a0),d1      ; add Ypos of a0 player to d1
                cmp.w   d0,d1           ; compare d0 to d1
                bgt.w   _gu0            ; branch if d1 is greater
                move.w  d1,d0           ; move d1 into d0
_gu0:                                   ; CODE XREF: assdefd+F0   j
                                        ; assdefd+F8   j ...
                adda.w  #$80,a0         ; add 80 (offset to next player struct) to a0
                dbf     d2,_gup         ; loop
                subi.w  #$32,d0 ; '2'   ; sub $32 (50 dec) from d0
                cmp.w   #$FF42,d0       ; compare to $FF42 (-190 dec)
                bgt.w   _gu1            ; branch if greater than
                move.w  #$FF24,d0       ; move -220 dec into d0
_gu1:                                   ; CODE XREF: assdefd+124   j
                move.w  d0,$46(a3)      ; move d0 into temp4
                move.w  (puckx).w,d0    ; move puckx into d0
                move.w  $44(a3),d1      ; move temp3 into d1
                eor.w   d0,d1           ; EOR d0 and d1
                bpl.w   _nodec          ; branch if puck on same side
                clr.w   $44(a3)         ; clear temp3 if not
                bra.w   _nodec
; ---------------------------------------------------------------------------
_gdwn:                                  ; CODE XREF: assdefd+E4   j
                                        ; assdefd+174   j
                btst    #2,$63(a0)      ; check if player a0 unavail
                bne.w   _gd0            ; branch if so
                tst.w   $34(a0)         ; check a0 position
                bmi.w   _gd0            ; branch if empty
                move.w  $2A(a0),d1      ; move Yvel of a0 into d1
                bpl.w   _gd2            ; branch if positive
                clr.w   d1              ; clear d1
_gd2:                                   ; CODE XREF: assdefd+15C   j
                asr.w   #4,d1           ; divide d1 by 16
                add.w   $14(a0),d1      ; add Ypos of a0 to d1
                cmp.w   d0,d1           ; compare d0 to d1
                blt.w   _gd0            ; branch if less than d0
                move.w  d1,d0           ; move d1 into d0
_gd0:                                   ; CODE XREF: assdefd+14C   j
                                        ; assdefd+154   j ...
                adda.w  #$80,a0         ; add offset to next player struct
                dbf     d2,_gdwn        ; loop
                addi.w  #$32,d0 ; '2'   ; add 32 to d0
                cmp.w   #$BE,d0         ; compare 190 dec to d0
                blt.w   _gd1            ; branch if d0 less than
                move.w  #$DC,d0         ; move 220 dec into d0
_gd1:                                   ; CODE XREF: assdefd+180   j
                move.w  d0,$46(a3)      ; move d0 into temp4
                neg.w   $44(a3)         ; negate temp3
                move.w  (puckx).w,d0    ; move puckx into d0
                move.w  $44(a3),d1      ; move temp3 into d1
                eor.w   d0,d1           ; EOR d0 and d1
                bpl.w   _nodec          ; branch if puck on same side
                clr.w   $44(a3)         ; clear temp3 if not
_nodec:                                 ; CODE XREF: assdefd+3A   j
                                        ; assdefd+13A   j ...
                move.w  $44(a3),d0      ; move temp3 to d0
                move.w  $46(a3),d1      ; move temp4 to d1
                movea.l #$E594,a0       ; EvadePC to a0
                bsr.w   skateto
                bra.w   check4check
; End of function assdefd
; ---------------------------------------------------------------------------
rtss21:                                 ; CODE XREF: asswingd+6   j
                                        ; asswingd+1C   j ...
                rts


; player a3 is winger on defense
asswingd:                               ; DATA XREF: ROM:00018D88   o
                btst    #5,$62(a3)      ; check if locked in animation
                bne.s   rtss21          ; exit if so
                btst    #0,(gmode).w    ; check if clock is running
                bne.w   assnothing      ; assnothing if its stopped
                bsr.w   check4bench     ; check if going to bench
                btst    #3,$62(a3)      ; check if joystick controlled
                bne.s   rtss21          ; exit if so
                bclr    #1,$62(a3)      ; clear new assignment bit
                beq.w   _nna            ; branch if cleared already (no new assignment)
                clr.w   $40(a3)         ; clear temp1
                move.w  #8,$42(a3)      ; move 8 into temp2
_nna:                                   ; CODE XREF: asswingd+24   j
                sub.b   d7,$40(a3)      ; sub frames elapsed from temp1
                bpl.w   _nodec          ; branch if not 0
                move.b  $6B(a3),$40(a3) ; move DfA into temp1
                btst    #6,(byte_FFC2FC).w ; check if crowd meter currently broken
                beq.w   _noboost        ; branch if not
                tst.b   $40(a3)         ; check if temp1 is 0
                beq.w   _noboost        ; branch if 0
                subq.b  #1,$40(a3)      ; sub 1 from temp1
_noboost:                               ; CODE XREF: asswingd+46   j
                                        ; asswingd+4E   j
                move.w  (puckc).w,d1    ; move puckc into d1
                bmi.w   _nodec          ; branch if no puck carrier
                move.l  #4,d0           ; asswingo into d0
                subq.w  #6,d1           ; sub 6 from d1
                move.w  $52(a3),d2      ; move SCnum into d2
                subq.w  #6,d2           ; sub 6 from d2
                eor.w   d2,d1           ; EOR d2 with d1. Checks if player on same team
                bpl.w   assreplace      ; branch if team has puck
_nodec:                                 ; CODE XREF: asswingd+36   j
                                        ; asswingd+5A   j
                moveq   #$64,d0 ; 'd'   ; move 64 (100 dec) into d0
                cmpi.w  #5,$34(a3)      ; check if player is RW
                bne.w   _1              ; branch if not
                neg.w   d0              ; make d0 negative
_1:                                     ; CODE XREF: asswingd+7A   j
                move.l  #$9E,d1         ; move $9E into d1 (blueline + 70 dec)
                btst    #7,$62(a3)      ; check which goal shooting at
                beq.w   _0              ; branch if bottom goal
                neg.w   d0              ; negate d0
                neg.w   d1              ; negate d1
                moveq   #$FFFFFFB2,d2   ; move into d2 (slightly above bottom blue line)
                btst    #4,$30(a2)      ; check bit 4 of offset 30 (currently offside)
                                        ; Home - C6FE
                                        ; Away - CA62
                bne.w   _dg11           ; branch if set
                cmp.w   (pucky).w,d2    ; compare pucky to d2
                bgt.w   _ug1            ; branch if puck in defensive zone
                move.w  (pucky).w,d1    ; move pucky into d1
                bra.w   _z1
; ---------------------------------------------------------------------------
_ug1:                                   ; CODE XREF: asswingd+A4   j
                move.w  #$FEF8,d2       ; move bottom goal line into d2
                cmp.w   (pucky).w,d2    ; compare pucky to d2
                blt.w   _z1             ; branch if puck in defensive zone
                move.w  d2,d1           ; move d2 into d1 if puck behind goal line
                bra.w   _z1
; ---------------------------------------------------------------------------
_0:                                     ; CODE XREF: asswingd+8C   j
                moveq   #$4E,d2 ; 'N'   ; defending top goal
                                        ; 4E - slightly below top blue line
                btst    #4,$30(a2)      ; check bit 4 of offset 30
                                        ; Home - C6FE
                                        ; Away - CA62
                bne.w   _dg11           ; branch if set
                cmp.w   (pucky).w,d2    ; compare pucky to d2
                blt.w   _dg1            ; branch if puck in defensive zone
                move.w  (pucky).w,d1    ; move pucky into d1
                bra.w   _z1
; ---------------------------------------------------------------------------
_dg1:                                   ; CODE XREF: asswingd+D2   j
                move.w  #$108,d2        ; move top goal line into d2
                cmp.w   (pucky).w,d2    ; compare pucky to d2
                bgt.w   _z1             ; branch if puck in between goal line and blue line
_dg11:                                  ; CODE XREF: asswingd+9C   j
                                        ; asswingd+CA   j
                move.w  d2,d1           ; move d2 into d1 if puck behind goal line
_z1:                                    ; CODE XREF: asswingd+AC   j
                                        ; asswingd+B8   j ...
                lea     rtss21(pc),a0
                move.w  (puckx).w,d2    ; move puckx into d2
                eor.w   d0,d2           ; EOR d0 and d2
                bmi.w   skateto         ; branch if minus - skate to d0/d1, no extra routine
                move.w  (puckx).w,d0    ; move puckx into d0
                bra.w   skateto         ; skate to d0/d1 no extra routine
; End of function asswingd


; player a3 is winger on offense
asswingo:                               ; DATA XREF: ROM:00018D8C   o
                btst    #5,$62(a3)      ; check if locked in animation
                bne.w   rtss21          ; exit if so
                btst    #0,(gmode).w    ; check game clock
                bne.w   assnothing      ; assnothing if stopped
                bsr.w   check4bench     ; check if player going to bench
                btst    #3,$62(a3)      ; check if joystick controlled
                bne.w   rtss21          ; exit if so
                bclr    #1,$62(a3)      ; clear new assignment bit
                beq.w   _nna            ; branch if it was already cleared
                st      $48(a3)         ; set old zone # (temp5)
                clr.w   $40(a3)         ; clear temp1
                move.w  #8,$42(a3)      ; move 8 into temp2
_nna:                                   ; CODE XREF: asswingo+28   j
                sub.b   d7,$40(a3)      ; subtract frames elapsed from temp1
                bpl.w   _nodec          ; branch if positive
                move.b  $6B(a3),$40(a3) ; move DfA into temp1
                btst    #6,(byte_FFC2FC).w ; check if crowd meter currently broken
                beq.w   _noboost
                tst.b   $40(a3)         ; check if temp1 is 0
                beq.w   _noboost
                subq.b  #1,$40(a3)      ; subtract 1 from temp1
_noboost:                               ; CODE XREF: asswingo+4E   j
                                        ; asswingo+56   j
                move.l  #3,d0           ; move asswingd into d0
                move.w  (puckc).w,d1    ; move puckc SCnum into d1
                bmi.w   _de0            ; branch if no puckc
                subq.w  #6,d1           ; sub 6 from d1
                move.w  $52(a3),d2      ; move SCnum into d2
                subq.w  #6,d2           ; sub 6 from d2
                eor.w   d2,d1           ; EOR d2 with d1. Checks if puckc on same team
                bmi.w   assreplace      ; if not, branch to assreplace
_de0:                                   ; CODE XREF: asswingo+68   j
                move.w  (pucky).w,d0    ; pucky into d0
                move.w  (puckvy).w,d3   ; puckvy into d3
                asr.w   #6,d3           ; divide d3 by 64
                add.w   d0,d3           ; add d0 to d3
                btst    #7,$62(a3)      ; check which goal shooting on
                bne.w   _de1            ; branch if top goal
                neg.w   d0              ; negate d0
                neg.w   d3              ; negate d3
_de1:                                   ; CODE XREF: asswingo+8C   j
                clr.w   d2              ; clear zone number
                cmp.w   #$FFA8,d3       ; compare bottom blue line with d3
                blt.w   _de2            ; branch if in defensive zone
                addq.w  #8,d2           ; add 8 to d2 (d2 = 8)
                cmp.w   #$58,d0 ; 'X'   ; compare top blue line with d0
                blt.w   _de2            ; branch if in neutral zone
                btst    #4,$30(a2)      ; check bit 4 of offset 30 (currently offside)
                                        ; (C6FE Home, CA62 Away)
                bne.w   _de2            ; branch if set
                addq.w  #8,d2           ; add 8 to d2 (d2 = $10)
                cmp.w   #$108,d3        ; compare top goal line with d3
                blt.w   _de2            ; branch if in offensive zone
                addq.w  #8,d2           ; add 8 to d2 (d2 = $18)
_de2:                                   ; CODE XREF: asswingo+9A   j
                                        ; asswingo+A4   j ...
                cmp.w   $48(a3),d2      ; compare temp5 with d2
                bne.w   _de3            ; branch if different zone
                move.w  (VDP_CNTR).l,d0 ; move frame counter into d0
                andi.w  #$7F,d0         ; pass first 7 bits
                bne.w   _nodec          ; branch if not equal to 0
_de3:                                   ; CODE XREF: asswingo+C2   j
                move.w  d2,$48(a3)      ; move d2 into temp5
                lea     _dedata(pc),a0  ; move zonedata address into a0
                move.w  2(a0,d2.w),d0   ; move X Coord into d0
                bsr.w   randomd0s       ; RNG d0
                add.w   (a0,d2.w),d0    ; add X Coord offset to d0
                move.w  d0,$44(a3)      ; move d0 into temp3
                move.w  6(a0,d2.w),d0   ; move Y Coord into d0
                bsr.w   randomd0s       ; RNG d0
                add.w   4(a0,d2.w),d0   ; add Y Coord offset into d0
                move.w  d0,$46(a3)      ; move d0 into temp4
                bra.w   _nodec
; ---------------------------------------------------------------------------
_dedata:                                ; DATA XREF: asswingo+D8   o
                dc.w $50                ; Skating zones:
                                        ; Defensive zone
                dc.w $14
                dc.w $FFBA
                dc.w $A
                dc.w $64                ; neutral zone
                dc.w $14
                dc.w $3A
                dc.w 5
                dc.w $3C                ; offensive zone
                dc.w $32
                dc.w $E6
                dc.w $14
                dc.w $50                ; past goalline
                dc.w $1E
                dc.w $FA
                dc.w $14
; ---------------------------------------------------------------------------
_nodec:                                 ; CODE XREF: asswingo+3E   j
                                        ; asswingo+D0   j ...
                move.w  $44(a3),d0      ; move temp3 into d0
                cmpi.w  #5,$34(a3)      ; compare 5 (RW) to position
                beq.w   _1              ; branch if RW
                neg.w   d0              ; negate d0
_1:                                     ; CODE XREF: asswingo+12A   j
                move.w  $46(a3),d1      ; move temp4 into d1
                btst    #7,$62(a3)      ; check if shooting up or down
                bne.w   _0              ; branch if shooting up
                neg.w   d0              ; negate d0
                neg.w   d1              ; negate d1
_0:                                     ; CODE XREF: asswingo+13A   j
                lea     EvadePC(pc),a0  ; add EvadePC as aux routine
                bra.w   skateto         ; skate to d0/d1 position
; End of function asswingo
; ---------------------------------------------------------------------------
rtss11:                                 ; CODE XREF: asscenterd+6   j
                                        ; asscenterd+1C   j ...
                rts


; player a3 is center on defense
; d7 = elapsed frames
asscenterd:                             ; DATA XREF: ROM:00018D90   o
                btst    #5,$62(a3)      ; pfalock - locked animation
                bne.s   rtss11          ; exit if locked
                btst    #0,(gmode).w    ; gmclock - check if clock is running
                bne.w   assnothing      ; exit if stoppage
                bsr.w   check4bench
                btst    #3,$62(a3)      ; pfjoycon - check if joystick controlled
                bne.s   rtss11          ; exit if joystick controlled
                bclr    #1,$62(a3)      ; pfna - new assignment
                beq.w   _nna            ; branch if no new assignment
                clr.w   $40(a3)         ; clear temp1
                move.w  #8,$42(a3)      ; move 8 into temp2
_nna:                                   ; CODE XREF: asscenterd+24   j
                sub.b   d7,$40(a3)      ; subtract d7 from temp1
                bpl.w   _nodec
                move.b  $6B(a3),$40(a3) ; move aidef into temp1
                btst    #6,(byte_FFC2FC).w ; check for crowd record flag
                beq.w   _puckcarrier    ; jump if not set
                tst.b   $40(a3)         ; check if 0
                beq.w   _puckcarrier
                subq.b  #1,$40(a3)      ; subtract 1 from temp1
_puckcarrier:                           ; CODE XREF: asscenterd+46   j
                                        ; asscenterd+4E   j
                move.w  (puckc).w,d1    ; move puck carrier SCnum into d1
                bmi.w   _nodec
                move.l  #6,d0           ; asscentero
                subq.w  #6,d1           ; subtract 6 from d1
                move.w  $52(a3),d2      ; move player's SCnum into d2
                subq.w  #6,d2           ; subtract 6 from d2
                eor.w   d2,d1           ; compare d2 and d1
                bpl.w   assreplace      ; if team has puck, replace assignment with acentero
_nodec:                                 ; CODE XREF: asscenterd+36   j
                                        ; asscenterd+5A   j
                move.w  (puckx).w,d0    ; Xpos of puck
                asr.w   #1,d0           ; divide by 2
                move.w  (pucky).w,d2    ; Ypos of puck
                btst    #7,$62(a3)      ; pfgoal - check which net to shoot on
                bne.w   _1              ; branch if top net
                neg.w   d2              ; negate d2 if shooting on bottom net
_1:                                     ; CODE XREF: asscenterd+82   j
                moveq   #$FFFFFF80,d1   ; -128 - own high slot
                cmp.w   #$FFA8,d2       ; -88 - own blue line
                blt.w   _chkgoal        ; branch if puck in defensive zone
                add.w   (pucky).w,d1    ; add pucky position to d1
                asr.w   #1,d1           ; divide by 2
_chkgoal:                               ; CODE XREF: asscenterd+8E   j
                btst    #7,$62(a3)      ; pfgoal - check which net to shoot at
                bne.w   _z1             ; branch if top net
                neg.w   d1              ; shooting at bottom net
_z1:                                    ; CODE XREF: asscenterd+9E   j
                lea     rtss11(pc),a0   ; no extra collision routine
                bra.w   skateto         ; d0/d1 - x/y coord for skating to
; End of function asscenterd


; player a3 is center on offense
asscentero:                             ; DATA XREF: ROM:00018D94   o
                btst    #5,$62(a3)      ; pfalock
                bne.w   rtss11          ; exit if anim locked
                btst    #0,(gmode).w    ; #gmclock
                bne.w   assnothing      ; do nothing
                bsr.w   check4bench
                btst    #3,$62(a3)      ; pfjoycon - check if joystick controlled
                bne.w   rtss11          ; exit if controlled
                bclr    #1,$62(a3)      ; clear pfna
                beq.w   _nna
                st      $48(a3)         ; old zone number - temp5
                clr.w   $40(a3)         ; clear temp1
                move.w  #8,$42(a3)      ; move 8 into temp2
_nna:                                   ; CODE XREF: asscentero+28   j
                sub.b   d7,$40(a3)      ; subtract d7 from temp1 (d7 = elapsed frames)
                bpl.w   _nodec          ; branch if temp1 not zero or neg
                move.b  $6B(a3),$40(a3) ; move aidef into temp1
                btst    #6,(byte_FFC2FC).w ; check if crowd record broken
                beq.w   _noboost
                tst.b   $40(a3)         ; check if temp1 is 0
                beq.w   _noboost
                subq.b  #1,$40(a3)      ; sub 1 from temp1
_noboost:                               ; CODE XREF: asscentero+4E   j
                                        ; asscentero+56   j
                move.w  (puckc).w,d1    ; move puck carrier SCnum into d1
                bmi.w   _de0
                move.l  #5,d0           ; asscenterd
                subq.w  #6,d1
                move.w  $52(a3),d2      ; move SCnum into d2
                subq.w  #6,d2
                eor.w   d2,d1           ; checks to see if puck carrier is on team
                bmi.w   assreplace      ; if not switch to acenterd
_de0:                                   ; CODE XREF: asscentero+62   j
                move.w  (pucky).w,d0    ; pucky in d0
                btst    #7,$62(a3)      ; #pfgoal - check what goal shooting on
                bne.w   _de1            ; branch if top
                neg.w   d0              ; negate if bottom net
_de1:                                   ; CODE XREF: asscentero+84   j
                clr.w   d2              ; d2 = zone number
                cmp.w   #$FFA8,d0       ; check if own blue line
                blt.w   _de2            ; branch if in def zone
                addq.w  #8,d2           ; set zone to 8
                cmp.w   #$58,d0 ; 'X'   ; check opponents blue line
                blt.w   _de2            ; branch if in neutral zone
                btst    #4,$30(a2)      ; Checks if currently offside
                                        ; C6FE - Home
                                        ; CA62 - Away
                bne.w   _de2            ; branch if offside
                addq.w  #8,d2
                cmp.w   #$108,d0        ; check opponents goal line
                blt.w   _de2            ; branch if in offensive zone
                addq.w  #8,d2           ; add if past goal line
_de2:                                   ; CODE XREF: asscentero+90   j
                                        ; asscentero+9A   j ...
                cmp.w   $48(a3),d2      ; compare temp5 to d2
                bne.w   _de3
                move.w  (VDP_CNTR).l,d0 ; move frame counter into d0.
                                        ; This allows a chance for random movement in zone when waiting
                andi.w  #$7F,d0         ; pass bottom 7 bits
                bne.w   _nodec
_de3:                                   ; CODE XREF: asscentero+B8   j
                move.w  d2,$48(a3)      ; move zone into temp5
                lea     _dedata(pc),a0
                move.w  2(a0,d2.w),d0   ; move zone into d0
                bsr.w   randomd0s       ; randomize d0
                add.w   (a0,d2.w),d0    ; add to d0
                move.w  d0,$44(a3)      ; move into temp3 (X coord)
                move.w  6(a0,d2.w),d0   ; move into d0
                bsr.w   randomd0s       ; randomize d0
                add.w   4(a0,d2.w),d0   ; add into d0
                move.w  d0,$46(a3)      ; move into temp4 (Y coord)
                bra.w   _nodec
; ---------------------------------------------------------------------------
_dedata:                                ; DATA XREF: asscentero+CE   o
                dc.w 0                  ; Skating Zones
                                        ; puck location = defensive zone
                dc.w $3C
                dc.w $FFBA
                dc.w $A
                dc.w 0                  ; neutral zone
                dc.w $3C
                dc.w $3C
                dc.w $A
                dc.w 0                  ; offensive zone
                dc.w $28
                dc.w $AA
                dc.w $1E
                dc.w 0                  ; below offensive goal line
                dc.w $50
                dc.w $AA
                dc.w $14
; ---------------------------------------------------------------------------
_nodec:                                 ; CODE XREF: asscentero+3E   j
                                        ; asscentero+C6   j ...
                move.w  $44(a3),d0      ; move temp3 into d0 (x coord to skate to)
                move.w  $46(a3),d1      ; move temp4 into d1 (y coord to skate to)
                btst    #7,$62(a3)      ; pfgoal
                bne.w   _0              ; branch if top
                neg.w   d1              ; negate if bottom
_0:                                     ; CODE XREF: asscentero+124   j
                lea     EvadePC(pc),a0
                bra.w   skateto
; End of function asscentero


; joypad controlled goalie control
; a3 = goalie
assgoaliectrl:                          ; CODE XREF: assgoaliecpu+6   j
                                        ; DATA XREF: ROM:00018DF0   o
                btst    #3,$62(a3)      ; is player joystick controlled?
                bne.w   _goaliectrl     ; branch is so
                bra.w   assexit
; ---------------------------------------------------------------------------
_goaliectrl:                            ; CODE XREF: assgoaliectrl+6   j
                btst    #1,$62(a3)      ; check if new assignment
                bne.w   _na             ; branch if new assignment
                movem.w d0-d1,-(sp)     ; push to stack
                move.w  (a3),d0         ; Xpos
                move.w  $14(a3),d1      ; Ypos
                cmp.w   #$AA,d1         ; compare $AA to Ypos
                bgt.w   _cont
                cmp.w   #$FF56,d1       ; check -$AA to Ypos
                blt.w   _cont           ; branch if less than
                btst    #0,(gmode).w    ; check if clock stopped
                bne.w   _cont           ; branch if so
                move.w  d0,-(sp)        ; push to stack
                move.w  #8,d0           ; clock stoppage due to goalie out of range
                jsr     (AddPenalty2).l
                move.w  (sp)+,d0        ; pop from stack
_cont:                                  ; CODE XREF: assgoaliectrl+26   j
                                        ; assgoaliectrl+2E   j ...
                sub.w   (Hpos).w,d0     ; sub ice rink horiz position from Xpos
                sub.w   (Vpos).w,d1     ; sub ice rink vert position from Ypos
                bclr    #2,$64(a3)      ; clear goalie control bit?
                cmp.w   #$74,d0 ; 't'   ; compare $74 to Xpos diff
                blt.w   loc_D430        ; branch if less than
                bset    #2,$64(a3)      ; set goalie control bit?
                bra.w   _cont2
; ---------------------------------------------------------------------------
loc_D430:                               ; CODE XREF: assgoaliectrl+5C   j
                cmp.w   #$FF8C,d0       ; compare -$74 to Xpos diff
                bgt.w   loc_D442        ; branch if greater than
                bset    #2,$64(a3)      ; set goalie control bit?
                bra.w   _cont2
; ---------------------------------------------------------------------------
loc_D442:                               ; CODE XREF: assgoaliectrl+6E   j
                cmp.w   #$64,d1 ; 'd'   ; compare $64 to Ypos diff
                blt.w   loc_D454        ; branch if less than
                bset    #2,$64(a3)      ; set goalie control bit?
                bra.w   _cont2
; ---------------------------------------------------------------------------
loc_D454:                               ; CODE XREF: assgoaliectrl+80   j
                cmp.w   #$FF9C,d1       ; compare -$64 to Ypos diff
                bgt.w   _cont2          ; branch if greater than
                bset    #2,$64(a3)      ; set goalie control bit?
_cont2:                                 ; CODE XREF: assgoaliectrl+66   j
                                        ; assgoaliectrl+78   j ...
                movem.w (sp)+,d0-d1     ; pop from stack
                btst    #2,$64(a3)      ; check goalie ctrl bit
                bne.w   _checkanim      ; branch if set
_na:                                    ; CODE XREF: assgoaliectrl+14   j
                btst    #5,$62(a3)      ; check if anim lock
                bne.w   rtss2           ; exit if so
                bsr.w   check4bench
                bclr    #1,$62(a3)      ; clear new assignment bit
                beq.w   _nna            ; branch if already cleared
                clr.w   $40(a3)         ; clear temp1
                move.w  #8,$42(a3)      ; move 8 into temp2
                st      $46(a3)         ; FFFF to temp4
_nna:                                   ; CODE XREF: assgoaliectrl+BE   j
                btst    #1,$63(a3)      ; check if anim in progress
                bne.w   rtss2           ; exit if so
                btst    #0,(gmode).w    ; check if clock stopped
                bne.w   rtss2           ; exit if so
                tst.w   $48(a3)         ; test temp5
                bmi.w   _nofo           ; branch if less than 0
                move.w  $52(a3),d0      ; move SCnum into d0
                cmp.w   (puckc).w,d0    ; check if puckc is goalie
                beq.w   _mbfo           ; branch if equal
                st      $48(a3)         ; set temp5 to -1
                bra.w   _nofo
; ---------------------------------------------------------------------------
_mbfo:                                  ; CODE XREF: assgoaliectrl+F4   j
                sub.w   d7,$48(a3)      ; subtract d7(frames elapsed) from temp5
                bpl.w   _nofo           ; branch if more than 0
                btst    #2,(BA_PS_flags).w ; check bit 2
                beq.w   _stoppage       ; branch if not set
                bset    #4,(BA_PS_flags).w
                bra.w   _nofo
; ---------------------------------------------------------------------------
_stoppage:                              ; CODE XREF: assgoaliectrl+10E   j
                move.l  #8,d0
                bsr.w   AddPenalty2
_nofo:                                  ; CODE XREF: assgoaliectrl+E8   j
                                        ; assgoaliectrl+FC   j ...
                sub.b   d7,$40(a3)      ; sub d7(frames elapsed) from temp1
                bpl.w   _ex             ; branch if positive
                move.b  $6B(a3),d0      ; DfA into d0
                beq.w   loc_D508        ; branch if value was 0
                btst    #6,(byte_FFC2FC).w ; check if crowd meter broken
                beq.w   loc_D508        ; jump if not
                subq.b  #1,d0           ; sub 1 from d0
loc_D508:                               ; CODE XREF: assgoaliectrl+132   j
                                        ; assgoaliectrl+13C   j
                lsr.b   #2,d0           ; divide by 4
                move.b  d0,$40(a3)      ; move d0 into temp1
                move.w  $52(a3),d0      ; move SCnum into d0
                cmp.w   (puckc).w,d0    ; compare puckc to d0
                beq.w   *+4             ; jump to assgoaliecpu if the same
_ex:                                    ; CODE XREF: assgoaliectrl+12A   j
                                        ; assgoaliectrl+150   j
                rts
; End of function assgoaliectrl


; a3 = goalie
assgoaliecpu:                           ; CODE XREF: assnearest+BA   j
                                        ; DATA XREF: ROM:00018DB4   o
                btst    #3,$62(a3)      ; is goalie joystick controlled?
                bne.w   assgoaliectrl   ; branch if so
_checkanim:                             ; CODE XREF: assgoaliectrl+A6   j
                move.w  (puckx).w,(TmpPuckX).w
                btst    #0,(word_FFC2F4).w ; test bit 0
                beq.w   _assstart
                btst    #1,$63(a3)      ; check if animation in progress
                bne.w   _assstart       ; branch if so
                btst    #1,(word_FFC2F4).w ; test bit 1
                beq.w   loc_D57A        ; branch if 0
                btst    #3,(word_FFC2F4).w ; test bit 3
                bne.w   _assstart       ; branch if set
                cmpi.w  #$2C4,6(a3)     ; compare to alice frame number
                bne.w   _assstart       ; branch if not equal
                cmpi.w  #$2C8,6(a3)     ; compare to alice frame number
                bne.w   _assstart       ; branch if not equal
                bset    #3,(word_FFC2F4).w ; set bit 3
                move.w  #$1C,-(sp)      ; SFX
                bsr.w   sfx
                bra.w   _assstart       ; set bit 3
; ---------------------------------------------------------------------------
loc_D57A:                               ; CODE XREF: assgoaliecpu+2A   j
                movem.w d0-d1,-(sp)
                move.w  (pucky).w,d0    ; pucky to d0
                move.w  $14(a3),d1      ; move Ypos to d1
                eor.w   d1,d0           ; XOR d1 to d0
                movem.w (sp)+,d0-d1
                bmi.w   _assstart       ; branch if d0 is negative
                cmpi.w  #$14,(a3)       ; compare 14 to Xpos
                bgt.w   _assstart       ; branch if greater
                cmpi.w  #$FFEC,(a3)     ; compare -14 to Xpos
                ble.w   _assstart       ; branch if less than
                bset    #1,(word_FFC2F4).w ; set bit 1
                bclr    #3,(word_FFC2F4).w ; clear bit 3
                move.w  #$1596,d1       ; move 1596 into d1
                btst    #7,$62(a3)      ; check what goal shooting at
                beq.w   loc_D5BE        ; branch if bottom
                move.w  #$1684,d1       ; move 1684 into d1
loc_D5BE:                               ; CODE XREF: assgoaliecpu+9A   j
                bsr.w   SetSPA          ; set animation of d1
                bset    #1,$63(a3)      ; set anim in progress
_assstart:                              ; CODE XREF: assgoaliecpu+16   j
                                        ; assgoaliecpu+20   j ...
                btst    #5,$62(a3)      ; check if locked in animation
                bne.w   rtss2           ; exit if so
                bsr.w   check4bench
                bclr    #1,$62(a3)      ; clear new assignment
                beq.w   _nna            ; jump if it was cleared already
                clr.w   $40(a3)         ; clear temp1
                move.w  #8,$42(a3)      ; move 8 into temp2
                st      $46(a3)         ; set temp5 (FFFF)
_nna:                                   ; CODE XREF: assgoaliecpu+C0   j
                cmpi.w  #$34,(a3) ; '4' ; compare 34 hex with Xpos
                bgt.w   _nna2           ; branch if greater
                cmpi.w  #$FFCC,(a3)     ; compare -34 hex with Xpos
                blt.w   _nna2           ; branch if less than
                cmpi.w  #$10E,$14(a3)   ; compare 10E with Ypos
                bgt.w   _nna2
                cmpi.w  #$FEF2,$14(a3)
                blt.w   _nna2
                cmpi.w  #$D2,$14(a3)
                bgt.w   _noskate
                cmpi.w  #$FF2E,$14(a3)
                blt.w   _noskate
_nna2:                                  ; CODE XREF: assgoaliecpu+D6   j
                                        ; assgoaliecpu+DE   j ...
                lea     rtss2(pc),a0    ; goalie will skate back to middle position
                moveq   #4,d0
                tst.w   (a3)            ; test Xpos
                bpl.w   loc_D634        ; branch if positive
                neg.w   d0
loc_D634:                               ; CODE XREF: assgoaliecpu+112   j
                move.w  #$E4,d1
                btst    #7,$62(a3)      ; check what goal shooting at
                beq.w   skateto         ; branch if bottom
                neg.w   d1
                bra.w   skateto
; ---------------------------------------------------------------------------
_noskate:                               ; CODE XREF: assgoaliecpu+FC   j
                                        ; assgoaliecpu+106   j
                btst    #1,$63(a3)      ; check if anim in progress
                bne.w   rtss2           ; exit if so
                btst    #0,(word_FFC2F4).w ; check bit 0
                beq.w   _noskate3       ; branch if not set
                cmpi.w  #$2C5,6(a3)     ; check alice frame
                beq.w   _noskate2       ; branch if equal
                cmpi.w  #$2C9,6(a3)     ; check alice frame
                bne.w   _noskate3       ; branch if not equal
                move.w  #4,$54(a3)      ; set 4 to facedir - face down
                bra.w   _noskate3
; ---------------------------------------------------------------------------
_noskate2:                              ; CODE XREF: assgoaliecpu+146   j
                move.w  #0,$54(a3)      ; set 0 to facedir - face up
_noskate3:                              ; CODE XREF: assgoaliecpu+13C   j
                                        ; assgoaliecpu+150   j ...
                move.w  #2,d1           ; 2 = SPAgready
                bsr.w   SetSPA
                btst    #2,(BA_PS_flags).w ; check bit 2
                bne.w   _noskate4       ; branch if set
                btst    #0,(gmode).w    ; check if clock
                bne.w   rtss2           ; exit if clock stopped
_noskate4:                              ; CODE XREF: assgoaliecpu+172   j
                tst.w   $48(a3)         ; temp5
                bmi.w   _nofo           ; branch if minus
                move.w  $52(a3),d0      ; move SCnum to d0
                cmp.w   (puckc).w,d0    ; check if puckc
                beq.w   _mbfo           ; branch if so
                st      $48(a3)         ; set temp5 to FFFF
                bra.w   _nofo
; ---------------------------------------------------------------------------
_mbfo:                                  ; CODE XREF: assgoaliecpu+190   j
                sub.w   d7,$48(a3)      ; subtract frames from temp5
                bpl.w   _nofo           ; branch if positive
                btst    #2,(BA_PS_flags).w ; check if bit 2 set
                beq.w   _mbfo2          ; branch if not
                bset    #4,(BA_PS_flags).w ; set bit 4
                bra.w   _nofo
; ---------------------------------------------------------------------------
_mbfo2:                                 ; CODE XREF: assgoaliecpu+1AA   j
                move.l  #8,d0           ; PenGhold
                bsr.w   AddPenalty2     ; blow whistle for FO
_nofo:                                  ; CODE XREF: assgoaliecpu+184   j
                                        ; assgoaliecpu+198   j ...
                sub.b   d7,$40(a3)      ; sub d7 from temp1
                bpl.w   _nodec          ; branch if still positive
                move.b  $6B(a3),d0      ; move aidef into d0 (DfA)
                beq.w   _nofo2          ; branch if 0
                btst    #6,(byte_FFC2FC).w ; check if crowd meter broken
                beq.w   _nofo2          ; branch if not
                subq.b  #1,d0           ; sub from d0
_nofo2:                                 ; CODE XREF: assgoaliecpu+1CE   j
                                        ; assgoaliecpu+1D8   j
                lsr.b   #2,d0           ; divide by 4
                move.b  d0,$40(a3)      ; move d0 into temp1
                btst    #3,$62(a3)      ; check if joy controlled
                beq.w   _nocontrol      ; branch if not
                btst    #2,$64(a3)      ; check bit 2
                bne.w   _nocontrol      ; branch if set
                move.l  #$1D,d0         ; assignment assgoaliectrl
                bra.w   assinsert
; ---------------------------------------------------------------------------
_nocontrol:                             ; CODE XREF: assgoaliecpu+1EA   j
                                        ; assgoaliecpu+1F4   j
                move.w  (pucky).w,d0    ; move pucky into d0
                move.w  $14(a3),d1      ; move Ypos into d1
                eor.w   d0,d1           ; XOR
                bpl.w   loc_D742        ; branch if positive
                clr.w   d0
                move.w  #$F4,d2         ; move F4 into d2
                btst    #7,$62(a3)      ; check which net shooting at
                beq.w   _de5            ; branch if bottom
                neg.w   d2
                bra.w   _de5
; ---------------------------------------------------------------------------
loc_D742:                               ; CODE XREF: assgoaliecpu+20C   j
                subq.w  #1,$46(a3)      ; sub 1 from temp4
                bpl.w   loc_D750        ; branch if positive
                move.w  #$FFFF,$46(a3)  ; move -1 into temp4
loc_D750:                               ; CODE XREF: assgoaliecpu+22A   j
                move.w  $52(a3),d0      ; SCnum into d0
                cmp.w   (puckc).w,d0    ; check if puckc
                bne.w   _notpuckc       ; branch if not
                tst.w   $48(a3)         ; check temp5
                bpl.w   loc_D76A        ; branch if positive
                move.w  #$5A,$48(a3) ; 'Z' ; move 5A into temp5
loc_D76A:                               ; CODE XREF: assgoaliecpu+244   j
                st      $46(a3)         ; FFFF into temp4
                cmpi.w  #$5A,$48(a3) ; 'Z' ; compare to temp5
                bgt.w   _de1            ; branch if greater
                move.w  (VDP_CNTR).l,d0
                andi.w  #3,d0           ; pass first 2 bits
                bne.w   _de1            ; branch if not 0
                moveq   #5,d0
                movea.w #(SortCords-M68K_RAM),a0
                btst    #6,$62(a3)      ; check home or away
                bne.w   _opploop        ; branch if away
                adda.w  #$300,a0
_opploop:                               ; CODE XREF: assgoaliecpu+276   j
                                        ; assgoaliecpu+2BA   j
                btst    #2,$63(a0)      ; check if player unavailable
                bne.w   _opploop2       ; branch if so
                move.w  (pucky).w,d1    ; pucky into d1
                sub.w   $14(a0),d1      ; sub Ypos a0 from d1
                cmp.w   #$1C,d1         ; compare 1C to difference
                bgt.w   _opploop2       ; branch if greater
                cmp.w   #$FFE4,d1       ; compare -1C
                blt.w   _opploop2       ; branch if less than
                move.w  (puckx).w,d1    ; puckx into d1
                sub.w   (a0),d1         ; sub Xpos a0 from d1
                cmp.w   #$19,d1         ; compare 19 to difference
                bgt.w   _opploop2       ; branch if greater
                cmp.w   #$FFE7,d1       ; compare -19 to diff
                bgt.w   _de1            ; branch if greater
_opploop2:                              ; CODE XREF: assgoaliecpu+284   j
                                        ; assgoaliecpu+294   j ...
                adda.w  #$80,a0         ; move to next struct
                dbf     d0,_opploop
                move.w  #1,(threat).w   ; dir of threat on puck handler
                bsr.w   chk4pass
                bra.w   _de1
; ---------------------------------------------------------------------------
_notpuckc:                              ; CODE XREF: assgoaliecpu+23C   j
                tst.w   $46(a3)         ; check temp4
                bne.w   _de1            ; branch if not 0
                tst.w   (puckc).w       ; check puckc
                bpl.w   _de1            ; branch if there is a puckc
                move.w  (puckx).w,d0
                sub.w   (a3),d0         ; sub Xpos
                cmp.w   #$14,d0         ; compare 14 to diff
                bgt.w   _de1            ; branch if greater
                cmp.w   #$FFEC,d0       ; -14
                blt.w   _de1            ; branch if less
                move.w  (pucky).w,d1
                cmp.w   #$108,d1        ; check goalline
                bgt.w   _de1            ; branch if past goalline
                cmp.w   #$FEF8,d1       ; check other goalline
                blt.w   _de1            ; branch if past
                sub.w   $14(a3),d1      ; sub Ypos from d1
                cmp.w   #$1E,d1         ; compare to 1E
                bgt.w   _de1            ; branch if greater
                cmp.w   #$FFE2,d1       ; compare to -1E
                blt.w   _de1            ; branch if less
                movem.w d0-d1,-(sp)
                move.w  (puckvx).w,d0
                bpl.w   loc_D844
                neg.w   d0
loc_D844:                               ; CODE XREF: assgoaliecpu+322   j
                move.w  (puckvy).w,d1
                bpl.w   loc_D84E
                neg.w   d1
loc_D84E:                               ; CODE XREF: assgoaliecpu+32C   j
                add.w   d1,d0           ; add puckvx and vy
                cmp.w   #$1000,d0       ; compare to 1000
                movem.w (sp)+,d0-d1
                bgt.w   _de1            ; branch if greater
                bsr.w   vtoa
                move.w  d0,$54(a3)      ; d0 into facedir. Goalie will face puck
                move.b  #8,$5E(a3)      ; move 8 to nopuck collision
                move.w  #$2F4,d1        ; goalie dive anim.
                bsr.w   SetSPA          ; set animation
                bset    #1,$63(a3)      ; set anim in progress
                addi.w  #$96,(crowdlevel).w
                rts
; ---------------------------------------------------------------------------
_de1:                                   ; CODE XREF: assgoaliecpu+258   j
                                        ; assgoaliecpu+266   j ...
                movea.w #(puckcross-M68K_RAM),a0 ; puckcross = xcord/frames top to bottom for goalies to react to
                move.w  #$104,d3
                btst    #7,$62(a3)      ; check what net shooting at
                beq.w   loc_D896        ; branch if bottom
                addq.w  #4,a0
                neg.w   d3
loc_D896:                               ; CODE XREF: assgoaliecpu+372   j
                cmpi.w  #$104,$14(a3)
                bgt.w   loc_D8AA
                cmpi.w  #$FEFC,$14(a3)
                bgt.w   loc_D8CE
loc_D8AA:                               ; CODE XREF: assgoaliecpu+380   j
                clr.w   d2
                clr.w   d0
                cmpi.w  #$2C,(a3) ; ','
                bgt.w   _de5
                cmpi.w  #$FFD4,(a3)
                blt.w   _de5
                move.w  #$88,d0
                tst.w   (a3)
                bpl.w   _de5
                neg.w   d0
                bra.w   _de5
; ---------------------------------------------------------------------------
loc_D8CE:                               ; CODE XREF: assgoaliecpu+38A   j
                tst.w   (puckc).w
                bmi.w   loc_D902
                move.w  $52(a3),d0
                cmp.w   (puckc).w,d0
                beq.w   loc_D902
                move.l  a0,-(sp)
                movea.l #$FFFFB04A,a0
                move.w  (puckc).w,d0
                asl.w   #7,d0
                adda.w  d0,a0
                move.w  (puckx).w,d0
                sub.w   (a0),d0
                asr.w   #1,d0
                add.w   (a0),d0
                move.w  d0,(TmpPuckX).w
                movea.l (sp)+,a0
loc_D902:                               ; CODE XREF: assgoaliecpu+3B6   j
                                        ; assgoaliecpu+3C2   j
                move.w  (TmpPuckX).w,d0
                move.w  (pucky).w,d1
                bsr.w   sub_DB3E
                bsr.w   vtoa
                bsr.w   sub_DB68
                move.w  (gameclock).w,d0
                andi.w  #7,d0
                asl.w   #4,d0
                addi.w  #$A0,d0
                cmpi.w  #$DB,(pucky).w
                bgt.w   loc_D938
                cmpi.w  #$FF25,(pucky).w
                bgt.w   loc_D93C
loc_D938:                               ; CODE XREF: assgoaliecpu+40E   j
                subi.w  #$40,d0 ; '@'
loc_D93C:                               ; CODE XREF: assgoaliecpu+418   j
                move.w  d0,d1
                muls.w  (puckvx).w,d0
                swap    d0
                add.w   (TmpPuckX).w,d0
                muls.w  (puckvy).w,d1
                swap    d1
                add.w   (pucky).w,d1
                bsr.w   sub_DB3E
                movem.w d0-d1,-(sp)
                muls.w  d0,d0
                muls.w  d1,d1
                add.l   d1,d0
                cmp.l   #$384,d0
                bhi.w   loc_D972
                movem.w (sp)+,d0-d1
                bra.w   loc_D996
; ---------------------------------------------------------------------------
loc_D972:                               ; CODE XREF: assgoaliecpu+44A   j
                bsr.w   sroot
                moveq   #1,d2
                add.w   d0,d2
                moveq   #$12,d4
                btst    #3,(sflags).w
                beq.w   loc_D988
                addq.w  #8,d4
loc_D988:                               ; CODE XREF: assgoaliecpu+466   j
                movem.w (sp)+,d0-d1
                muls.w  d4,d1
                addq.w  #8,d4
                muls.w  d4,d0
                divs.w  d2,d0
                divs.w  d2,d1
loc_D996:                               ; CODE XREF: assgoaliecpu+452   j
                add.w   d3,d1
                move.w  d1,d2
                btst    #0,(word_FFC2FA).w
                bne.w   loc_D9EE
                btst    #2,(BA_PS_flags).w
                bne.w   loc_D9EE
                btst    #3,(sflags).w
                beq.w   loc_D9EE
                cmpi.w  #$D0,(pucky).w
                bgt.w   loc_D9D0
                cmpi.w  #$FF30,(pucky).w
                blt.w   loc_D9D0
                bra.w   loc_D9EE
; ---------------------------------------------------------------------------
loc_D9D0:                               ; CODE XREF: assgoaliecpu+4A2   j
                                        ; assgoaliecpu+4AC   j
                cmpi.w  #$14,(a3)
                bgt.w   loc_D9EE
                cmpi.w  #$FFEC,(a3)
                blt.w   loc_D9EE
                btst    #1,(gameclock+1).w
                bne.w   loc_D9EE
                bra.w   loc_DA12
; ---------------------------------------------------------------------------
loc_D9EE:                               ; CODE XREF: assgoaliecpu+484   j
                                        ; assgoaliecpu+48E   j ...
                cmpi.w  #$22,2(a0) ; '"'
                bhi.w   _de5
                cmpi.w  #$18,(a0)
                bgt.w   loc_DAB6
                cmpi.w  #$FFE8,(a0)
                blt.w   loc_DAB6
                cmpi.w  #$C,2(a0)
                bhi.w   loc_DA36
loc_DA12:                               ; CODE XREF: assgoaliecpu+4CE   j
                cmpi.w  #$108,(pucky).w
                bgt.w   loc_DA36
                cmpi.w  #$FEF8,(pucky).w
                blt.w   loc_DA36
                bset    #1,$63(a3)
                bne.w   loc_DA36
                jsr     (goaliesave).l
loc_DA36:                               ; CODE XREF: assgoaliecpu+4F2   j
                                        ; assgoaliecpu+4FC   j ...
                move.w  (a0),d0
                cmpi.w  #$FC,(pucky).w
                bgt.w   loc_DA4C
                cmpi.w  #$FF04,(pucky).w
                bgt.w   _de5
loc_DA4C:                               ; CODE XREF: assgoaliecpu+522   j
                moveq   #$18,d0
                tst.w   (TmpPuckX).w
                bpl.w   _de5
                neg.w   d0
_de5:                                   ; CODE XREF: assgoaliecpu+21C   j
                                        ; assgoaliecpu+222   j ...
                move.w  d2,d1
                movem.w d0-d1,-(sp)
                move.b  $28(a3),d0
                ext.w   d0
                neg.w   d0
                add.w   (sp)+,d0
                sub.w   (a3),d0
                move.b  $2A(a3),d1
                ext.w   d1
                neg.w   d1
                add.w   (sp)+,d1
                sub.w   $14(a3),d1
                cmp.w   #4,d0
                bgt.w   _vt
                cmp.w   #$FFFC,d0
                blt.w   _vt
                cmp.w   #4,d1
                bgt.w   _vt
                cmp.w   #$FFFC,d1
                blt.w   _vt
                clr.w   d0
                clr.w   d1
_vt:                                    ; CODE XREF: assgoaliecpu+560   j
                                        ; assgoaliecpu+568   j ...
                bsr.w   vtoa
                move.b  d0,$43(a3)      ; move d0 into temp2+1
_nodec:                                 ; CODE XREF: assgoaliecpu+1C6   j
                move.b  $43(a3),d2      ; temp2+1
                ext.w   d2
                cmp.w   #7,d2
                ble.w   playeracc
                bra.w   stopna
; ---------------------------------------------------------------------------
loc_DAB6:                               ; CODE XREF: assgoaliecpu+4E0   j
                                        ; assgoaliecpu+4E8   j
                tst.w   (puckc).w
                bpl.s   _de5
                btst    #2,(iflags).w
                bne.s   _de5
                movea.w #(HmShots-M68K_RAM),a1
                lea     $364(a1),a2
                btst    #6,$62(a3)
                beq.w   loc_DAD8
                exg     a1,a2
loc_DAD8:                               ; CODE XREF: assgoaliecpu+5B6   j
                cmpi.l  #$1324,$2A(a1)
                blt.w   _de5
                cmpi.l  #$9C4,$2A(a2)
                blt.w   _de5
                cmpi.w  #$E0,(pucky).w
                bgt.w   loc_DB04
                cmpi.w  #$FF20,(pucky).w
                bgt.w   _de5
loc_DB04:                               ; CODE XREF: assgoaliecpu+5DA   j
                tst.w   (puckvy).w
                btst    #7,$62(a3)
                beq.w   loc_DB16
                eori    #8,ccr
loc_DB16:                               ; CODE XREF: assgoaliecpu+5F2   j
                bmi.w   _de5
                move.w  (puckvx).w,d0
                bpl.w   loc_DB24
                neg.w   d0
loc_DB24:                               ; CODE XREF: assgoaliecpu+602   j
                move.w  (puckvy).w,d1
                bpl.w   loc_DB2E
                neg.w   d1
loc_DB2E:                               ; CODE XREF: assgoaliecpu+60C   j
                cmp.w   d0,d1
                blt.w   _de5
                move.l  #$F,d0          ; assignment DD2E?
                bra.w   assinsert
; End of function assgoaliecpu


sub_DB3E:                               ; CODE XREF: assgoaliecpu+3EE   p
                                        ; assgoaliecpu+436   p
                move.w  (puckc).w,d2
                cmp.w   $52(a3),d2
                bne.w   loc_DB4C
                clr.w   d0
loc_DB4C:                               ; CODE XREF: sub_DB3E+8   j
                cmp.w   #$103,d1
                blt.w   loc_DB58
                move.w  #$103,d1
loc_DB58:                               ; CODE XREF: sub_DB3E+12   j
                cmp.w   #$FEFD,d1
                bgt.w   loc_DB64
                move.w  #$FEFD,d1
loc_DB64:                               ; CODE XREF: sub_DB3E+1E   j
                sub.w   d3,d1
                rts
; End of function sub_DB3E


sub_DB68:                               ; CODE XREF: assgoaliecpu+3F6   p
                                        ; goalieacc+A2   p ...
                move.w  $54(a3),d1
                sub.w   d1,d0
                beq.w   rtss2
                neg.w   d0
                andi.w  #4,d0
                lsr.w   #1,d0
                subq.w  #1,d0
                btst    #3,$62(a3)
                bne.w   loc_DBAE
                        d1
                ori.w   #$6700,d2
                ori.b   #$40,-(a2) ; '@'
                btst    #7,$62(a3)
                bne.w   loc_DBA2
                        d1
                ori.l   #$60000006,d3
loc_DBA2:                               ; CODE XREF: sub_DB68+2E   j
                        d1
                ori.b   #0,(off_8).w
                neg.w   d0
                add.w   d0,d1
loc_DBAE:                               ; CODE XREF: sub_DB68+1A   j
                add.w   d0,d1
                andi.w  #7,d1
                move.w  d1,$54(a3)
                rts
; End of function sub_DB68


; set save animation for goalie depending on puck location
; a3 = goalie
; a0 = puckcross
; d3 = goalline of goalie
goaliesave:                             ; CODE XREF: doinput:loc_B5CC   p
                                        ; assgoaliecpu+514   p
                move.w  (a0),d0         ; puckcross x frames into d0
                sub.w   (a3),d0         ; sub goalie Xpos from d0
                move.w  d3,d1           ; move goalline into d1
                sub.w   $14(a3),d1      ; sub goalie Ypos from d1
                bsr.w   vtoa
                sub.w   $54(a3),d0      ; sub facedir from d0
                andi.w  #7,d0           ; pass first 3 bits of d0
                move.w  d0,d3           ; move d0 into d3
                lsr.w   #2,d0           ; divide d0 by 4
                btst    #3,4(a3)
                beq.w   loc_DBE2
                eori.w  #1,d0
loc_DBE2:                               ; CODE XREF: goaliesave+20   j
                cmpi.w  #8,(puckz).w
                bgt.w   loc_DBFA
                cmpi.w  #$800,(puckvz).w
                bgt.w   loc_DBFA
                bra.w   loc_DC24
; ---------------------------------------------------------------------------
loc_DBFA:                               ; CODE XREF: goaliesave+2E   j
                                        ; goaliesave+38   j
                movem.l d0,-(sp)
                move.w  (a3),d0
                sub.w   (a0),d0
                cmp.w   #$10,d0
                bgt.w   loc_DC1C
                cmp.w   #$FFF0,d0
                blt.w   loc_DC1C
                movem.l (sp)+,d0
                addq.w  #6,d0
                bra.w   loc_DCD0
; ---------------------------------------------------------------------------
loc_DC1C:                               ; CODE XREF: goaliesave+4C   j
                                        ; goaliesave+54   j
                movem.l (sp)+,d0
                bra.w   loc_DCD0
; ---------------------------------------------------------------------------
loc_DC24:                               ; CODE XREF: goaliesave+3C   j
                addq.w  #4,d0
                cmpi.w  #8,2(a0)
                bls.w   loc_DCAA
                cmpi.w  #2,$54(a3)
                beq.w   loc_DCD0
                cmpi.w  #6,$54(a3)
                beq.w   loc_DCD0
                tst.w   (puckc).w
                bmi.w   loc_DCD0
                subq.w  #2,d0
                move.w  d1,-(sp)
                move.w  #$1000,d1
                move.w  d1,$28(a3)
                ori.w   #1,d0
                btst    #7,$62(a3)
                bne.w   loc_DC6A
                eori.w  #1,d0
loc_DC6A:                               ; CODE XREF: goaliesave+A8   j
                move.w  #$FFFA,d1
                tst.w   $28(a3)
                bmi.w   loc_DC7A
                neg.w   $28(a3)
loc_DC7A:                               ; CODE XREF: goaliesave+B8   j
                tst.w   (a3)
                bpl.w   loc_DC94
                tst.w   $28(a3)
                bpl.w   loc_DC8C
                neg.w   $28(a3)
loc_DC8C:                               ; CODE XREF: goaliesave+CA   j
                move.w  #6,d1
                eori.w  #1,d0
loc_DC94:                               ; CODE XREF: goaliesave+C2   j
                add.w   d1,(a3)
                btst    #0,$76(a3)      ; check hand of goalie
                beq.w   loc_DCA4        ; Branch if goalie is Full Right
                eori.w  #1,d0
loc_DCA4:                               ; CODE XREF: goaliesave+E2   j
                move.w  (sp)+,d1
                bra.w   loc_DCD0
; ---------------------------------------------------------------------------
loc_DCAA:                               ; CODE XREF: goaliesave+72   j
                movem.l d0,-(sp)
                move.w  (a3),d0
                sub.w   (a0),d0
                cmp.w   #$10,d0
                ble.w   loc_DCC2
                movem.l (sp)+,d0
                bra.w   loc_DCCE
; ---------------------------------------------------------------------------
loc_DCC2:                               ; CODE XREF: goaliesave+FC   j
                cmp.w   #$FFF0,d0
                movem.l (sp)+,d0
                bgt.w   loc_DCD0
loc_DCCE:                               ; CODE XREF: goaliesave+104   j
                addq.w  #4,d0
loc_DCD0:                               ; CODE XREF: goaliesave+5E   j
                                        ; goaliesave+66   j ...
                add.w   d0,d0
                lea     _saveanim(pc),a1
                move.w  (a1,d0.w),d1
                cmp.w   #$178,d1
                bne.w   loc_DCF8
                andi.w  #3,d3
                beq.w   loc_DCF8
                cmpi.b  #$B,$73(a3)     ; 73 = Glove Left. Compares 11 dec to GloveL
                blt.w   loc_DCF8        ; branch if less than
                move.w  #$1AA,d1        ; reach out glove save
loc_DCF8:                               ; CODE XREF: goaliesave+124   j
                                        ; goaliesave+12C   j ...
                bsr.w   SetSPA
                addi.w  #$96,(crowdlevel).w
                addi.w  #$A,(CwdExciteLvl).w
                asr     $28(a3)
                asr     $28(a3)
                asr     $2A(a3)
                asr     $2A(a3)
                rts
; End of function goaliesave
; ---------------------------------------------------------------------------
_saveanim:      dc.w $146               ; DATA XREF: goaliesave+118   o
                                        ; blocker save
                dc.w $178               ; glove save
                dc.w $250               ; pad stack right
                dc.w $2A2               ; pad stack left
                dc.w $1EC               ; kick save
                dc.w $21E               ; blocking butterfly save
                dc.w $148E              ; high shoulder save right
                dc.w $14C0              ; high shoulder save left
                dc.w $14F2
                dc.w $1544              ; stick save left


sub_DD2E:                               ; DATA XREF: ROM:00018DB8   o
                btst    #3,$62(a3)
                bne.w   assexit
                btst    #0,(gmode).w
                bne.w   assexit
                bsr.w   check4bench
                bclr    #1,$62(a3)
                beq.w   loc_DD54
                clr.w   $40(a3)
loc_DD54:                               ; CODE XREF: sub_DD2E+1E   j
                sub.b   d7,$40(a3)
                bpl.w   loc_DDC0
                move.b  $6B(a3),d0      ; aidef
                beq.w   loc_DD70
                btst    #6,(byte_FFC2FC).w
                beq.w   loc_DD70
                subq.b  #1,d0
loc_DD70:                               ; CODE XREF: sub_DD2E+32   j
                                        ; sub_DD2E+3C   j
                lsr.b   #2,d0
                move.b  d0,$40(a3)
                tst.w   (puckc).w
                bpl.w   assexit
                tst.w   (puckvy).w
                btst    #7,$62(a3)
                beq.w   loc_DD90
                eori    #8,ccr
loc_DD90:                               ; CODE XREF: sub_DD2E+5A   j
                bmi.w   assexit
                movea.w #(HmShots-M68K_RAM),a1 ; load home team struct into a1
                lea     $364(a1),a2     ; load away team struct into a2
                btst    #6,$62(a3)      ; check if player is home or away
                beq.w   loc_DDA8        ; branch if home
                exg     a1,a2           ; swap if away
loc_DDA8:                               ; CODE XREF: sub_DD2E+74   j
                cmpi.l  #$E10,$2A(a1)
                blt.w   assexit
                cmpi.l  #$640,$2A(a2)
                blt.w   assexit
loc_DDC0:                               ; CODE XREF: sub_DD2E+2A   j
                bra.w   skatetopuck
; End of function sub_DD2E


breakaway:                              ; CODE XREF: chkpuckc+14   p
                                        ; assbreakaway:_puckc   p
                bset    #2,(byte_FFC2F6).w
                bclr    #1,$62(a3)      ; pfna - clear new assignment
                beq.w   _nna            ; jump if no new assignment
                move.w  #1,-(sp)        ; ding SFX
                jsr     (sfx).l
                movem.l a2,-(sp)        ; push a2 on stack
                movea.l #$FFFFC6CE,a2   ; move Home Team Struct into a2
                btst    #6,$62(a3)      ; pfteam - check if home or away
                beq.w   _c0             ; jump if home
                movea.l #$FFFFCA32,a2   ; move Away Team Struct into a2
_c0:                                    ; CODE XREF: breakaway+2A   j
                addq.w  #1,$358(a2)     ; add one to breakaway attempt
                addi.w  #$14,(CwdExciteLvl).w ; add to CwdExcite
                addi.w  #$C8,(crowdlevel).w ; add to crowdlevel
                movem.l (sp)+,a2
_nna:                                   ; CODE XREF: breakaway+C   j
                movem.w d1,-(sp)        ; push d1 on stack
                move.w  $14(a3),d0      ; move Ypos into d0
                move.w  $2A(a3),d1      ; move Yvel into d1
                beq.w   loc_DE24        ; jump if Yvel didnt change
                eor.w   d1,d0
_exit:                                  ; CODE XREF: breakaway+64   j
                movem.w (sp)+,d1        ; pop d1 off stack
                rts
; ---------------------------------------------------------------------------
loc_DE24:                               ; CODE XREF: breakaway+54   j
                move.w  #$FFFF,d1
                bra.s   _exit
; End of function breakaway


BreakawayOffsidesFlagSet:               ; CODE XREF: asspuckc+44   p
                                        ; assnearest+30   p
                btst    #1,$62(a3)      ; check for new assignment
                beq.w   _loadYpos       ; branch if no new assignment
                bclr    #0,$64(a3)
                bclr    #1,$64(a3)
_loadYpos:                              ; CODE XREF: BreakawayOffsidesFlagSet+6   j
                movem.w d0-d1/a0,-(sp)
                move.w  #$108,d0        ; 108 = top goal line Y pos
                move.w  $14(a3),d1      ; Ypos
                bpl.w   _cmpgoalline
                neg.w   d1
_cmpgoalline:                           ; CODE XREF: BreakawayOffsidesFlagSet+22   j
                cmp.w   d0,d1           ; compare position to top goal line
                bge.w   _nogood         ; Branch if above it
                move.w  #$58,d0 ; 'X'   ; 58 = top blue line Y pos
                move.w  $14(a3),d1      ; Ypos
                btst    #7,$62(a3)      ; check goal to shoot on (0=bottom, 1=top)
                bne.w   loc_DE76        ; branch if top goal
                neg.w   d0              ; bottom goal
                cmp.w   d1,d0           ; compare Ypos to blue line Y
                blt.w   _setoffside
                bra.w   _offzone
; ---------------------------------------------------------------------------
loc_DE76:                               ; CODE XREF: BreakawayOffsidesFlagSet+3C   j
                cmp.w   d1,d0           ; compare Ypos to blue line Y
                blt.w   _offzone        ; branch if in offensive zone
_setoffside:                            ; CODE XREF: BreakawayOffsidesFlagSet+44   j
                bset    #0,$64(a3)      ; set offsides flag
                bra.w   _nogood
; ---------------------------------------------------------------------------
_offzone:                               ; CODE XREF: BreakawayOffsidesFlagSet+48   j
                                        ; BreakawayOffsidesFlagSet+4E   j
                bclr    #0,$64(a3)      ; clear offside bit
                beq.w   _nogood         ; branch if on the blue line
                movea.l #$FFFFB5CA,a0   ; loads last SCScruct player struct (Away pos #6)
                move.w  #$B,d0          ; B = # of player structs to check (12)
                tst.w   d1              ; checks if d1 is negative (determines what zone to check)
                bmi.w   _checkYpos
_checkYpos2:                            ; CODE XREF: BreakawayOffsidesFlagSet+8E   j
                cmp.w   $14(a0),d1
                bge.w   _substruct2
                tst.w   $34(a0)
                beq.w   _substruct2
                bra.w   _nogood
; ---------------------------------------------------------------------------
_substruct2:                            ; CODE XREF: BreakawayOffsidesFlagSet+7A   j
                                        ; BreakawayOffsidesFlagSet+82   j
                suba.w  #$80,a0
                dbf     d0,_checkYpos2
_setBAbit:                              ; CODE XREF: BreakawayOffsidesFlagSet+C2   j
                bset    #1,$64(a3)      ; set breakaway bit
                move.w  #1,d0           ; might have to do with SFX (ding)
_exit:                                  ; CODE XREF: BreakawayOffsidesFlagSet+A6   j
                movem.w (sp)+,d0-d1/a0
                rts
; ---------------------------------------------------------------------------
_nogood:                                ; CODE XREF: BreakawayOffsidesFlagSet+2A   j
                                        ; BreakawayOffsidesFlagSet+58   j ...
                move.w  #0,d0
                bra.s   _exit
; ---------------------------------------------------------------------------
_checkYpos:                             ; CODE XREF: BreakawayOffsidesFlagSet+72   j
                                        ; BreakawayOffsidesFlagSet+BE   j
                cmp.w   $14(a0),d1      ; check Ypos with d1 (d1 = blue line Y)
                ble.w   _substruct
                tst.w   $34(a0)         ; checks if goalie (who would be below blue line)
                beq.w   _substruct
                bra.s   _nogood
; ---------------------------------------------------------------------------
_substruct:                             ; CODE XREF: BreakawayOffsidesFlagSet+AC   j
                                        ; BreakawayOffsidesFlagSet+B4   j
                suba.w  #$80,a0         ; subtract SCstruct size (80 hex)
                dbf     d0,_checkYpos
                bra.s   _setBAbit
; End of function BreakawayOffsidesFlagSet


chkpuckc:                               ; DATA XREF: ROM:00018E00   o
                btst    #0,(word_FFC2FA).w
                bne.w   loc_DF0A
                btst    #2,(BA_PS_flags).w
                bne.w   loc_DF0A
                bsr.w   breakaway
                bpl.w   asspuckc
loc_DF0A:                               ; CODE XREF: chkpuckc+6   j
                                        ; chkpuckc+10   j
                bclr    #1,$64(a3)
                move.w  #$10,d0         ; asspuckc?
                bsr.w   assreplace
; End of function chkpuckc


asspuckc:                               ; CODE XREF: chkpuckc+18   j
                bclr    #2,(byte_FFC2F6).w
                bne.w   loc_DF28
                bclr    #1,$64(a3)
loc_DF28:                               ; CODE XREF: asspuckc+6   j
                move.w  (puckc).w,d0
                cmp.w   $52(a3),d0
                bne.w   assexit
                btst    #2,(BA_PS_flags).w
                beq.w   loc_DF48
                cmpi.w  #1,(word_FFC31A).w
                bgt.w   locret_E1CA
loc_DF48:                               ; CODE XREF: asspuckc+22   j
                btst    #1,$64(a3)
                bne.w   loc_DF72
                btst    #2,(BA_PS_flags).w
                bne.w   loc_DF72
                jsr     (BreakawayOffsidesFlagSet).l
                beq.w   loc_DF72
                move.w  #$21,d0 ; '!'   ; ??
                bsr.w   assreplace
                bra.w   *+4
; ---------------------------------------------------------------------------
loc_DF72:                               ; CODE XREF: asspuckc+36   j
                                        ; asspuckc+40   j ...
                btst    #5,$62(a3)
                bne.w   rtss2
                btst    #2,(BA_PS_flags).w
                bne.w   loc_DF90
                btst    #0,(gmode).w
                bne.w   assnothing
loc_DF90:                               ; CODE XREF: asspuckc+6A   j
                btst    #3,$62(a3)
                bne.w   assexit
                bclr    #1,$62(a3)
                beq.w   loc_E008
                btst    #1,$64(a3)
                beq.w   loc_DFB8
                move.w  #1,-(sp)
                jsr     (sfx).l
loc_DFB8:                               ; CODE XREF: asspuckc+92   j
                btst    #1,$64(a3)
                beq.w   loc_DFF0
                movem.l a2,-(sp)
                movea.l #$FFFFC6CE,a2
                btst    #6,$62(a3)
                beq.w   loc_DFDC
                movea.l #$FFFFCA32,a2
loc_DFDC:                               ; CODE XREF: asspuckc+BA   j
                addq.w  #1,$358(a2)
                addi.w  #$14,(CwdExciteLvl).w
                addi.w  #$C8,(crowdlevel).w
                movem.l (sp)+,a2
loc_DFF0:                               ; CODE XREF: asspuckc+A6   j
                clr.w   $40(a3)
                move.w  #8,$42(a3)
                move.w  (VDP_CNTR).l,d0
                andi.w  #3,d0
                move.w  d0,$44(a3)
loc_E008:                               ; CODE XREF: asspuckc+88   j
                sub.b   d7,$40(a3)
                bpl.w   loc_E0B8
                move.b  $6A(a3),$40(a3)
                jsr     (ReadGoaliePulled).l
                bmi.w   loc_E032
                btst    #6,(byte_FFC2FC).w
                beq.w   loc_E036
                tst.b   $40(a3)
                beq.w   loc_E036
loc_E032:                               ; CODE XREF: asspuckc+104   j
                subq.b  #1,$40(a3)
loc_E036:                               ; CODE XREF: asspuckc+10E   j
                                        ; asspuckc+116   j
                btst    #2,(BA_PS_flags).w
                bne.w   loc_E0A4
                btst    #0,(word_FFC2FA).w
                bne.w   loc_E0A4
                bsr.w   sub_E62E
                bsr.w   sub_E1F4
                btst    #0,(word_FFC2FA).w
                bne.w   loc_E0A4
                btst    #2,(BA_PS_flags).w
                bne.w   loc_E0A4
                btst    #1,$64(a3)
                bne.w   loc_E09C
                move.w  #1,d0
                btst    #6,$62(a3)
                beq.w   loc_E082
                move.w  #2,d0
loc_E082:                               ; CODE XREF: asspuckc+162   j
                cmp.w   (cont1team).w,d0
                beq.w   loc_E09C
                cmp.w   (cont2team).w,d0
                beq.w   loc_E09C
                btst    #1,(vcount+1).w
                bne.w   loc_E0B4
loc_E09C:                               ; CODE XREF: asspuckc+154   j
                                        ; asspuckc+16E   j ...
                bsr.w   chk4shot
                bra.w   loc_E0B4
; ---------------------------------------------------------------------------
loc_E0A4:                               ; CODE XREF: asspuckc+124   j
                                        ; asspuckc+12E   j ...
                jsr     (sub_FE8EC).l
                bne.w   loc_E0B8
                jsr     (compshoot?).l
loc_E0B4:                               ; CODE XREF: asspuckc+180   j
                                        ; asspuckc+188   j
                bsr.w   chk4pass
loc_E0B8:                               ; CODE XREF: asspuckc+F4   j
                                        ; asspuckc+192   j
                moveq   #6,d0
                add.w   $44(a3),d0      ; add temp3 to d0
                lea     _postab2(pc),a0
                btst    #7,(sflags2).w  ; #sf2offsig
                beq.w   loc_E0D0
                move.w  $34(a3),d0      ; position
loc_E0D0:                               ; CODE XREF: asspuckc+1B0   j
                asl.w   #2,d0
                move.w  2(a0,d0.w),d1
                move.w  (a0,d0.w),d0
                btst    #2,(BA_PS_flags).w
                bne.w   loc_E0EE
                btst    #0,(word_FFC2FA).w
                beq.w   loc_E0FE
loc_E0EE:                               ; CODE XREF: asspuckc+1C8   j
                jsr     (sub_FE864).l
                cmpi.b  #$80,(word_FFDA16).w
                beq.w   locret_E1CA
loc_E0FE:                               ; CODE XREF: asspuckc+1D2   j
                btst    #7,$62(a3)      ; pfgoal - 0 for bottom 1 for top
                bne.w   loc_E10C
                neg.w   d0
                neg.w   d1
loc_E10C:                               ; CODE XREF: asspuckc+1EC   j
                lea     loc_E12C(pc),a0
                btst    #2,(BA_PS_flags).w
                bne.w   loc_E124
                btst    #0,(word_FFC2FA).w
                beq.w   loc_E128
loc_E124:                               ; CODE XREF: asspuckc+1FE   j
                lea     locret_E1CA(pc),a0
loc_E128:                               ; CODE XREF: asspuckc+208   j
                bra.w   skateto
; ---------------------------------------------------------------------------
loc_E12C:                               ; DATA XREF: asspuckc:loc_E10C   o
                ext.w   d0
                move.b  $28(a3),d2      ; Xvel
                ext.w   d2
                add.w   (puckx).w,d2
                move.b  $2A(a3),d3      ; Yvel
                ext.w   d3
                add.w   (pucky).w,d3
                clr.w   (threat).w
                moveq   #5,d4
                movea.w #(SortCords-M68K_RAM),a0
                cmpi.w  #6,$52(a3)
                bge.w   loc_E15A
                adda.w  #$300,a0        ; away team SCstruct start
loc_E15A:                               ; CODE XREF: asspuckc+23A   j
                                        ; asspuckc+2AE   j
                move.b  $28(a0),d1      ; Xvel
                ext.w   d1
                add.w   (a0),d1         ; Xpos
                sub.w   d2,d1
                cmp.w   #$14,d1
                bgt.w   loc_E1C2
                cmp.w   #$FFEC,d1
                blt.w   loc_E1C2
                move.b  $2A(a0),d1      ; Yvel
                ext.w   d1
                add.w   $14(a0),d1      ; Ypos
                sub.w   d3,d1
                cmp.w   #$14,d1
                bgt.w   loc_E1C2
                cmp.w   #$FFEC,d1
                blt.w   loc_E1C2
                addq.w  #1,(threat).w
                move.w  (a3),d0         ; Xpos
                sub.w   (a0),d0
                move.w  $14(a3),d1      ; Ypos
                sub.w   $14(a0),d1
                bsr.w   vtoa
                move.w  $54(a3),d1      ; facedir
                eori.w  #4,d1
                cmp.w   d0,d1
                bne.w   loc_E1C2
                move.w  (VDP_CNTR).l,d1
                andi.w  #1,d1
                add.w   d1,d0
                andi.w  #7,d0
loc_E1C2:                               ; CODE XREF: asspuckc+250   j
                                        ; asspuckc+258   j ...
                adda.w  #$80,a0         ; SCstruct size
                dbf     d4,loc_E15A
locret_E1CA:                            ; CODE XREF: asspuckc+2C   j
                                        ; asspuckc+1E2   j
                                        ; DATA XREF: ...
                rts
; End of function asspuckc
; ---------------------------------------------------------------------------
_postab2:       dc.w $FF9C              ; DATA XREF: asspuckc+1A6   o
                dc.w $FFEC
                dc.w $64
                dc.w $FFEC
                dc.w $FF88
                dc.w $28
                dc.w $14
                dc.w $28
                dc.w $78
                dc.w $28
                dc.w $FFEC
                dc.w $28
                dc.w $FFD8
                dc.w $F0
                dc.w 0
                dc.w $DC
                dc.w $14
                dc.w $E6
                dc.w $1E
                dc.w $E6


sub_E1F4:                               ; CODE XREF: asspuckc+136   p
                btst    #4,(byte_FFC2FC).w
                bne.w   rtss2
                move.w  (pucky).w,d0
                btst    #7,$62(a3)
                bne.w   loc_E20E
                neg.w   d0
loc_E20E:                               ; CODE XREF: sub_E1F4+14   j
                tst.w   d0
                bmi.w   rtss2
                cmp.w   #$58,d0 ; 'X'
                bgt.w   rtss2
                move.w  (VDP_CNTR).l,d0
                andi.w  #3,d0
                bne.w   rtss2
                btst    #3,$63(a3)
                bne.w   rtss2
                movea.w #(HmShots-M68K_RAM),a2
                lea     $364(a2),a1
                btst    #6,$62(a3)
                beq.w   loc_E248
                exg     a2,a1
loc_E248:                               ; CODE XREF: sub_E1F4+4E   j
                bsr.w   sub_12EF6
                cmp.w   #$C00,d0
                bhi.w   rtss2
                bsr.w   CompLine
                bsr.w   SetPersonel
                bsr.w   PrintScores1
                bra.w   compshoot?
; End of function sub_E1F4


; return z flag set if killing penalty
; return z flag clr if not
chkpk:                                  ; CODE XREF: assdefd+96   p
                                        ; chk4shot   p
                btst    #5,(sflags2).w  ; #sf2pwrplay - check if power play in progress
                bne.w   chkpk2
                eori    #4,ccr          ; Z flag
                rts
; End of function chkpk


chkpk2:                                 ; CODE XREF: chkpk+6   j
                                        ; assnearest+244   p ...
                movem.l d0-d1,-(sp)
                btst    #6,(sflags2).w  ; #sf2pwrtm - 0 for team 1, 1 for team 2
                move    sr,d0
                btst    #6,$62(a3)      ; pfteam - 0 home, 1 away
                move    sr,d1
                eor.w   d1,d0
                move    d0,ccr
                movem.l (sp)+,d0-d1
                rts
; End of function chkpk2


; player a3 looks for shot (computer controlled)
chk4shot:                               ; CODE XREF: asspuckc:loc_E09C   p
                bsr.s   chkpk
                bne.w   _pkill          ; killing penalty
                tst.w   (threat).w
                beq.w   _pkill          ; no threat
                move.w  (VDP_CNTR).l,d0
                andi.w  #3,d0
                bne.w   _pkill
                move.w  #$58,d0 ; 'X'   ; top blue line Y position
                btst    #7,$62(a3)
                beq.w   _cmphome
                move.w  #$FFA8,d0       ; bottom blue line Y pos
                cmp.w   $14(a3),d0
                blt.w   compshoot?      ; clear puck
                bra.w   loc_E2D4
; ---------------------------------------------------------------------------
_cmphome:                               ; CODE XREF: chk4shot+26   j
                cmp.w   $14(a3),d0
                bgt.w   compshoot?      ; clear puck
loc_E2D4:                               ; CODE XREF: chk4shot+36   j
                bset    #3,(byte_FFC2F6).w
                jmp     dopass
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
_pkill:                                 ; CODE XREF: chk4shot+2   j
                                        ; chk4shot+A   j ...
                btst    #1,$64(a3)
                beq.w   loc_E32C
                move.w  #$1E,d0
                jsr     (randomd0).l
                addi.w  #$82,d0
                cmp.w   (pucky).w,d0
                blt.w   loc_E312
                neg.w   d0
                cmp.w   (pucky).w,d0
                bgt.w   loc_E312
                bra.w   loc_E32C
; ---------------------------------------------------------------------------
loc_E312:                               ; CODE XREF: chk4shot+6E   j
                                        ; chk4shot+78   j
                move.w  #2,d0
                jsr     (randomd0s).l
                add.w   $54(a3),d0
                andi.w  #7,d0
                move.w  d0,$54(a3)
                bra.w   compshoot?
; ---------------------------------------------------------------------------
loc_E32C:                               ; CODE XREF: chk4shot+58   j
                                        ; chk4shot+7C   j
                moveq   #$20,d4 ; ' '
                clr.w   d1
                move.b  $70(a3),d1
                lsr.w   #1,d1
                sub.b   d1,d4
                asl.w   #4,d4
                move.w  #$108,d1        ; top goal line Y
                btst    #7,$62(a3)
                bne.w   loc_E34A
                neg.w   d1
loc_E34A:                               ; CODE XREF: chk4shot+B2   j
                sub.w   (pucky).w,d1
                move.w  (puckx).w,d0
                neg.w   d0
                movem.w d0-d1,-(sp)
                muls.w  d0,d0
                muls.w  d1,d1
                add.l   d0,d1
                cmp.l   #$2710,d1
                movem.w (sp)+,d0-d1
                bhi.w   loc_E3C4
                lsr.w   #4,d4
                bsr.w   vtoa
                move.w  d0,d5
                moveq   #5,d3
                movea.w #(SortCords-M68K_RAM),a1
                cmpi.w  #6,$52(a3)
                bge.w   loc_E388
                adda.w  #$300,a1
loc_E388:                               ; CODE XREF: chk4shot+EE   j
                                        ; chk4shot+12E   j
                tst.w   $34(a1)
                beq.w   loc_E3AE
                move.w  (a1),d0
                sub.w   (puckx).w,d0
                move.w  $14(a1),d1
                sub.w   (pucky).w,d1
                bsr.w   vtoa
                cmp.w   d5,d0
                bne.w   loc_E3BC
                asl.w   #1,d4
                bra.w   loc_E3BC
; ---------------------------------------------------------------------------
loc_E3AE:                               ; CODE XREF: chk4shot+FA   j
                btst    #1,$63(a1)
                beq.w   loc_E3BC
                clr.w   d3
                moveq   #1,d4
loc_E3BC:                               ; CODE XREF: chk4shot+112   j
                                        ; chk4shot+118   j ...
                adda.w  #$80,a1
                dbf     d3,loc_E388
loc_E3C4:                               ; CODE XREF: chk4shot+D6   j
                move.w  d4,d0
                bsr.w   randomd0
                btst    #0,$70(a3)
                beq.w   loc_E3E0
                cmp.w   #7,d0
                bgt.w   rtss2
                bra.w   loc_E3E8
; ---------------------------------------------------------------------------
loc_E3E0:                               ; CODE XREF: chk4shot+13E   j
                cmp.w   #8,d0
                bgt.w   rtss2
loc_E3E8:                               ; CODE XREF: chk4shot+14A   j
                move.w  (pucky).w,d0
                btst    #7,$62(a3)
                bne.w   loc_E3F8
                neg.w   d0
loc_E3F8:                               ; CODE XREF: chk4shot+160   j
                tst.w   d0
                bmi.w   rtss2
                move.w  #$108,d1
                sub.w   d0,d1
                bmi.w   rtss2
                btst    #7,(sflags2).w
                bne.w   rtss2
; End of function chk4shot


compshoot?:                             ; CODE XREF: asspuckc+196   p
                                        ; sub_E1F4+6C   j ...
                addq.w  #4,sp
                move.w  (pucky).w,d0
                btst    #7,$62(a3)
                bne.w   loc_E424
                neg.w   d0
loc_E424:                               ; CODE XREF: compshoot?+C   j
                move.w  #$108,d1
                sub.w   d0,d1
                lsr.w   #3,d1
                cmp.w   #$14,d1
                blt.w   loc_E436
                moveq   #$14,d1
loc_E436:                               ; CODE XREF: compshoot?+1E   j
                move.w  d1,$42(a3)
                move.l  #$12,d0         ; assshoot
                bra.w   assreplace
; End of function compshoot?


chk4pass:                               ; CODE XREF: assgoaliecpu+2C4   p
                                        ; asspuckc:loc_E0B4   p
                tst.w   (threat).w
                bne.w   loc_E45E
                moveq   #$10,d0
                add.b   $70(a3),d0
                bsr.w   randomd0
                cmp.w   #$C,d0
                bgt.w   rtss2
loc_E45E:                               ; CODE XREF: chk4pass+4   j
                moveq   #6,d0
                bsr.w   randomd0
                cmpi.w  #6,$52(a3)
                blt.w   loc_E470
                addq.w  #6,d0
loc_E470:                               ; CODE XREF: chk4pass+26   j
                tst.w   $34(a3)
                beq.w   loc_E4A0
                cmpi.w  #$28,(puckx).w ; '('
                bgt.w   loc_E4A0
                cmpi.w  #$FFD8,(puckx).w
                blt.w   loc_E4A0
                cmpi.w  #$CC,(pucky).w
                bgt.w   rtss2
                cmpi.w  #$FF34,(pucky).w
                blt.w   rtss2
loc_E4A0:                               ; CODE XREF: chk4pass+30   j
                                        ; chk4pass+3A   j ...
                cmp.w   $52(a3),d0
                beq.w   rtss2
                asl.w   #7,d0
                movea.w #(SortCords-M68K_RAM),a0
                adda.w  d0,a0
                tst.w   $34(a0)
                ble.w   rtss2
                btst    #2,$63(a0)
                bne.w   rtss2
                btst    #5,$62(a0)
                bne.w   rtss2
                move.w  $14(a0),d0
                move.w  $14(a3),d1
                btst    #7,$62(a3)
                bne.w   loc_E4E2
                neg.w   d0
                neg.w   d1
loc_E4E2:                               ; CODE XREF: chk4pass+96   j
                btst    #5,(gmode).w
                beq.w   loc_E502
                movem.w d0-d1,-(sp)
                subi.w  #$58,d0 ; 'X'
                subi.w  #$58,d1 ; 'X'
                eor.w   d0,d1
                movem.w (sp)+,d0-d1
                bmi.w   rtss2
loc_E502:                               ; CODE XREF: chk4pass+A4   j
                cmp.w   #$58,d0 ; 'X'
                bgt.w   loc_E514
                sub.w   d1,d0
                cmp.w   #$FFF1,d0
                blt.w   rtss2
loc_E514:                               ; CODE XREF: chk4pass+C2   j
                move.w  (a0),d0
                sub.w   (puckx).w,d0
                move.w  $14(a0),d1
                sub.w   (pucky).w,d1
                movem.w d0-d1,-(sp)
                bsr.w   vtoa
                move.w  d0,(passdir).w
                movem.w (sp)+,d1-d2
                muls.w  d1,d1
                muls.w  d2,d2
                add.l   d1,d2
                moveq   #5,d3
                movea.w #(SortCords-M68K_RAM),a1
                cmpi.w  #6,$52(a3)
                bge.w   loc_E54C
                adda.w  #$300,a1
loc_E54C:                               ; CODE XREF: chk4pass+100   j
                                        ; chk4pass+13A   j
                move.w  (a1),d0
                sub.w   (puckx).w,d0
                move.w  $14(a1),d1
                sub.w   (pucky).w,d1
                movem.w d0-d1,-(sp)
                muls.w  d0,d0
                muls.w  d1,d1
                add.l   d0,d1
                cmp.l   d2,d1
                movem.w (sp)+,d0-d1
                bhi.w   loc_E57A
                bsr.w   vtoa
                cmp.w   (passdir).w,d0
                beq.w   rtss2
loc_E57A:                               ; CODE XREF: chk4pass+126   j
                adda.w  #$80,a1
                dbf     d3,loc_E54C
                bsr.w   dopass
                tst.w   $34(a3)
                beq.w   rtss2
                addq.w  #4,sp
                bra.w   assexit
; End of function chk4pass
; ---------------------------------------------------------------------------
EvadePC:                                ; DATA XREF: assdefo:_nodec   o
                                        ; asswingo:_0   o ...
                tst.w   (puckc).w
                bmi.w   rtss2
                move.b  $28(a3),d2
                sub.b   (puckvx).w,d2
                ext.w   d2
                add.w   (a3),d2
                sub.w   (puckx).w,d2
                cmp.w   #$28,d2 ; '('
                bgt.w   rtss2
                cmp.w   #$FFD8,d2
                blt.w   rtss2
                move.b  $2A(a3),d1
                sub.b   (puckvy).w,d1
                ext.w   d1
                add.w   $14(a3),d1
                sub.w   (pucky).w,d1
                cmp.w   #$28,d1 ; '('
                bgt.w   rtss2
                cmp.w   #$FFD8,d1
                blt.w   rtss2
                move.w  (a3),d0
                sub.w   (puckx).w,d0
                move.w  $14(a3),d1
                sub.w   (pucky).w,d1
                bsr.w   vtoa
                btst    #5,(gmode).w
                beq.w   locret_E62C
                move.w  $14(a3),d1
                btst    #7,$62(a3)
                bne.w   loc_E60A
                neg.w   d1
loc_E60A:                               ; CODE XREF: ROM:0000E604   j
                subi.w  #$58,d1 ; 'X'
                cmp.w   #$A,d1
                bgt.w   locret_E62C
                cmp.w   #$FFCE,d1
                blt.w   locret_E62C
                moveq   #2,d0
                move.w  (a3),d1
                cmp.w   (puckx).w,d1
                bgt.w   locret_E62C
                moveq   #6,d0
locret_E62C:                            ; CODE XREF: ROM:0000E5F6   j
                                        ; ROM:0000E612   j ...
                rts


sub_E62E:                               ; CODE XREF: ROM:loc_B72E   p
                                        ; asspuckc+132   p
                btst    #5,(gmode).w
                beq.w   rtss2
                btst    #2,(BA_PS_flags).w
                bne.w   rtss2
                movem.l d0-d1/a0,-(sp)
                moveq   #5,d0
                movea.w #(SortCords-M68K_RAM),a0
                cmpi.w  #6,$52(a3)
                blt.w   loc_E65A
                adda.w  #$300,a0
loc_E65A:                               ; CODE XREF: sub_E62E+24   j
                moveq   #$5C,d1 ; '\'
                btst    #7,$62(a3)
                bne.w   loc_E6B0
                neg.w   d1
                cmp.w   (pucky).w,d1
                bgt.w   loc_E688
loc_E670:                               ; CODE XREF: sub_E62E+56   j
                tst.w   $34(a0)
                bmi.w   loc_E680
                cmp.w   $14(a0),d1
                bgt.w   loc_E69A
loc_E680:                               ; CODE XREF: sub_E62E+46   j
                adda.w  #$80,a0
                dbf     d0,loc_E670
loc_E688:                               ; CODE XREF: sub_E62E+3E   j
                                        ; sub_E62E+86   j ...
                moveq   #$40,d0 ; '@'
                bclr    #7,(sflags2).w
                bne.w   loc_E6A4
loc_E694:                               ; CODE XREF: sub_E62E+74   j
                                        ; sub_E62E+7A   j ...
                movem.l (sp)+,d0-d1/a0
                rts
; ---------------------------------------------------------------------------
loc_E69A:                               ; CODE XREF: sub_E62E+4E   j
                                        ; sub_E62E+94   j
                moveq   #6,d0
                bset    #7,(sflags2).w
                bne.s   loc_E694
loc_E6A4:                               ; CODE XREF: sub_E62E+62   j
                tst.w   (RefCnt).w
                bpl.s   loc_E694
                bsr.w   PushRef
                bra.s   loc_E694
; ---------------------------------------------------------------------------
loc_E6B0:                               ; CODE XREF: sub_E62E+34   j
                cmp.w   (pucky).w,d1
                blt.s   loc_E688
loc_E6B6:                               ; CODE XREF: sub_E62E+9A   j
                tst.w   $34(a0)
                bmi.w   loc_E6C4
                cmp.w   $14(a0),d1
                blt.s   loc_E69A
loc_E6C4:                               ; CODE XREF: sub_E62E+8C   j
                adda.w  #$80,a0
                dbf     d0,loc_E6B6
                bra.s   loc_E688
; End of function sub_E62E


; assignment for breakaway
assbreakaway:                           ; DATA XREF: ROM:00018E04   o
                move.w  $52(a3),d0      ; Move SCnum into d0
                cmp.w   (puckc).w,d0    ; compare puck carrier SCnum with d0
                beq.w   _puckc          ; branch if puck carrier
_notpuckc:                              ; CODE XREF: assbreakaway+24   j
                bclr    #1,$64(a3)
                move.w  #$11,d0         ; 11 - assnearest
                bsr.w   assreplace
                bra.w   assnearest
; ---------------------------------------------------------------------------
_puckc:                                 ; CODE XREF: assbreakaway+8   j
                jsr     (breakaway).l
                bmi.s   _notpuckc
; End of function assbreakaway


; this is a special assignment used for the player who is nearest the puck but doesn't have it
assnearest:                             ; CODE XREF: assbreakaway+1A   j
                bclr    #2,(byte_FFC2F6).w
                bne.w   _chkpuck
                bclr    #1,$64(a3)      ; clear breakaway bit
_chkpuck:                               ; CODE XREF: assnearest+6   j
                move.w  $52(a3),d0      ; move SCnum into d0
                cmp.w   (puckc).w,d0    ; compare with puck carrier SCnum
                bne.w   _chkbreak       ; jump if not puck carrier
                btst    #1,$64(a3)      ; check breakaway bit
                bne.w   _chkbreak       ; jump if set
                btst    #2,(BA_PS_flags).w ; check if bit 2 set (cleared on Faceoffs)
                bne.w   _chkbreak       ; jump if set
                jsr     (BreakawayOffsidesFlagSet).l
                beq.w   _chkbreak
                move.w  #$22,d0 ; '"'   ; 22 - assbreakaway if flag set
                bsr.w   assreplace      ; assreplace with assbreakaway
                bra.w   *+4
; ---------------------------------------------------------------------------
_chkbreak:                              ; CODE XREF: assnearest+18   j
                                        ; assnearest+22   j ...
                bclr    #1,$62(a3)      ; pfna - clear new assignment
                beq.w   _nna
                btst    #1,$64(a3)      ; check if breakaway
                beq.w   _chkbreak2      ; jump if not
                move.w  #1,-(sp)        ; ding SFX
                jsr     (sfx).l
_chkbreak2:                             ; CODE XREF: assnearest+56   j
                btst    #1,$64(a3)      ; check if breakaway
                beq.w   _nobreak        ; jump if not
                movem.l a2,-(sp)        ; push a2 to stack
                movea.l #$FFFFC6CE,a2   ; put Home Team Struct into a2
                btst    #6,$62(a3)      ; pfteam - check home or away
                beq.w   _addcrowd       ; jump if home
                movea.l #$FFFFCA32,a2   ; put Away Team Struct into a2
_addcrowd:                              ; CODE XREF: assnearest+7E   j
                addq.w  #1,$358(a2)     ; add to breakaway attempt
                addi.w  #$14,(CwdExciteLvl).w ; add to excite level
                addi.w  #$C8,(crowdlevel).w ; add to crowd level
                movem.l (sp)+,a2        ; pop off stack into a2
_nobreak:                               ; CODE XREF: assnearest+6A   j
                clr.w   $44(a3)         ; clear temp3
                move.w  #8,$42(a3)      ; move 8 into temp2
                clr.w   $40(a3)         ; clear temp1
_nna:                                   ; CODE XREF: assnearest+4C   j
                move.w  $52(a3),d1      ; checks if puck carrier
                cmp.w   (puckc).w,d1
                bne.w   _nopc           ; jumps if not
                tst.w   $34(a3)         ; check if goalie
                beq.w   assgoaliecpu    ; branch if goalie
                move.l  #$10,d0         ; 10 = asspuckc
                btst    #3,$62(a3)      ; pfjoycon - check if controlled
                beq.w   assinsert       ; jump if not
                rts
; ---------------------------------------------------------------------------
_nopc:                                  ; CODE XREF: assnearest+B2   j
                sub.b   d7,$40(a3)      ; subtract d7 (elapsed frames) from temp1
                bpl.w   _nodec          ; jump if positive
                move.b  $6A(a3),$40(a3) ; move aioff into temp1
                jsr     (ReadGoaliePulled).l ; check if goalie is pulled
                bmi.w   _bonus
                btst    #6,(byte_FFC2FC).w ; check if crowd meter currently broken
                beq.w   _nopc2          ; jump if not broken
                tst.b   $40(a3)         ; check if temp1 is 0
                beq.w   _nopc2          ; jump if so
_bonus:                                 ; CODE XREF: assnearest+E4   j
                subq.b  #1,$40(a3)      ; subtract 1 from temp1
_nopc2:                                 ; CODE XREF: assnearest+EE   j
                                        ; assnearest+F6   j
                btst    #5,(word_FFC2F8).w ; check if slot bit is set (puckc in slot)
                beq.w   _nopc3          ; branch if not set
                move.w  (puckc).w,d1    ; move puck carrier SCnum
                cmp.w   #5,d1           ; check if its home (5 or less) or away (6-11)
                bgt.w   _pcaway         ; jump if away
                btst    #6,$62(a3)      ; pfteam
                beq.w   _nopc3          ; jump if home
_tmnopc:                                ; CODE XREF: assnearest+13E   j
                move.b  $40(a3),d1      ; temp1 into d1
                ext.w   d1              ; extend d1
                asr.w   #1,d1           ; divide by 2
                move.b  d1,$40(a3)      ; move d1 into temp1 - cutting the timer in half
                bne.w   _nopc3          ; jump if not zero
                move.b  #1,$40(a3)      ; move 1 into temp1
                bra.w   _nopc3
; ---------------------------------------------------------------------------
_pcaway:                                ; CODE XREF: assnearest+110   j
                btst    #6,$62(a3)      ; pfteam - 0 home, 1 away
                beq.s   _tmnopc         ; jump if home
_nopc3:                                 ; CODE XREF: assnearest+104   j
                                        ; assnearest+11A   j ...
                clr.l   $2A(a2)         ; ???
                move.w  (puckc).w,d1    ; move puck carrier SCnum into d1
                bmi.w   _np             ; branch if no puck carrier
                asl.w   #7,d1           ; scsize
                movea.w #(SortCords-M68K_RAM),a1 ; Move SortCords into a1
                adda.w  d1,a1           ; use d1 as offset
                move.b  $62(a1),d0      ; pflags of puck carrier
                move.b  $62(a3),d1      ; pflags of current player
                eor.b   d0,d1           ; XOR pflags
                btst    #6,d1           ; check pfteam
                beq.w   _switch         ; branch if on same team
_np:                                    ; CODE XREF: assnearest+148   j
                moveq   #$FFFFFFFF,d2   ; -1
                moveq   #5,d4           ; 5 = # of players on team
                movea.w $22(a2),a0      ; SortCord start value for team
_de0:                                   ; CODE XREF: assnearest+1CE   j
                tst.w   $34(a0)         ; check if goalie
                ble.w   _next           ; branch if goalie
                tst.b   $5E(a0)         ; check if nopuck (cant touch puck)
                bne.w   _next           ; branch if nopuck timer not 0
                btst    #2,$63(a0)      ; pf2unav - unavailable
                bne.w   _next           ; branch if unavailable
                move.w  $36(a0),d0      ; assnum - current assignment
                cmpi.b  #$13,$38(a0,d0.w) ; check if current assignment is asspassrec
                beq.w   _next           ; branch if a0 is going to receive puck
                move.l  a0,-(sp)        ; push onto stack
                bsr.w   GetHot          ; get hot spot
                add.w   (a0),d0         ; Xpos to d0
                sub.w   (puckx).w,d0    ; sub puck Xpos
                add.w   $14(a0),d1      ; add Ypos to d1
                sub.w   (pucky).w,d1    ; sub puck Ypos
                move.w  (puckvx).w,d3   ; puckvx into d3
                asr.w   #6,d3           ; divide by 64
                sub.w   d3,d0           ; sub d3 from d0 (X distance between player and puck)
                move.w  (puckvy).w,d3   ; puckvy into d3
                asr.w   #6,d3           ; divide by 64
                sub.w   d3,d1           ; sub d3 from d1 (Y distance between player and puck)
                muls.w  d0,d0           ; square d0
                muls.w  d1,d1           ; square d1
                add.l   d1,d0           ; add d1 to d0
                cmp.l   d2,d0           ; compare d2 to d0
                bhi.w   _next           ; branch if d0 higher than d2 (0 or a positive # first run)
                move.l  d0,d2           ; move d0 into d2
                movea.w a0,a1           ; move a0 address into a1
_next:                                  ; CODE XREF: assnearest+172   j
                                        ; assnearest+17A   j ...
                adda.w  #$80,a0         ; SCstruct size
                dbf     d4,_de0         ; iterate through loop
                tst.l   d2              ; check if 0
                bmi.w   _de1            ; branch if less (no one near puck)
                move.l  d2,$2A(a2)      ; moves d2 into $2A(a2)
_switch:                                ; CODE XREF: assnearest+162   j
                cmpa.w  a1,a3
                beq.w   _de1            ; branch if same
                btst    #0,(gmode).w    ; gmclock - 1 if stopped
                bne.w   _de1            ; jump if stopped
                btst    #2,$63(a1)      ; pf2unav
                bne.w   _de1            ; jump if unavailable
                btst    #3,$64(a1)      ; shooting one timer
                bne.w   _de1            ; jump if shooting
                exg     a1,a3           ; swap addresses
                bclr    #0,$62(a3)      ; clear pfdoff
                move.l  #$11,d0         ; assnearest
                bsr.w   assinsert
                exg     a1,a3
                bra.w   assexit
; ---------------------------------------------------------------------------
_de1:                                   ; CODE XREF: assnearest+1D4   j
                                        ; assnearest+1DE   j ...
                btst    #5,$62(a3)      ; pfalock - check if locked in animation
                bne.w   rtss2           ; exit if locked
                moveq   #2,d1           ; move 2 into d1
                cmp.w   #$190,d2        ; compare $190 (20^2) to d2
                bhi.w   _nfar
                subq.w  #2,d1
                cmpi.w  #2,$34(a3)      ; compare if position is F or D (1 and 2 are D)
                bls.w   _nodec          ; jump if D
_nfar:                                  ; CODE XREF: assnearest+228   j
                btst    #5,(sflags2).w  ; sf2pwrplay - check if PP
                beq.w   _x              ; branch if no PP
                subq.w  #2,d1           ; sub 2 from d1
                bsr.w   chkpk2
                bne.w   _x              ; branch if on PK
                addq.w  #4,d1           ; add 4 to d1
_x:                                     ; CODE XREF: assnearest+23E   j
                                        ; assnearest+248   j
                move.w  #$28,d0 ; '('   ; move $28 into d0 (40 dec)
                sub.b   $75(a3),d0      ; sub checking from d0
                asl.w   d1,d0           ; shift d0 by value of d1
                bsr.w   randomd0        ; RNG
                cmp.w   #2,d0           ; compare 2 to d0
                bhi.w   _nodec          ; branch if d0 more than 2
                move.w  #$F0,$44(a3)    ; move 240 dec into temp3
_nodec:                                 ; CODE XREF: assnearest+D4   j
                                        ; assnearest+234   j ...
                btst    #5,$62(a3)      ; pfalock - check if anim lock
                bne.w   rtss2           ; exit if locked
                btst    #2,(BA_PS_flags).w ; check bit 2
                beq.w   gmclock         ; jump if not set
                btst    #5,(BA_PS_flags).w ; check bit 5
                beq.w   _nodec2         ; jump if not set
gmclock:                                ; CODE XREF: assnearest+27A   j
                btst    #0,(gmode).w    ; check if clock running
                bne.w   assnothing      ; branch if not
_nodec2:                                ; CODE XREF: assnearest+284   j
                btst    #3,$62(a3)      ; pfjoycon - check if controlled
                bne.w   rtss2           ; jump if controlled
                btst    #2,$30(a2)      ; check bit 2 of $30(a2)
                bne.w   _nodec22
                tst.w   (puckc).w       ; check if theres a puck carrier
                bmi.w   _topuck         ; jump if no puck carrier
                sub.w   d7,$44(a3)      ; subtract frames from temp3
                bpl.w   _topuck         ; jump if positive
                clr.w   $44(a3)         ; clear temp3
_nodec22:                               ; CODE XREF: assnearest+2A2   j
                bsr.w   skatetopuckinit
                movem.w d0-d1,-(sp)     ; d0 = future puckx, d1 = future pucky push on stack
                neg.w   d0
                neg.w   d1
                addi.w  #$F4,d1         ; add goalline - 20 decimal
                btst    #7,$62(a3)      ; pfgoal - check what net shooting on
                beq.w   _nd0            ; branch if bottom
                subi.w  #$1E8,d1        ; sub bottom goalline - 20 decimal
_nd0:                                   ; CODE XREF: assnearest+2D0   j
                asr.w   #1,d0           ; divide by 2
                asr.w   #1,d1           ; divide by 2
                add.w   (sp)+,d0        ; add original future puckx
                add.w   (sp)+,d1        ; add original future pucky
                btst    #2,$30(a2)      ; ???
                beq.w   _spdboost
                btst    #7,$62(a3)      ; pfgoal
                beq.w   _botshoot       ; branch if bottom
                cmp.w   #$53,d1 ; 'S'   ; check if y pos of puck near blue line
                blt.w   _spdboost       ; branch if in neutral zone or D zone
                move.w  #$44,d1 ; 'D'   ; move 44 hex into d1
                bra.w   _spdboost
; ---------------------------------------------------------------------------
_botshoot:                              ; CODE XREF: assnearest+2F0   j
                cmp.w   #$FFAD,d1       ; check if pucky near bottom blue line
                bgt.w   _spdboost       ; branch if in neutral zone or D zone
                move.w  #$FFBC,d1       ; move FFBC into d1
_spdboost:                              ; CODE XREF: assnearest+2E6   j
                                        ; assnearest+2F8   j ...
                btst    #5,(word_FFC2F8).w ; check if puckc is in the slot
                beq.w   _noslot         ; branch if not
                move.b  $69(a3),(TempLegSpd).w ; legspd into FFBF1E
                addq.b  #6,$69(a3)      ; add 6 to legspd
                btst    #1,(byte_FFC2FE).w ; check if crowd meter broken (always is)
                bne.w   _spdboostex     ; jump if set
                btst    #6,(byte_FFC2FC).w ; check if crowd meter currently broken
                beq.w   _spdlimit       ; jump if not set
_spdboostex:                            ; CODE XREF: assnearest+32A   j
                addq.b  #2,$69(a3)
_spdlimit:                              ; CODE XREF: assnearest+334   j
                cmpi.b  #$1E,$69(a3)    ; check speed limit
                ble.w   _cont
                move.b  #$1E,$69(a3)    ; limit legspd to $1E (30 decimal)
_cont:                                  ; CODE XREF: assnearest+342   j
                lea     rtss2(pc),a0
                bsr.w   skateto
                move.b  (TempLegSpd).w,$69(a3) ; move original legpsd back into player
                bra.w   _chkslot
; ---------------------------------------------------------------------------
_noslot:                                ; CODE XREF: assnearest+316   j
                lea     rtss2(pc),a0
                bsr.w   skateto
_chkslot:                               ; CODE XREF: assnearest+35A   j
                btst    #5,(word_FFC2F8).w
                beq.w   _chkcont
                move.w  (pucky).w,d0
                move.w  $14(a3),d2      ; Ypos into d2
                tst.w   d0              ; check if d0 is 0
                bpl.w   _pospuck        ; branch if positive
                neg.w   d0              ; make d0 negative
                neg.w   d2              ; make d2 negative
_pospuck:                               ; CODE XREF: assnearest+37A   j
                sub.w   d0,d2           ; sub d0 from d2 (equals how far puck is from player Ypos)
                cmp.w   #$A,d2          ; check difference with A (10 decimal)
                blt.w   _exit           ; branch if less than (puck within 10 pix of player)
                move.w  (a3),d0         ; Xpos of player
                sub.w   (puckx).w,d0    ; sub puckx from Xpos
                bpl.w   _chkx           ; branch if positive difference
                neg.w   d0              ; make d0 negative
_chkx:                                  ; CODE XREF: assnearest+392   j
                cmp.w   #$F,d0          ; compare F (15 dec) with Xpos difference
                blt.w   _chkcont        ; branch if less than (within 15 pix in X direction)
_exit:                                  ; CODE XREF: assnearest+388   j
                rts
; ---------------------------------------------------------------------------
_chkcont:                               ; CODE XREF: assnearest+36C   j
                                        ; assnearest+39C   j
                btst    #5,(word_FFC2F8).w ; check if puckc is in the slot
                beq.w   check4check     ; branch if not in slot
                move.b  $75(a3),d0      ; move Chk into d0
                ext.w   d0              ; clear top byte of d0
                movem.l d0/a3,-(sp)     ; push to stack
                add.b   d0,d0           ; add d0 to itself
                cmp.b   #$1E,d0         ; compare max Chk to d0
                blt.w   _chkcont2       ; branch if less
                move.b  #$1E,d0         ; move 1E into d0
_chkcont2:                              ; CODE XREF: assnearest+3BC   j
                move.b  d0,$75(a3)      ; move d0 into Chk
                bsr.w   check4check
                movem.l (sp)+,d0/a3     ; pop off stack
                move.b  d0,$75(a3)      ; move original Chk into player
                rts
; ---------------------------------------------------------------------------
_topuck:                                ; CODE XREF: assnearest+2AA   j
                                        ; assnearest+2B2   j
                bsr.w   skatetopuck
; End of function assnearest


; look for good opportunity for checking opponent
; a3 = player
check4check:                            ; CODE XREF: assdefd+1B4   j
                                        ; assnearest+3A8   j ...
                tst.w   $34(a3)         ; check if goalie
                bne.w   _player         ; branch if not
                rts
; ---------------------------------------------------------------------------
_player:                                ; CODE XREF: check4check+4   j
                move.w  #$28,d0 ; '('   ; start with 28 hex (40 decimal)
                sub.b   $75(a3),d0      ; subtract Chk from d0 (Chk max is 1E or 30 decimal)
                tst.w   (OptPen).w      ; check for penalties option
                beq.w   _nopen          ; branch if not on
                asl.w   #1,d0           ; mult by 2
_nopen:                                 ; CODE XREF: check4check+16   j
                bsr.w   randomd0        ; RNG d0
                cmp.w   #6,d0           ; compare 6 to d0
                bhi.w   rtss2           ; exit if d0 higher than 6
                moveq   #5,d2           ; move 5 into d2
                movea.w #(SortCords-M68K_RAM),a0
                cmpi.w  #6,$52(a3)      ; check if player on home team
                bge.w   _0              ; branch if away
                adda.w  #$300,a0        ; add if home (checks opposite team in loop)
_0:                                     ; CODE XREF: check4check+34   j
                                        ; check4check+B0   j
                tst.w   $34(a0)         ; check if goalie
                beq.w   _next           ; branch if goalie
                btst    #5,$62(a0)      ; check if locked in anim
                bne.w   _next           ; branch if locked
                btst    #0,$63(a0)      ; check if fighting
                bne.w   _next           ; branch if fighting
                move.w  (a0),d0         ; move Xpos into d0
                sub.w   (a3),d0         ; sub a3 from a0
                cmp.w   #$1E,d0         ; compare to 30 decimal
                bgt.w   _next           ; branch if more than 30 decimal
                cmp.w   #$FFE2,d0       ; compare to -30 decimal
                blt.w   _next           ; branch if less than -30
                move.w  $14(a0),d1      ; Ypos
                sub.w   $14(a3),d1      ; subtract checker Ypos from d1
                cmp.w   #$1E,d1         ; compare to 30 decimal
                bgt.w   _next           ; branch if more
                cmp.w   #$FFE2,d1       ; check with -30 decimal
                blt.w   _next           ; branch if less
                bsr.w   vtoa            ; determine direction
                cmp.w   $54(a3),d0      ; compare facedir with vtoa result
                bne.w   _next           ; branch if not facing in that direction
                btst    #5,(word_FFC2F8).w ; check if puckc in slot
                bne.w   Acheck          ; branch if in slot
                move.w  (VDP_CNTR).l,d0 ; move HVcounter into d0
                andi.w  #3,d0           ; pass first 2 bits
                bne.w   burst           ; throw check
                bra.w   Acheck
; ---------------------------------------------------------------------------
_next:                                  ; CODE XREF: check4check+40   j
                                        ; check4check+4A   j ...
                adda.w  #$80,a0         ; move to next SCstruct
                dbf     d2,_0
                rts
; End of function check4check


; assignment for catching pass
asspassrec:                             ; DATA XREF: ROM:00018DC8   o
                btst    #5,$62(a3)      ; pfalock - animation lock
                bne.w   rtss2           ; exit if locked
                btst    #0,(gmode).w    ; gmclock - check if clock running
                bne.w   assnothing      ; exit if clock stopped
                btst    #3,$62(a3)      ; pfjoycon - joystick controlled?
                bne.w   assexit         ; exit if controlled
                bclr    #1,$62(a3)      ; #pfna - clear new assignment
                beq.w   _nna
                bset    #0,$62(a3)      ; #pfdoff - set decceleration off
                move.b  #8,$43(a3)      ; move into temp2+1
                clr.b   $42(a3)         ; clear temp2 byte
                move.w  #$FFFE,$46(a3)  ; move into temp4
_nna:                                   ; CODE XREF: asspassrec+24   j
                tst.w   (puckc).w       ; check if there is a puck carrier
                bpl.w   _exit           ; exit if puck still in possession
                addq.w  #1,$46(a3)      ; ass to temp4
                beq.w   _0              ; branch if temp4 is zero
                bpl.w   _ex2            ; branch if temp4 is positive
_0:                                     ; CODE XREF: asspassrec+4A   j
                tst.w   (word_FFBF6C).w
                bpl.w   _ex2
                tst.w   $34(a3)         ; test if goalie
                beq.w   _ex2            ; exit if goalie
                move.w  d0,-(sp)        ; push d0 on stack
                clr.w   $46(a3)         ; clear temp4
                move.w  #1,d0
                btst    #6,$62(a3)      ; check if home or away
                beq.w   _1
                move.w  #2,d0           ; away team
_1:                                     ; CODE XREF: asspassrec+72   j
                cmp.w   (cont1team).w,d0 ; check if player on cont 1 team
                beq.w   _pop            ; branch if so
                cmp.w   (cont2team).w,d0 ; check if player on cont 2 team
                beq.w   _pop            ; branch if so
                jsr     (sub_F6C44).l
                beq.w   _pop
                move.w  $14(a3),d0      ; Ypos
                btst    #7,$62(a3)      ; pfgoal
                bne.w   _chkpos         ; branch if shooting at top
                neg.w   d0
_chkpos:                                ; CODE XREF: asspassrec+9E   j
                cmp.w   #$58,d0 ; 'X'   ; blueline
                blt.w   _nozone
                cmp.w   #$108,d0        ; goalline
                bgt.w   _nozone
                bra.w   _atkzone
; ---------------------------------------------------------------------------
_nozone:                                ; CODE XREF: asspassrec+A8   j
                                        ; asspassrec+B0   j
                move.w  #8,d0           ; outside of attack zone
                jsr     (randomd0).l
                tst.w   d0              ; check if d0 is zero
                bne.w   _pop
_atkzone:                               ; CODE XREF: asspassrec+B4   j
                move.w  (sp)+,d0
                move.w  #$FFFF,(word_FFDED8).w
                move.w  #$23,d0 ; '#'   ; assonetimer
                jmp     assreplace
; ---------------------------------------------------------------------------
_pop:                                   ; CODE XREF: asspassrec+7E   j
                                        ; asspassrec+86   j ...
                move.w  (sp)+,d0
_ex2:                                   ; CODE XREF: asspassrec+4E   j
                                        ; asspassrec+56   j ...
                sub.b   d7,$40(a3)
                bpl.w   rtss2
_exit:                                  ; CODE XREF: asspassrec+42   j
                bclr    #0,$62(a3)
                bra.w   assexit
; End of function asspassrec
; ---------------------------------------------------------------------------


; assignment for computer shooting
assshoot:                               ; DATA XREF: ROM:00018DC4   o
                btst    #5,$62(a3)      ; pfalock - animation locked
                bne.w   rtss2
                bclr    #1,$62(a3)      ; clear pfna
                beq.w   _nna
                bra.w   SetShotMode
; ---------------------------------------------------------------------------
_nna:                                   ; CODE XREF: assshoot+10   j
                btst    #3,(sflags).w   ; #sfssdir
                beq.w   assexit
                clr.w   d2
                sub.w   d7,$42(a3)
                bpl.w   ShotMode
                bset    #5,d2           ; #cbut
                bra.w   ShotMode
; End of function assshoot
; ---------------------------------------------------------------------------
puckshootout:                           ; DATA XREF: ROM:00018DF4   o
                bclr    #1,$62(a3)
                beq.w   loc_EDB0
                bset    #7,(byte_FFC2FC).w
                clr.l   (dword_FFBE7A).w
                clr.l   (dword_FFBE7E).w
                clr.l   (dword_FFBE82).w
                bclr    #7,(word_FFC2FA).w
                btst    #0,(word_FFC2FA).w
                beq.w   loc_ECEC
                jsr     (sub_FC4C0).l
                bra.w   loc_ED0E
; ---------------------------------------------------------------------------
loc_ECEC:                               ; CODE XREF: ROM:0000ECDE   j
                jsr     (sub_FE756).l
                move.l  a2,-(sp)
                movea.l #$FFFFC6CE,a2
                tst.w   (BA_Team).w
                beq.w   loc_ED08
                movea.l #$FFFFCA32,a2
loc_ED08:                               ; CODE XREF: ROM:0000ECFE   j
                addq.w  #1,$360(a2)
                movea.l (sp)+,a2
loc_ED0E:                               ; CODE XREF: ROM:0000ECE8   j
                bclr    #2,(BA_PS_flags).w
                bclr    #4,(BA_PS_flags).w
                bclr    #5,(BA_PS_flags).w
                bclr    #6,(BA_PS_flags).w
                bset    #1,(word_FFC2F8).w
                btst    #3,(gmode).w
                bne.w   Stop4Pen
                bclr    #1,$62(a3)
                btst    #0,(word_FFC2FA).w
                beq.w   loc_ED70
                tst.w   (word_FFD594).w
                bne.w   loc_ED8A
                tst.w   (word_FFD586).w
                bne.w   loc_ED8A
                move.w  (HomeTeam).w,(word_FFD6CA).w
                move.w  #2,(word_FFD6CC).w
                jsr     (sub_FE556).l
                move.w  (word_FFD6C8).w,-(sp)
                bra.w   loc_ED86
; ---------------------------------------------------------------------------
loc_ED70:                               ; CODE XREF: ROM:0000ED42   j
                move.w  (HomeTeam).w,(word_FFD6CA).w
                move.w  #2,(word_FFD6CC).w
                jsr     (sub_FE556).l
                move.w  (word_FFD6C8).w,-(sp)
loc_ED86:                               ; CODE XREF: ROM:0000ED6C   j
                bsr.w   song
loc_ED8A:                               ; CODE XREF: ROM:0000ED4A   j
                                        ; ROM:0000ED52   j
                bset    #0,(gmode).w
                bset    #1,(word_FFC2FA).w
                clr.w   (puckvx).w
                clr.w   (puckvy).w
                move.w  #$19,(word_FFD454).w
                bsr.w   ReturnGoalies
                st      $40(a3)
                st      $42(a3)
loc_EDB0:                               ; CODE XREF: ROM:0000ECBC   j
                bset    #2,(BA_PS_flags).w
                movem.w d1-d2,-(sp)
                jsr     (sub_EE58).l
                bmi.w   loc_EDCC
                movem.w (sp)+,d1-d2
                bra.w   loc_EDE0
; ---------------------------------------------------------------------------
loc_EDCC:                               ; CODE XREF: ROM:0000EDC0   j
                                        ; ROM:0000EE0E   j
                movem.w (sp)+,d1-d2
                bclr    #2,(BA_PS_flags).w
                move.w  #$1B,d0         ; puckfaceoff
                bsr.w   assreplace
                rts
; ---------------------------------------------------------------------------
loc_EDE0:                               ; CODE XREF: ROM:0000EDC8   j
                movem.w d1-d2,-(sp)
                move.w  (BA_Goalie_SCnum).w,d0
                movea.l #$FFFFB04A,a2
                asl.w   #7,d0
                adda.w  d0,a2
                tst.w   $34(a2)
                bne.w   loc_EE04
                btst    #2,$63(a2)
                beq.w   loc_EE48
loc_EE04:                               ; CODE XREF: ROM:0000EDF6   j
                move.w  (BA_Goalie_SCnum).w,d0
                move.w  #6,d2
loc_EE0C:                               ; CODE XREF: ROM:0000EE3A   j
                                        ; ROM:0000EE42   j
                subq.w  #1,d2
                bmi.s   loc_EDCC
                subq.w  #1,d0
                bpl.w   loc_EE1E
                move.w  #5,d0
                bra.w   loc_EE2A
; ---------------------------------------------------------------------------
loc_EE1E:                               ; CODE XREF: ROM:0000EE12   j
                cmp.w   #5,d0
                bne.w   loc_EE2A
                move.w  #$B,d0
loc_EE2A:                               ; CODE XREF: ROM:0000EE1A   j
                                        ; ROM:0000EE22   j
                movea.l #$FFFFB04A,a2
                move.w  d0,d1
                asl.w   #7,d1
                adda.w  d1,a2
                tst.w   $34(a2)
                bne.s   loc_EE0C
                btst    #2,$63(a2)
                bne.s   loc_EE0C
                move.w  d0,(BA_Goalie_SCnum).w
loc_EE48:                               ; CODE XREF: ROM:0000EE00   j
                movem.w (sp)+,d1-d2
                movea.w #(HmShots-M68K_RAM),a2
                move.w  #$1F,d0         ; puckpenshot
                bra.w   assreplace


sub_EE58:                               ; CODE XREF: ROM:0000EDBA   p
                movem.l d0-d7/a0-a6,-(sp)
                movea.l #$FFFFC6CE,a0
                tst.w   (BA_Team).w
                beq.w   loc_EE70
                movea.l #$FFFFCA32,a0
loc_EE70:                               ; CODE XREF: sub_EE58+E   j
                move.w  #0,d1
                move.w  #$FFFF,d6
                move.w  #$FFFF,d5
                movea.l $1E(a0),a2
                adda.w  (a2),a2
loc_EE82:                               ; CODE XREF: sub_EE58+F0   j
                cmpi.w  #2,(a2)
                beq.w   loc_EF4C
                adda.w  (a2),a2
                move.w  d1,d7
                asl.w   #1,d7
                move.b  5(a2),d0
                andi.w  #$F,d0
                cmp.b   #1,d0
                ble.w   loc_EF40
                btst    #0,(word_FFC2FA).w
                bne.w   loc_EF56
                cmpi.w  #$FFFE,$66(a0,d7.w)
                beq.w   loc_EEBE
                cmpi.w  #$FFFF,$66(a0,d7.w)
                bne.w   loc_EF40
loc_EEBE:                               ; CODE XREF: sub_EE58+58   j
                clr.w   d3
                clr.w   d0
                move.b  1(a2),d0
                andi.w  #$F,d0
                add.w   d0,d3
                move.b  2(a2),d0
                andi.w  #$F,d0
                add.w   d0,d3
                move.b  2(a2),d0
                andi.w  #$F0,d0
                lsr.w   #4,d0
                add.w   d0,d3
                move.b  3(a2),d0
                andi.w  #$F,d0
                add.w   d0,d3
                move.b  3(a2),d0
                andi.w  #$F0,d0
                lsr.w   #4,d0
                add.w   d0,d3
                move.b  5(a2),d0
                andi.w  #$F,d0
                add.w   d0,d3
                move.b  5(a2),d0
                andi.w  #$F0,d0
                lsr.w   #4,d0
                add.w   d0,d3
                move.b  6(a2),d0
                andi.w  #$F0,d0
                lsr.w   #4,d0
                add.w   d0,d3
                move.b  7(a2),d0
                andi.w  #$F0,d0
                lsr.w   #4,d0
                add.w   d0,d3
                cmp.w   (BA_Skater_Offset).w,d1
                bne.w   loc_EF32
                move.w  #$7FFF,d3
loc_EF32:                               ; CODE XREF: sub_EE58+D2   j
                cmp.w   d6,d3
                blt.w   loc_EF40
                move.w  d3,d6
                move.w  d1,d5
                bra.w   *+4
; ---------------------------------------------------------------------------
loc_EF40:                               ; CODE XREF: sub_EE58+44   j
                                        ; sub_EE58+62   j ...
                addq.l  #8,a2
                addq.w  #1,d1
                cmp.w   #$1A,d1
                blt.w   loc_EE82
loc_EF4C:                               ; CODE XREF: sub_EE58+2E   j
                tst.w   d5
                bmi.w   loc_EF80
                move.w  d5,(BA_Skater_Offset).w
loc_EF56:                               ; CODE XREF: sub_EE58+4E   j
                move.w  #0,(BA_Sktr_SCnum).w
                tst.w   (BA_Team).w
                beq.w   loc_EF6A
                move.w  #6,(BA_Sktr_SCnum).w
loc_EF6A:                               ; CODE XREF: sub_EE58+108   j
                move.w  (BA_Sktr_SCnum).w,d0
                asl.w   #7,d0
                movea.l #$FFFFB04A,a3
                adda.w  d0,a3
                move.w  (BA_Skater_Offset).w,d3
                bra.w   loc_EF88
; ---------------------------------------------------------------------------
loc_EF80:                               ; CODE XREF: sub_EE58+F6   j
                move.w  #$FFFF,d0
                bra.w   loc_EF8C
; ---------------------------------------------------------------------------
loc_EF88:                               ; CODE XREF: sub_EE58+124   j
                move.w  #1,d0
loc_EF8C:                               ; CODE XREF: sub_EE58+12C   j
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_EE58


; puck start for penalty shot/shootout
puckpenshot:                            ; DATA XREF: ROM:00018DF8   o
                bclr    #1,$62(a3)
                beq.w   loc_F2A8
                movem.l d0-d7/a0-a6,-(sp)
                bsr.w   forceblack
loc_EFA4:                               ; CODE XREF: puckpenshot+18   j
                btst    #0,(disflags).w
                bne.s   loc_EFA4
                cmpi.w  #$258,(crowdlevel).w
                bls.w   loc_EFC2
                move.w  #$258,(crowdlevel).w
                addi.w  #$14,(CwdExciteLvl).w
loc_EFC2:                               ; CODE XREF: puckpenshot+20   j
                move.w  (ExtraChars).w,d4
                movea.l #unk_5C410,a2
                jsr     (sub_11738).l
                bset    #3,(disflags).w
                bclr    #0,(sflags).w
                bclr    #0,(sflags3).w
                clr.w   (glovecords).w
                clr.b   (iflags).w
                st      (RefCnt).w
                bclr    #1,(sflags2).w
                st      (word_FFBEE0).w
                bsr.w   ClrHor
                clr.w   (Vpos).w
                clr.w   (Hpos).w
                move.w  #0,(puckx).w
                move.w  #0,(pucky).w
                clr.w   (puckz).w
                clr.w   (puckvx).w
                clr.w   (puckvy).w
                clr.w   (puckvz).w
                st      (puckc).w
                movea.w #(unk_FFB64A-M68K_RAM),a0 ; goal net SCstruct
                clr.w   $28(a0)
                clr.w   $2A(a0)
                clr.w   (a0)
                move.w  #$10C,$14(a0)
                adda.w  #$80,a0         ; move to second goal net SCstruct
                clr.w   $28(a0)
                clr.w   $2A(a0)
                clr.w   (a0)
                move.w  #$FEF4,$14(a0)
                movea.w #(unk_FFB7CA-M68K_RAM),a0 ; puck shadow SCstruct
                move.w  #$18A,6(a0)
                clr.w   $58(a0)
                clr.w   4(a0)
                clr.w   (word_FFB74E).w
                bclr    #6,(sflags).w
                moveq   #$64,d4 ; 'd'
loc_F06C:                               ; CODE XREF: puckpenshot+DE   j
                bsr.w   checkwindow
                dbf     d4,loc_F06C
                move.w  #$3C,(yleader).w ; '<'
                bsr.w   ResetBench
                movea.w #(HmShots-M68K_RAM),a2
                bsr.w   SetPersonel
                bsr.w   sub_1592C
                adda.w  #$364,a2
                bsr.w   SetPersonel
                bsr.w   sub_1592C
                jsr     (resetplstuff).l
                move.l  a3,-(sp)
                movea.l #$FFFFB5CA,a3   ; away goalie SCstruct
                move.w  #$B,d2          ; 11 = # of player SCstructs
loc_F0A8:                               ; CODE XREF: puckpenshot+270   j
                cmp.w   (BA_Sktr_SCnum).w,d2
                beq.w   loc_F0D0
                cmp.w   (BA_Goalie_SCnum).w,d2
                beq.w   loc_F150
                move.w  #$FF10,(a3)
                clr.w   $14(a3)
                clr.w   6(a3)
                move.w  #$20,d0 ; ' '
                bsr.w   assinsert
                bra.w   loc_F1FC
; ---------------------------------------------------------------------------
loc_F0D0:                               ; CODE XREF: puckpenshot+11A   j
                tst.w   $34(a3)
                bpl.w   loc_F104
                bclr    #2,$63(a3)
                beq.w   loc_F104
                movem.l d0-d7/a0-a6,-(sp)
                clr.w   d3
                move.b  $66(a3),d3
                jsr     (setplayer).l
                movem.l (sp)+,d0-d7/a0-a6
                tst.w   $34(a3)
                beq.w   loc_F102
                bpl.w   loc_F104
loc_F102:                               ; CODE XREF: puckpenshot+168   j
                nop
loc_F104:                               ; CODE XREF: puckpenshot+142   j
                                        ; puckpenshot+14C   j ...
                move.w  (puckx).w,d0
                subi.w  #0,d0
                move.w  d0,(a3)
                move.w  (pucky).w,d0
                btst    #7,$62(a3)
                bne.w   loc_F12A
                addi.w  #$10,d0
                move.w  #4,$54(a3)
                bra.w   loc_F134
; ---------------------------------------------------------------------------
loc_F12A:                               ; CODE XREF: puckpenshot+186   j
                addi.w  #-$10,d0
                move.w  #0,$54(a3)
loc_F134:                               ; CODE XREF: puckpenshot+194   j
                move.w  d0,$14(a3)
                clr.w   $28(a3)
                clr.w   $2A(a3)
                clr.w   $2C(a3)
                move.w  #$11,d0
                bsr.w   assinsert
                bra.w   loc_F1FC
; ---------------------------------------------------------------------------
loc_F150:                               ; CODE XREF: puckpenshot+122   j
                btst    #0,(word_FFC2FA).w
                beq.w   loc_F172
                move.b  (byte_FFD593).w,$66(a3)
                tst.w   (word_FFD594).w
                beq.w   loc_F184
                move.b  (byte_FFD585).w,$66(a3)
                bra.w   loc_F184
; ---------------------------------------------------------------------------
loc_F172:                               ; CODE XREF: puckpenshot+1C4   j
                tst.w   $34(a3)
                bpl.w   loc_F1A6
                bclr    #2,$63(a3)
                beq.w   loc_F1A6
loc_F184:                               ; CODE XREF: puckpenshot+1D2   j
                                        ; puckpenshot+1DC   j
                movem.l d0-d7/a0-a6,-(sp)
                clr.w   d3
                move.b  $66(a3),d3
                jsr     (setplayer).l
                movem.l (sp)+,d0-d7/a0-a6
                tst.w   $34(a3)
                bne.w   loc_F1A4
                bpl.w   loc_F1A6
loc_F1A4:                               ; CODE XREF: puckpenshot+20A   j
                nop
loc_F1A6:                               ; CODE XREF: puckpenshot+1E4   j
                                        ; puckpenshot+1EE   j ...
                bclr    #2,$63(a3)
                move.w  #0,d0
                move.w  #$E5,d1
                btst    #7,$62(a3)
                bne.w   loc_F1C2
                move.w  #$FF1B,d1
loc_F1C2:                               ; CODE XREF: puckpenshot+228   j
                move.w  d0,(a3)
                move.w  d1,$14(a3)
                clr.w   $28(a3)
                clr.w   $2A(a3)
                clr.w   $18(a3)
                sub.w   (puckx).w,d0
                sub.w   (pucky).w,d1
                neg.w   d0
                neg.w   d1
                bsr.w   vtoa
                move.w  d0,$54(a3)
                bclr    #2,$63(a3)
                bclr    #5,$62(a3)
                move.w  #$50C,d1
                bsr.w   SetSPA
loc_F1FC:                               ; CODE XREF: puckpenshot+13A   j
                                        ; puckpenshot+1BA   j
                suba.l  #$80,a3
                dbf     d2,loc_F0A8     ; cycle to next player
                bsr.w   SprSort
                movea.l (sp)+,a3
                bsr.w   setchgplayer
                move.w  (BA_Goalie_SCnum).w,d0
                asl.w   #7,d0
                movea.w #(SortCords-M68K_RAM),a3
                adda.w  d0,a3
                move.w  #0,(a3)
                move.w  #$FF06,$14(a3)
                btst    #7,$62(a3)
                bne.w   loc_F236
                move.w  #$FA,$14(a3)
loc_F236:                               ; CODE XREF: puckpenshot+29A   j
                move.w  (BA_Goalie_SCnum).w,d0
                move.w  #1,d1
                btst    #6,$62(a3)
                beq.w   loc_F24C
                move.w  #2,d1
loc_F24C:                               ; CODE XREF: puckpenshot+2B2   j
                cmp.w   (cont1team).w,d1
                bne.w   loc_F25E
                jsr     (setc1player).l
                bra.w   loc_F26C
; ---------------------------------------------------------------------------
loc_F25E:                               ; CODE XREF: puckpenshot+2BE   j
                cmp.w   (cont2team).w,d1
                bne.w   loc_F26C
                jsr     (setc2player).l
loc_F26C:                               ; CODE XREF: puckpenshot+2C8   j
                                        ; puckpenshot+2D0   j
                move.w  #$E,d0          ; assignment D51C?
                bsr.w   assreplace
                bset    #7,(BA_PS_flags).w
                bset    #2,(sflags2).w
                move.w  #$190,(word_FFC31A).w
                tst.w   (cont1team).w
                bne.w   loc_F29C
                tst.w   (cont2team).w
                bne.w   loc_F29C
                move.w  #$64,(word_FFC31A).w ; 'd'
loc_F29C:                               ; CODE XREF: puckpenshot+2F8   j
                                        ; puckpenshot+300   j
                move.w  #$18,(palcount).w
                movem.l (sp)+,d0-d7/a0-a6
                rts
; ---------------------------------------------------------------------------
loc_F2A8:                               ; CODE XREF: puckpenshot+6   j
                bset    #2,(word_FFC2FA).w
                move.w  #$18,d0         ; pucknorm
                bsr.w   assreplace
                clr.w   $28(a3)
                clr.w   $2A(a3)
                rts
; End of function puckpenshot
; ---------------------------------------------------------------------------


sub_F2F4:                               ; CODE XREF: pucknorm+A   p
                movem.w d0,-(sp)
                move.w  (puckc).w,d0
                cmp.w   (BA_Goalie_SCnum).w,d0
                movem.w (sp)+,d0
                beq.w   loc_F342
                btst    #5,(BA_PS_flags).w
                beq.w   loc_F348
                btst    #5,(word_FFC2FA).w
                bne.w   loc_F32A
                tst.w   (puckc).w
                bpl.w   loc_F332
                bset    #5,(word_FFC2FA).w
loc_F32A:                               ; CODE XREF: sub_F2F4+24   j
                tst.w   (puckc).w
                bpl.w   loc_F342
loc_F332:                               ; CODE XREF: sub_F2F4+2C   j
                tst.w   (word_FFC31C).w
                bmi.w   loc_F342
                subq.w  #1,(word_FFC31C).w
                bra.w   loc_F348
; ---------------------------------------------------------------------------
loc_F342:                               ; CODE XREF: sub_F2F4+10   j
                                        ; sub_F2F4+3A   j ...
                bset    #4,(BA_PS_flags).w
loc_F348:                               ; CODE XREF: sub_F2F4+1A   j
                                        ; sub_F2F4+4A   j
                tst.w   (word_FFD454).w
                bne.w   loc_F356
                bset    #4,(BA_PS_flags).w
loc_F356:                               ; CODE XREF: sub_F2F4+58   j
                btst    #4,(BA_PS_flags).w
                bne.w   loc_F362
                rts
; ---------------------------------------------------------------------------
loc_F362:                               ; CODE XREF: sub_F2F4+68   j
                btst    #6,(BA_PS_flags).w
                bne.w   locret_F3E2
                bset    #6,(BA_PS_flags).w
                move.w  #$A,d0
                jsr     (AddPenalty2).l
; End of function sub_F2F4


sub_F37C:                               ; CODE XREF: sub_14620+1F4   p
                jsr     (freezewindow).l
                btst    #0,(word_FFC2FA).w
                bne.w   loc_F398
                move.w  #$A,(word_FFDEF0).w
                bset    #2,(sflags2).w
loc_F398:                               ; CODE XREF: sub_F37C+C   j
                bset    #0,(gmode).w
                bclr    #2,(word_FFC2FA).w
                bclr    #2,(BA_PS_flags).w
                bclr    #3,(BA_PS_flags).w
                bclr    #5,(BA_PS_flags).w
                bclr    #4,(BA_PS_flags).w
                bclr    #6,(BA_PS_flags).w
                movem.l d0/a0,-(sp)
                movea.l #$FFFFB04A,a0
                move.w  (BA_Sktr_SCnum).w,d0
                asl.w   #7,d0
                move.b  (byte_FFC31E).w,$61(a0,d0.w)
                movem.l (sp)+,d0/a0
                jsr     (sub_FC516).l
locret_F3E2:                            ; CODE XREF: sub_F2F4+74   j
                rts
; End of function sub_F37C


; this is where the action starts
puckfaceoff:                            ; DATA XREF: ROM:00018DE8   o
                bclr    #4,(byte_FFC2FE).w
                btst    #0,(word_FFC2FA).w
                beq.w   loc_F404
                clr.w   (puckvx).w
                clr.w   (puckvy).w
                move.w  #$1E,d0         ; assignment ECB6?
                bra.w   assreplace
; ---------------------------------------------------------------------------
loc_F404:                               ; CODE XREF: puckfaceoff+C   j
                bclr    #1,$62(a3)
                beq.w   loc_F612
                bclr    #0,(byte_FFC2FE).w
                beq.w   loc_F420
                clr.w   (fox).w
                clr.w   (foy).w
loc_F420:                               ; CODE XREF: puckfaceoff+30   j
                bclr    #7,(byte_FFC2FC).w
                clr.l   (dword_FFBE7A).w
                clr.l   (dword_FFBE7E).w
                clr.l   (dword_FFBE82).w
                bclr    #6,(byte_FFC2FC).w
                bclr    #2,(byte_FFC2FC).w
                jsr     (sub_FECF8).l
                tst.w   (word_FFD6BE).w
                bmi.w   loc_F454
                move.w  (word_FFD6BE).w,d0
                bra.w   loc_F460
; ---------------------------------------------------------------------------
loc_F454:                               ; CODE XREF: puckfaceoff+64   j
                jsr     (sub_FECAA).l
                tst.w   d0
                bmi.w   loc_F466
loc_F460:                               ; CODE XREF: puckfaceoff+6C   j
                jsr     (sub_FE53C).l
loc_F466:                               ; CODE XREF: puckfaceoff+78   j
                bclr    #1,(word_FFC2F8).w
                bclr    #1,(word_FFC2FA).w
                tst.w   (gameclock).w
                beq.w   loc_17236
                btst    #6,(gmode).w
                bne.w   loc_17236
                cmpi.w  #3,(gsp).w
                bne.w   _npo
                move.w  (HmGoals).w,d0
                cmp.w   (AwGoals).w,d0
                bne.w   loc_7B5C
_npo:                                   ; CODE XREF: puckfaceoff+A6   j
                btst    #3,(gmode).w
                bne.w   Stop4Pen
                move.w  (PerTimeTotal).w,d0
                asr.w   #1,d0
                cmp.w   (gameclock).w,d0
                bls.w   loc_F4F2
                cmpi.w  #$3C,(gameclock).w ; '<'
                blt.w   loc_F4F2
                bclr    #7,(sflags3).w
                beq.w   loc_F4F2
                btst    #0,(gmode).w
                beq.w   loc_F4F2
                btst    #6,(byte_FFC2FE).w
                bne.w   loc_F4F2
                move.w  (HomeTeam).w,(word_FFD6CA).w
                move.w  #2,(word_FFD6CC).w
                jsr     (sub_FE556).l
                bset    #4,(byte_FFC2FE).w
loc_F4F2:                               ; CODE XREF: puckfaceoff+CA   j
                                        ; puckfaceoff+D4   j ...
                bsr.w   ReturnGoalies
                st      $40(a3)
                st      $42(a3)
                tst.w   (OptLine).w
                bne.w   loc_F612
                bclr    #1,(byte_FFC6FE).w
                bclr    #1,(byte_FFCA62).w
                movea.w #(SortCords-M68K_RAM),a0
                moveq   #$B,d0
loc_F518:                               ; CODE XREF: puckfaceoff+13E   j
                bclr    #3,$63(a0)
                adda.w  #$80,a0
                dbf     d0,loc_F518
                move.w  (cont1team).w,d0
                or.w    (cont2team).w,d0
                beq.w   loc_F566
                btst    #7,(sflags).w
                beq.w   loc_F566
                bsr.w   forceblack
                bset    #6,(sflags).w
                bsr.w   ClrHor
                move.w  #$18,(palcount).w
                tst.w   (OptLine).w
                bne.w   loc_F566
                btst    #4,(byte_FFC2FC).w
                beq.w   loc_F566
                clr.w   (palcount).w
loc_F566:                               ; CODE XREF: puckfaceoff+14A   j
                                        ; puckfaceoff+154   j ...
                move.w  (c1playernum).w,d0
                bmi.w   loc_F572
                bsr.w   sub_F5C6
loc_F572:                               ; CODE XREF: puckfaceoff+186   j
                move.w  (c2playernum).w,d0
                bmi.w   loc_F57E
                bsr.w   sub_F5C6
loc_F57E:                               ; CODE XREF: puckfaceoff+192   j
                movea.w #(HmShots-M68K_RAM),a1
                lea     $364(a1),a2
                moveq   #2,d0
                bsr.w   sub_F590
                bra.w   loc_F612
; End of function puckfaceoff


sub_F590:                               ; CODE XREF: puckfaceoff+1A4   p
                                        ; ROM:0000F63C   p
                tst.w   (OptLine).w
                bne.w   rtss2
                btst    #4,(byte_FFC2FC).w
                bne.w   loc_F5B2
                cmp.w   (cont1team).w,d0
                beq.w   rtss2
                cmp.w   (cont2team).w,d0
                beq.w   rtss2
loc_F5B2:                               ; CODE XREF: sub_F590+E   j
                bsr.w   CompLine
                bsr.w   SetPersonel
                bsr.w   PrintScores1
                move.w  #$2710,(word_FFC304).w
                rts
; End of function sub_F590


sub_F5C6:                               ; CODE XREF: puckfaceoff+18A   p
                                        ; puckfaceoff+196   p
                exg     a2,a3
                asl.w   #7,d0
                movea.w #(SortCords-M68K_RAM),a3
                adda.w  d0,a3
                bclr    #3,$63(a3)
                move.l  a2,-(sp)
                bsr.w   sub_B8F2
                movea.l (sp)+,a2
                btst    #3,$63(a3)
                beq.w   loc_F60E
                btst    #6,$62(a3)
                beq.w   loc_F602
                move.w  #$168,$42(a2)
                move.w  $52(a3),$46(a2)
                bra.w   loc_F60E
; ---------------------------------------------------------------------------
loc_F602:                               ; CODE XREF: sub_F5C6+28   j
                move.w  #$258,$40(a2)
                move.w  $52(a3),$44(a2)
loc_F60E:                               ; CODE XREF: sub_F5C6+1E   j
                                        ; sub_F5C6+38   j
                exg     a2,a3
                rts
; End of function sub_F5C6
; ---------------------------------------------------------------------------
loc_F612:                               ; CODE XREF: puckfaceoff+26   j
                                        ; puckfaceoff+11E   j ...
                move.w  #$40,d0 ; '@'
                bsr.w   sub_F64E
                move.w  #$42,d0 ; 'B'
                bsr.w   sub_F64E
                tst.w   $40(a3)
                bpl.w   rtss2
                tst.w   $42(a3)
                bpl.w   rtss2
                movea.w #(HmShots-M68K_RAM),a2
                lea     $364(a2),a1
                moveq   #1,d0
                bsr.w   sub_F590
                move.w  #$FFFF,(word_FFD6C6).w
                move.w  #$1C,d0         ; puckfaceoff2
                bra.w   assreplace


sub_F64E:                               ; CODE XREF: ROM:0000F616   p
                                        ; ROM:0000F61E   p
                tst.w   (a3,d0.w)
                bmi.w   rtss2
                move.w  4(a3,d0.w),d1
                asl.w   #7,d1
                movea.w #(SortCords-M68K_RAM),a0
                movea.w #(HmShots-M68K_RAM),a2
                btst    #6,$62(a0,d1.w)
                beq.w   loc_F672
                adda.w  #$364,a2
loc_F672:                               ; CODE XREF: sub_F64E+1C   j
                btst    #3,$63(a0,d1.w)
                bne.w   loc_F684
                st      (a3,d0.w)
                bra.w   sub_B92E
; ---------------------------------------------------------------------------
loc_F684:                               ; CODE XREF: sub_F64E+2A   j
                sub.w   d7,(a3,d0.w)
                bpl.w   rtss2
                move.l  a3,-(sp)
                lea     (a0,d1.w),a3
                btst    #3,$63(a3)
                beq.w   loc_F6A6
                clr.w   d2
                bsr.w   lcfound
                bsr.w   sub_B92E
loc_F6A6:                               ; CODE XREF: sub_F64E+4A   j
                movea.l (sp)+,a3
                rts
; End of function sub_F64E


; computer pulls goalie on delayed penalty
ChkGoalies:                             ; CODE XREF: periodiceevents+32   p
                btst    #0,(gmode).w    ; check if clock running
                bne.w   rtss2
                movea.w #(HmShots-M68K_RAM),a2
                lea     $364(a2),a1
                moveq   #1,d0
                bsr.w   _chkgoalie
                moveq   #2,d0
                exg     a1,a2
_chkgoalie:                             ; CODE XREF: ChkGoalies+14   p
                tst.w   $26(a2)         ; check for goalie
                bmi.w   rtss2           ; no goalie, exit
                move.w  (puckc).w,d1    ; move puck carrier SCnum into d1
                bmi.w   rtss2
                subq.w  #6,d1
                cmpa.w  #$C6CE,a2
                beq.w   _chkpen
                not.w   d1              ; makes d1 negative if away team
_chkpen:                                ; CODE XREF: ChkGoalies+32   j
                tst.w   d1
                bpl.w   rtss2
                btst    #3,(gmode).w    ; #gmpendel - delayed penalty called
                beq.w   _nopen
                st      $26(a2)         ; sets to FFFF (no goalie)
                bra.w   SetPersonel
; ---------------------------------------------------------------------------
_nopen:                                 ; CODE XREF: ChkGoalies+44   j
                cmp.w   (cont1team).w,d0
                beq.w   rtss2           ; exit if team is joy controlled
                cmp.w   (cont2team).w,d0
                beq.w   rtss2           ; exit if team is joy controlled
                move.w  (pucky).w,d1
                bra.w   CPgoalie
; End of function ChkGoalies


; if computer pulled goalie, look to see if computer should return him
ReturnGoalies:                          ; CODE XREF: ROM:0000EDA4   p
                                        ; puckfaceoff:loc_F4F2   p
                movea.w #(HmShots-M68K_RAM),a2
                lea     $364(a2),a1
                moveq   #1,d0
                bsr.w   _r
                moveq   #2,d0
                exg     a1,a2
_r:                                     ; CODE XREF: ReturnGoalies+A   p
                cmpi.w  #$FFFF,$26(a2)
                beq.w   rtss2           ; still no goalie
                clr.b   $26(a2)         ; clear for goalie return
                cmp.w   (cont1team).w,d0
                beq.w   rtss2           ; exit if team is joy controlled
                cmp.w   (cont2team).w,d0
                beq.w   rtss2           ; exit if team is joy controlled
                move.w  (foy).w,d1
; End of function ReturnGoalies


; see if computer should pull his goalie
; d1 = Faceoff Y position
CPgoalie:                               ; CODE XREF: ChkGoalies+64   j
                cmpi.w  #2,(gsp).w      ; check if 3rd period
                bne.w   rtss2           ; exit if not
                move.w  $C(a1),d0       ; tmscore
                sub.w   $C(a2),d0
                bmi.w   rtss2           ; exit if leading in the game
                cmp.w   #2,d0
                bne.w   rtss2           ; exit if behind by more than 2
                cmpi.w  #$3C,(gameclock).w ; '<' ; #60
                bgt.w   rtss2           ; exit if more than 1 min left
                move.l  a0,-(sp)
                movea.w $22(a2),a0      ; moves a player struct address into a0
                btst    #7,$62(a0)      ; #pfgoal
                movea.l (sp)+,a0
                bne.w   _0
                neg.w   d1              ; if shooting on bottom goal, make d1 negative
_0:                                     ; CODE XREF: CPgoalie+36   j
                tst.w   d1
                bmi.w   rtss2           ; exit if d1 negative (faceoff in own zone)
                st      $26(a2)         ; set to FFFF (no goalie)
                bra.w   SetPersonel
; End of function CPgoalie


; find good line for comp to switch to
CompLine:                               ; CODE XREF: sub_E1F4+60   p
                                        ; sub_F590:loc_F5B2   p
                movem.l d0-d2/a0,-(sp)
                moveq   #3,d0
                move.w  $24(a2),d1      ; tmap
                sub.w   $24(a1),d1
                beq.w   _nopwr
                bpl.w   _0
                addq.w  #2,d0
_0:                                     ; CODE XREF: CompLine+12   j
                move.w  d0,-(sp)        ; find pk/pp line
                bsr.w   getlinee
                move.w  d0,d1
                move.w  (sp),d0
                addq.w  #1,d0
                bsr.w   getlinee
                cmp.w   d0,d1
                bge.w   _1
                addq.w  #1,(sp)
_1:                                     ; CODE XREF: CompLine+2A   j
                move.w  (sp)+,$16(a2)   ; tmline
_ex:                                    ; CODE XREF: CompLine+86   j
                                        ; CompLine+E8   j
                movem.l (sp)+,d0-d2/a0
                rts
; ---------------------------------------------------------------------------
_nopwr:                                 ; CODE XREF: CompLine+E   j
                cmpa.w  #$C6CE,a2       ; find normal line
                bne.w   _away
                moveq   #2,d1
                lea     _hl1(pc),a0
                cmpi.w  #2,(gsp).w
                bne.w   _h0
                move.w  $C(a2),d2       ; tmscore
                cmp.w   $C(a1),d2
                beq.w   _h0
                adda.w  #$E,a0
                bgt.w   _h0
                adda.w  #$E,a0
_h0:                                    ; CODE XREF: CompLine+4E   j
                                        ; CompLine+5A   j ...
                move.w  $16(a1),d1      ; tmline
                asl.w   #1,d1
                move.w  (a0,d1.w),d0
                bsr.w   getlinee
                cmp.w   #$C00,d0        ; #(3*$1000)/4
                bls.w   _away
                move.w  (a0,d1.w),$16(a2) ; tmline
                bra.s   _ex
; ---------------------------------------------------------------------------
_hl1:                                   ; DATA XREF: CompLine+44   o
                dc.w 0
                dc.w 1
                dc.w 2
                dc.w 0
                dc.w 1
                dc.w 0
                dc.w 1
                dc.w 2
                dc.w 0
                dc.w 1
                dc.w 2
                dc.w 0
                dc.w 2
                dc.w 0
                dc.w 0
                dc.w 1
                dc.w 0
                dc.w 0
                dc.w 1
                dc.w 0
                dc.w 1
; ---------------------------------------------------------------------------
_away:                                  ; CODE XREF: CompLine+3E   j
                                        ; CompLine+7C   j
                moveq   #2,d1
                lea     _al1(pc),a0
                cmpi.w  #2,(gsp).w
                bne.w   _a0
                move.w  $C(a2),d2       ; tmscore
                cmp.w   $C(a1),d2
                beq.w   _a0
                addq.w  #6,a0
                bgt.w   _a0
                addq.w  #6,a0
_a0:                                    ; CODE XREF: CompLine+BE   j
                                        ; CompLine+CA   j ...
                move.w  (a0)+,d0
                bsr.w   getlinee
                cmp.w   #$C00,d0        ; #(19*$1000)/20
                dbhi    d1,_a0
                move.w  -(a0),$16(a2)   ; tmline
                bra.w   _ex
; ---------------------------------------------------------------------------
_al1:                                   ; DATA XREF: CompLine+B4   o
                dc.w 0
                dc.w 1
                dc.w 2
                dc.w 0
                dc.w 2
                dc.w 1
                dc.w 0
                dc.w 1
                dc.w 0
; End of function CompLine


; face off control logic and general setup for action
puckfaceoff2:                           ; DATA XREF: ROM:00018DEC   o
                bclr    #1,$62(a3)
                beq.w   _nna
                bclr    #2,(BA_PS_flags).w
                bclr    #5,(BA_PS_flags).w
                bclr    #0,(word_FFC2F4).w
                bclr    #1,(word_FFC2F4).w
                bclr    #0,(byte_FFC300).w
                bclr    #1,(byte_FFC300).w
                bclr    #2,(byte_FFC300).w
                movem.l d0-d7/a0-a6,-(sp)
                bsr.w   forceblack
_p:                                     ; CODE XREF: puckfaceoff2+42   j
                btst    #0,(disflags).w
                bne.s   _p
                move    sr,-(sp)
                move.w  #$3C,(word_FFD412).w ; '<'
                tst.w   (fox).w
                bne.w   loc_F8F4
                tst.w   (foy).w
                bne.w   loc_F8F4
                move.w  #$FFFF,(word_FFD6BE).w
                bra.w   loc_F8F8
; ---------------------------------------------------------------------------
loc_F8F4:                               ; CODE XREF: puckfaceoff2+50   j
                                        ; puckfaceoff2+58   j
                move    #$2700,sr
loc_F8F8:                               ; CODE XREF: puckfaceoff2+62   j
                cmpi.w  #$258,(crowdlevel).w
                bls.w   _ntm
                move.w  #$258,(crowdlevel).w ; limit crowd level
_ntm:                                   ; CODE XREF: puckfaceoff2+70   j
                bset    #3,(disflags).w ; stop clock
                bclr    #0,(sflags).w   ; no pause
                bclr    #0,(sflags3).w  ; no line changes
                clr.w   (glovecords).w  ; no fighting gloves
                clr.b   (iflags).w      ; no icing
                st      (RefCnt).w      ; no refs
                st      (puckcross2).w  ; no goalie moves
                st      (puckcross6).w
                bclr    #1,(sflags2).w  ; no ref refresh
                bset    #0,(sflags2).w  ; face off in progress
                bset    #2,(sflags2).w  ; dont record yet
                st      (word_FFBEE0).w
                st      (word_FFBF6C).w
                bset    #4,(disflags).w
                bsr.w   ClrHor          ; vertical ice rink
                move.w  #$2710,(word_FFC304).w
                clr.w   (Vpos).w        ; clear h/v pos
                clr.w   (Hpos).w
                move.w  (fox).w,(puckx).w
                move.w  (foy).w,(pucky).w
                st      (puckz).w       ; no visible puck
                clr.w   (puckvx).w
                clr.w   (puckvy).w
                clr.w   (puckvz).w
                st      (puckc).w
                movea.w #(unk_FFB64A-M68K_RAM),a0 ; reposition goal nets
                clr.w   $28(a0)         ; Xvel
                clr.w   $2A(a0)         ; Yvel
                clr.w   (a0)            ; Xpos
                move.w  #$10C,$14(a0)   ; Ypos
                adda.w  #$80,a0         ; add SCstruct to move to next goal net
                clr.w   $28(a0)
                clr.w   $2A(a0)
                clr.w   (a0)
                move.w  #$FEF4,$14(a0)  ; Ypos
                movea.w #(unk_FFB7CA-M68K_RAM),a0 ; move to puck shadow SCnum
                move.w  #$18A,6(a0)     ; #SPFpuck, Frame
                clr.w   $58(a0)         ; SPA
                clr.w   4(a0)           ; attribute
                clr.w   (word_FFB74E).w ; clear puck SCnum attribute
                bclr    #6,(sflags).w
                moveq   #$64,d4 ; 'd'
_cw:                                    ; CODE XREF: puckfaceoff2+13C   j
                bsr.w   checkwindow     ; scroll to faceoff spot
                dbf     d4,_cw
                move.w  #$3C,(yleader).w ; '<'
                bsr.w   ResetBench
                movea.w #(HmShots-M68K_RAM),a2
                bsr.w   SetPersonel
                bsr.w   forcepldata
                adda.w  #$364,a2
                bsr.w   SetPersonel
                bsr.w   forcepldata
                bsr.w   resetplstuff
                move.l  a3,-(sp)
                movea.w #(SortCords-M68K_RAM),a3
                moveq   #$B,d2
_10:                                    ; CODE XREF: puckfaceoff2+27C   j
                move.w  #$FF10,(a3)     ; -240, Xpos
                clr.w   $14(a3)         ; Ypos
                clr.w   6(a3)           ; frame
                move.w  $34(a3),d1      ; position
                bmi.w   _next
                beq.w   _goalie1
                move.l  #$16,d0         ; #afaceoff - assignment faceoff
                cmp.w   #4,d1           ; find the center (position 4)
                bne.w   _11
                movea.w #(HmShots-M68K_RAM),a2
                btst    #6,$62(a3)      ; #pfgoal - what goal to score on
                beq.w   _clr
                adda.w  #$364,a2
_clr:                                   ; CODE XREF: puckfaceoff2+19E   j
                clr.w   $18(a2)
                move.b  $66(a3),$19(a2) ; 66(a3) = player offset on roster 19(a2) = player who touches puck
                bclr    #7,(byte_FFC2FE).w
                st      $1A(a2)         ; clear last player to touch puck (assist 1)
                st      $1C(a2)         ; clear second last player to touch puck (assist 2)
                bclr    #3,$30(a2)
                move.l  #$17,d0         ; #afaceoffpl - faceoff player assignment
_11:                                    ; CODE XREF: puckfaceoff2+190   j
                bsr.w   assinsert
_goalie1:                               ; CODE XREF: puckfaceoff2+182   j
                move.w  (tmap).w,d4     ; tmap = active players on ice (4-6)
                btst    #6,$62(a3)      ; #pfteam - 0=home 1=away
                beq.w   _t0
                move.w  (tmsize).w,d4
_t0:                                    ; CODE XREF: puckfaceoff2+1D8   j
                neg.w   d4
                addq.w  #6,d4
                asl.w   #3,d4
                movea.l #$FCEE,a1       ; #.apl
                adda.w  d4,a1
                move.b  (a1,d1.w),d4
                asl.w   #2,d4
                movea.l #$FD06,a1       ; #.ptab
                move.w  (a1,d4.w),d0
                move.w  2(a1,d4.w),d1
                btst    #7,$62(a3)      ; #pfgoal - 0=bottom, 1=top
                bne.w   _f0
                neg.w   d0
                neg.w   d1
_f0:                                    ; CODE XREF: puckfaceoff2+208   j
                tst.w   $34(a3)         ; check for goalie
                beq.w   _goalie2
                cmp.w   #8,d4
                bgt.w   _nodef
                move.w  (fox).w,d3
                eor.w   d0,d3
                bpl.w   _notmid
                move.w  (foy).w,d3
                asr.w   #3,d3
                sub.w   d3,d1
_notmid:                                ; CODE XREF: puckfaceoff2+226   j
                move.w  (fox).w,d3
                asr.w   #2,d3
                sub.w   d3,d0
_nodef:                                 ; CODE XREF: puckfaceoff2+21C   j
                add.w   (fox).w,d0
                add.w   (foy).w,d1
_goalie2:                               ; CODE XREF: puckfaceoff2+214   j
                move.w  d0,(a3)         ; Xpos
                move.w  d1,$14(a3)      ; Ypos
                clr.w   $28(a3)         ; Xvel
                clr.w   $2A(a3)         ; Yvel
                sub.w   (puckx).w,d0
                sub.w   (pucky).w,d1
                neg.w   d0
                neg.w   d1
                bsr.w   vtoa
                move.w  d0,$54(a3)      ; facedir
                bclr    #2,$63(a3)      ; #pf2unav
                bclr    #5,$62(a3)      ; #pfalock
                move.w  #$50C,d1        ; #SPAglide
                bsr.w   SetSPA
_next:                                  ; CODE XREF: puckfaceoff2+17E   j
                adda.w  #$80,a3         ; #Scstruct
                dbf     d2,_10
                bsr.w   SprSort
                movea.l (sp)+,a3
                bsr.w   setchgplayer
                move.w  (ExtraChars).w,d4
                movea.l #unk_55BFE,a2
                jsr     (sub_11738).l
                move.w  d4,(word_FFB01C).w
                movea.l #unk_A78B6,a2
                bsr.w   sub_11738
                move.w  #$FFFF,(word_FFD6B4).w
                btst    #0,(byte_FFC2FC).w
                beq.w   loc_FB54
                move.w  (word_FFD6BE).w,d0
                bmi.w   loc_FB54
                jsr     (sub_FE510).l
loc_FB54:                               ; CODE XREF: puckfaceoff2+2B4   j
                                        ; puckfaceoff2+2BC   j
                bsr.w   printz
; ---------------------------------------------------------------------------
                dc.b 0,6,$FF,0,0,0
; ---------------------------------------------------------------------------
                moveq   #$36,d0 ; '6'   ; X Position of the faceoff window
                tst.w   (fox).w
                bpl.w   _fok
                move.w  #$BE,d0
_fok:                                   ; CODE XREF: puckfaceoff2+2D6   j
                move.w  d0,(fodropx).w
                subi.w  #$2E,d0 ; '.'
                asr.w   #3,d0
                move.w  d0,(printx).w
                moveq   #$5C,d0 ; '\'   ; Y position of the faceoff window
                move.w  d0,(fodropy).w
                subi.w  #$44,d0 ; 'D'
                asr.w   #3,d0
                move.w  d0,(printy).w
                move.w  (ExtraChars).w,d4 ; space for faceoff map
                movea.l #FaceOffMap,a0
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                clr.w   d0
                clr.w   d1
                moveq   #$C,d2
                moveq   #$A,d3
                moveq   #0,d5
                bset    #0,(word_FFC2F8).w
                bsr.w   dobitmap
                bclr    #0,(word_FFC2F8).w
                tst.w   (OptLine).w
                bne.w   loc_FC08
                bsr.w   printz2
                ori.b   #$A,d6
                moveq   #$C,d0
                moveq   #3,d1
                bsr.w   Framer
                move.w  (word_FFC6E4).w,d0
                move.w  (word_FFCA48).w,d1
                btst    #1,(gmode).w
                bne.w   loc_FBE4
                exg     d0,d1
loc_FBE4:                               ; CODE XREF: puckfaceoff2+350   j
                bsr.w   printz2
                ori.b   #1,d6
                movea.l #FaceOffsprites,a1
                bsr.w   sub_13508
                addq.w  #4,(printx).w
                move.w  d1,d0
                movea.l #FaceOffsprites,a1
                bsr.w   sub_13508
loc_FC08:                               ; CODE XREF: puckfaceoff2+32C   j
                move.w  #$78,d0 ; 'x'
                bsr.w   randomd0
                addi.w  #$B4,d0
                cmpi.w  #0,(word_FFD6B4).w
                beq.w   _chkmintime
                cmpi.w  #1,(word_FFD6B4).w
                beq.w   _chkmintime
                cmpi.w  #5,(word_FFD6B4).w
                beq.w   _chkmintime
                cmpi.w  #4,(word_FFD6B4).w
                beq.w   _chkmintime
                cmpi.w  #2,(word_FFD6B4).w
                bne.w   _time
_chkmintime:                            ; CODE XREF: puckfaceoff2+38C   j
                                        ; puckfaceoff2+396   j ...
                cmp.w   #$10E,d0
                bgt.w   _time
                move.w  #$10E,d0        ; sets minimum value in d0 to 10E
_time:                                  ; CODE XREF: puckfaceoff2+3B4   j
                                        ; puckfaceoff2+3BC   j
                move.w  d0,$40(a3)      ; time for puck drop
                move.w  #$18,(palcount).w
                movea.l #$FFFFBDA8,a0   ; #fofdata
                move.w  #1,(a0)
                move.w  #$8000,2(a0)
                move.w  #4,4(a0)
                move.w  #$A800,6(a0)
                move.w  #7,8(a0)        ; frame of ref
                move.w  #$8000,$A(a0)
                btst    #1,(gmode).w    ; #gmdir - 0 = home team goes up
                bne.w   _nfl
                eori.w  #$800,2(a0)
                eori.w  #$800,6(a0)
_nfl:                                   ; CODE XREF: puckfaceoff2+3FC   j
                move.w  #$FFFF,(fodir1).w ; -1
                move.w  #$FFFF,(fodir2).w ; -1
                jsr     (sub_FF7E2).l
                bclr    #6,(byte_FFC2FE).w
                bne.w   loc_FCC0
                bclr    #4,(byte_FFC2FE).w
                beq.w   loc_FCCE
loc_FCC0:                               ; CODE XREF: puckfaceoff2+424   j
                bclr    #4,(byte_FFC2FE).w
                move.w  (word_FFD6C8).w,-(sp)
                bsr.w   song
loc_FCCE:                               ; CODE XREF: puckfaceoff2+42E   j
                move.w  #$18,(palcount).w
                move    (sp)+,sr
                movem.l (sp)+,d0-d7/a0-a6
                rts
; ---------------------------------------------------------------------------
_nna:                                   ; CODE XREF: puckfaceoff2+6   j
                subq.w  #1,$40(a3)
                bpl.w   updatefaceoff
                jsr     (sub_FE548).l
                bra.w   Endfaceoff
; ---------------------------------------------------------------------------
_ptab:
                dc.w 0
                dc.w $FF06
                dc.w $FFDD
                dc.w $FFCE
                dc.w $23
                dc.w $FFCE
                dc.w $FFCE
                dc.w $FFF6
                dc.w 0
                dc.w $FFF1
                dc.w $32
                dc.w $FFF6
                dc.w 0
                dc.w $FFC4
; End of function puckfaceoff2


setchgplayer:                           ; CODE XREF: puckpenshot+27A   p
                                        ; puckfaceoff2+286   p
                move.w  #$FFFF,(c1playernum).w
                move.w  #$FFFF,(c2playernum).w
                tst.w   (cont1team).w
                beq.w   loc_FD3C
                clr.w   d4
                bsr.w   changeplayer
loc_FD3C:                               ; CODE XREF: setchgplayer+10   j
                tst.w   (cont2team).w
                beq.w   loc_FD4A
                moveq   #2,d4
                bsr.w   changeplayer
loc_FD4A:                               ; CODE XREF: setchgplayer+1E   j
                tst.w   (cont3team).w
                beq.w   loc_FD82
                move.w  (cont1team).w,-(sp)
                move.w  (cont3team).w,(cont1team).w
                move.w  (c1playernum).w,-(sp)
                move.w  #$FFFF,(c1playernum).w
                clr.w   d4
                jsr     (changeplayer).l
                move.w  (c1playernum).w,(c3playernum).w
                move.w  (cont1team).w,(cont3team).w
                move.w  (sp)+,(c1playernum).w
                move.w  (sp)+,(cont1team).w
loc_FD82:                               ; CODE XREF: setchgplayer+2C   j
                tst.w   (cont4team).w
                beq.w   locret_FDBC
                move.w  (cont2team).w,-(sp)
                move.w  (cont4team).w,(cont2team).w
                move.w  (c2playernum).w,-(sp)
                move.w  #$FFFF,(c2playernum).w
                move.w  #2,d4
                jsr     (changeplayer).l
                move.w  (c2playernum).w,(c4playernum).w
                move.w  (cont2team).w,(cont4team).w
                move.w  (sp)+,(c2playernum).w
                move.w  (sp)+,(cont2team).w
locret_FDBC:                            ; CODE XREF: setchgplayer+64   j
                rts
; End of function setchgplayer


updatefaceoff:                          ; CODE XREF: puckfaceoff2+452   j
                move.w  $40(a3),d0
                beq.w   loc_FDDE
                addq.w  #6,d0
                lsr.w   #3,d0
                cmp.w   #2,d0
                bgt.w   rtss2
                neg.w   d0
                addi.w  #$A,d0
                move.w  d0,(word_FFBDB0).w
                rts
; End of function updatefaceoff
; ---------------------------------------------------------------------------
loc_FDDE:                               ; CODE XREF: updatefaceoff+4   j
                bclr    #4,(disflags).w
                bsr.w   printz
                ori.b   #0,d6
                ori.b   #$38,d0 ; '8'
                cmp.b   $40(a2,d0.w*4),d0
                ori.b   #$40,$31C0(a6) ; '@'
                cmp.b   $7064(a0),d0
                move.w  (fodropy).w,d0
                subi.w  #$44,d0 ; 'D'
                asr.w   #3,d0
                move.w  d0,(printy).w
                moveq   #$C,d0
                moveq   #$D,d1
                move.w  #$7FF,d2
                bra.w   eraser


Endfaceoff:                             ; CODE XREF: puckfaceoff2+45C   j
                move.w  #$2F,-(sp) ; '/'
                bsr.w   sfx
                bclr    #0,(sflags2).w
                move.w  #$3C,(word_FFD412).w ; '<'
                move.w  (ExtraChars).w,d4
                movea.l #unk_5C410,a2
                bsr.w   sub_11738
                bclr    #2,(sflags2).w
                bclr    #0,(gmode).w
                bclr    #0,$63(a3)
                clr.w   (word_FFC304).w
                bset    #4,(sflags3).w
                move.w  (fodir1).w,d3
                move.w  #$800,d4
                movea.l #$FF06,a0
                movea.w #(dword_FFBDA8-M68K_RAM),a1
                moveq   #$10,d2
                move.w  (a1),d1
                sub.b   -1(a0,d1.w),d2
                move.w  4(a1),d1
                add.b   -1(a0,d1.w),d2
                moveq   #$21,d0 ; '!'
                bsr.w   randomd0
                cmp.b   d0,d2
                bls.w   _p1won
                addq.w  #4,a1
_p1won:                                 ; CODE XREF: Endfaceoff+68   j
                btst    #3,2(a1)
                beq.w   _pos
                move.w  (fodir2).w,d3
                neg.w   d4
_pos:                                   ; CODE XREF: Endfaceoff+74   j
                move.w  d3,d0
                btst    #3,d0
                bne.w   _nojoy
                andi.w  #7,d0
                move.w  (VDP_CNTR).l,d1
                andi.w  #3,d1
                bne.w   _nj2
_nojoy:                                 ; CODE XREF: Endfaceoff+84   j
                moveq   #5,d0
                bsr.w   randomd0
                subq.w  #2,d0
                andi.w  #7,d0
                tst.w   d4
                bmi.w   _nj2
                eori.w  #4,d0
_nj2:                                   ; CODE XREF: Endfaceoff+96   j
                                        ; Endfaceoff+A8   j
                asl.w   #2,d0
                movea.l #dirtab,a0
                move.w  (a0,d0.w),d1
                asl.w   #5,d1
                move.w  d1,$28(a3)
                move.w  2(a0,d0.w),d1
                asl.w   #5,d1
                add.w   d4,d1
loc_FEE2:                               ; CODE XREF: ROM:00009EE2   j
                move.w  d1,$2A(a3)
                move.w  #$800,d0
                bsr.w   randomd0
                move.w  d0,$2C(a3)
                clr.w   (puckz).w
                bclr    #2,$62(a3)
                move.l  #$18,d0         ; pucknorm
                bra.w   assreplace
; ---------------------------------------------------------------------------


; assignment for puck most of the time
; a3 = puck
; d7 = elapse frames since last call
pucknorm:                               ; DATA XREF: ROM:00018DDC   o
                btst    #2,(BA_PS_flags).w ; check if flag is clear (normal play)
                beq.w   loc_FF1A
                bsr.w   sub_F2F4
loc_FF1A:                               ; CODE XREF: pucknorm+6   j
                bclr    #1,$62(a3)      ; #pfna clear
                beq.w   _nna
                clr.w   $40(a3)         ; temp1
                move.w  #$78,$42(a3) ; 'x' ; temp3
_nna:                                   ; CODE XREF: pucknorm+14   j
                movea.w #(puckcross-M68K_RAM),a1 ; table for puck crossing lines
                sub.w   d7,2(a1)        ; sub elapse frames from time til crossing
                sub.w   d7,6(a1)
                sub.w   d7,$40(a3)      ; temp1
                bpl.w   _0
                addq.w  #5,$40(a3)
                bsr.w   findpc
_0:                                     ; CODE XREF: pucknorm+32   j
                move.w  (puckc).w,d0
                bmi.w   _nothandled
                asl.w   #7,d0           ; #scsize
                movea.w #(SortCords-M68K_RAM),a2
                adda.w  d0,a2
                bsr.w   a2touchpuck
                move.l  a2,-(sp)
                bsr.w   GetHot
                add.w   (a2),d0         ; Xpos - bungie the puck towards the hot spot on player a2
                sub.w   (a3),d0
                asr.w   #2,d0
                add.w   d0,(a3)
                add.w   $14(a2),d1      ; Ypos
                sub.w   $14(a3),d1
                asr.w   #2,d1
                add.w   d1,$14(a3)
                move.w  $28(a2),$28(a3) ; Xvel
                move.w  $2A(a2),$2A(a3) ; Yvel
_nothandled:                            ; CODE XREF: pucknorm+42   j
                bsr.w   puckIChk
                bsr.w   ChkOffsides
                btst    #0,(gmode).w    ; check for play stoppage
                bne.w   _end
                tst.w   (puckc).w
                bpl.w   loc_FFCC
                move.w  (a3),d0         ; Xpos
                cmp.w   $1C(a3),d0      ; oldXpos
                bne.w   loc_FFCC
                move.w  $14(a3),d0      ; Ypos
                cmp.w   $20(a3),d0      ; oldYpos
                bne.w   loc_FFCC
                move.l  #6,d0
                subq.w  #1,$42(a3)      ; temp3
loc_FFC0:
                bpl.w   loc_FFC8
                bsr.w   AddPenalty2
loc_FFC8:                               ; CODE XREF: pucknorm:loc_FFC0   j
                bra.w   _end
; ---------------------------------------------------------------------------
loc_FFCC:                               ; CODE XREF: pucknorm+90   j
                                        ; pucknorm+9A   j ...
                move.w  #$78,$42(a3) ; 'x' ; move 78 hex into temp2
_end:                                   ; CODE XREF: pucknorm+88   j
                                        ; pucknorm:loc_FFC8   j
                tst.b   $2C(a3)         ; Zvel
                bne.w   checkpuckcoll
                tst.w   $18(a3)         ; Zpos
                bne.w   checkpuckcoll
                bsr.w   puckunflip
                bra.w   checkpuckcoll
; End of function pucknorm


; check for offsides penalty
ChkOffsides:                            ; CODE XREF: pucknorm+7E   p
                btst    #5,(gmode).w
                beq.w   rtss2
                btst    #2,(BA_PS_flags).w
                bne.w   rtss2
                movea.w #(HmShots-M68K_RAM),a1
                lea     $364(a1),a2
                bsr.w   sub_100A6
                exg     a1,a2
                bsr.w   sub_100A6
                move.w  #$54,d0 ; 'T'
                cmp.w   $14(a3),d0
                bgt.w   loc_1005C
                cmp.w   $20(a3),d0
                ble.w   rtss2
                addi.w  #$A,d0
                btst    #1,(gmode).w
                beq.w   loc_10034
                exg     a2,a1
loc_10034:                              ; CODE XREF: ChkOffsides+44   j
                moveq   #5,d2
                movea.w $22(a2),a0
loc_1003A:                              ; CODE XREF: ChkOffsides+6C   j
                tst.w   $34(a0)
                bmi.w   loc_10052
                cmp.w   $14(a0),d0
                bge.w   loc_10052
                bset    #4,$30(a2)
                rts
; ---------------------------------------------------------------------------
loc_10052:                              ; CODE XREF: ChkOffsides+54   j
                                        ; ChkOffsides+5C   j
                adda.w  #$80,a0
                dbf     d2,loc_1003A
                rts
; ---------------------------------------------------------------------------
loc_1005C:                              ; CODE XREF: ChkOffsides+2E   j
                neg.w   d0
                cmp.w   $14(a3),d0
                blt.w   rtss2
                cmp.w   $20(a3),d0
                bge.w   rtss2
                subi.w  #$A,d0
                btst    #1,(gmode).w
                bne.w   loc_1007E
                exg     a2,a1
loc_1007E:                              ; CODE XREF: ChkOffsides+8E   j
                moveq   #5,d2
                movea.w $22(a2),a0
loc_10084:                              ; CODE XREF: ChkOffsides+B6   j
                tst.w   $34(a0)
                bmi.w   loc_1009C
                cmp.w   $14(a0),d0
                ble.w   loc_1009C
                bset    #4,$30(a2)
                rts
; ---------------------------------------------------------------------------
loc_1009C:                              ; CODE XREF: ChkOffsides+9E   j
                                        ; ChkOffsides+A6   j
                adda.w  #$80,a0
                dbf     d2,loc_10084
                rts
; End of function ChkOffsides


sub_100A6:                              ; CODE XREF: ChkOffsides+1C   p
                                        ; ChkOffsides+22   p
                btst    #4,$30(a2)
                beq.w   rtss2
                movea.w $22(a2),a0
                moveq   #5,d1
loc_100B6:                              ; CODE XREF: sub_100A6+30   j
                tst.w   $34(a0)
                bmi.w   loc_100CE
                move.w  $14(a0),d0
                btst    #7,$62(a0)
                bne.w   loc_100CE
                neg.w   d0
loc_100CE:                              ; CODE XREF: sub_100A6+14   j
                                        ; sub_100A6+22   j
                adda.w  #$80,a0
                cmp.w   #$58,d0 ; 'X'
                dbgt    d1,loc_100B6
                bgt.w   rtss2
                bclr    #4,$30(a2)
                rts
; End of function sub_100A6


a2offsides:                             ; CODE XREF: a2touchpuck+6C   p
                btst    #5,(gmode).w
                beq.w   rtss2
                move.w  (pucky).w,d0
                btst    #7,$62(a2)
                bne.w   loc_10100
                neg.w   d0
loc_10100:                              ; CODE XREF: a2offsides+14   j
                cmp.w   #$68,d0 ; 'h'
                blt.w   rtss2
                movea.w #(HmShots-M68K_RAM),a0
                btst    #6,$62(a2)
                beq.w   loc_1011A
                adda.w  #$364,a0
loc_1011A:                              ; CODE XREF: a2offsides+2C   j
                btst    #4,$30(a0)
                beq.w   rtss2
                btst    #4,(gmode).w
                bne.w   rtss2
                exg     a2,a3
                move.l  #$10,d0
                bsr.w   AddPenalty
                exg     a2,a3
                rts
; End of function a2offsides


; player a2 touches puck
; look for penalties/offsides/other junk
a2touchpuck:                            ; CODE XREF: pucknorm+4E   p
                                        ; puckstick+F2   p ...
                move.w  (a2),(ltx).w    ; move Xpos to last touch X
                move.w  $14(a2),(lty).w ; move Ypos to last touch Y
                move.w  $52(a2),(ltplayer).w ; move SCnum to last touch player
                movea.w #(HmShots-M68K_RAM),a0 ; move Home Shots into a0
                btst    #6,$62(a2)      ; check if home or away
                beq.w   loc_10160       ; branch if home
                lea     $364(a0),a0     ; add to a0 if away
loc_10160:                              ; CODE XREF: a2touchpuck+1A   j
                clr.w   d0
                move.b  $66(a2),d0      ; move pnum into d0
                btst    #3,$64(a2)      ; check if one timer
                beq.w   loc_10176       ; branch if not
                bset    #7,(byte_FFC2FE).w ; set if one timer
loc_10176:                              ; CODE XREF: a2touchpuck+2E   j
                cmp.w   $18(a0),d0      ; compare value in C6E6 (home) to d0
                beq.w   loc_101A4       ; branch if equal
                bclr    #3,$30(a0)      ; clear bit 3
                bne.w   loc_10194       ; branch if not cleared before
                move.w  $1A(a0),$1C(a0) ; move current player to assist slot
                move.w  $18(a0),$1A(a0) ; move current player to last player slot
loc_10194:                              ; CODE XREF: a2touchpuck+46   j
                move.w  d0,$18(a0)      ; move pnum into current player
                cmp.w   $1C(a0),d0      ; compare if same player as assist slot
                bne.w   loc_101A4       ; branch if not
                st      $1C(a0)         ; set FFFF to assist slot
loc_101A4:                              ; CODE XREF: a2touchpuck+3C   j
                                        ; a2touchpuck+5E   j
                bclr    #4,(sflags2).w  ; clear shot taken
                bsr.w   a2offsides
                btst    #2,(iflags).w   ; check if icing
                beq.w   _notice         ; branch if not
                btst    #0,(iflags).w   ; test if crossed goalline
                beq.w   _notice         ; branch if not
                tst.w   $34(a2)         ; check if goalie
                beq.w   _notice         ; branch if so
                btst    #1,(iflags).w   ; check if must cross top line
                bne.w   _up             ; branch if so
                btst    #7,$62(a2)      ; check if top or bottom shooting goal
                beq.w   _notice         ; branch if bottom
_icing:                                 ; CODE XREF: a2touchpuck+C2   j
                clr.w   d0
                move.b  (icingPlayer).w,d0 ; move iflags+1 into d0
                asl.w   #7,d0
                move.l  a3,-(sp)        ; push on stack
                movea.w #(SortCords-M68K_RAM),a3
                adda.w  d0,a3           ; a3 now player struct
                move.w  #$C,d0          ; #PenIcing
                bsr.w   AddPenalty
                movea.l (sp)+,a3
                rts
; ---------------------------------------------------------------------------
_up:                                    ; CODE XREF: a2touchpuck+92   j
                btst    #7,$62(a2)      ; check top or bottom shooting goal
                beq.s   _icing          ; branch if bottom
_notice:                                ; CODE XREF: a2touchpuck+76   j
                                        ; a2touchpuck+80   j ...
                clr.b   (iflags).w
                move.b  $53(a2),(icingPlayer).w ; move SCnum+1 into icingPlayer
                move.w  (pucky).w,d0    ; move pucky into d0
                btst    #7,$62(a2)      ; check if shooting up or down
                beq.w   _0              ; branch if down
                bset    #1,(iflags).w   ; set icing direction up
                neg.w   d0              ; negate d0
_0:                                     ; CODE XREF: a2touchpuck+D8   j
                bmi.w   rtss2           ; exit if minus
                move.w  (tmap).w,d0
                sub.w   (tmsize).w,d0
                btst    #6,$62(a2)      ; check home or away
                beq.w   _1              ; branch if home
                neg.w   d0              ; negate d0
_1:                                     ; CODE XREF: a2touchpuck+F6   j
                bmi.w   rtss2           ; exit if minus
                bset    #2,(iflags).w   ; set icing flag
                rts
; End of function a2touchpuck


; check for icing of puck penalty
puckIChk:                               ; CODE XREF: pucknorm:_nothandled   p
                btst    #2,(iflags).w   ; #ifok
                beq.w   rtss2
                btst    #0,(iflags).w   ; #ifcgl - if crossed goal line
                bne.w   rtss2
                tst.w   (puckc).w
                bpl.w   rtss2
                move.w  #$108,d0        ; goalline
                btst    #1,(iflags).w   ; #ifdir - 1 = must cross top line
                bne.w   _0
                neg.w   d0
                cmp.w   (pucky).w,d0    ; check other goalline
                bgt.w   _set
                rts
; ---------------------------------------------------------------------------
_0:                                     ; CODE XREF: puckIChk+26   j
                cmp.w   (pucky).w,d0
                bgt.w   rtss2
_set:                                   ; CODE XREF: puckIChk+30   j
                cmpi.w  #$2C,(puckx).w ; ',' ; 2C - edge of crease
                bgt.w   loc_102A0
                cmpi.w  #$FFD4,(puckx).w ; FFD4 - edge of crease
                blt.w   loc_102A0
                bclr    #2,(iflags).w   ; #ifok cleared
                rts
; ---------------------------------------------------------------------------
loc_102A0:                              ; CODE XREF: puckIChk+44   j
                                        ; puckIChk+4E   j
                bset    #0,(iflags).w   ; #ifcgl
                rts
; End of function puckIChk


; stop spinning puck
; a3 = puck
puckunflip:                             ; CODE XREF: pucknorm+D6   p
                                        ; DATA XREF: ROM:00018DE4   o
                cmpi.w  #8,$5A(a3)
                blt.w   _k
                cmpi.w  #$18,$5A(a3)
                bge.w   _k
                eori.w  #2,$54(a3)      ; facedir
_k:                                     ; CODE XREF: puckunflip+6   j
                                        ; puckunflip+10   j
                ori.w   #4,$54(a3)
                clr.w   $5A(a3)         ; SPAnum
                st      $5C(a3)         ; SPAcnt
                rts
; End of function puckunflip


; start puck spinning
; a3 = puck
puckflip:                               ; CODE XREF: sub_14620+158   j
                                        ; wallcoll+60   p ...
                andi.w  #1,d0
                eor.w   d0,$54(a3)      ; facedir
                andi.w  #3,$54(a3)
                st      $5C(a3)         ; SPAcnt
                move.w  #$46A,d1        ; #SPApflip
                bra.w   SetSPA
; End of function puckflip


; assignment for puck shadow
; a3 = puck shadow
puckshadow:                             ; DATA XREF: ROM:00018DE0   o
                cmpi.w  #$18A,6(a3)     ; #SPFpuck, frame
                bne.w   _siren          ; shadow turns into siren on goals
                move.w  -$80(a3),(a3)   ; Xpos-SCstruct, Xpos
                move.w  -$6C(a3),$14(a3) ; Ypos-SCstruct, Ypos
                clr.w   $18(a3)         ; Zpos
                moveq   #$14,d0         ; Ypos
                btst    #7,(sflags).w   ; #sfhor - check if horizontal mode
                beq.w   _nhor
                moveq   #0,d0           ; Xpos
_nhor:                                  ; CODE XREF: puckshadow+20   j
                addq.w  #1,(a3,d0.w)
                rts
; ---------------------------------------------------------------------------
_siren:                                 ; CODE XREF: puckshadow+6   j
                tst.w   6(a3)           ; frame
                beq.w   rtss2
                clr.w   (a3)            ; Xpos
                move.w  #$12C,$14(a3)   ; Ypos
                move.w  #$E,$18(a3)     ; Zpos
                tst.w   -$6C(a3)        ; Ypos-SCstruct
                bpl.w   _s0
                move.w  #$8000,4(a3)    ; attribute
                neg.w   $14(a3)         ; Ypos
                subq.w  #1,$18(a3)      ; Zpos
_s0:                                    ; CODE XREF: puckshadow+46   j
                rts
; End of function puckshadow


; find puck crossing lines
; calculate when puck will cross goalline (if at all)
findpc:                                 ; CODE XREF: pucknorm+3A   p
                movem.l d0-d4/a1-a2,-(sp)
                movea.w #(puckcross-M68K_RAM),a1
                move.w  #$88,d1         ; sideline - distance from center to side boards
                move.w  #$108,d4        ; goaline
                bsr.w   _calc
                neg.w   d4              ; make d4 negative to check bottom goal line
                bsr.w   _calc
                movem.l (sp)+,d0-d4/a1-a2
                rts
; ---------------------------------------------------------------------------
_calc:                                  ; CODE XREF: findpc+10   p
                                        ; findpc+16   p
                move.w  d4,d0           ; move goaline into d0
                sub.w   (pucky).w,d0    ; sub pucky from d0
                tst.w   (puckvy).w      ; check puckvy
                beq.w   _nocross        ; branch if 0
                move.w  d0,d2           ; move d0 into d2
                swap    d2              ; swap upper and lower word of d2
                clr.w   d2              ; clear bottom word of d2
                asr.l   #4,d2           ; shift 4 bits right (divide by 16)
                divs.w  (puckvy).w,d2   ; divide puckvy into d2
                bmi.w   _nocross        ; branch if negative
                move.w  d2,2(a1)        ; time until crossing in frames (puckcross y)
                muls.w  (puckvx).w,d0   ; mult puckvx with d0
                divs.w  (puckvy).w,d0   ; divide puckvy into d0
                bvs.w   _nocross        ; branch if overflow set
                add.w   (puckx).w,d0    ; add puckx to d0
                cmp.w   d1,d0           ; compare d1 (sideline) to d0
                blt.w   _o1             ; branch if less than (in play)
                neg.w   d0              ; negate d0
                add.w   d1,d0           ; add d1 3 times to d0
                add.w   d1,d0
                add.w   d1,d0
_o1:                                    ; CODE XREF: findpc+54   j
                neg.w   d1              ; negate d1
                cmp.w   d1,d0           ; compare d1 (other sideline) to d0
                bgt.w   _o2             ; branch if greater than (in play)
                neg.w   d0              ; negate d0
                add.w   d1,d0           ; add d1 to d0 3 times
                add.w   d1,d0
                add.w   d1,d0
_o2:                                    ; CODE XREF: findpc+64   j
                neg.w   d1              ; negate d1
                move.w  d0,(a1)         ; move d0 into puckcross
                bra.w   _next
; ---------------------------------------------------------------------------
_nocross:                               ; CODE XREF: findpc+2A   j
                                        ; findpc+3A   j ...
                move.w  #$FFFF,2(a1)    ; move -1 into puckcross y
_next:                                  ; CODE XREF: findpc+74   j
                addq.w  #4,a1           ; add 4 to puckcross (to move to the other goal line)
                rts
; End of function findpc


; a0 = extra routine for collision avoidance
; d0/d1 = x/y coord to skate to
; d7 = elapsed frames
skateto:                                ; CODE XREF: assbench+14E   j
                                        ; asspenalty+118   j ...
                sub.b   d7,$42(a3)      ; sub d7 from temp2
                bpl.w   _ex             ; exit if not 0 or less
                addi.b  #$C,$42(a3)     ; add 12 - only execute every 12 frames
                bsr.w   avdgoal         ; avoid the goal nets
                movem.w d0-d1,-(sp)
                move.w  $28(a3),d0      ; Xvel
                asr.w   #8,d0           ; divide by 256
                neg.w   d0              ; make negative
                add.w   (sp)+,d0        ; add new x coord from stack
                sub.w   (a3),d0         ; sub Xpos
                move.w  $2A(a3),d1      ; Yvel
                asr.w   #8,d1           ; divide by 256
                neg.w   d1              ; make negative
                add.w   (sp)+,d1        ; add new y coord from stack
                sub.w   $14(a3),d1      ; sub Ypos
                cmp.w   #$C,d0          ; compare 12 to d0
                bgt.w   _vt
                cmp.w   #$FFF4,d0       ; cmp -12
                blt.w   _vt
                cmp.w   #$C,d1          ; compare 12 to d1
                bgt.w   _vt
                cmp.w   #$FFF4,d1       ; cmp -12
                blt.w   _vt
                moveq   #9,d0
                bra.w   _nvt
; ---------------------------------------------------------------------------
_vt:                                    ; CODE XREF: skateto+34   j
                                        ; skateto+3C   j ...
                bsr.w   vtoa
_nvt:                                   ; CODE XREF: skateto+52   j
                jsr     (a0)            ; extra collision routine
                move.b  d0,$43(a3)      ; move d0 into temp2+1
                cmp.w   #7,d0           ; compare to 7
                ble.w   _ex
                move.w  $28(a3),d0      ; Xvel
                or.w    $2A(a3),d0      ; Yvel
                bne.w   _ex
                move.w  (puckx).w,d0    ; move puckx into d0
                move.w  (pucky).w,d1    ; move pucky into d1
                btst    #0,(byte_FFB7AD).w ; #pf2fight, puckx+pflags2
                beq.w   _nf
                move.w  (xc1).w,d0      ; scroll lock x coord
                move.w  (yc1).w,d1      ; scroll lock y coord
_nf:                                    ; CODE XREF: skateto+82   j
                sub.w   (a3),d0         ; Xpos
                sub.w   $14(a3),d1      ; Ypos - face towards puck
                bsr.w   vtoa
                sub.w   $54(a3),d0      ; facedir
                beq.w   _ex
                neg.w   d0
                andi.w  #4,d0
                lsr.w   #1,d0           ; divide by 2
                subq.w  #1,d0
                add.w   $54(a3),d0      ; facedir
                andi.w  #7,d0
                move.w  d0,$54(a3)      ; facedir
_ex:                                    ; CODE XREF: skateto+4   j
                                        ; skateto+64   j ...
                clr.w   d0
                move.b  $43(a3),d0      ; temp2+1
                bra.w   doplayeracc
; End of function skateto


; Don't try to skate through goal
; If d0/d1 coords intersect through goal, then provide new d0/d1 coords
; a3 = player
; .xr = 80
; .yr = 30
; .ye = 30
; .gl = 258
avdgoal:                                ; CODE XREF: skateto+E   p
                                        ; skatetopuck+10   p
                clr.w   (deltax).w
                clr.w   (deltay).w
                tst.w   $34(a3)         ; goalie? If so, quit
                beq.w   rtss2
                move.w  (a3),d2         ; Xpos
                eor.w   d0,d2
                bpl.w   _chbar
                move.w  d1,d2
                sub.w   $14(a3),d2      ; Ypos
                move.w  (a3),d3         ; Xpos
                muls.w  d3,d2
                sub.w   d0,d3
                divs.w  d3,d2
                add.w   $14(a3),d2      ; Ypos
                cmp.w   #$121,d2        ; .gl+.yr
                bgt.w   _chbar
                cmp.w   #$DB,d2         ; .gl-.yr
                blt.w   _lower
                move.w  #$144,d3        ; .gl-.yr-.ye
                cmp.w   #$FE,d2         ; .gl
                bgt.w   _2
                blt.w   _1
                cmpi.w  #$FE,$14(a3)    ; .gl, Ypos
                bgt.w   _2
_1:                                     ; CODE XREF: avdgoal+46   j
                move.w  #$B8,d3         ; .gl-.yr-.ye
_2:                                     ; CODE XREF: avdgoal+42   j
                                        ; avdgoal+50   j
                sub.w   d2,d3
                move.w  d3,(deltay).w
                bra.w   _chbar
; ---------------------------------------------------------------------------
_lower:                                 ; CODE XREF: avdgoal+36   j
                cmp.w   #$FF25,d2       ; -.gl+.yr
                bgt.w   _chbar
                cmp.w   #$FEDF,d2       ; -.gl-.yr
                blt.w   _chbar
                move.w  #$FF48,d3       ; -.gl+.yr+.ye
                cmp.w   #$FF02,d2       ; -.gl
                bgt.w   _4
                blt.w   _3
                cmpi.w  #$FF02,$14(a3)  ; -.gl, Ypos
                bgt.w   _4
_3:                                     ; CODE XREF: avdgoal+7E   j
                move.w  #$FEBC,d3       ; -.gl-.yr-.ye
_4:                                     ; CODE XREF: avdgoal+7A   j
                                        ; avdgoal+88   j
                sub.w   d2,d3
                move.w  d3,(deltay).w
_chbar:                                 ; CODE XREF: avdgoal+14   j
                                        ; avdgoal+2E   j ...
                move.w  d1,d3
                subi.w  #$FE,d3
                move.w  $14(a3),d2
                subi.w  #$FE,d2
                bsr.w   ch1
                move.w  d1,d3
                addi.w  #$FE,d3
                move.w  $14(a3),d2
                addi.w  #$FE,d2
                bsr.w   ch1
                add.w   (deltax).w,d0
                add.w   (deltay).w,d1
                rts
; ---------------------------------------------------------------------------
ch1:                                    ; CODE XREF: avdgoal+A4   p
                                        ; avdgoal+B6   p
                move.w  d3,d4
                eor.w   d2,d4
                bpl.w   rtss2
                move.w  d0,d4
                sub.w   (a3),d4         ; Xpos
                muls.w  d2,d4
                sub.w   d3,d2
                divs.w  d2,d4
                add.w   (a3),d4         ; Xpos
                cmp.w   #$50,d4 ; 'P'   ; #.xr
                bgt.w   rtss2
                cmp.w   #$FFB0,d4       ; #-.xr
                blt.w   rtss2
                moveq   #$50,d3 ; 'P'   ; #.xr
                tst.w   d4
                bne.w   loc_1057A
                tst.w   (a3)            ; Xpos
loc_1057A:                              ; CODE XREF: avdgoal+EC   j
                bpl.w   loc_10580
                neg.w   d3
loc_10580:                              ; CODE XREF: avdgoal:loc_1057A   j
                sub.w   d4,d3
                move.w  d3,(deltax).w
                rts
; End of function avdgoal


skatetopuckinit:                        ; CODE XREF: assnearest:_nodec22   p
                                        ; skatetopuck   p
                move.b  (puckvx).w,d0
                asr.b   #1,d0
                ext.w   d0
                add.w   (puckx).w,d0
                move.b  (puckvy).w,d1
                asr.b   #1,d1
                ext.w   d1
                add.w   (pucky).w,d1
                rts
; End of function skatetopuckinit


; player a3 should skate to puck
skatetopuck:                            ; CODE XREF: sub_DD2E:loc_DDC0   j
                                        ; assnearest:_topuck   p
                bsr.s   skatetopuckinit
                sub.b   d7,$42(a3)      ; temp2
                bpl.w   _ex
                addi.b  #$A,$42(a3)     ; temp2
                bsr.w   avdgoal
                movem.w d0-d1,-(sp)
                move.l  a3,-(sp)
                bsr.w   GetHot
                neg.b   d0
                neg.b   d1
                sub.b   $28(a3),d0      ; Xvel
                ext.w   d0
                add.w   (sp)+,d0
                sub.w   (a3),d0         ; Xpos
                sub.b   $2A(a3),d1      ; Yvel
                ext.w   d1
                add.w   (sp)+,d1
                sub.w   $14(a3),d1      ; Ypos
                bsr.w   vtoa
                move.b  d0,$43(a3)      ; temp2 lower byte
                tst.w   $34(a3)
                beq.w   _ex
                move.w  (puckvx).w,d0
                move.w  (puckvy).w,d1
                bsr.w   vtoa
                eori.w  #4,d0
                cmp.w   $54(a3),d0      ; facedir
                beq.w   _ex
                move.w  (puckx).w,d0
                sub.w   (a3),d0         ; Xpos
                move.w  (pucky).w,d1
                sub.w   $14(a3),d1      ; Ypos
                movem.w d0-d1,-(sp)
                bsr.w   vtoa
                cmp.w   $54(a3),d0      ; $54 = facedir
                movem.w (sp)+,d0-d1
                bne.w   _ex
                muls.w  d0,d0
                muls.w  d1,d1
                add.l   d1,d0
                cmp.l   #$384,d0        ; #30^2
                bls.w   _ex
                cmp.l   #$5A4,d0        ; #38^2
                bls.w   Sweepcheck
_ex:                                    ; CODE XREF: skatetopuck+6   j
                                        ; skatetopuck+44   j ...
                move.b  $43(a3),d0
                bra.w   doplayeracc
; End of function skatetopuck


; exit current assignment on player a3
assexit:                                ; CODE XREF: assbench+1E   j
                                        ; assben+6A   j ...
                addq.w  #1,$36(a3)      ; add 1 to current assignment index
                andi.w  #7,$36(a3)      ; mask passing first 3 bits
                bset    #1,$62(a3)      ; signal next assignment
                rts
; End of function assexit


; insert new assignment on player a3
assinsert:                              ; CODE XREF: clockcont+36   p
                                        ; clockcont+D2   p ...
                subq.w  #1,$36(a3)      ; $36 = assnum
                andi.w  #7,$36(a3)
; End of function assinsert


; replace current assignment on player a3
assreplace:                             ; CODE XREF: ROM:loc_78CA   p
                                        ; doinput+14C   p ...
                move.l  d1,-(sp)        ; push on stack
                move.w  $36(a3),d1      ; $36 = assnum
                move.b  d0,$38(a3,d1.w) ; replace current assignment with d0 on asslist
                bset    #1,$62(a3)      ; set flag to start new assignment
                move.l  (sp)+,d1        ; pop on stack
                rts
; End of function assreplace


; d0/d1 are x/y distances which are converted into direction 0-7 and returned in d0
vtoa:                                   ; CODE XREF: ROM:0000A15A   p
                                        ; doinput+404   p ...
                movem.l d2/a0,-(sp)
                move.w  d0,d2
                or.w    d1,d2
                beq.w   _nodir
                clr.w   d2
                tst.w   d0
                bpl.w   _0
                neg.w   d0
                bset    #0,d2
_0:                                     ; CODE XREF: vtoa+10   j
                tst.w   d1
                bpl.w   _1
                neg.w   d1
                bset    #1,d2
_1:                                     ; CODE XREF: vtoa+1C   j
                asl.w   #1,d1
                cmp.w   d1,d0
                bhi.w   _2
                bset    #2,d2
_2:                                     ; CODE XREF: vtoa+2A   j
                lsr.w   #1,d1
                asl.w   #1,d0
                cmp.w   d0,d1
                bhi.w   _3
                bset    #3,d2
_3:                                     ; CODE XREF: vtoa+38   j
                movea.l #_dt,a0         ; #.dt
                clr.w   d0
                move.b  (a0,d2.w),d0
                movem.l (sp)+,d2/a0
                rts
; ---------------------------------------------------------------------------
_nodir:                                 ; CODE XREF: vtoa+8   j
                moveq   #8,d0
                movem.l (sp)+,d2/a0
                rts
; End of function vtoa
; ---------------------------------------------------------------------------


; Push long address of structure to get hot spot from
; hot spot x/y returned in d0/d1
GetHot:                                 ; CODE XREF: passto+AC   p
                                        ; assnearest+198   p ...
                movem.l a0-a1,-(sp)
                movea.l $C(sp),a0
                clr.w   d0
                clr.w   d1
                tst.w   6(a0)           ; $6 = frame
                ble.w   _ex
                movea.l #framelist,a1
                move.w  6(a0),d0        ; $6 = frame
                add.w   d0,d0
                move.b  1(a1,d0.w),d1   ; SprStrHot+14
                ext.w   d1
                move.b  (a1,d0.w),d0    ; SprStrHot+12
                ext.w   d0
                btst    #3,4(a0)        ; $4 = attribute
                beq.w   _nox
                neg.w   d0
_nox:                                   ; CODE XREF: GetHot+32   j
                btst    #4,4(a0)
                bne.w   _noy
                neg.w   d1
_noy:                                   ; CODE XREF: GetHot+3E   j
                btst    #7,(sflags).w   ; Bit 7 = sfhor
                beq.w   _ex
                exg     d0,d1
                neg.w   d1
_ex:                                    ; CODE XREF: GetHot+10   j
                                        ; GetHot+4A   j
                movem.l (sp)+,a0-a1
                move.l  (sp)+,(sp)
                rts
; End of function GetHot


; set sprite animation on struct a3
; d1 = new animation
SetSPA:                                 ; CODE XREF: doinput+370   p
                                        ; ROM:0000B8E4   j ...
                cmp.w   $58(a3),d1
                beq.w   rtss2
                clr.w   $5A(a3)
                move.w  d1,$58(a3)
                st      $5C(a3)
                rts
; End of function SetSPA


; player a3 gets acc. in d0 dir
doplayeracc:                            ; CODE XREF: ROM:0000B626   j
                                        ; ROM:0000B6B6   j ...
                tst.w   $34(a3)
                beq.w   goalieacc
                move.w  #$50C,d1
                btst    #4,$62(a3)
                beq.w   loc_1076A
                move.w  #$A60,d1
loc_1076A:                              ; CODE XREF: doplayeracc+12   j
                andi.w  #$F,d0
                cmp.w   #7,d0
                ble.w   loc_10794
                cmp.w   #9,d0
                bne.w   loc_1078A
                move.w  $28(a3),d0
                or.w    $2A(a3),d0
                bne.w   dostop
loc_1078A:                              ; CODE XREF: doplayeracc+2A   j
                btst    #1,$63(a3)
                beq.s   SetSPA
                rts
; ---------------------------------------------------------------------------
loc_10794:                              ; CODE XREF: doplayeracc+22   j
                movem.w d0-d1,-(sp)
                move.w  d0,d2
                move.w  $52(a3),d0
                cmp.w   (puckc).w,d0
                beq.w   loc_1085A
                move.w  (puckx).w,d0
                sub.w   (a3),d0
                move.w  $14(a3),d3
                move.b  (puckvy).w,d1
                ext.w   d1
                add.w   (pucky).w,d1
                sub.w   d3,d1
                btst    #7,$62(a3)
                bne.w   loc_107D0
                neg.w   d0
                neg.w   d1
                neg.w   d3
                eori.w  #4,d2
loc_107D0:                              ; CODE XREF: doplayeracc+72   j
                btst    #4,$62(a3)
                bne.w   loc_107FE
                tst.w   d3
                bpl.w   loc_1085A
                cmp.w   #4,d2
                bne.w   loc_1085A
                bsr.w   vtoa
                addq.w  #1,d0
                andi.w  #7,d0
                cmp.w   #2,d0
                bhi.w   loc_1085A
                bra.w   loc_1081E
; ---------------------------------------------------------------------------
loc_107FE:                              ; CODE XREF: doplayeracc+86   j
                subq.w  #3,d2
                andi.w  #7,d2
                cmp.w   #2,d2
                bhi.w   loc_1085A
                bsr.w   vtoa
                addq.w  #2,d0
                andi.w  #7,d0
                cmp.w   #4,d0
                bhi.w   loc_1085A
loc_1081E:                              ; CODE XREF: doplayeracc+AA   j
                btst    #4,$62(a3)
                bne.w   loc_10860
                move.w  $28(a3),d0
                or.w    $2A(a3),d0
                beq.w   loc_10850
                move.w  $28(a3),d0
                move.w  $2A(a3),d1
                bsr.w   vtoa
                sub.w   (sp),d0
                addq.w  #1,d0
                andi.w  #7,d0
                cmp.w   #2,d0
                bhi.w   loc_10860
loc_10850:                              ; CODE XREF: doplayeracc+E0   j
                bset    #4,$62(a3)
                bra.w   loc_10860
; ---------------------------------------------------------------------------
loc_1085A:                              ; CODE XREF: doplayeracc+52   j
                                        ; doplayeracc+8C   j ...
                bclr    #4,$62(a3)
loc_10860:                              ; CODE XREF: doplayeracc+D4   j
                                        ; doplayeracc+FC   j ...
                movem.w (sp)+,d0-d1
                move.w  $54(a3),d2
                sub.w   d2,d0
                andi.w  #7,d0
                movea.l #_ftab,a0
                asl.w   #1,d0
                tst.w   (a0,d0.w)
                beq.w   loc_10B0A
                move.w  $28(a3),d4
                muls.w  d4,d4
                move.w  $2A(a3),d3
                muls.w  d3,d3
                add.l   d4,d3
                swap    d3
                move.w  #$300,d4
                sub.w   d3,d4
                cmp.w   #$180,d4
                bge.w   loc_108A0
                move.w  #$180,d4
loc_108A0:                              ; CODE XREF: doplayeracc+148   j
                muls.w  (a0,d0.w),d4
                btst    #4,$62(a3)
                beq.w   loc_108B0
                neg.l   d4
loc_108B0:                              ; CODE XREF: doplayeracc+15A   j
                add.l   d4,$54(a3)
                andi.w  #7,$54(a3)
                move.w  $54(a3),d2
                cmp.w   #$14,d3
                bls.w   loc_108EC
                clr.w   d1
                tst.w   (a0,d0.w)
                bpl.w   loc_108D4
                eori.w  #$FFCE,d1
loc_108D4:                              ; CODE XREF: doplayeracc+17C   j
                btst    #3,4(a3)
                beq.w   loc_108E2
                eori.w  #$FFCE,d1
loc_108E2:                              ; CODE XREF: doplayeracc+18A   j
                addi.w  #$694,d1
                bset    #1,$63(a3)
loc_108EC:                              ; CODE XREF: doplayeracc+172   j
                bsr.w   SetSPA
                cmp.w   #2,d3
                bhi.w   noturn
                rts
; End of function doplayeracc
; ---------------------------------------------------------------------------
_ftab:          dc.w 0                  ; DATA XREF: doplayeracc+11E   o
                dc.w $10
                dc.w $10
                dc.w $10
                dc.w 0
                dc.w $FFF0
                dc.w $FFF0
                dc.w $FFF0


goalieacc:                              ; CODE XREF: doplayeracc+4   j
                btst    #3,$62(a3)
                beq.w   loc_10A42
                movem.w d0,-(sp)
                move.w  (puckc).w,d0
                cmp.w   $52(a3),d0
                movem.w (sp)+,d0
                beq.w   loc_10A42
                cmpi.w  #$30,(a3) ; '0'
                bgt.w   loc_10A42
                cmpi.w  #$FFD0,(a3)
                blt.w   loc_10A42
                cmpi.w  #$FF40,$14(a3)
                bgt.w   loc_10950
                cmpi.w  #$FEFA,$14(a3)
                blt.w   loc_10A42
                bra.w   loc_10964
; ---------------------------------------------------------------------------
loc_10950:                              ; CODE XREF: goalieacc+34   j
                cmpi.w  #$C0,$14(a3)
                blt.w   loc_10A42
                cmpi.w  #$106,$14(a3)
                bgt.w   loc_10A42
loc_10964:                              ; CODE XREF: goalieacc+42   j
                movem.w d0-d1,-(sp)
                move.w  (puckx).w,d0
                sub.w   (a3),d0
                move.w  (pucky).w,d1
                sub.w   $14(a3),d1
                cmp.w   #$10,d0
                bgt.w   loc_1099E
                cmp.w   #$FFF0,d0
                blt.w   loc_1099E
                cmp.w   #$10,d1
                bgt.w   loc_1099E
                cmp.w   #$FFF0,d1
                blt.w   loc_1099E
                move.w  $54(a3),d0
                bra.w   loc_109A2
; ---------------------------------------------------------------------------
loc_1099E:                              ; CODE XREF: goalieacc+70   j
                                        ; goalieacc+78   j ...
                bsr.w   vtoa
loc_109A2:                              ; CODE XREF: goalieacc+90   j
                btst    #0,(word_FFC2F4).w
                bne.w   loc_109B8
                bsr.w   sub_DB68
                movem.w (sp)+,d0-d1
                bra.w   loc_109D0
; ---------------------------------------------------------------------------
loc_109B8:                              ; CODE XREF: goalieacc+9E   j
                movem.w (sp)+,d0-d1
                cmp.w   #8,d0
                beq.w   loc_109D0
                movem.w d0-d1,-(sp)
                bsr.w   sub_DB68
                movem.w (sp)+,d0-d1
loc_109D0:                              ; CODE XREF: goalieacc+AA   j
                                        ; goalieacc+B6   j
                move.w  #2,d1
                btst    #1,$63(a3)
                bne.w   locret_10ADA
                bsr.w   SetSPA
                cmp.w   #8,d0
                bne.w   loc_10A3C
                tst.w   $34(a3)
                bne.w   loc_10A3C
                btst    #3,$62(a3)
                beq.w   loc_10A3C
                move.w  d0,-(sp)
                move.w  $14(a3),d0
                btst    #7,$62(a3)
                beq.w   loc_10A0E
                neg.w   d0
loc_10A0E:                              ; CODE XREF: goalieacc+FE   j
                cmp.w   #$D8,d0
                blt.w   loc_10A34
                move.w  (a3),d0
                cmp.w   #$20,d0 ; ' '
                bgt.w   loc_10A34
                cmp.w   #$FFE0,d0
                blt.w   loc_10A34
                move.w  (sp)+,d0
                jsr     (stopna2).l
                bra.w   loc_10A3C
; ---------------------------------------------------------------------------
loc_10A34:                              ; CODE XREF: goalieacc+108   j
                                        ; goalieacc+112   j ...
                jsr     (stopna2).l
                move.w  (sp)+,d0
loc_10A3C:                              ; CODE XREF: goalieacc+DC   j
                                        ; goalieacc+E4   j ...
                move.w  d0,d2
                bra.w   playeracc
; ---------------------------------------------------------------------------
loc_10A42:                              ; CODE XREF: goalieacc+6   j
                                        ; goalieacc+1A   j ...
                move.w  #2,d1
                btst    #3,$62(a3)
                beq.w   _goalieacc2
                btst    #2,$62(a3)
                bne.w   _cgl
                cmp.w   #8,d0
                bne.w   loc_10AA6
                tst.w   $34(a3)
                bne.w   _cgl
                move.w  d0,-(sp)
                move.w  $14(a3),d0
                btst    #7,$62(a3)
                beq.w   loc_10A7C
                neg.w   d0
loc_10A7C:                              ; CODE XREF: goalieacc+16C   j
                cmp.w   #$D8,d0
                blt.w   loc_10AA0
                move.w  (a3),d0
                cmp.w   #$20,d0 ; ' '
                bgt.w   loc_10AA0
                cmp.w   #$FFE0,d0
                blt.w   loc_10AA0
                move.w  (sp)+,d0
                bsr.w   stopna
                bra.w   _cgl
; ---------------------------------------------------------------------------
loc_10AA0:                              ; CODE XREF: goalieacc+176   j
                                        ; goalieacc+180   j ...
                move.w  (sp)+,d0
                bra.w   _cgl
; ---------------------------------------------------------------------------
loc_10AA6:                              ; CODE XREF: goalieacc+154   j
                bra.w   _d1
; ---------------------------------------------------------------------------
_goalieacc2:                            ; CODE XREF: goalieacc+142   j
                andi.w  #$F,d0
                cmp.w   #7,d0
                ble.w   _d1
                cmp.w   #9,d0
                bne.w   _cgl
                move.w  $28(a3),d0
                or.w    $2A(a3),d0
                beq.w   _cgl
                jmp     stopna2
; ---------------------------------------------------------------------------
_cgl:                                   ; CODE XREF: goalieacc+14C   j
                                        ; goalieacc+15C   j ...
                btst    #1,$63(a3)
                beq.w   SetSPA
locret_10ADA:                           ; CODE XREF: goalieacc+D0   j
                rts
; ---------------------------------------------------------------------------
_d1:                                    ; CODE XREF: goalieacc:loc_10AA6   j
                                        ; goalieacc+1A8   j
                sub.w   $54(a3),d0
                beq.w   _d11
                neg.w   d0
                andi.w  #4,d0
                lsr.w   #1,d0
                subq.w  #1,d0
                add.w   $54(a3),d0
                andi.w  #7,d0
                move.w  d0,$54(a3)
_d11:                                   ; CODE XREF: goalieacc+1D6   j
                move.w  #$3D8,d1
                bsr.w   SetSPA
                move.w  $54(a3),d2
                bra.w   playeracc
; End of function goalieacc
; ---------------------------------------------------------------------------
loc_10B0A:                              ; CODE XREF: doplayeracc+12A   j
                moveq   #2,d4
                btst    #4,$62(a3)
                beq.w   loc_10B1C
                addq.w  #4,d4
                eori.w  #8,d0
loc_10B1C:                              ; CODE XREF: ROM:00010B12   j
                tst.w   d0
                beq.w   loc_10B76
                move.w  $28(a3),d0
                move.w  $2A(a3),d1
                bsr.w   vtoa
                btst    #3,d0
                bne.w   loc_10B48
                sub.w   $54(a3),d0
                add.w   d4,d0
                andi.w  #7,d0
                cmp.w   #4,d0
                blt.w   dostop
loc_10B48:                              ; CODE XREF: ROM:00010B32   j
                addq.w  #1,$54(a3)
                btst    #3,4(a3)
                beq.w   loc_10B5A
                subq.w  #2,$54(a3)
loc_10B5A:                              ; CODE XREF: ROM:00010B52   j
                andi.w  #7,$54(a3)
                move.w  #$50C,d1
                btst    #4,$62(a3)
                beq.w   SetSPA
                move.w  #$A60,d1
                bra.w   SetSPA
; ---------------------------------------------------------------------------
loc_10B76:                              ; CODE XREF: ROM:00010B1E   j
                move.w  #$A92,d1
                btst    #4,$62(a3)
                bne.w   loc_10BA6
                move.w  #$5D0,d1
                btst    #6,$63(a3)
                beq.w   loc_10B96
                move.w  #$11E6,d1
loc_10B96:                              ; CODE XREF: ROM:00010B8E   j
                move.w  (puckc).w,d4
                cmp.w   $52(a3),d4
                bne.w   loc_10BA6
                move.w  #$53E,d1
loc_10BA6:                              ; CODE XREF: ROM:00010B80   j
                                        ; ROM:00010B9E   j
                btst    #1,$63(a3)
                bne.w   noturn
                bsr.w   SetSPA


noturn:                                 ; CODE XREF: doplayeracc+1A4   j
                                        ; ROM:00010BAC   j
                btst    #4,$62(a3)
                beq.w   playeracc
                eori.w  #4,d2
; End of function noturn


; d2 = direction of acc
playeracc:                              ; CODE XREF: assstanley+50   j
                                        ; assgoaliecpu+592   j ...
                asl.w   #2,d2
                lea     dirtab(pc),a0
                move.w  2(a0,d2.w),d1   ; Y Inc
                move.w  (a0,d2.w),d0    ; x Inc
                move.w  $50(a3),d2      ; check acc dir and dont push wall
                                        ; wallsin
                beq.w   _nox
                eor.w   d0,d2
                bpl.w   _nox
                clr.w   d0
_nox:                                   ; CODE XREF: playeracc+12   j
                                        ; playeracc+18   j
                move.w  $4E(a3),d2      ; wallcos
                beq.w   _noy
                eor.w   d1,d2
                bmi.w   _noy
                clr.w   d1
_noy:                                   ; CODE XREF: playeracc+22   j
                                        ; playeracc+28   j
                clr.w   d2              ; clear d2
                move.b  $67(a3),d2      ; move wgt of player into d2
                lsr.w   #2,d2           ; divide d2 by 2
                neg.w   d2              ; make it negative
                addi.w  #$40,d2 ; '@'   ; add 40 hex (64 decimal) to d2
                add.b   $68(a3),d2      ; add agl (legstr) of player to d2
                btst    #1,(byte_FFC2FE).w
                bne.w   _incagl
                btst    #6,(byte_FFC2FC).w ; check flag for crowd meter record
                beq.w   _incaglg        ; branch if not set
_incagl:                                ; CODE XREF: playeracc+46   j
                addq.b  #2,d2           ; add 2 to d2 (crowd meter boost)
_incaglg:                               ; CODE XREF: playeracc+50   j
                tst.w   $34(a3)         ; test for goalie
                bne.w   _noy2
                add.b   $68(a3),d2      ; goalie gets double agl
                addi.w  #$10,d2         ; double agl + 10 hex
_noy2:                                  ; CODE XREF: playeracc+5A   j
                asr.w   #1,d2           ; divide by 2
                muls.w  d2,d0           ; x
                muls.w  d2,d1           ; y
                asr.l   #5,d0           ; divide by 32
                asr.l   #5,d1
                muls.w  d7,d0
                muls.w  d7,d1
                tst.w   $34(a3)         ; test goalie
                bne.w   _noy3
                btst    #3,$62(a3)      ; player controlled
                beq.w   _noy3           ; no, then jump
                move.w  (puckc).w,d2    ; puck carrier SCnum
                cmp.w   $52(a3),d2      ; carrying puck?
                bne.w   _noy3           ; jump if not
                asr.w   #1,d0           ; divide by 2
                asr.w   #1,d1           ; divide by 2
_noy3:                                  ; CODE XREF: playeracc+78   j
                                        ; playeracc+82   j ...
                add.w   $28(a3),d0      ; Xvel
                add.w   $2A(a3),d1      ; Yvel
                move.w  d0,d2
                move.w  d1,d3
                muls.w  d2,d2
                muls.w  d3,d3
                add.l   d2,d3
                movem.w d0-d1,-(sp)
                bsr.w   getpde
                btst    #4,(byte_FFC2FC).w
                beq.w   _noy4
                move.w  #$1000,d0       ; d0 = energy, move 1000 hex into d0
_noy4:                                  ; CODE XREF: playeracc+B6   j
                clr.w   d2              ; clear d2
                move.b  $69(a3),d2      ; add speed (legspd) to d2
                btst    #1,(byte_FFC2FE).w
                bne.w   _incspd
                btst    #6,(byte_FFC2FC).w ; skip boost if 0
                beq.w   _noy5
_incspd:                                ; CODE XREF: playeracc+CA   j
                addq.b  #2,d2           ; add 2 to d2 (speed)
                cmp.b   #$1E,d2         ; compare to max speed attribute (1E or 30)
                ble.w   _noy5           ; branch if less than
                move.b  #$1E,d2         ; limit it to max speed
_noy5:                                  ; CODE XREF: playeracc+D4   j
                                        ; playeracc+DE   j
                move.w  d2,(TempRawSpd).w ; hold spd value
                lsr.w   #1,d2
                mulu.w  d0,d2           ; multiply energy with spd
                asl.l   #4,d2
                swap    d2
                asl.w   #2,d2
                andi.w  #$3F,d2 ; '?'
                lea     MaxSpeed(pc),a2
                move.w  d2,(TempEnergySpd).w ; hold new spd value
                move.l  (a2,d2.w),d2    ; use value from MaxSpeed list
                move.l  d2,(TempMaxSpd).w ; hold MaxSpeed value
                cmpi.w  #$3C,(TempEnergySpd).w ; '<' ; compare new spd value with 60 decimal
                bge.w   loc_10CF2
                btst    #0,(TempRawSpd+1).w
                beq.w   loc_10CF2
                move.w  (TempEnergySpd).w,d2
                addq.w  #4,d2
                move.l  (a2,d2.w),d2
                sub.l   (TempMaxSpd).w,d2
                asr.l   #1,d2
                add.l   (TempMaxSpd).w,d2
loc_10CF2:                              ; CODE XREF: playeracc+10E   j
                                        ; playeracc+118   j
                btst    #6,$63(a3)
                beq.w   loc_10CFE
                lsr.l   #3,d2
loc_10CFE:                              ; CODE XREF: playeracc+136   j
                tst.w   $34(a3)         ; test goalie
                bne.w   _noy6
                move.w  (puckc).w,d0    ; puck carrier SCnum
                cmp.w   $52(a3),d0      ; check if puck carrier
                bne.w   _noy6
                asr.l   #1,d2           ; divide spd by 2
_noy6:                                  ; CODE XREF: playeracc+140   j
                                        ; playeracc+14C   j
                movem.w (sp)+,d0-d1
                cmp.l   d2,d3           ; max speed check
                bhi.w   _sube
                move.w  d0,$28(a3)      ; Xvel
                move.w  d1,$2A(a3)      ; Yvel
_sube:                                  ; CODE XREF: playeracc+158   j
                tst.w   (OptLine).w
                bne.w   rtss2
                move.w  (VDP_CNTR).l,d0
                andi.w  #$7F,d0
                bne.w   rtss2
                bsr.w   getpde
                subi.w  #$21,d0 ; '!'
                cmp.w   #$C00,d0
                blt.w   setpde
                move.b  $72(a3),d2      ; endurance
                ext.w   d2
                lsr.w   #1,d2
                add.w   d2,d0
                bsr.w   setpde
                btst    #0,$72(a3)
                beq.w   _ex
                btst    #0,(vcount+1).w
                beq.w   _ex
                addq.w  #1,d0
                bra.w   setpde
; ---------------------------------------------------------------------------
_ex:                                    ; CODE XREF: playeracc+19E   j
                                        ; playeracc+1A8   j
                rts
; End of function playeracc
; ---------------------------------------------------------------------------


; player a3 stops
; .slim = 1000
dostop:                                 ; CODE XREF: doplayeracc+36   j
                                        ; ROM:00010B44   j
                cmpi.w  #$1000,$28(a3)  ; Xvel
                bgt.w   _set
                cmpi.w  #$F000,$28(a3)
                blt.w   _set
                cmpi.w  #$1000,$2A(a3)  ; Yvel
                bgt.w   _set
                cmpi.w  #$F000,$2A(a3)
                blt.w   _set
                tst.w   $34(a3)         ; check if goalie
                bne.w   stopna
                jmp     stopna2
; ---------------------------------------------------------------------------
                bra.w   stopna
; ---------------------------------------------------------------------------
_set:                                   ; CODE XREF: dostop+6   j
                                        ; dostop+10   j ...
                move.w  #$50C,d1        ; #SPAglide
                btst    #4,$62(a3)      ; #pfrev - skating backwards
                bne.w   _0
                bset    #1,$63(a3)      ; #pf2aip
                move.w  #$6C6,d1        ; #SPAstop
_0:                                     ; CODE XREF: dostop+44   j
                bsr.w   SetSPA
                tst.w   $34(a3)
                bne.w   stopna
                jmp     stopna2
; End of function dostop


; stop with no animation
stopna:                                 ; CODE XREF: assgoaliecpu+596   j
                                        ; goalieacc+18E   p ...
                tst.w   $28(a3)         ; Xvel
                bpl.w   _xp
                addi.w  #$96,$28(a3)
                bmi.w   _y
                clr.w   $28(a3)
_xp:                                    ; CODE XREF: stopna+4   j
                subi.w  #$96,$28(a3)
                bpl.w   _y
                clr.w   $28(a3)
_y:                                     ; CODE XREF: stopna+E   j
                                        ; stopna+1C   j
                tst.w   $2A(a3)         ; Yvel
                bpl.w   _yp
                addi.w  #$96,$2A(a3)
                bmi.w   rtss2
                clr.w   $2A(a3)
_yp:                                    ; CODE XREF: stopna+28   j
                subi.w  #$96,$2A(a3)
                bpl.w   rtss2
                clr.w   $2A(a3)
                rts
; End of function stopna
; ---------------------------------------------------------------------------
dirtab:         dc.w 0                  ; DATA XREF: burst+30   o
                                        ; passmode+132   o ...
                dc.w $C8
                dc.w $8D
                dc.w $8D
                dc.w $C8
                dc.w 0
                dc.w $8D
                dc.w $FF73
                dc.w 0
                dc.w $FF38
                dc.w $FF73
                dc.w $FF73
                dc.w $FF38
                dc.w 0
                dc.w $FF73
                dc.w $8D
                dc.w 0
                dc.w 0


sub_10E88:
                movem.l d0-d2/a0-a1,-(sp)
                movea.w #(dword_FFD036-M68K_RAM),a1
                clr.w   d2
                bra.w   loc_10EAA
; ---------------------------------------------------------------------------
loc_10E96:                              ; CODE XREF: sub_10E88:loc_10EAA   j
                move.b  (a0)+,d1
                bchg    #0,d2
                bne.w   loc_10EA4
                subq.w  #1,a0
                lsr.w   #4,d1
loc_10EA4:                              ; CODE XREF: sub_10E88+14   j
                andi.w  #$F,d1
                move.w  d1,(a1)+
loc_10EAA:                              ; CODE XREF: sub_10E88+A   j
                dbf     d0,loc_10E96
                movem.l (sp)+,d0-d2/a0-a1
                rts
; End of function sub_10E88


sub_10EB4:                              ; CODE XREF: sub_132E2+52   j
                movem.l d1/a1,-(sp)
                movea.w #(dword_FFD036-M68K_RAM),a1
                clr.w   d1
                bra.w   loc_10EC4
; ---------------------------------------------------------------------------
loc_10EC2:                              ; CODE XREF: sub_10EB4:loc_10EC4   j
                add.w   (a1)+,d1
loc_10EC4:                              ; CODE XREF: sub_10EB4+A   j
                dbf     d0,loc_10EC2
                move.w  d1,d0
                bsr.w   randomd0
loc_10ECE:                              ; CODE XREF: sub_10EB4+1C   j
                sub.w   -(a1),d0
                bpl.s   loc_10ECE
                suba.w  #$D036,a1
                move.w  a1,d0
                lsr.w   #1,d0
                movem.l (sp)+,d1/a1
                rts
; End of function sub_10EB4


; input a0 data (char set)
; d0 size in words
; d1 vram dest.
; a1 mapping data (nibbles of color data)
remap:                                  ; CODE XREF: sub_1173C+2A   j
                                        ; DATA XREF: sub_1177A+C   o
                move.w  (disflags).w,-(sp)
                bset    #2,(disflags).w
                movem.l d0-d4/a0-a2,-(sp)
                exg     d1,d0
                movea.l a0,a2
                bsr.w   Vmaddr
                subq.w  #1,d1
_1:                                     ; CODE XREF: remap+44   j
                moveq   #3,d0
                move.w  (a2)+,d2
                clr.w   d3
_11:                                    ; CODE XREF: remap+3E   j
                move.w  d2,d4
                andi.w  #$F,d4
                lsr.w   #1,d4
                move.b  (a1,d4.w),d4
                btst    #0,d2
                bne.w   _2
                lsr.w   #4,d4
_2:                                     ; CODE XREF: remap+2E   j
                andi.w  #$F,d4
                or.b    d4,d3
                ror.w   #4,d3
                ror.w   #4,d2
                dbf     d0,_11
                move.w  d3,(a0)
                dbf     d1,_1
                movem.l (sp)+,d0-d4/a0-a2
                move.w  (sp)+,(disflags).w
                rts
; End of function remap


; fade all colors to black but don't upset palfadenew
forceblack:                             ; CODE XREF: sub_7CF8   p
                                        ; sub_7CF8+6E   p ...
                movem.l d0/a0,-(sp)
                movea.w #(palfadenew-M68K_RAM),a0
                moveq   #$1F,d0
loc_10F3C:                              ; CODE XREF: forceblack+E   j
                move.l  (a0),-(sp)
                clr.l   (a0)+
                dbf     d0,loc_10F3C
                move.w  #$18,(palcount).w
                bsr.w   forcefade
                moveq   #$1F,d0
loc_10F50:                              ; CODE XREF: forceblack+20   j
                move.l  (sp)+,-(a0)
                dbf     d0,loc_10F50
                movem.l (sp)+,d0/a0
                rts
; End of function forceblack


forceblack2:                            ; CODE XREF: sub_A528+1C   p
                movem.l d0/a0,-(sp)
                movea.w #(palfadenew-M68K_RAM),a0
                moveq   #$1F,d0
loc_10F66:                              ; CODE XREF: forceblack2+E   j
                move.l  (a0),-(sp)
                clr.l   (a0)+
                dbf     d0,loc_10F66
                move.w  #$64,(palcount).w ; 'd'
                bsr.w   forcefade
                moveq   #$1F,d0
loc_10F7A:                              ; CODE XREF: forceblack2+20   j
                move.l  (sp)+,-(a0)
                dbf     d0,loc_10F7A
                movem.l (sp)+,d0/a0
                rts
; End of function forceblack2


forcefade:                              ; CODE XREF: forceblack+18   p
                                        ; forceblack2+18   p ...
                move    sr,-(sp)
                move.l  (vbint).w,-(sp)
                move.w  (disflags).w,-(sp)
                bclr    #2,(disflags).w
                move.l  #loc_15E4C,(vbint).l
                move    #$2500,sr
loc_10FA4:                              ; CODE XREF: forcefade+22   j
                tst.w   (palcount).w
                bpl.s   loc_10FA4
                move.w  (sp)+,(disflags).w
                move.l  (sp)+,(vbint).w
                move    (sp)+,sr
                rts
; End of function forcefade


; fade from current color in color ram to color held in palfadenew
; this should be called during vblank because palette changes punch holes in video
cramfade:                               ; CODE XREF: ROM:loc_15DB6   p
                                        ; ROM:00015E5A   p ...
                tst.w   (palcount).w
                bmi.w   rtss2
                cmpi.w  #$64,(palcount).w ; 'd'
                beq.w   sub_11044
                subq.w  #1,(palcount).w
                bmi.w   rtss2
                clr.l   d0
                move.w  (palcount).w,d0
                cmp.w   #$18,d0
                bgt.w   rtss2
                divu.w  #3,d0
                swap    d0
                asl.w   #2,d0
                moveq   #2,d3
                asl.w   d0,d3
                moveq   #$E,d5
                asl.w   d0,d5
                move.w  d5,d4
                not.w   d4
                movea.l #$FFFFBD28,a1
                movea.l #VDP_DATA,a0
                clr.w   d6
loc_11000:                              ; CODE XREF: cramfade+8A   j
                move.w  d3,d2
                move.w  d6,d0
                swap    d0
                move.w  #$20,d0 ; ' '
                move.l  d0,4(a0)
                move.w  (a0),d7
                move.w  d7,d0
                and.w   d5,d0
                move.w  (a1)+,d1
                and.w   d5,d1
                cmp.w   d1,d0
                beq.w   loc_1103A
                blt.w   loc_11024
                neg.w   d2
loc_11024:                              ; CODE XREF: cramfade+68   j
                add.w   d2,d0
                and.w   d4,d7
                or.w    d0,d7
                move.l  #$C000,d0
                move.b  d6,d0
                swap    d0
                move.l  d0,4(a0)
                move.w  d7,(a0)
loc_1103A:                              ; CODE XREF: cramfade+64   j
                addq.w  #2,d6
                cmp.w   #$80,d6
                bne.s   loc_11000
                rts
; End of function cramfade


sub_11044:                              ; CODE XREF: cramfade+E   j
                                        ; sub_17A18+4A   p
                movem.l d0/a0-a1,-(sp)
                move.w  (disflags).w,-(sp)
                bset    #2,(disflags).w
                movea.w #(palfadenew-M68K_RAM),a1
                movea.l #VDP_DATA,a0
                move.l  #$C0000000,4(a0)
                moveq   #$1F,d0
loc_11066:                              ; CODE XREF: sub_11044+24   j
                move.l  (a1)+,(a0)
                dbf     d0,loc_11066
                st      (palcount).w
                move.w  (sp)+,(disflags).w
                movem.l (sp)+,d0/a0-a1
                rts
; End of function sub_11044


; d0 = range
; return d0 = random number (-range < d0 < range)
randomd0s:                              ; CODE XREF: doshot+182   p
                                        ; doshot:_ycalc   p ...
                move.w  d0,-(sp)
                asl.w   #1,d0
                bsr.w   randomd0
                sub.w   (sp)+,d0
                rts
; End of function randomd0s


; d0 = range
; return random number in d0 (0 <= d0 < range)
randomd0:                               ; CODE XREF: ResetClock+28   p
                                        ; passmode+16A   p ...
                movem.l d0-d2,-(sp)
                move.w  (RNGseed+2).w,d0
                move.w  d0,d1
                move.w  (RNGseed).w,d2
                mulu.w  #$E62D,d0
                mulu.w  #$BB40,d1
                mulu.w  #$E62D,d2
                add.w   d2,d1
                swap    d0
                add.w   d1,d0
                swap    d0
                addq.l  #1,d0
                move.l  d0,(RNGseed).w
                asr.l   #8,d0
                mulu.w  2(sp),d0
                swap    d0
                addq.w  #4,sp
                movem.l (sp)+,d1-d2
                rts
; End of function randomd0


; returns d0.L^.5 in d0
sroot:                                  ; CODE XREF: sub_9BB4+4   p
                                        ; doinput:loc_B55E   p ...
                tst.l   d0
                beq.w   rtss2           ; zero^.5 = zero
                cmp.l   #$640,d0        ; #40^2
                bhi.w   _m2
                move.l  d1,-(sp)
                moveq   #$FFFFFFFF,d1   ; -1
_0:                                     ; CODE XREF: sroot+18   j
                addq.w  #2,d1
                sub.w   d1,d0
                bcc.s   _0
                lsr.w   #1,d1
                move.w  d1,d0
                move.l  (sp)+,d1
                rts
; ---------------------------------------------------------------------------
_m2:                                    ; CODE XREF: sroot+C   j
                movem.l d1-d4,-(sp)
                moveq   #9,d3           ; max number of reps
                move.w  #$8000,d1
                cmp.l   #$F00000,d0
                bhi.w   loc_11112
                move.l  d0,d1
                lsr.l   #8,d1
                addq.w  #2,d1
_top:                                   ; CODE XREF: sroot+48   j
                move.w  d1,d2
                move.l  d0,d1
                divu.w  d2,d1
                add.w   d2,d1
                lsr.w   #1,d1
                cmp.w   d1,d2
                dbeq    d3,_top
loc_1110A:                              ; CODE XREF: sroot+60   j
                move.w  d1,d0
                movem.l (sp)+,d1-d4
                rts
; ---------------------------------------------------------------------------
loc_11112:                              ; CODE XREF: sroot+32   j
                moveq   #0,d1
                moveq   #$FFFFFFFF,d2
loc_11116:                              ; CODE XREF: sroot+6E   j
                                        ; sroot+72   j
                move.w  d1,d3
                add.w   d2,d3
                roxr.w  #1,d3
                cmp.w   d3,d1
                beq.s   loc_1110A
                move.w  d3,d4
                mulu.w  d3,d3
                cmp.l   d3,d0
                bcc.w   loc_1112E
                move.w  d4,d2
                bra.s   loc_11116
; ---------------------------------------------------------------------------
loc_1112E:                              ; CODE XREF: sroot+68   j
                move.w  d4,d1
                bra.s   loc_11116
; End of function sroot


; play sound effect number
; one word passed on stack
sfx:                                    ; CODE XREF: clockcont+22   p
                                        ; ROM:0000A31C   p ...
                movem.l d0-d7/a0-a6,-(sp)
                clr.l   d0
                move.w  $40(sp),d0      ; $40 = 16*4
                bmi.w   _none
                move.w  d0,(lastsfx).w
                jsr     (p_initfx).l
_none:                                  ; CODE XREF: sfx+A   j
                movem.l (sp)+,d0-d7/a0-a6
                move.l  (sp),2(sp)
                addq.w  #2,sp
                rts
; End of function sfx


; play song number
; one word passed on stack
song:                                   ; CODE XREF: ROM:00007922   p
                                        ; Gameloop+36   p ...
                movem.l d0-d7/a0-a6,-(sp)
                clr.l   d0
                move.w  $40(sp),d0      ; $40 = 16*4
                bmi.w   _none
                jsr     (p_initfx).l
_none:                                  ; CODE XREF: song+A   j
                movem.l (sp)+,d0-d7/a0-a6
                move.l  (sp),2(sp)
                addq.w  #2,sp
                rts
; End of function song


; wait d0 vblanks or until input from either joystick
; return joystick variables (d0-d3) if any
waitx:                                  ; CODE XREF: ROM:00009DE2   j
                                        ; sub_17A18+9A   p ...
                clr.w   (word_FFDED4).w
                neg.w   d0
                move.w  d0,(vcount).w
_wait:                                  ; CODE XREF: waitx+56   j
                bsr.w   ReadJoy1
                move.w  d3,(word_FFDED4).w
                tst.w   d1
                bne.w   rtss2
                bsr.w   ReadJoy2
                or.w    d3,(word_FFDED4).w
                tst.w   d1
                bne.w   rtss2
                tst.w   (FourWayPlay).w
                beq.w   loc_111C0
                bsr.w   ReadJoy3
                or.w    d3,(word_FFDED4).w
                tst.w   d1
                bne.w   rtss2
                bsr.w   ReadJoy4
                or.w    d3,(word_FFDED4).w
                tst.w   d1
                bne.w   rtss2
loc_111C0:                              ; CODE XREF: waitx+2A   j
                move.w  (vcount).w,d0
_0:                                     ; CODE XREF: waitx+52   j
                cmp.w   (vcount).w,d0
                beq.s   _0
                tst.w   d0
                bmi.s   _wait
                rts
; End of function waitx


; special version of waitx for zamboni crossing
; wait d0 vblanks or until input from either joystick
; retrun joystick variables (d0-d3) if any
waitxsr:                                ; CODE XREF: sub_130E6+92   p
                                        ; sub_130E6+A6   p ...
                movem.l d4-d7/a0-a3,-(sp)
                neg.w   d0
                move.w  d0,(vcount).w
loc_111DA:                              ; CODE XREF: waitxsr+D0   j
                cmpi.w  #$708,(zamx).w
                bhi.w   loc_111E8
                addq.w  #1,(zamx).w
loc_111E8:                              ; CODE XREF: waitxsr+10   j
                moveq   #1,d7
                jsr     updatecrowdf
                jsr     (sub_FE2C8).l
                clr.w   (word_FFC316).w
                bclr    #1,(sflags).w
                bsr.w   ReadJoy1
                bsr.w   sub_11318
                tst.w   d1
                bne.w   loc_11268
                clr.w   (word_FFC316).w
                bset    #1,(sflags).w
                bsr.w   ReadJoy2
                bsr.w   sub_11318
                tst.w   d1
                bne.w   loc_11268
                tst.w   (FourWayPlay).w
                beq.w   loc_11290
                bclr    #1,(sflags).w
                move.w  #3,(word_FFC316).w
                bsr.w   ReadJoy3
                bsr.w   sub_11318
                tst.w   d1
                bne.w   loc_11268
                tst.w   (FourWayPlay).w
                beq.w   loc_11290
                bset    #1,(sflags).w
                move.w  #4,(word_FFC316).w
                bsr.w   ReadJoy4
                bsr.w   sub_11318
                tst.w   d1
                beq.w   loc_11290
loc_11268:                              ; CODE XREF: waitxsr+38   j
                                        ; waitxsr+50   j ...
                move.w  (vcount).w,d0
                cmp.w   #$FF88,d0
                blt.w   loc_11276
                moveq   #$FFFFFF88,d0
loc_11276:                              ; CODE XREF: waitxsr+A0   j
                movem.w d0,-(sp)
                jsr     sub_7E88
                bne.w   loc_1128C
                addq.w  #2,sp
                bset    #7,d1
                bra.w   loc_112A4
; ---------------------------------------------------------------------------
loc_1128C:                              ; CODE XREF: waitxsr+AE   j
                move.w  (sp)+,(vcount).w
loc_11290:                              ; CODE XREF: waitxsr+58   j
                                        ; waitxsr+7A   j ...
                bsr.w   setvideo
                move.w  (vcount).w,d0
loc_11298:                              ; CODE XREF: waitxsr+CC   j
                cmp.w   (vcount).w,d0
                beq.s   loc_11298
                tst.w   d0
                bmi.w   loc_111DA
loc_112A4:                              ; CODE XREF: waitxsr+B8   j
                movem.l (sp)+,d4-d7/a0-a3
                rts
; End of function waitxsr


; wait for either joystick input
; return d1 = new button presses
waitjoy:                                ; CODE XREF: waitjoy+E   j
                move.w  (vcount).w,d0
_0:                                     ; CODE XREF: waitjoy+8   j
                cmp.w   (vcount).w,d0
                beq.s   _0
                bsr.w   orjoy
                beq.s   waitjoy
                rts
; End of function waitjoy


; return d1 = new button presses
orjoy:                                  ; CODE XREF: Begin+7E   p
                                        ; waitjoy+A   p ...
                tst.w   (FourWayPlay).w ; check for 4-way play?
                bne.w   _4way
                bsr.w   ReadJoy1
                move.w  d1,-(sp)
                bsr.w   ReadJoy2
                or.w    (sp)+,d1
                rts
; ---------------------------------------------------------------------------
_4way:                                  ; CODE XREF: orjoy+4   j
                bsr.w   ReadJoy1
                move.w  d1,-(sp)
                bsr.w   ReadJoy2
                move.w  d1,-(sp)
                bsr.w   ReadJoy3
                move.w  d1,-(sp)
                bsr.w   ReadJoy4
                or.w    (sp)+,d1
                or.w    (sp)+,d1
                or.w    (sp)+,d1
                rts
; End of function orjoy


; eliminate diagonal direction presses on d0
nodiag:                                 ; CODE XREF: ROM:00008AA0   p
                                        ; sub_945C+C0   p ...
                movem.l d0/d4-d5,-(sp)
                moveq   #3,d4
                move.w  d3,d0
                andi.w  #$F,d0
                beq.w   _ok
_0:                                     ; CODE XREF: nodiag+16   j
                clr.w   d5
                bset    d4,d5
                cmp.w   d5,d0
                dbeq    d4,_0
                beq.w   _ok
                andi.w  #$FFF0,d1
_ok:                                    ; CODE XREF: nodiag+C   j
                                        ; nodiag+1A   j
                movem.l (sp)+,d0/d4-d5
                rts
; End of function nodiag


sub_11318:                              ; CODE XREF: sub_7CF8+62   p
                                        ; ROM:0000832A   p ...
                bsr.s   nodiag
                tst.w   d3
                beq.w   rtss2
                tst.w   d2
                bne.w   loc_11338
                subq.w  #1,(word_FFB042).w
                bpl.w   rtss2
                move.w  #4,(word_FFB042).w
                move.w  d3,d1
                rts
; ---------------------------------------------------------------------------
loc_11338:                              ; CODE XREF: sub_11318+A   j
                move.w  #$F,(word_FFB042).w
                rts
; End of function sub_11318


; Read controller 1
; return d0 = direction (bit 0-3) and new button (bit 4-7) presses
; d1 = new presses (all 8 bits)
; d2 = changed buttons (all 8)
; d3 = current held buttons (all 8)
ReadJoy1:                               ; CODE XREF: StartGame+14   p
                                        ; demoread+10   p ...
                move.b  (byte_FFBEF6).w,d0
                bsr.w   ReadJoy
                move.w  (lj1).w,d2
                move.w  d1,(lj1).w
                move.w  d1,d3
                eor.w   d1,d2
                and.w   d2,d1
                rts
; End of function ReadJoy1


; Read controller 2
; return d0 = direction (bit 0-3) and new button (bit 4-7) presses
; d1 = new presses (all 8 bits)
; d2 = changed buttons (all 8)
; d3 = current held buttons (all 8)
ReadJoy2:                               ; CODE XREF: demoread+22   p
                                        ; sub_A41E+E   j ...
                move.b  (byte_FFBEF7).w,d0
                bsr.w   ReadJoy
                move.w  (lj2).w,d2
                move.w  d1,(lj2).w
                move.w  d1,d3
                eor.w   d1,d2
                and.w   d2,d1
                rts
; End of function ReadJoy2


ReadJoy3:                               ; CODE XREF: demoread+38   p
                                        ; sub_A41E+22   j ...
                move.b  (byte_FFBEF8).w,d0
                bsr.w   ReadJoy
                move.w  (lj3).w,d2
                move.w  d1,(lj3).w
                move.w  d1,d3
                eor.w   d1,d2
                and.w   d2,d1
                rts
; End of function ReadJoy3


ReadJoy4:                               ; CODE XREF: demoread+4A   p
                                        ; sub_A41E+26   j ...
                move.b  (byte_FFBEF9).w,d0
                bsr.w   ReadJoy
                move.w  (lj4).w,d2
                move.w  d1,(lj4).w
                move.w  d1,d3
                eor.w   d1,d2
                and.w   d2,d1
                rts
; End of function ReadJoy4


ReadJoy:                                ; CODE XREF: ReadJoy1+4   p
                                        ; ReadJoy2+4   p ...
                not.b   d0
                clr.w   d1
                move.b  d0,d1
                move.w  d1,-(sp)
                andi.w  #$F0,d0
                andi.w  #$F,d1
                movea.l #jdtab,a0
                move.b  (a0,d1.w),d1
                or.w    d1,d0
                move.w  (sp)+,d1
                rts
; End of function ReadJoy
; ---------------------------------------------------------------------------


; init dma transfer and protect vblank interruption
; d0 = words to transfer
; d1 = initial vram address
; a0 = address to transfer from
DoDMApro:                               ; CODE XREF: sub_1173C+22   j
                                        ; DATA XREF: sub_1177A+12   o
                move.w  (disflags).w,-(sp)
                bset    #2,(disflags).w
                bsr.w   DoDMA
                move.w  (sp)+,(disflags).w
                rts
; End of function DoDMApro


; initiate dma transfer (dma transfer bug is compensated for)
; d0 = words to transfer
; d1 = destination vram address
; a0 = source address
DoDMA:                                  ; CODE XREF: DoDMApro+A   p
                                        ; sub_15E72+C   p ...
                movem.l d2-d3/a1,-(sp)
                move.w  d0,d2
                add.w   d2,d2
                add.w   a0,d2
                bcc.w   nd
                beq.w   nd
                lsr.w   #1,d2           ; do 2 transers if source address crosses 64k boundary
                sub.w   d2,d0
                move.w  d0,-(sp)
                bsr.w   dd
                move.w  (sp)+,d0
                add.w   d0,d0
                add.w   d0,d1
                adda.w  d0,a0
                move.w  d2,d0
                bra.w   nd
; ---------------------------------------------------------------------------
dd:                                     ; CODE XREF: DoDMA+18   p
                movem.l d2-d3/a1,-(sp)
nd:                                     ; CODE XREF: DoDMA+A   j
                                        ; DoDMA+E   j ...
                lea     (VDP_CTRL).l,a1
                move.w  #$8154,(a1)
                move.w  #$8F02,(a1)
                move.w  #$9300,d2
                move.b  d0,d2
                move.w  d2,(a1)
                move.w  #$9400,d2
                lsr.w   #8,d0
                move.b  d0,d2
                move.w  d2,(a1)
                move.l  a0,d0
                lsr.l   #1,d0
                move.w  #$9500,d2
                move.b  d0,d2
                move.w  d2,(a1)
                lsr.l   #8,d0
                move.w  #$9600,d2
                move.b  d0,d2
                move.w  d2,(a1)
                lsr.l   #8,d0
                andi.b  #$7F,d0
                move.w  #$9700,d2
                move.b  d0,d2
                move.w  d2,(a1)
                clr.l   d0
                move.w  d1,d0
                asl.l   #2,d0
                lsr.w   #2,d0
                move.l  d0,d3
                ori.l   #$804000,d0
                move.l  d0,(dmaram?).w
                move    sr,-(sp)
                move    #$2700,sr
                move.w  #$100,(IO_Z80BUS).l
loc_11478:                              ; CODE XREF: DoDMA+9C   j
                btst    #0,(IO_Z80BUS).l
                bne.s   loc_11478
                move.w  (dmaram?+2).w,(a1)
                move.w  (dmaram?).w,(a1)
                bsr.w   WaitDMA
                move.w  #$8164,(a1)
                clr.w   (IO_Z80BUS).l
                cmpa.w  #0,a0
                bge.w   loc_114B0
                ori.w   #$4000,d3
                swap    d3
                andi.w  #3,d3
                move.l  d3,(a1)
                move.w  (a0),-4(a1)
loc_114B0:                              ; CODE XREF: DoDMA+B8   j
                move    (sp)+,sr
                movem.l (sp)+,d2-d3/a1
                rts
; End of function DoDMA


sub_114B8:                              ; CODE XREF: sub_16D64+30   p
                                        ; sub_179D2+36   p
                movem.l d0-d3/a1,-(sp)
                move.w  (disflags).w,-(sp)
                bset    #2,(disflags).w
                lea     (VDP_CTRL).l,a1
                move.w  #$8154,(a1)
                move.w  #$8F01,(a1)
                move.w  #$9300,d3
                move.b  d0,d3
                move.w  d3,(a1)
                move.w  #$9400,d3
                lsr.w   #8,d0
                move.b  d0,d3
                move.w  d3,(a1)
                move.w  #$9500,d3
                move.b  d2,d3
                move.w  d3,(a1)
                move.w  #$9600,d3
                lsr.w   #8,d2
                move.b  d2,d3
                move.w  d3,(a1)
                move.w  #$97C0,(a1)
                clr.l   d0
                move.w  d1,d0
                asl.l   #2,d0
                lsr.w   #2,d0
                swap    d0
                ori.w   #$C0,d0
                move.l  d0,(dmaram?).w
                move.w  #$100,(IO_Z80BUS).l
loc_11516:                              ; CODE XREF: sub_114B8+66   j
                btst    #0,(IO_Z80BUS).l
                bne.s   loc_11516
                move.w  (dmaram?).w,(a1)
                move.w  (dmaram?+2).w,(a1)
                bsr.w   WaitDMA
                move.w  #$8164,(a1)
                move.w  #$8F02,(a1)
                clr.w   (IO_Z80BUS).l
                move.w  (sp)+,(disflags).w
                movem.l (sp)+,d0-d3/a1
                rts
; End of function sub_114B8


; fill vram
; d0 = words to fill
; d1 = vram address
; d2 = data to fill with
DoFill:                                 ; CODE XREF: ROM:00009FFC   p
                                        ; SetHor+66   p ...
                movem.l d3/a1,-(sp)
                movea.l #VDP_DATA,a1
                andi.l  #$FFFF,d1
                asl.l   #2,d1
                lsr.w   #2,d1
                ori.w   #$4000,d1
                swap    d1
                move.l  d1,4(a1)
                move.w  d2,d3
                swap    d3
                move.w  d2,d3
                lsr.w   #1,d0
                subq.w  #1,d0
_0:                                     ; CODE XREF: DoFill+34   j
                move.l  d3,(dmaram?).w
                move.w  (dmaram?).w,(a1)
                move.w  (dmaram?+2).w,(a1)
                dbf     d0,_0
                movem.l (sp)+,d3/a1
                rts
; End of function DoFill


WaitDMA:                                ; CODE XREF: DoDMA+A6   p
                                        ; sub_114B8+70   p ...
                move.w  (VDP_CTRL).l,-(sp)
                btst    #1,1(sp)
                addq.w  #2,sp
                bne.s   WaitDMA
                rts
; End of function WaitDMA


; d0 = color to fade to
setvram:                                ; CODE XREF: setupice+3C   p
                                        ; sub_17336+4C   p ...
                movea.w #(palfadenew-M68K_RAM),a0
                moveq   #$3F,d1 ; '?'
_0:                                     ; CODE XREF: setvram+8   j
                move.w  d0,(a0)+
                dbf     d1,_0
                move.w  #$18,(palcount).w
                bsr.w   forcefade
loc_115AA:                              ; CODE XREF: sub_17A18+4E   p
                                        ; sub_FED70+50   p
                move.w  (disflags).w,-(sp)
                bset    #2,(disflags).w ; #dfng
                move.w  #$8F02,(VDP_CTRL).l
                clr.w   d0
                bsr.w   Vmaddr
                move.w  #$3FFF,d0
                clr.l   d1
_9:                                     ; CODE XREF: setvram+36   j
                move.l  d1,(a0)
                dbf     d0,_9
                move.w  #$8C00,d0       ; 8 for shadow mode
                btst    #1,(disflags).w ; #df32c
                bne.w   _i32
                ori.w   #$81,d0
_i32:                                   ; CODE XREF: setvram+44   j
                move.w  d0,4(a0)        ; 40 col mode, no interlace, normal brightness
                move.w  #$8004,4(a0)    ; 512 color palette enable
                move.w  #$8164,4(a0)
                move.w  #$9001,d0       ; playfield is 64x32
                cmpi.w  #6,(Map1col1).w
                beq.w   _i64
                move.w  #$9003,d0
_i64:                                   ; CODE XREF: setvram+66   j
                move.w  d0,4(a0)
                move.w  #$8200,d0
                move.b  (VmMap1).w,d0
                lsr.b   #2,d0
                andi.b  #$38,d0 ; '8'
                move.w  d0,4(a0)
                move.w  #$8400,d0
                move.b  (VmMap2).w,d0
                lsr.b   #5,d0
                move.w  d0,4(a0)
                move.w  #$8300,d0
                move.b  (VmMap3).w,d0
                lsr.b   #2,d0
                andi.b  #$3E,d0 ; '>'
                move.w  d0,4(a0)
                move.w  #$8500,d0
                move.b  (VSPRITES).w,d0
                lsr.b   #1,d0
                move.w  d0,4(a0)
                move.w  #$8D00,d0
                move.b  (VSCRLPM).w,d0
                lsr.b   #2,d0
                move.w  d0,4(a0)
                move.w  #$9100,4(a0)    ; disable plane 3 graphics
                move.w  #$9200,4(a0)    ; disable plane 3 graphics
                move.w  #$8700,4(a0)    ; Palette # 0 is border/transparent
                move.w  #$8B00,4(a0)    ; Scroll mode (entire scroll)
                move.l  #$40000010,4(a0) ; vsram
                move.l  #0,(a0)         ; playfield 1/2
                move.w  (sp)+,(disflags).w
                rts
; End of function setvram


; set video port to address d0
; d0 = vram address
; returns a0 = Vdata!!!
Vmaddr:                                 ; CODE XREF: sub_9BD8+1C   p
                                        ; sub_9BD8+3A   p ...
                movea.l #VDP_DATA,a0
                asl.l   #2,d0
                lsr.w   #2,d0
                ori.w   #$4000,d0
                swap    d0
                andi.w  #3,d0
                move.l  d0,4(a0)
                rts
; End of function Vmaddr


; transfer palette data/map data/tiles data to vram
; a0 = palette
; a1 = map
; a2 = cat
; d0 = start x
; d1 = start y
; d2 = width x
; d3 = width y
; d4 = start char
; d5 = pal used bits (0-3) for color fam 1-4
dobitmap:                               ; CODE XREF: ROM:00008120   p
                                        ; sub_86F8+30   p ...
                move.w  (printy).w,-(sp)
                move.w  (disflags).w,-(sp)
                bset    #2,(disflags).w ; #dfng
                movem.l d0-d3/d5-d6/a0-a3,-(sp)
                move.w  d1,d6
                movea.w #(palfadenew-M68K_RAM),a3
                bra.w   _00
; ---------------------------------------------------------------------------
_01:                                    ; CODE XREF: dobitmap+22   j
                                        ; dobitmap+36   j
                move.b  (a0,d0.w),(a3,d0.w)
                dbf     d0,_01
_02:                                    ; CODE XREF: dobitmap+38   j
                adda.l  #$20,a0 ; ' '
                adda.l  #$20,a3 ; ' '
_00:                                    ; CODE XREF: dobitmap+18   j
                moveq   #$1F,d0
                lsr.w   #1,d5
                bcs.s   _01
                bne.s   _02
                move.w  (printa).w,d5
                andi.w  #$F800,d5
                move.w  $E(sp),d2
                subq.w  #1,d2
_loop2:                                 ; CODE XREF: dobitmap+72   j
                bsr.w   xyVmMap
                move.w  d6,d0           ; y start
                mulu.w  (a1),d0         ; map width
                add.w   2(sp),d0
                asl.w   #1,d0
                move.w  $A(sp),d1
                subq.w  #1,d1
_loop1:                                 ; CODE XREF: dobitmap+68   j
                move.w  4(a1,d0.w),d3
                add.w   d4,d3
                eor.w   d5,d3
                move.w  d3,(a0)
                addq.w  #2,d0
                dbf     d1,_loop1
                addq.w  #1,(printy).w
                addq.w  #1,d6
                dbf     d2,_loop2
                btst    #0,(word_FFC2F8).w
                bne.w   loc_1171E
                bsr.w   sub_11738
loc_1171E:                              ; CODE XREF: dobitmap+7C   j
                movem.l (sp)+,d0-d3/d5-d6/a0-a3
                move.w  (sp)+,(disflags).w
                move.w  (sp)+,(printy).w
                rts
; End of function dobitmap


sub_1172C:                              ; CODE XREF: sub_9BD8+58   p
                                        ; sub_9BD8+D2   p ...
                move.l  (sp),(dword_FFCF32).w
                bsr.w   sub_1173C
                addq.l  #8,(sp)
                rts
; End of function sub_1172C


sub_11738:                              ; CODE XREF: sub_9CDC:loc_9D32   p
                                        ; ROM:0000A00A   p ...
                clr.l   (dword_FFCF32).w
; End of function sub_11738


sub_1173C:                              ; CODE XREF: sub_1172C+4   p
                movem.l d0-d1/a0-a6,-(sp)
                movea.l a2,a0
                move.w  d4,d1
                asl.w   #5,d1
                move.w  (a0)+,d0
                beq.w   loc_11774
                bmi.w   loc_1176A
                add.w   d0,d4
                asl.w   #4,d0
                pea     (loc_11774).l
                tst.l   (dword_FFCF32).w
                beq.w   DoDMApro
                movea.l (dword_FFCF32).w,a1
                bra.w   remap
; ---------------------------------------------------------------------------
loc_1176A:                              ; CODE XREF: sub_1173C+10   j
                andi.w  #$7FFF,d0
                add.w   d0,d4
                bsr.w   sub_1177A
loc_11774:                              ; CODE XREF: sub_1173C+C   j
                                        ; DATA XREF: sub_1173C+18   o
                movem.l (sp)+,d0-d1/a0-a6
                rts
; End of function sub_1173C


sub_1177A:                              ; CODE XREF: sub_1173C+34   p
                movea.w #(unk_FFCF36-M68K_RAM),a1
                movea.w #(unk_FFCF36-M68K_RAM),a3
                movea.w #(dword_FFCF32-M68K_RAM),a4
                movea.l #remap,a5
                movea.l #DoDMApro,a6
                movem.l d0-d3/a0-a2,-(sp)
                move.w  d1,d3
                clr.w   d1
                clr.w   d2
loc_1179C:                              ; CODE XREF: sub_1177A+36   j
                move.b  (a0)+,d0
                andi.w  #$F0,d0
                lsr.w   #3,d0
                lea     unk_117B2(pc),a2
                move.w  (a2,d0.w),d0
                jsr     (a2,d0.w)
                bra.s   loc_1179C
; End of function sub_1177A
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
                move.b  -1(a0),d0
                andi.w  #$1F,d0
loc_117DA:                              ; CODE XREF: ROM:loc_117E8   j
                move.b  (a0)+,(a1,d1.w)
                addq.b  #1,d1
                bne.w   loc_117E8
                bsr.w   sub_11924
loc_117E8:                              ; CODE XREF: ROM:000117E0   j
                dbf     d0,loc_117DA
                rts
; ---------------------------------------------------------------------------
                move.b  -1(a0),d0
                andi.w  #$F,d0
loc_117F6:                              ; CODE XREF: ROM:loc_11804   j
                clr.b   (a1,d1.w)
                addq.b  #1,d1
                bne.w   loc_11804
                bsr.w   sub_11924
loc_11804:                              ; CODE XREF: ROM:000117FC   j
                dbf     d0,loc_117F6
                rts
; ---------------------------------------------------------------------------
                move.b  -1(a0),d0
                andi.w  #$F,d0
                addq.w  #2,d0
                move.b  (a0)+,d2
loc_11816:                              ; CODE XREF: ROM:loc_11824   j
                move.b  d2,(a1,d1.w)
                addq.b  #1,d1
                bne.w   loc_11824
                bsr.w   sub_11924
loc_11824:                              ; CODE XREF: ROM:0001181C   j
                dbf     d0,loc_11816
                rts
; ---------------------------------------------------------------------------
                move.b  -1(a0),d0
                andi.w  #7,d0
                addq.w  #1,d0
                move.b  -1(a0),d2
                lsr.w   #3,d2
                andi.w  #7,d2
                addq.w  #1,d2
loc_11840:                              ; CODE XREF: ROM:00011868   j
                                        ; ROM:00011882   j ...
                neg.b   d2
                add.b   d1,d2
loc_11844:                              ; CODE XREF: ROM:loc_11856   j
                move.b  (a1,d2.w),(a1,d1.w)
                addq.b  #1,d2
                addq.b  #1,d1
                bne.w   loc_11856
                bsr.w   sub_11924
loc_11856:                              ; CODE XREF: ROM:0001184E   j
                dbf     d0,loc_11844
                rts
; ---------------------------------------------------------------------------
                move.b  -1(a0),d0
                andi.w  #$F,d0
                addq.w  #2,d0
                move.b  (a0)+,d2
                bra.s   loc_11840
; ---------------------------------------------------------------------------
                move.b  (a0),d0
                asl.b   #1,d0
                move.b  -1(a0),d0
                roxl.b  #1,d0
                andi.w  #$1F,d0
                addq.w  #2,d0
                move.b  (a0)+,d2
                andi.w  #$7F,d2
                addq.w  #1,d2
                bra.s   loc_11840
; ---------------------------------------------------------------------------
                move.b  -1(a0),d0
                asl.w   #8,d0
                move.b  (a0),d0
                lsr.w   #6,d0
                andi.w  #$3F,d0 ; '?'
                addq.w  #2,d0
                move.b  (a0)+,d2
                andi.w  #$3F,d2 ; '?'
                addq.w  #1,d2
                bra.s   loc_11840
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
                move.b  -1(a0),d0
                andi.w  #3,d0
                addq.w  #1,d0
                move.b  -1(a0),d2
                lsr.w   #2,d2
                andi.w  #7,d2
                addq.w  #1,d2
loc_118CE:                              ; CODE XREF: ROM:000118F6   j
                                        ; ROM:00011922   j
                neg.b   d2
                add.b   d1,d2
loc_118D2:                              ; CODE XREF: ROM:loc_118E4   j
                move.b  (a1,d2.w),(a1,d1.w)
                subq.b  #1,d2
                addq.b  #1,d1
                bne.w   loc_118E4
                bsr.w   sub_11924
loc_118E4:                              ; CODE XREF: ROM:000118DC   j
                dbf     d0,loc_118D2
                rts
; ---------------------------------------------------------------------------
                move.b  -1(a0),d0
                andi.w  #$F,d0
                addq.w  #2,d0
                move.b  (a0)+,d2
                bne.s   loc_118CE
                tst.w   d1
                beq.w   loc_11902
                bsr.w   sub_11924
loc_11902:                              ; CODE XREF: ROM:000118FA   j
                addq.w  #4,sp
                movem.l (sp)+,d0-d3/a0-a2
                rts
; ---------------------------------------------------------------------------
                move.b  (a0),d0
                asl.b   #1,d0
                move.b  -1(a0),d0
                roxl.b  #1,d0
                andi.w  #$1F,d0
                addq.w  #2,d0
                move.b  (a0)+,d2
                andi.w  #$7F,d2
                addq.w  #1,d2
                bra.s   loc_118CE


sub_11924:                              ; CODE XREF: ROM:000117E4   p
                                        ; ROM:00011800   p ...
                movem.l d0-d1/a0-a1,-(sp)
                move.w  d1,d0
                bne.w   loc_11932
                move.w  #$100,d0
loc_11932:                              ; CODE XREF: sub_11924+6   j
                lsr.w   #1,d0
                move.w  d3,d1
                add.w   d0,d3
                add.w   d0,d3
                movea.l a1,a0
                tst.l   (a4)
                beq.w   loc_1194A
                movea.l (a4),a1
                jsr     (a5)
                bra.w   loc_1194C
; ---------------------------------------------------------------------------
loc_1194A:                              ; CODE XREF: sub_11924+1A   j
                jsr     (a6)
loc_1194C:                              ; CODE XREF: sub_11924+22   j
                movem.l (sp)+,d0-d1/a0-a1
                rts
; End of function sub_11924


; use print x/y/m to set vram address
xyVmMap:                                ; CODE XREF: sub_8078:loc_808E   p
                                        ; dobitmap:_loop2   p ...
                movem.l d0-d2,-(sp)
                move.w  (printx).w,d0
                move.w  (printy).w,d1
                movea.l #$FFFFB004,a0   ; #VmMap1
                adda.w  (printm).w,a0
                move.w  2(a0),d2
                asl.w   d2,d1
                add.w   d1,d0
                asl.w   #1,d0
                add.w   (a0),d0
                bsr.w   Vmaddr
                movem.l (sp)+,d0-d2
                rts
; End of function xyVmMap


; fill rectangle with char
; d0/d1 - x/y size of rectangle
; d2 = char word to fill with
; printx/y/m define top corner to start at
eraser:                                 ; CODE XREF: sub_7DCE+3A   j
                                        ; ROM:0000830C   p ...
                movem.l d0-d2/a0,-(sp)
                move.w  (disflags).w,-(sp)
                bset    #2,(disflags).w ; #dfng
                movem.w d0-d1,-(sp)
_1:                                     ; CODE XREF: eraser+2C   j
                bsr.s   xyVmMap
                move.w  (sp),d0
                subq.w  #1,d0
_0:                                     ; CODE XREF: eraser+1A   j
                move.w  d2,(a0)
                dbf     d0,_0
                addq.w  #1,(printy).w
                andi.w  #$1F,(printy).w
                subq.w  #1,2(sp)
                bne.s   _1
                addq.w  #4,sp
                move.w  (sp)+,(disflags).w
                movem.l (sp)+,d0-d2/a0
                rts
; End of function eraser


; frame and fill (uses framer.map graphics and assumes tiles are already located at framercset)
; d0/d1 = x/y size of rectangle
; printx/y/m define top left corner to start at
Framer:                                 ; CODE XREF: sub_7E46+1A   p
                                        ; ROM:000080EC   p ...
                movem.l d0-d4/a0-a1,-(sp)
                move.w  (disflags).w,-(sp)
                bset    #2,(disflags).w ; #dfng
                movem.w d0-d1,-(sp)
                move.w  (printa).w,d2
                add.w   (framercset).w,d2
                movea.l #framermap,a1
                adda.l  4(a1),a1
                addq.w  #4,a1
                clr.w   d4
                bsr.w   _tbline
                subq.w  #3,2(sp)
_mtop:                                  ; CODE XREF: Framer+3A   j
                bsr.w   _tbline
                subq.w  #6,d4
                subq.w  #1,2(sp)
                bpl.s   _mtop
                addq.w  #6,d4
                bsr.w   _tbline
                addq.w  #4,sp
                move.w  (sp)+,(disflags).w
                movem.l (sp)+,d0-d4/a0-a1
                rts
; ---------------------------------------------------------------------------
_tbline:                                ; CODE XREF: Framer+28   p
                                        ; Framer:_mtop   p ...
                bsr.w   xyVmMap
                addq.w  #1,(printy).w
                bsr.w   _setter
                addq.w  #2,d4
                move.w  4(sp),d0
                subq.w  #3,d0
loc_11A1A:                              ; CODE XREF: Framer+66   j
                bsr.w   _setter
                dbf     d0,loc_11A1A
                addq.w  #2,d4
                bsr.w   _setter
                addq.w  #2,d4
                rts
; ---------------------------------------------------------------------------
_setter:                                ; CODE XREF: Framer+56   p
                                        ; Framer:loc_11A1A   p ...
                move.w  (a1,d4.w),d3
                add.w   d2,d3
                move.w  d3,(a0)
                rts
; End of function Framer


; see print
; string macro should follow jsr to this routine
printz2:                                ; CODE XREF: sub_7DCE+24   p
                                        ; sub_7E46+6   p ...
                move.l  a1,-(sp)
                movea.l 4(sp),a1
                bsr.w   print2
                move.l  a1,4(sp)
                movea.l (sp)+,a1
                rts
; End of function printz2


; a1 = string macro
; printx/y = x/y coordinate on map for printing
; printm = map to print on
; printa = attribute for characters
;
; string \-$ab,$xx,$yy,'Sample!'\
;
; a = map number (1-3)
; b = color/priority (0-3 = color fam,prio off), (4-7 = color fam, prio on)
; xx = x coord to print at
; yy = y coord to print at
print2:                                 ; CODE XREF: sub_7EF2+58   p
                                        ; sub_7EF2+D8   p ...
                move.w  (disflags).w,-(sp)
                bset    #2,(disflags).w
                movem.l d0-d3/a0/a2-a3,-(sp)
                movea.w #(word_FFB012-M68K_RAM),a3
                btst    #3,(word_FFC2F8).w
                beq.w   _start
                movea.w #(word_FFBF52-M68K_RAM),a3
_start:                                 ; CODE XREF: print2+18   j
                bsr.w   xyVmMap
                move.w  (printa).w,d2
                move.w  (a1)+,d3
                subq.w  #2,d3
                bra.w   _1
; ---------------------------------------------------------------------------
_0:                                     ; CODE XREF: print2:_1   j
                move.b  (a1)+,d0
                ext.w   d0
                bgt.w   loc_11A94
                neg.w   d0
                asl.w   #2,d0
                movea.l #unk_11AF4,a2
                movea.l (a2,d0.w),a2
                jsr     (a2)
                bra.w   _1
; ---------------------------------------------------------------------------
loc_11A94:                              ; CODE XREF: print2+34   j
                cmp.b   #$40,d0 ; '@'
                bne.w   loc_11AA4
                move.w  #$7FF,d0
                bra.w   loc_11AD4
; ---------------------------------------------------------------------------
loc_11AA4:                              ; CODE XREF: print2+50   j
                cmp.b   #$5E,d0 ; '^'
                beq.w   loc_11AEA
                asl.w   #1,d0
                movea.l #unk_AAC52,a2
                btst    #3,(word_FFC2F8).w
                beq.w   loc_11AC4
                movea.l #unk_BE26A,a2
loc_11AC4:                              ; CODE XREF: print2+72   j
                adda.l  4(a2),a2
                move.w  4(a2,d0.w),d0
                move.w  (word_FFB030).w,d1
                add.w   (a3,d1.w),d0
loc_11AD4:                              ; CODE XREF: print2+58   j
                add.w   d2,d0
                move.w  d0,(a0)
                addq.w  #1,(printx).w
_1:                                     ; CODE XREF: print2+2C   j
                                        ; print2+48   j ...
                dbf     d3,_0
                movem.l (sp)+,d0-d3/a0/a2-a3
                move.w  (sp)+,(disflags).w
                rts
; ---------------------------------------------------------------------------
loc_11AEA:                              ; CODE XREF: print2+60   j
                addq.w  #1,(printx).w
                bsr.w   xyVmMap
                bra.s   _1
; End of function print2
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
                bsr.w   sub_11B3C
                bsr.w   sub_11B28
                bsr.w   sub_11B4C
                bra.w   loc_11B5A


sub_11B28:                              ; CODE XREF: ROM:00011B1C   p
                move.b  (a1)+,d0
                subq.w  #1,d3
                andi.w  #3,d0
                asl.w   #2,d0
                subq.w  #4,d0
                move.w  d0,(printm).w
                bra.w   xyVmMap
; End of function sub_11B28


sub_11B3C:                              ; CODE XREF: ROM:00011B18   p
                move.b  (a1)+,d2
                andi.w  #7,d2
                subq.w  #1,d3
                ror.w   #3,d2
                move.w  d2,(printa).w
                rts
; End of function sub_11B3C


sub_11B4C:                              ; CODE XREF: ROM:00011B20   p
                clr.w   d0
                move.b  (a1)+,d0
                subq.w  #1,d3
                move.w  d0,(printx).w
                bra.w   xyVmMap
; End of function sub_11B4C
; ---------------------------------------------------------------------------
loc_11B5A:                              ; CODE XREF: ROM:00011B24   j
                clr.w   d0
                move.b  (a1)+,d0
                subq.w  #1,d3
                move.w  d0,(printy).w
                bra.w   xyVmMap
; ---------------------------------------------------------------------------
                move.b  (a1)+,d0
                ext.w   d0
                subq.w  #1,d3
                add.w   d0,(printx).w
                bra.w   xyVmMap
; ---------------------------------------------------------------------------
                move.b  (a1)+,d0
                ext.w   d0
                subq.w  #1,d3
                add.w   d0,(printy).w
                bra.w   xyVmMap
; ---------------------------------------------------------------------------
                clr.w   d0
                move.b  (a1)+,d0
                subq.w  #1,d3
                asl.w   #1,d0
                move.w  d0,(word_FFB030).w
                rts


; see print
; string macro should follow jsr to this routine
printz:                                 ; CODE XREF: ROM:000080DC   p
                                        ; sub_84CE   p ...
                move.l  a1,-(sp)
                movea.l 4(sp),a1
                bsr.w   print
                move.l  a1,4(sp)
                movea.l (sp)+,a1
                rts
; End of function printz


; a1 = string macro
; printx/y = x/y coordinate on map for printing
; printm = map to print on
; printa = attribute for characters
;
; string \-$ab,$xx,$yy,'Sample!'\
; a = map number (1-3)
; b = color/priority (0-3 = color fam, prio off), (4-7 = color fam, prio on)
; xx = x coord to print at
; yy = y coord to print at
print:                                  ; CODE XREF: sub_8250+14   p
                                        ; sub_8250+2A   j ...
                move.w  (disflags).w,-(sp)
                bset    #2,(disflags).w
                movem.l d0-d3/a0/a2,-(sp)
                bsr.w   xyVmMap
                move.w  (printa).w,d2
                move.w  (a1)+,d3
                subq.w  #2,d3
                bra.w   _1
; ---------------------------------------------------------------------------
_0:                                     ; CODE XREF: print:_1   j
                move.b  (a1)+,d0
                beq.w   _1
                ext.w   d0
                bpl.w   _nocom
                neg.w   d0
                move.w  d0,d2
                asl.w   #8,d2
                asl.w   #1,d2
                andi.w  #$F800,d2
                move.w  d2,(printa).w
                andi.w  #3,d0
                asl.w   #2,d0
                subq.w  #4,d0
                move.w  d0,(printm).w
                move.b  (a1)+,d0
                ext.w   d0
                move.w  d0,(printx).w
                move.b  (a1)+,d1
                ext.w   d1
                move.w  d1,(printy).w
                bsr.w   xyVmMap
                subq.w  #2,d3
                bra.w   _1
; ---------------------------------------------------------------------------
_nocom:                                 ; CODE XREF: print+26   j
                cmp.b   #$40,d0 ; '@'
                bne.w   _noblank
                move.w  #$7FF,d0
                bra.w   _p
; ---------------------------------------------------------------------------
_noblank:                               ; CODE XREF: print+64   j
                cmp.b   #$5E,d0 ; '^'
                beq.w   loc_11C68
                asl.w   #1,d0
                movea.l #unk_AAC52,a2
                btst    #3,(word_FFC2F8).w
                beq.w   loc_11C34
                movea.l #unk_BE26A,a2
loc_11C34:                              ; CODE XREF: print+86   j
                adda.l  4(a2),a2
                move.w  4(a2,d0.w),d0
                btst    #3,(word_FFC2F8).w
                beq.w   loc_11C4E
                add.w   (word_FFBF52).w,d0
                bra.w   _p
; ---------------------------------------------------------------------------
loc_11C4E:                              ; CODE XREF: print+9E   j
                add.w   (word_FFB012).w,d0
_p:                                     ; CODE XREF: print+6C   j
                                        ; print+A6   j
                add.w   d2,d0           ; for alternate palettes
                move.w  d0,(a0)
                addq.w  #1,(printx).w
_1:                                     ; CODE XREF: print+1A   j
                                        ; print+20   j ...
                dbf     d3,_0
                movem.l (sp)+,d0-d3/a0/a2
                move.w  (sp)+,(disflags).w
                rts
; ---------------------------------------------------------------------------
loc_11C68:                              ; CODE XREF: print+74   j
                addq.w  #1,(printx).w
                bsr.w   xyVmMap
                bra.s   _1
; End of function print


sub_11C72:                              ; CODE XREF: sub_907C+24   p
                swap    d0
                clr.w   d0
                rol.l   #2,d0
                movea.l #unk_11C92,a1
                bsr.w   sub_13508
                addq.w  #2,(printx).w
                swap    d0
                lsr.w   #2,d0
                bsr.w   PushTime
                bra.w   print
; End of function sub_11C72
; ---------------------------------------------------------------------------


; convert d0 into string format of min:sec
PushTime:                               ; CODE XREF: ROM:00008DCA   p
                                        ; sub_11C72+18   p ...
                movea.w #(unk_FFBFC2-M68K_RAM),a1
                move.l  d0,-(sp)
                move.l  a1,-(sp)
                ext.l   d0
                divu.w  #$A,d0
                swap    d0
                addi.w  #$30,d0 ; '0'
                move.b  d0,-(a1)
                swap    d0
                ext.l   d0
                divu.w  #6,d0
                swap    d0
                addi.w  #$30,d0 ; '0'
                move.b  d0,-(a1)
                swap    d0
                move.b  #$3A,-(a1) ; ':'
                ext.l   d0
                divu.w  #$A,d0
                swap    d0
                addi.w  #$30,d0 ; '0'
                move.b  d0,-(a1)
                swap    d0
                move.b  #$20,-(a1) ; ' '
                tst.w   d0
                beq.w   loc_11CEE
                addi.w  #$30,d0 ; '0'
                move.b  d0,(a1)
loc_11CEE:                              ; CODE XREF: PushTime+42   j
                move.l  (sp)+,d0
                sub.l   a1,d0
                addq.w  #2,d0
                btst    #0,d0
                beq.w   loc_11D00
                clr.b   -(a1)
                addq.w  #1,d0
loc_11D00:                              ; CODE XREF: PushTime+56   j
                move.w  d0,-(a1)
                move.l  (sp)+,d0
                rts
; End of function PushTime


sub_11D06:                              ; CODE XREF: ROM:00008E94   p
                                        ; sub_12D30:loc_12D5A   p
                movea.w #(unk_FFC010-M68K_RAM),a1
                move.l  d0,-(sp)
                move.l  a1,-(sp)
loc_11D0E:                              ; CODE XREF: sub_11D06+1A   j
                ext.l   d0
                divu.w  #$A,d0
                swap    d0
                addi.w  #$30,d0 ; '0'
                move.b  d0,-(a1)
                swap    d0
                tst.w   d0
                bne.s   loc_11D0E
                move.l  (sp)+,d0
                sub.l   a1,d0
                addq.w  #2,d0
                btst    #0,d0
                beq.w   loc_11D34
                clr.b   -(a1)
                addq.w  #1,d0
loc_11D34:                              ; CODE XREF: sub_11D06+26   j
                move.w  d0,-(a1)
                move.l  (sp)+,d0
                rts
; End of function sub_11D06


sub_11D3A:                              ; CODE XREF: sub_8250+24   p
                                        ; ROM:00008E4E   p ...
                movem.l d0-d3,-(sp)
                movea.w #(unk_FFC00A-M68K_RAM),a1
                moveq   #1,d2
                sub.w   d2,d1
                bra.w   loc_11D4E
; ---------------------------------------------------------------------------
loc_11D4A:                              ; CODE XREF: sub_11D3A:loc_11D4E   j
                mulu.w  #$A,d2
loc_11D4E:                              ; CODE XREF: sub_11D3A+C   j
                dbf     d1,loc_11D4A
                moveq   #$20,d3 ; ' '
loc_11D54:                              ; CODE XREF: sub_11D3A+3C   j
                ext.l   d0
                divu.w  d2,d0
                bne.w   loc_11D6A
                cmp.w   #1,d2
                beq.w   loc_11D6A
                move.w  d3,d0
                bra.w   loc_11D6E
; ---------------------------------------------------------------------------
loc_11D6A:                              ; CODE XREF: sub_11D3A+1E   j
                                        ; sub_11D3A+26   j
                moveq   #$30,d3 ; '0'
                add.w   d3,d0
loc_11D6E:                              ; CODE XREF: sub_11D3A+2C   j
                move.b  d0,(a1)+
                swap    d0
                divu.w  #$A,d2
                bne.s   loc_11D54
                move.l  a1,d0
                subi.w  #$C008,d0
                btst    #0,d0
                beq.w   loc_11D8A
                clr.b   (a1)+
                addq.w  #1,d0
loc_11D8A:                              ; CODE XREF: sub_11D3A+48   j
                movea.w #(unk_FFC008-M68K_RAM),a1
                move.w  d0,(a1)
                movem.l (sp)+,d0-d3
                rts
; End of function sub_11D3A


sub_11D96:                              ; CODE XREF: updatepwrplay+9A   p
                                        ; sub_18A90+1E   p ...
                movea.l (sp)+,a1
                bsr.w   sub_11D9E
                jmp     (a1)
; End of function sub_11D96


sub_11D9E:                              ; CODE XREF: sub_11D96+2   p
                                        ; updatepwrplay+AC   p ...
                movem.l d0/a0,-(sp)
                lea     2(a3),a0
                move.w  (a3),d0
                subq.w  #3,d0
                bmi.w   loc_11DB6
loc_11DAE:                              ; CODE XREF: sub_11D9E+14   j
                addq.w  #1,a0
                tst.b   (a0)
                dbeq    d0,loc_11DAE
loc_11DB6:                              ; CODE XREF: sub_11D9E+C   j
                move.w  (a1)+,d0
                subq.w  #3,d0
                bmi.w   loc_11DDC
loc_11DBE:                              ; CODE XREF: sub_11D9E:loc_11DC6   j
                move.b  (a1)+,(a0)+
                bne.w   loc_11DC6
                subq.w  #1,a0
loc_11DC6:                              ; CODE XREF: sub_11D9E+22   j
                dbf     d0,loc_11DBE
                move.l  a0,d0
                btst    #0,d0
                beq.w   loc_11DD8
                clr.b   (a0)+
                addq.l  #1,d0
loc_11DD8:                              ; CODE XREF: sub_11D9E+32   j
                sub.l   a3,d0
                move.w  d0,(a3)
loc_11DDC:                              ; CODE XREF: sub_11D9E+1C   j
                movem.l (sp)+,d0/a0
                rts
; End of function sub_11D9E


sub_11DE2:                              ; CODE XREF: ROM:000080F2   p
                                        ; sub_86F8+50   p ...
                move.l  a1,-(sp)
                movea.l 4(sp),a1
                bsr.w   sub_11DF4
                move.l  a1,4(sp)
                movea.l (sp)+,a1
                rts
; End of function sub_11DE2


sub_11DF4:                              ; CODE XREF: sub_11DE2+6   p
                                        ; sub_12D30+3C   j ...
                move.w  (disflags).w,-(sp)
                bset    #2,(disflags).w
                movem.l d0-d7/a0/a2,-(sp)
                move.w  (printx).w,d4
                move.w  (printy).w,d5
                move.w  (printa).w,d6
                add.w   (word_FFB010).w,d6
                move.w  (a1)+,d3
                subq.w  #2,d3
                bra.w   loc_11E78
; ---------------------------------------------------------------------------
loc_11E1A:                              ; CODE XREF: sub_11DF4:loc_11E78   j
                move.b  (a1)+,d0
                beq.w   loc_11E78
                ext.w   d0
                bpl.w   loc_11E5C
                neg.w   d0
                move.w  d0,d6
                asl.w   #8,d6
                asl.w   #1,d6
                andi.w  #$F800,d6
                move.w  d6,(printa).w
                add.w   (word_FFB010).w,d6
                andi.w  #3,d0
                asl.w   #2,d0
                subq.w  #4,d0
                move.w  d0,(printm).w
                move.b  (a1)+,d4
                ext.w   d4
                move.w  d4,(printx).w
                move.b  (a1)+,d5
                ext.w   d5
                move.w  d5,(printy).w
                subq.w  #2,d3
                bra.w   loc_11E78
; ---------------------------------------------------------------------------
loc_11E5C:                              ; CODE XREF: sub_11DF4+2E   j
                cmp.b   #$61,d0 ; 'a'
                blt.w   loc_11E70
                cmp.b   #$7A,d0 ; 'z'
                bgt.w   loc_11E70
                addi.b  #-$20,d0
loc_11E70:                              ; CODE XREF: sub_11DF4+6C   j
                                        ; sub_11DF4+74   j
                move.w  d3,-(sp)
                bsr.w   sub_11E8E
                move.w  (sp)+,d3
loc_11E78:                              ; CODE XREF: sub_11DF4+22   j
                                        ; sub_11DF4+28   j ...
                dbf     d3,loc_11E1A
                move.w  d4,(printx).w
                move.w  d5,(printy).w
                movem.l (sp)+,d0-d7/a0/a2
                move.w  (sp)+,(disflags).w
                rts
; End of function sub_11DF4


sub_11E8E:                              ; CODE XREF: sub_11DF4+7E   p
                subi.w  #$20,d0 ; ' '
                movea.l #unk_1916A,a0
                moveq   #1,d2
                move.b  (a0,d0.w),d1
                ext.w   d1
                bpl.w   loc_11EA8
                neg.w   d1
                clr.w   d2
loc_11EA8:                              ; CODE XREF: sub_11E8E+12   j
                asl.w   #1,d1
                movea.l #unk_A9A10,a0
                adda.l  4(a0),a0
loc_11EB4:                              ; CODE XREF: sub_11E8E+46   j
                move.w  4(a0,d1.w),d3
                bsr.w   sub_11EDA
                move.w  (a0),d7
                asl.w   #1,d7
                add.w   d7,d1
                move.w  4(a0,d1.w),d3
                sub.w   d7,d1
                addq.w  #1,d5
                bsr.w   sub_11EDA
                subq.w  #1,d5
                addq.w  #1,d4
                addq.w  #2,d1
                dbf     d2,loc_11EB4
                rts
; End of function sub_11E8E


sub_11EDA:                              ; CODE XREF: sub_11E8E+2A   p
                                        ; sub_11E8E+3C   p
                add.w   d6,d3
                movem.l d1/a0,-(sp)
                move.w  d5,d0
                movea.l #$FFFFB004,a0
                adda.w  (printm).w,a0
                move.w  2(a0),d1
                asl.w   d1,d0
                add.w   d4,d0
                asl.w   #1,d0
                add.w   (a0),d0
                bsr.w   Vmaddr
                move.w  d3,(a0)
                movem.l (sp)+,d1/a0
                rts
; End of function sub_11EDA


sub_11F04:                              ; CODE XREF: sub_9BD8+68   p
                                        ; sub_17336+84   p ...
                move.w  d4,(word_FFB012).w
                movea.l #unk_AAC5A,a2
                bra.w   sub_11738
; End of function sub_11F04


sub_11F12:                              ; CODE XREF: sub_9CDC+7A   p
                                        ; setupice+D0   p
                movea.l #unk_55B86,a2
                move.w  d4,(framercset).w
                bra.w   sub_11738
; End of function sub_11F12


sub_11F20:                              ; CODE XREF: sub_17336+80   p
                moveq   #2,d4
                movea.l #unk_ABA1C,a2
                bra.w   sub_11738
; End of function sub_11F20


; d0 = penalty number
; a3 = player or player on penalized team
AddPenalty:                             ; CODE XREF: a2offsides+50   p
                                        ; a2touchpuck+B4   p ...
                btst    #0,(gmode).w    ; checks if no whistle gmclock(gmode)
                bne.w   rtss2
                cmp.w   #$C,d0          ; $C = Icing
                beq.w   AddPenalty2
                tst.w   (OptPen).w
                beq.w   rtss2           ; penalties off
                btst    #2,$63(a3)      ; this is pf2dw(pflags2) = double weight flag for oomph in 92.But it could be different in 94.
                                        ; Bit 3 is pf2np (no joypad), it could be bit 2 in 94
                bne.w   rtss2
                btst    #5,(gmode).w    ; Checks if offsides is on (gmoffs bit)
                bne.w   AddPenalty2     ; jump if offsides
                cmp.w   #$10,d0         ; $10 = Offsides
                beq.w   rtss2
AddPenalty2:                            ; CODE XREF: clockcont+108   j
                                        ; clockcont+122   j ...
                btst    #7,(sflags).w   ; Forced Penalties like face off and game over
                                        ; sfhor = screen is in horiz mode
                bne.w   rtss2           ; kicks out if in horiz mode
                movem.l d1/a0-a1,-(sp)
                cmp.w   #$E,d0          ; Pen??? - No text for this one
                blt.w   _nonoise        ; Branches if less than. Which would be
                                        ; Icing, Faceoffs, GameOver, PerOver, and a Charging?
                addi.w  #$C8,(crowdlevel).w
                move.w  #$C,-(sp)       ; SFX
                btst    #6,$62(a3)      ; check if player home or away
                beq.w   _song           ; jump if home
                addi.w  #$14,(CwdExciteLvl).w ; add to Excite level if away
                move.w  #$B,(sp)        ; SFX
_song:                                  ; CODE XREF: AddPenalty+5C   j
                bsr.w   song
_nonoise:                               ; CODE XREF: AddPenalty+48   j
                movea.w #(PenBuf-M68K_RAM),a1
                moveq   #$1F,d1         ; $1F = MaxPen-1
_0:                                     ; CODE XREF: AddPenalty+76   j
                tst.w   (a1)+
                dbeq    d1,_0           ; looks for an empty buffer
                bne.w   _noplayer
                move.b  $53(a3),-(a1)   ; $53 = SCnum+1
                move.b  d0,-(a1)
                movea.l #PenaltyList,a0
                adda.w  (a0,d0.w),a0    ; use d0 as offset for penalty choice
                tst.b   1(a0)           ; make sure offset has penalty info
                beq.w   _noplayer
                bmi.w   _noplayer
                btst    #6,$62(a3)      ; #pfteam
                bne.w   _away           ; jump if away
                bset    #1,(byte_FFC300).w
                bra.w   _setpenflag
; ---------------------------------------------------------------------------
_away:                                  ; CODE XREF: AddPenalty+A0   j
                bset    #2,(byte_FFC300).w
_setpenflag:                            ; CODE XREF: AddPenalty+AA   j
                bset    #4,$63(a3)      ; set pf2pen(pflags2)
                beq.w   _noplayer
                clr.w   (a1)
_noplayer:                              ; CODE XREF: AddPenalty+7A   j
                                        ; AddPenalty+92   j ...
                movem.l (sp)+,d1/a0-a1
                rts
; End of function AddPenalty


; called periodically
; d7 = elapse time since last call
PenaltyManager:                         ; CODE XREF: periodiceevents   p
                bsr.w   updatepentime
                bsr.w   checkfornewpen
                bsr.w   chkprogress
                bra.w   UpdatePA
; End of function PenaltyManager


; control progress of ref and game control thru penalty events
chkprogress:                            ; CODE XREF: PenaltyManager+8   p
                btst    #2,(BA_PS_flags).w
                beq.w   _cont
                btst    #7,(BA_PS_flags).w
                bne.w   _sops
                tst.w   (word_FFC31A).w
                bmi.w   _cont
                subq.w  #1,(word_FFC31A).w
                bpl.w   _ex
                movem.l d0-d7/a0-a6,-(sp)
                bclr    #2,(sflags2).w
                bclr    #7,(word_FFC2FA).w
                bsr.w   printz
                ori.b   #3,d6
                andi.b  #$1B,d0
                moveq   #8,d1
                btst    #0,(word_FFC2FA).w
                beq.w   loc_12052
                move.w  #$C,d1
loc_12052:                              ; CODE XREF: chkprogress+48   j
                move.l  #$7FF,d2
                jsr     (eraser).l
                movem.l (sp)+,d0-d7/a0-a6
                bra.w   _ex
; ---------------------------------------------------------------------------
_sops:                                  ; CODE XREF: chkprogress+10   j
                jsr     (sub_187B8).l
                bclr    #7,(BA_PS_flags).w
_ex:                                    ; CODE XREF: chkprogress+20   j
                                        ; chkprogress+60   j
                rts
; ---------------------------------------------------------------------------
_cont:                                  ; CODE XREF: chkprogress+6   j
                                        ; chkprogress+18   j
                btst    #2,(gmode).w    ; check if penalty called
                beq.w   rtss2           ; exit if not
                tst.w   (Pencntdwn).w
                bmi.w   InProgress
                sub.w   d7,(Pencntdwn).w
                bpl.w   rtss2
                bclr    #3,(gmode).w    ; clear del pen bit
                movea.w #(PenBuf-M68K_RAM),a0
loc_12098:                              ; CODE XREF: chkprogress+B0   j
                                        ; chkprogress+B2   j
                tst.w   (a0)+
                beq.w   rtss2
                clr.w   d0
                move.b  -2(a0),d0
                movea.l #PenaltyList,a1
                adda.w  (a1,d0.w),a1
                tst.b   1(a1)
                beq.s   loc_12098
                bmi.s   loc_12098
                bset    #2,(sflags2).w
                move.w  (vcount).w,-(sp)
                bsr.w   forceblack
                move.w  (sp)+,(vcount).w
                bsr.w   SetHor
                move.w  (ExtraChars).w,d4
                movea.l #unk_5CF6C,a2
                bsr.w   sub_11738
                bsr.w   sub_13378
                bsr.w   sub_133B2
                st      (puckc).w
                movea.w #(puckx-M68K_RAM),a3
                move.l  #$1A,d0         ; puckunflip
                bsr.w   assinsert
                move.w  #$1C20,$40(a3)
                st      (RefStep).w
                clr.w   (RefCnt).w
                bsr.w   UpdatePA
                move.w  #$32,(RefCnt).w ; '2'
                clr.w   d0
                bsr.w   PushRef
                move.w  #$18,(palcount).w
                rts
; End of function chkprogress


PenShotChk:                             ; CODE XREF: CCStart+102   p
                                        ; CCStart+130   p ...
                movem.l d1-d3/a0,-(sp)
                btst    #1,$64(a2)      ; check if breakaway
                beq.w   loc_12132       ; jump if no breakaway
                btst    #3,(BA_PS_flags).w
                beq.w   loc_1213A
loc_12132:                              ; CODE XREF: PenShotChk+A   j
                                        ; PenShotChk+4C   j
                move.w  #$FFFF,d1
                bra.w   _end
; ---------------------------------------------------------------------------
loc_1213A:                              ; CODE XREF: PenShotChk+14   j
                movea.l #unk_1913A,a0
                move.w  (a0,d0.w),d1
                bmi.w   _end
                move.w  $52(a2),d2
                movem.w d0-d1,-(sp)
                move.w  d2,d0
                jsr     (getBAplayerInfo).l
                movem.w (sp)+,d0-d1
                bpl.w   loc_12168
                bclr    #3,(BA_PS_flags).w
                bra.s   loc_12132
; ---------------------------------------------------------------------------
loc_12168:                              ; CODE XREF: PenShotChk+42   j
                move.w  d1,(word_FFD410).w
                move.w  d1,d0
_end:                                   ; CODE XREF: PenShotChk+1C   j
                                        ; PenShotChk+2A   j
                movem.l (sp)+,d1-d3/a0
                rts
; End of function PenShotChk


; d0 = SCnum (0-5 home team, 6-11 away team) of player checked on breakaway
getBAplayerInfo:                        ; CODE XREF: PenShotChk+38   p
                movem.l d1-d3/a1,-(sp)
                tst.w   (OptPen).w
                beq.w   _noPen
                bset    #3,(BA_PS_flags).w
                movem.w d0,-(sp)
                move.w  #5,d1
                move.w  #0,d2
                cmp.w   #5,d0
                bgt.w   _findgoalie     ; continue if away team, if not, branch
                move.w  #$B,d1
                move.w  #1,d2
_findgoalie:                            ; CODE XREF: getBAplayerInfo+22   j
                move.w  d1,d0
                jsr     (getGoalieSCnum).l
                tst.w   d0
                bpl.w   _goaliein       ; branch if there's a goalie
                movem.w (sp)+,d0        ; no goalie
                bclr    #3,(BA_PS_flags).w
                bra.w   _end
; ---------------------------------------------------------------------------
_goaliein:                              ; CODE XREF: getBAplayerInfo+38   j
                move.w  d0,d1           ; d1 = goalie's SCnum
                move.w  (sp)+,d0        ; d0 now back to player checked on breakaway SCnum
                move.w  d0,(BA_Sktr_SCnum).w
                movea.l #$FFFFB04A,a1
                move.w  d0,d3
                asl.w   #7,d3
                move.w  #0,(BA_Team).w
                btst    #6,$62(a1,d3.w) ; Checks if d0 player is home or away
                beq.w   loc_121E6       ; branch if home
                move.w  #1,(BA_Team).w
loc_121E6:                              ; CODE XREF: getBAplayerInfo+68   j
                move.w  #0,(BA_Skater_Offset).w
                move.b  $66(a1,d3.w),(BA_Skater_Offset+1).w ; store BA player's team position offset
                move.w  d1,(BA_Goalie_SCnum).w
                asl.w   #7,d1
                move.w  #0,(BA_Goalie_Offset).w
                move.b  $66(a1,d1.w),(BA_Goalie_Offset+1).w ; store goalie's team position offset
                move.w  #0,(BA_Checker_Offset).w
                move.b  $66(a3),(BA_Checker_Offset+1).w ; store checker's team position offset
_end:                                   ; CODE XREF: getBAplayerInfo+46   j
                                        ; getBAplayerInfo+A6   j
                movem.l (sp)+,d1-d3/a1
                rts
; ---------------------------------------------------------------------------
_noPen:                                 ; CODE XREF: getBAplayerInfo+8   j
                move.w  #$FFFF,d1
                bra.s   _end
; End of function getBAplayerInfo
; ---------------------------------------------------------------------------
InProgress:                             ; CODE XREF: chkprogress+80   j
                tst.w   (RefCnt).w      ; ref in progress-- update graphics and stats and penalty information
                bpl.w   rtss2
                tst.w   (RefStep).w
                bpl.w   rtss2
                movem.l d0/a0-a3,-(sp)
loc_12230:                              ; CODE XREF: ROM:00012396   j
                movea.w #(PenBuf-M68K_RAM),a0
                tst.w   (a0)+
                beq.w   loc_123A2
loc_1223A:                              ; CODE XREF: ROM:0001223C   j
                tst.w   (a0)+
                bne.s   loc_1223A
                subq.w  #4,a0
                bclr    #7,1(a0)
                bne.w   loc_1226A
                move.l  a3,-(sp)
                clr.w   d1
                move.b  1(a0),d1
                asl.w   #7,d1
                movea.w #(SortCords-M68K_RAM),a3
                adda.w  d1,a3
                tst.w   $34(a3)
                movea.l (sp)+,a3
                bpl.w   loc_123D8
                clr.w   (a0)
                bra.w   loc_123D8
; ---------------------------------------------------------------------------
loc_1226A:                              ; CODE XREF: ROM:00012246   j
                clr.w   d0
                move.b  (a0),d0
                movea.l #PenaltyList,a1
                adda.w  (a1,d0.w),a1
                bclr    #5,(byte_FFC2F6).w
                clr.w   d2
                move.b  1(a1),d2
                beq.w   loc_1238E
                bmi.w   loc_1238E
                cmp.b   #5,d2
                bne.w   loc_1229A
                bset    #5,(byte_FFC2F6).w
loc_1229A:                              ; CODE XREF: ROM:00012290   j
                movem.l d0-d1/a1-a4,-(sp)
                bsr.w   sub_14A94
                movea.w #(unk_FFC5DE-M68K_RAM),a4
                adda.w  (word_FFC5DC).w,a4
                cmpi.w  #$EC,(word_FFC5DC).w
                beq.w   loc_122B8
                addq.w  #4,(word_FFC5DC).w
loc_122B8:                              ; CODE XREF: ROM:000122B0   j
                move.w  d0,(a4)+
                move.b  (a0),(a4)+
                clr.w   d1
                move.b  1(a0),d1
                asl.w   #7,d1
                movea.w #(SortCords-M68K_RAM),a3
                adda.w  d1,a3
                clr.w   d0
                movea.w #(HmShots-M68K_RAM),a2
                lea     $364(a2),a1
                btst    #6,$62(a3)
                beq.w   loc_122EA
                bset    #7,-1(a4)
                move.w  #$8000,d0
                exg     a1,a2
loc_122EA:                              ; CODE XREF: ROM:000122DA   j
                addq.w  #1,6(a2)
                add.w   d2,8(a2)
                move.b  $66(a3),d0
                move.b  d0,(a4)
                move.w  d0,(TempPlOffset).w
                ext.w   d0
                addi.w  #$102,d0
                add.b   d2,(a2,d0.w)
                subi.w  #$102,d0
                asl.w   #1,d0
                ext.w   d2
                mulu.w  #$3C,d2 ; '<'
                bset    #$D,d2
                tst.w   $66(a2,d0.w)
                bmi.w   loc_1232C
                btst    #4,$66(a2,d0.w)
                beq.w   loc_1232C
                bset    #$C,d2
loc_1232C:                              ; CODE XREF: ROM:0001231A   j
                                        ; ROM:00012324   j
                move.w  d2,$66(a2,d0.w)
                andi.w  #$EFFF,d2
                moveq   #$34,d1 ; '4'
loc_12336:                              ; CODE XREF: ROM:00012346   j
                                        ; ROM:0001234E   j
                subq.w  #2,d1
                bmi.w   loc_1235C
                move.w  $66(a1,d1.w),d3
                andi.w  #$EFFF,d3
                cmp.w   d3,d2
                bne.s   loc_12336
                btst    #5,(byte_FFC2F6).w
                beq.s   loc_12336
                bset    #6,$66(a1,d1.w)
                bset    #6,$66(a2,d0.w)
loc_1235C:                              ; CODE XREF: ROM:00012338   j
                movem.l a0,-(sp)
                lea     $9A(a2),a0
                moveq   #$18,d1
loc_12366:                              ; CODE XREF: ROM:00012368   j
                tst.b   (a0)+
                dbmi    d1,loc_12366
                move.b  d0,-1(a0)
                st      (a0)
                movem.l (sp)+,a0
                move.w  #$C,d0          ; asspenalty
                bsr.w   assreplace
                movem.l (sp)+,d0-d1/a1-a4
                bsr.w   SetPA
                bsr.w   sub_12DA6
                bra.w   loc_123D8
; ---------------------------------------------------------------------------
loc_1238E:                              ; CODE XREF: ROM:00012284   j
                                        ; ROM:00012288   j
                clr.w   (a0)
                btst    #7,(sflags).w
                bne.w   loc_12230
                bsr.w   SetPA
                bra.w   loc_123D8
; ---------------------------------------------------------------------------
loc_123A2:                              ; CODE XREF: ROM:00012236   j
                movea.w #(HmShots-M68K_RAM),a2
                bsr.w   sub_123DE
                adda.w  #$364,a2
                bsr.w   sub_123DE
                bclr    #2,(gmode).w
                movea.w #(puckx-M68K_RAM),a3
                bclr    #6,(BA_PS_flags).w
                move.w  #$1B,d0
                btst    #3,(BA_PS_flags).w
                beq.w   loc_123D4
                move.w  #$1E,d0         ; assignment ECB6?
loc_123D4:                              ; CODE XREF: ROM:000123CC   j
                bsr.w   assreplace
loc_123D8:                              ; CODE XREF: ROM:00012260   j
                                        ; ROM:00012266   j ...
                movem.l (sp)+,d0/a0-a3
                rts


sub_123DE:                              ; CODE XREF: ROM:000123A6   p
                                        ; ROM:000123AE   p
                moveq   #6,d1
                moveq   #$32,d0 ; '2'
loc_123E2:                              ; CODE XREF: sub_123DE+32   j
                tst.w   $66(a2,d0.w)
                ble.w   loc_1240E
                bclr    #5,$66(a2,d0.w)
                btst    #6,$66(a2,d0.w)
                bne.w   loc_1240E
                btst    #4,$66(a2,d0.w)
                bne.w   loc_1240E
                cmp.w   #4,d1
                beq.w   loc_1240E
                subq.w  #1,d1
loc_1240E:                              ; CODE XREF: sub_123DE+8   j
                                        ; sub_123DE+18   j ...
                subq.w  #2,d0
                bpl.s   loc_123E2
                move.w  d1,$24(a2)
                rts
; End of function sub_123DE


; look for new penalty (entered through addpenalty(2))
checkfornewpen:                         ; CODE XREF: PenaltyManager+4   p
                btst    #7,(sflags).w   ; horiz mode (sfhor)
                bne.w   rtss2
                movea.w #(PenBuf-M68K_RAM),a0
_next:                                  ; CODE XREF: checkfornewpen+58   j
                                        ; checkfornewpen+74   j ...
                tst.w   (a0)+
                beq.w   rtss2
                btst    #2,(gmode).w
                bne.w   _iscalled
                clr.w   d0
                move.b  -2(a0),d0
                movea.l #PenaltyList,a1
                adda.w  (a1,d0.w),a1
                tst.b   1(a1)           ; time for penalty
                beq.w   _callit
                move.w  (puckc).w,d0
                bmi.w   _dc
                subq.w  #6,d0
                move.b  -1(a0),d1       ; player penalized
                ext.w   d1
                subq.w  #6,d1
                eor.w   d1,d0
                bmi.w   _dc             ; delayed penalty call
_callit:                                ; CODE XREF: checkfornewpen+32   j
                bsr.w   Stop4Pen
_iscalled:                              ; CODE XREF: checkfornewpen+1A   j
                bset    #7,-1(a0)
                bne.s   _next
                clr.w   d0
                move.b  -2(a0),d0       ; penalty called
                movea.l #PenaltyList,a1
                adda.w  (a1,d0.w),a1
                clr.w   d1
                move.b  (a1),d1         ; delay for stopping action
                asl.w   #5,d1
                cmp.w   (Pencntdwn).w,d1
                ble.s   _next
                move.w  d1,(Pencntdwn).w
                bra.s   _next
; ---------------------------------------------------------------------------
_dc:                                    ; CODE XREF: checkfornewpen+3A   j
                                        ; checkfornewpen+4A   j
                bset    #3,(gmode).w    ; #gmpendel
                bne.s   _next
                move.w  #$2C,d0 ; ','   ; #PenDelay
                bsr.w   SetPA
                bra.s   _next
; End of function checkfornewpen


; a0 = penalty list penalty +2
Stop4Pen:                               ; CODE XREF: ROM:0000ED32   j
                                        ; puckfaceoff+BC   j ...
                bset    #0,(gmode).w    ; #gmclock
                bne.w   _skipfo
                clr.w   d0
                clr.w   d1
                cmpi.b  #$E,-2(a0)      ; #PenGoal
                beq.w   _noticing
                move.w  (ltx).w,d0
                move.w  (lty).w,d1
                cmpi.b  #6,-2(a0)       ; #PenOOP
                beq.w   _noticing
                move.w  (puckx).w,d0
                move.w  (pucky).w,d1
                cmpi.b  #$C,-2(a0)      ; #PenIcing
                bne.w   _noticing
                move.l  a3,-(sp)
                movea.w #(SortCords-M68K_RAM),a3
                move.b  -1(a0),d1
                ext.w   d1
                asl.w   #7,d1           ; 7 = scsize
                adda.w  d1,a3
                move.w  #$258,d1        ; 600 decimal
                btst    #7,$62(a3)      ; #pfgoal
                movea.l (sp)+,a3
                beq.w   _noticing
                neg.w   d1
_noticing:                              ; CODE XREF: Stop4Pen+14   j
                                        ; Stop4Pen+26   j ...
                movem.w d0-d1,-(sp)
                cmp.w   #$46,d0 ; 'F'   ; 46 = xspot
                blt.w   _0
                move.w  #$46,d0 ; 'F'
_0:                                     ; CODE XREF: Stop4Pen+66   j
                cmp.w   #$FFBA,d0       ; -xspot
                bgt.w   _1
                move.w  #$FFBA,d0
_1:                                     ; CODE XREF: Stop4Pen+72   j
                cmp.w   #$A6,d1         ; yspot - ygive
                blt.w   _2
                move.w  #$CE,d1         ; CE = yspot
                move.w  #$46,d0 ; 'F'   ; xspot
                tst.w   (sp)
                bpl.w   _2
                neg.w   d0
_2:                                     ; CODE XREF: Stop4Pen+7E   j
                                        ; Stop4Pen+8C   j
                cmp.w   #$FF5A,d1       ; -yspot + ygive (28 hex)
                bgt.w   _3
                move.w  #$FF32,d1       ; -yspot
                move.w  #$46,d0 ; 'F'   ; xspot
                tst.w   (sp)
                bpl.w   _3
                neg.w   d0
_3:                                     ; CODE XREF: Stop4Pen+96   j
                                        ; Stop4Pen+A4   j
                move.w  d0,(fox).w
                move.w  d1,(foy).w
                addq.w  #4,sp
                bsr.w   limitfo
_skipfo:                                ; CODE XREF: Stop4Pen+6   j
                clr.w   (Pencntdwn).w
                bset    #2,(gmode).w    ; #gmpen
                jsr     (sub_1A304).l
                move.w  #3,-(sp)        ; #SFXwhistle
                bsr.w   sfx
                move.w  #$A,d0          ; #PenWhistle
                bra.w   SetPA
; End of function Stop4Pen


limitfo:                                ; CODE XREF: Stop4Pen+B4   p
                movem.l d0-d1/a0-a1,-(sp)
                movea.w #(PenBuf-M68K_RAM),a0
loc_12586:                              ; CODE XREF: limitfo+10   j
                bsr.w   loc_12596
                addq.w  #2,a0
                tst.w   (a0)
                bne.s   loc_12586
                movem.l (sp)+,d0-d1/a0-a1
                rts
; ---------------------------------------------------------------------------
loc_12596:                              ; CODE XREF: limitfo:loc_12586   p
                move.b  1(a0),d0
                andi.w  #$7F,d0
                asl.w   #7,d0
                movea.w #(SortCords-M68K_RAM),a1
                move.w  #$58,d1 ; 'X'
                btst    #7,$62(a1,d0.w)
                bne.w   loc_125C6
                neg.w   d1
                cmp.w   (foy).w,d1
                blt.w   rtss2
                move.w  #$FFBF,(foy).w
                bra.w   loc_125D4
; ---------------------------------------------------------------------------
loc_125C6:                              ; CODE XREF: limitfo+30   j
                cmp.w   (foy).w,d1
                bgt.w   rtss2
                move.w  #$41,(foy).w ; 'A'
loc_125D4:                              ; CODE XREF: limitfo+44   j
                move.w  #$46,d0 ; 'F'
                tst.w   (fox).w
                bpl.w   loc_125E2
                neg.w   d0
loc_125E2:                              ; CODE XREF: limitfo+5E   j
                move.w  d0,(fox).w
                rts
; End of function limitfo


; animate ref in ref window
UpdatePA:                               ; CODE XREF: PenaltyManager+C   j
                                        ; chkprogress+100   p
                tst.w   (RefCnt).w
                bmi.w   rtss2
                sub.w   d7,(RefCnt).w
                bpl.w   loc_125FC
                bsr.w   setPA2
loc_125FC:                              ; CODE XREF: UpdatePA+C   j
                cmpi.w  #4,(RefPen).l
                bne.w   loc_1260C
                bsr.w   sub_1850A
loc_1260C:                              ; CODE XREF: UpdatePA+1C   j
                sub.w   d7,(word_FFC3EE).w
                bpl.w   rtss2
                move.w  #$7FFF,(word_FFC3EE).w
                bsr.w   sub_12828
                bsr.w   printz
                ori.b   #$11,d6
                btst    d5,d0
                bsr.w   sub_18A6E
                move.w  (a1),d0
                lsr.w   #1,d0
                sub.w   d0,(printx).w
                bra.w   print
; End of function UpdatePA


; start ref animation
; d0 = animation (pen number)
SetPA:                                  ; CODE XREF: ROM:00012382   p
                                        ; ROM:0001239A   p ...
                move.w  d0,(RefPen).w
                cmp.w   #$2E,d0 ; '.'   ; checks if on penalty list
                blt.w   loc_12646
                rts
; ---------------------------------------------------------------------------
loc_12646:                              ; CODE XREF: SetPA+8   j
                clr.w   (RefStep).w
                bsr.w   prefmes
                cmp.w   #$E,d0
                bne.w   loc_1265A
                bsr.w   loc_1889A
loc_1265A:                              ; CODE XREF: SetPA+1A   j
                btst    #0,(word_FFC2FA).w
                beq.w   loc_12674
                btst    #3,(word_FFC2FA).w
                beq.w   loc_12674
                jsr     (sub_FC5AE).l
loc_12674:                              ; CODE XREF: SetPA+28   j
                                        ; SetPA+32   j
                move.w  #$7FFF,(word_FFC3EE).w
                btst    #7,(sflags).w
                beq.w   setPA2
                move.w  #$3C,(word_FFC3EE).w ; '<'
; End of function SetPA


setPA2:                                 ; CODE XREF: UpdatePA+10   p
                                        ; SetPA+48   j
                movem.l d0-d2/a0-a1,-(sp)
                moveq   #$40,d0 ; '@'
                tst.w   (RefStep).w
                bmi.w   loc_126EE
                move.w  (RefStep).w,d0
                addq.w  #2,(RefStep).w
                move.w  (RefPen).w,d1
                movea.l #PenaltyList,a0
                adda.w  (a0,d1.w),a0
                addq.w  #2,a0
                adda.w  (a0),a0
                move.w  (a0,d0.w),d0
                bpl.w   loc_126C0
                neg.w   d0
                st      (RefStep).w
loc_126C0:                              ; CODE XREF: setPA2+2C   j
                clr.w   d1
                move.b  d0,d1
                asl.w   #3,d1
                move.w  d1,(RefCnt).w
                btst    #0,(word_FFC2FA).w
                beq.w   loc_126EC
                btst    #3,(word_FFC2FA).w
                beq.w   loc_126EC
                move.w  d0,-(sp)
                move.w  (RefCnt).w,d0
                add.w   d0,d0
                move.w  d0,(RefCnt).w
                move.w  (sp)+,d0
loc_126EC:                              ; CODE XREF: setPA2+46   j
                                        ; setPA2+50   j
                lsr.w   #8,d0
loc_126EE:                              ; CODE XREF: setPA2+A   j
                bsr.w   PushRef
                movem.l (sp)+,d0-d2/a0-a1
                rts
; End of function setPA2


; tell vblank what to display
PushRef:                                ; CODE XREF: sub_E62E+7C   p
                                        ; chkprogress+10C   p ...
                movem.l d0-d2/a0-a1,-(sp)
                cmp.w   #$40,d0 ; '@'
                beq.w   _clearit
                mulu.w  #$70,d0 ; 'p'
                movea.l #RefsMap,a0
                btst    #7,(sflags).w
                beq.w   loc_1271E
                movea.l #unk_5CF64,a0
loc_1271E:                              ; CODE XREF: PushRef+1C   j
                adda.l  4(a0),a0
                addq.w  #4,a0
                adda.w  d0,a0
                movea.w #(RefRamMap-M68K_RAM),a1
                move.w  (ExtraChars).w,d2
                btst    #7,(sflags).w
                bne.w   loc_1273C
                ori.w   #$8000,d2
loc_1273C:                              ; CODE XREF: PushRef+3C   j
                moveq   #$37,d0 ; '7'
loc_1273E:                              ; CODE XREF: PushRef+4A   j
                move.w  (a0)+,(a1)
                add.w   d2,(a1)+
                dbf     d0,loc_1273E
                bset    #1,(sflags2).w
                bra.w   loc_12774
; ---------------------------------------------------------------------------
_clearit:                               ; CODE XREF: PushRef+8   j
                btst    #7,(sflags).w
                bne.w   loc_1276E
                movea.w #(RefRamMap-M68K_RAM),a1
                moveq   #$37,d0 ; '7'
_2:                                     ; CODE XREF: PushRef+6C   j
                move.w  #$7FF,(a1)+
                dbf     d0,_2
                bset    #1,(sflags2).w  ; sf2refref
loc_1276E:                              ; CODE XREF: PushRef+5E   j
                moveq   #$FFFFFFFF,d0   ; clear line
                bsr.w   prefmes
loc_12774:                              ; CODE XREF: PushRef+54   j
                movem.l (sp)+,d0-d2/a0-a1
                rts
; End of function PushRef


; print message for penalty
prefmes:                                ; CODE XREF: SetPA+12   p
                                        ; PushRef+78   p ...
                movem.l d0-d2/a1,-(sp)
                btst    #7,(sflags).w
                bne.w   _hor
                tst.w   d0
                bpl.w   _noblank
                bsr.w   printz
; ---------------------------------------------------------------------------
                dc.b 0,6,$BF,0,$A,0
; ---------------------------------------------------------------------------
                moveq   #$D,d0
                moveq   #3,d1
                move.w  #$7FF,d2
                bsr.w   eraser
                bra.w   _ex
; ---------------------------------------------------------------------------
_noblank:                               ; CODE XREF: prefmes+10   j
                bsr.w   printz
; ---------------------------------------------------------------------------
                dc.b 0,6,$BF,5,$A,0
; ---------------------------------------------------------------------------
                movea.l #PenaltyList,a1
                adda.w  (a1,d0.w),a1
                addq.w  #2,a1
                move.w  (a1),d0
                subq.w  #2,d0
                beq.w   _ex
                lsr.w   #1,d0
                sub.w   d0,(printx).w
                bpl.w   _nb0
                clr.w   (printx).w
_nb0:                                   ; CODE XREF: prefmes+52   j
                move.w  (a1),d0
                tst.b   -1(a1,d0.w)
                bne.w   _nb1
                subq.w  #1,d0
_nb1:                                   ; CODE XREF: prefmes+60   j
                moveq   #3,d1
                bsr.w   Framer
                subq.w  #2,(printy).w
                addq.w  #1,(printx).w
                bsr.w   print
                bra.w   _ex
; ---------------------------------------------------------------------------
_hor:                                   ; CODE XREF: prefmes+A   j
                bsr.w   sub_12828
                tst.w   d0
                bmi.w   _ex
                bsr.w   printz
; ---------------------------------------------------------------------------
                dc.b 0,6,$BF,$11,$B,0
; ---------------------------------------------------------------------------
                movea.l #PenaltyList,a1
                adda.w  (a1,d0.w),a1
                addq.w  #2,a1
                move.w  (a1),d0
                lsr.w   #1,d0
                sub.w   d0,(printx).w
                bsr.w   print
_ex:                                    ; CODE XREF: prefmes+2A   j
                                        ; prefmes+48   j ...
                movem.l (sp)+,d0-d2/a1
                rts
; End of function prefmes


sub_12828:                              ; CODE XREF: UpdatePA+32   p
                                        ; prefmes:_hor   p
                bsr.w   printz
                ori.b   #5,(a4)+
                btst    d5,-(a0)
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  d0,d0
                rts
; End of function sub_12828


sub_1284A:                              ; CODE XREF: sub_14620+39E   p
                movem.l d0-d2/a0,-(sp)
                cmpi.w  #6,$24(a1)
                bne.w   loc_1285C
                bsr.w   clrPenBuf
loc_1285C:                              ; CODE XREF: sub_1284A+A   j
                move.w  $24(a2),d2
                cmp.w   $24(a1),d2
                ble.w   loc_1289E
                lea     $9A(a1),a0
loc_1286C:                              ; CODE XREF: sub_1284A+30   j
                clr.w   d2
                move.b  (a0)+,d2
                bmi.w   loc_1289E
                btst    #6,$66(a1,d2.w)
                bne.s   loc_1286C
                clr.w   $66(a1,d2.w)
                bsr.w   sub_1298C
                bset    #0,(byte_FFC300).w
                addq.w  #1,$24(a1)
                addq.w  #1,2(a2)
                bset    #0,(byte_FFC6FE).w
                bset    #0,(byte_FFCA62).w
loc_1289E:                              ; CODE XREF: sub_1284A+1A   j
                                        ; sub_1284A+26   j
                movem.l (sp)+,d0-d2/a0
                rts
; End of function sub_1284A


; clears penalty buffer
clrPenBuf:                              ; CODE XREF: clockcont:_eog   p
                                        ; sub_1284A+E   p
                moveq   #$1F,d0         ; 1F = 31 decimal
                movea.w #(PenBuf-M68K_RAM),a0
_loop:                                  ; CODE XREF: clrPenBuf+8   j
                clr.w   (a0)+
                dbf     d0,_loop
                rts
; End of function clrPenBuf


; update the time remaining on all penalized players
; a2 = team struct
;
; still WIP
updatepentime:                          ; CODE XREF: PenaltyManager   p
                bclr    #6,(sflags3).w
                btst    #0,(gmode).w
                bne.w   rtss2
                sub.w   d7,(Penaltytimer).w
                bpl.w   rtss2
                addi.w  #$18,(Penaltytimer).w ; #jps
                bset    #6,(sflags3).w
                bsr.w   chkatop
                jsr     (sub_FE14C).l
                movea.w #(HmShots-M68K_RAM),a2
                bsr.w   sub_128EC
                adda.w  #$364,a2
; End of function updatepentime


sub_128EC:                              ; CODE XREF: updatepentime+32   p
                lea     $9A(a2),a0
                movea.w #(mesarea-M68K_RAM),a1
                moveq   #2,d1
                moveq   #2,d3
loc_128F8:                              ; CODE XREF: sub_128EC+20   j
                                        ; sub_128EC:loc_1291C   j ...
                clr.w   d0
                move.b  (a0)+,d0
                bmi.w   loc_1291E
                btst    #6,$66(a2,d0.w)
                bne.w   loc_12968
                subq.w  #1,d1
                bmi.s   loc_128F8
                move.w  d0,(a1)+
                subq.w  #1,$66(a2,d0.w)
                bne.w   loc_1291C
                bsr.w   sub_1298C
loc_1291C:                              ; CODE XREF: sub_128EC+28   j
                bra.s   loc_128F8
; ---------------------------------------------------------------------------
loc_1291E:                              ; CODE XREF: sub_128EC+10   j
                move.w  (mesarea).w,d0
                cmp.w   #1,d1
                beq.w   sub_12944
                tst.w   d1
                bne.w   loc_12938
                bsr.w   sub_12944
                bra.w   loc_12940
; ---------------------------------------------------------------------------
loc_12938:                              ; CODE XREF: sub_128EC+40   j
                cmp.w   #$FFFF,d1
                bne.w   rtss2
loc_12940:                              ; CODE XREF: sub_128EC+48   j
                move.w  (word_FFBFA6).w,d0
; End of function sub_128EC


sub_12944:                              ; CODE XREF: sub_128EC+3A   j
                                        ; sub_128EC+44   p
                cmpi.w  #5,$66(a2,d0.w)
                bgt.w   rtss2
                move.w  #1,-(sp)
                tst.w   $66(a2,d0.w)
                bne.w   loc_12962
                bsr.w   sub_129D2
                move.w  #2,(sp)
loc_12962:                              ; CODE XREF: sub_12944+12   j
                bsr.w   sfx
                rts
; End of function sub_12944
; ---------------------------------------------------------------------------
loc_12968:                              ; CODE XREF: sub_128EC+1A   j
                subq.w  #1,$66(a2,d0.w)
                btst    #3,$66(a2,d0.w)
                beq.s   loc_128F8
                btst    #4,$66(a2,d0.w)
                bne.w   loc_12988
                move.w  #$1000,$66(a2,d0.w)
                bra.w   sub_1298C
; ---------------------------------------------------------------------------
loc_12988:                              ; CODE XREF: ROM:0001297A   j
                clr.w   $66(a2,d0.w)


sub_1298C:                              ; CODE XREF: sub_1284A+36   p
                                        ; sub_128EC+2C   p ...
                moveq   #$FFFFFFFF,d2
loc_1298E:                              ; CODE XREF: sub_1298C+A   j
                addq.w  #1,d2
                move.b  (a0,d2.w),-1(a0,d2.w)
                bpl.s   loc_1298E
                subq.w  #1,a0
                rts
; End of function sub_1298C


chkatop:                                ; CODE XREF: updatepentime+24   p
                moveq   #0,d1
                move.w  (pucky).w,d0
                cmp.w   #$58,d0 ; 'X'
                bgt.w   loc_129BA
                move.l  #$364,d1
                neg.w   d0
                cmp.w   #$58,d0 ; 'X'
                blt.w   rtss2
loc_129BA:                              ; CODE XREF: chkatop+A   j
                btst    #1,(gmode).w
                beq.w   loc_129C8
                eori.w  #$364,d1
loc_129C8:                              ; CODE XREF: chkatop+24   j
                movea.w #(HmShots-M68K_RAM),a2
                addq.w  #1,$A(a2,d1.w)
                rts
; End of function chkatop


sub_129D2:                              ; CODE XREF: sub_12944+16   p
                movem.l d0-d3/a0-a3,-(sp)
                movea.w $22(a2),a3
                suba.w  #$80,a3
loc_129DE:                              ; CODE XREF: sub_129D2+14   j
                adda.w  #$80,a3
                tst.w   $34(a3)
                bpl.s   loc_129DE
                move.w  d0,d3
                lsr.w   #1,d3
                move.w  $24(a2),d1
                addq.w  #1,$24(a2)
                bset    #0,(byte_FFC6FE).w
                bset    #0,(byte_FFCA62).w
                movea.l #unk_19286,a0
                tst.w   $26(a2)
                bpl.w   loc_12A10
                addq.w  #1,a0
loc_12A10:                              ; CODE XREF: sub_129D2+38   j
                clr.w   $34(a3)
                move.b  (a0,d1.w),$35(a3)
                bsr.w   Setplass
                bsr.w   setplayer
                bset    #2,$63(a3)      ; set player unavailable
                movem.l (sp)+,d0-d3/a0-a3
                rts
; End of function sub_129D2


sub_12A2E:                              ; CODE XREF: updatepwrplay+82   p
                clr.w   d0
                clr.w   d3
                lea     $9A(a2),a0
loc_12A36:                              ; CODE XREF: sub_12A2E+18   j
                                        ; sub_12A2E+20   j
                clr.w   d2
                move.b  (a0)+,d2
                bmi.w   loc_12A50
                move.w  $66(a2,d2.w),d2
                btst    #$E,d2
                bne.s   loc_12A36
                sub.w   d3,d2
                add.w   d2,d0
                move.w  d2,d3
                bra.s   loc_12A36
; ---------------------------------------------------------------------------
loc_12A50:                              ; CODE XREF: sub_12A2E+C   j
                cmpi.w  #6,$24(a3)
                beq.w   rtss2
                sub.w   d3,d0
                lea     $9A(a3),a0
                clr.w   d2
loc_12A62:                              ; CODE XREF: sub_12A2E+40   j
                move.b  (a0)+,d2
                bmi.w   rtss2
                btst    #6,$66(a3,d2.w)
                bne.s   loc_12A62
                cmp.w   $66(a3,d2.w),d0
                blt.w   rtss2
                add.w   d3,d0
                rts
; End of function sub_12A2E


; show graphic and time remaining for power plays
updatepwrplay:                          ; CODE XREF: periodiceevents+46   j
                btst    #1,(word_FFC2FA).w
                bne.w   rtss2
                movea.w #(HmShots-M68K_RAM),a2
                lea     $364(a2),a3
                move.w  $24(a2),d0      ; tmap
                sub.w   $24(a3),d0
                beq.w   _clrpwrplay     ; teams have same # of players on ice
                bpl.w   _t0
                btst    #6,(sflags2).w  ; #sf2pwrtm - 0 for team 1, 1 for team 2
                bne.w   _upp
                bsr.w   _clrpwrplay
                bset    #6,(sflags2).w
                bra.w   _upp
; ---------------------------------------------------------------------------
_t0:                                    ; CODE XREF: updatepwrplay+1E   j
                exg     a2,a3
                btst    #6,(sflags2).w
                beq.w   _upp
                bsr.w   _clrpwrplay
                bclr    #6,(sflags2).w
_upp:                                   ; CODE XREF: updatepwrplay+28   j
                                        ; updatepwrplay+36   j ...
                bset    #5,(sflags2).w  ; #sf2pwrplay - turn on PP
                bne.w   _uppt
                addq.w  #1,4(a3)        ; tmpwrplays
                cmpa.w  #$C6CE,a3       ; check if a3 is home team
                bne.w   _away
_home:                                  ; CODE XREF: updatepwrplay:_away   j
                bra.w   _uppt
; ---------------------------------------------------------------------------
_away:                                  ; CODE XREF: updatepwrplay+62   j
                bra.s   _home
; ---------------------------------------------------------------------------
_uppt:                                  ; CODE XREF: updatepwrplay+56   j
                                        ; updatepwrplay:_home   j
                bsr.w   printz
                ori.b   #1,(a2)
                move.b  -(a0),-(a4)
                move.l  -(a0),d0
                move.b  (sp),d3
                move.b  (a1)+,d4
                eor.b   d7,d1
                move.b  -(a0),d5
                move.l  d0,d0
                bsr.w   sub_12A2E
                bsr.w   PushTime
                bsr.w   print
                movea.l $1E(a3),a0
                movea.w #(mesarea-M68K_RAM),a3
                move.w  #2,(a3)
                bsr.w   sub_11D96
                ori.b   #1,d6
                move.b  d0,-(a4)
                adda.w  4(a0),a0
                adda.w  (a0),a0
                movea.l a0,a1
                bsr.w   sub_11D9E
                movea.w a3,a1
                bra.w   print
; ---------------------------------------------------------------------------
_clrpwrplay:                            ; CODE XREF: updatepwrplay+1A   j
                                        ; updatepwrplay+2C   p ...
                bclr    #5,(sflags2).w
                beq.w   rtss2
                bra.w   sub_12D70
; End of function updatepwrplay


; revert the graphics back to vertical ice rink mode
ClrHor:                                 ; CODE XREF: sub_7CF8:loc_7D8A   p
                                        ; ROM:00009FEA   p ...
                movem.l d0-d7/a0-a6,-(sp)
                bclr    #7,(sflags).w   ; #sfhor
                move.w  #$3E8,(Oldrow).w
                move.w  (word_FFB018).w,d4
                movea.l #unk_56062,a2
                jsr     (sub_11738).l
                jsr     (sub_FEA52).l
                bsr.w   SprSort
                btst    #0,(sflags).w
                bne.w   _ex
                bsr.w   printz
; ---------------------------------------------------------------------------
                dc.b 0,6,$FF,0,0,0
; ---------------------------------------------------------------------------
                moveq   #$20,d0 ; ' '
                moveq   #$1C,d1
                move.w  #$7FF,d2
                bsr.w   eraser
                bsr.w   PrintScores1
_ex:                                    ; CODE XREF: ClrHor+30   j
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function ClrHor


; switch graphics to horizontal ice rink graphics mode
SetHor:                                 ; CODE XREF: sub_7CF8+88   p
                                        ; sub_7DCE+12   p ...
                movem.l d0-d7/a0-a6,-(sp)
                bset    #7,(sflags).w
loc_12B9E:                              ; CODE XREF: SetHor+10   j
                btst    #0,(disflags).w
                bne.s   loc_12B9E
                clr.w   (Hscroll).w
                clr.w   (Vscroll).w
                bsr.w   SprSort
                bsr.w   printz
                ori.b   #0,d6
                ori.b   #$7C,d0 ; '|'
                ori.b   #$5C,a3 ; '\'
                adda.l  4(a1),a1
                movea.l #unk_BC064,a2
                clr.w   d0
                move.w  #0,d1
                moveq   #$20,d2 ; ' '
                moveq   #$1C,d3
                move.w  (word_FFB018).w,d4
                moveq   #0,d5
                bsr.w   dobitmap
                bsr.w   sub_12DA6
                btst    #0,(sflags).w
                bne.w   loc_12BFE
                move.w  #$800,d0
                move.w  (VmMap1).w,d1
                move.w  #$7FF,d2
                bsr.w   DoFill
loc_12BFE:                              ; CODE XREF: SetHor+56   j
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function SetHor


PrintScores1:                           ; CODE XREF: sub_7CF8+B6   p
                                        ; sub_BB36+28   j ...
                movem.l d0-d2/a0-a3,-(sp)
                btst    #7,(sflags).w
                bne.w   loc_12CB0
                bclr    #7,(byte_FFC2F6).w
                beq.w   loc_12C22
                move.w  #$78,(word_FFC304).w ; 'x'
loc_12C22:                              ; CODE XREF: PrintScores1+14   j
                bsr.w   printz
                ori.b   #0,d6
                move.b  d0,-(a3)
                moveq   #9,d0
                moveq   #5,d1
                bsr.w   Framer
                bset    #3,(disflags).w
                bsr.w   printz
                ori.b   #1,d6
                move.b  d0,d4
                move.w  (gsp).w,d0
                movea.l #unk_191E4,a1
                btst    #1,(word_FFC2FA).w
                beq.w   loc_12C62
                move.w  #4,d0
                movea.l #unk_191F8,a1
loc_12C62:                              ; CODE XREF: PrintScores1+50   j
                bsr.w   sub_13508
                bsr.w   sub_12D70
                btst    #0,(sflags3).w
                bne.w   loc_12CAA
                bsr.w   printz
                ori.b   #$17,d6
                move.b  d0,-(a3)
                moveq   #8,d0
                moveq   #5,d1
                bsr.w   Framer
                bsr.w   printz
                ori.b   #$18,d6
                move.b  d0,d5
                movea.w #(HmShots-M68K_RAM),a2
                bsr.w   sub_12D0E
                bsr.w   printz
                ori.b   #$18,d6
                move.b  d0,d4
                adda.w  #$364,a2
                bsr.w   sub_12D0E
loc_12CAA:                              ; CODE XREF: PrintScores1+6C   j
                                        ; PrintScores1+108   j
                movem.l (sp)+,d0-d2/a0-a3
                rts
; ---------------------------------------------------------------------------
loc_12CB0:                              ; CODE XREF: PrintScores1+A   j
                bsr.w   printz
                ori.b   #$11,d6
                andi.b  #$38,d0 ; '8'
                and.w   -(a6),d2
                btst    #0,(word_FFC2FA).w
                beq.w   loc_12CCC
                move.w  #4,d0
loc_12CCC:                              ; CODE XREF: PrintScores1+C0   j
                movea.l #unk_191F8,a1
                bsr.w   sub_13510
                move.w  (a1),d0
                lsr.w   #1,d0
                sub.w   d0,(printx).w
                bsr.w   print
                bsr.w   printz
                ori.b   #$17,d6
                andi.b  #$7C,d0 ; '|'
                mulu.w  ,d3
                clr.w   d0
                bsr.w   sub_12D30
                bsr.w   printz
                ori.b   #8,d6
                andi.b  #$FC,d0
                bchg    d1,-(a4)
                move.w  #$2C,d0 ; ','
                bsr.w   sub_12D30
                bra.s   loc_12CAA
; End of function PrintScores1


sub_12D0E:                              ; CODE XREF: PrintScores1+90   p
                                        ; PrintScores1+A2   p
                movea.l $1E(a2),a1
                adda.w  4(a1),a1
                adda.w  (a1),a1
                bsr.w   print
                move.w  #$1C,(printx).w
                move.w  $C(a2),d0
                moveq   #2,d1
                bsr.w   sub_11D3A
                bra.w   print
; End of function sub_12D0E


sub_12D30:                              ; CODE XREF: PrintScores1+EE   p
                                        ; PrintScores1+104   p
                move.w  (printx).w,-(sp)
                subq.w  #5,(printx).w
                jsr     (sub_8078).l
                move.w  (sp)+,(printx).w
                addq.w  #2,(printy).w
                move.w  $C(a2),d0
                cmp.w   #$A,d0
                bge.w   loc_12D56
                bra.w   loc_12D5A
; ---------------------------------------------------------------------------
loc_12D56:                              ; CODE XREF: sub_12D30+1E   j
                subq.w  #1,(printx).w
loc_12D5A:                              ; CODE XREF: sub_12D30+22   j
                bsr.w   sub_11D06
                move.w  (a1),d0
                subq.w  #2,d0
                lsr.w   #1,d0
                sub.w   d0,(printx).w
                addq.w  #1,(printx).w
                bra.w   sub_11DF4
; End of function sub_12D30


sub_12D70:                              ; CODE XREF: updatepwrplay+C0   j
                                        ; PrintScores1+62   p
                btst    #5,(sflags2).w
                bne.w   rtss2
                bsr.w   printz
                ori.b   #1,d6
                move.b  d0,-(a4)
                movea.l #unk_B3530,a1
                adda.l  4(a1),a1
                movea.w #$30A,a2
                clr.w   d0
                clr.w   d1
                move.w  (a1),d2
                move.w  2(a1),d3
                move.w  (word_FFB020).w,d4
                clr.w   d5
                bra.w   dobitmap
; End of function sub_12D70


sub_12DA6:                              ; CODE XREF: ROM:00012386   p
                                        ; SetHor+4C   p
                movem.l d0-d7/a0-a3,-(sp)
                bset    #3,(disflags).w
                bsr.w   PrintScores1
                bsr.w   printz
                ori.b   #$14,d6
                        #$7C
                mulu.w  ,d3
                bsr.w   sub_12DDE
                bsr.w   printz
                ori.b   #5,d6
                        #$7C
                and.b   0(a2,d6.w),d5
                ori.b   #$DF,a0
                        d7
                rts
; End of function sub_12DA6


sub_12DDE:                              ; CODE XREF: sub_12DA6+1C   p
                lea     $9A(a2),a0
loc_12DE2:                              ; CODE XREF: sub_12DDE+12   j
                                        ; sub_12DDE+18   j
                clr.w   d0
                move.b  (a0)+,d0
                bmi.w   loc_12DF8
                btst    #6,$66(a2,d0.w)
                bne.s   loc_12DE2
                bsr.w   sub_12E12
                bra.s   loc_12DE2
; ---------------------------------------------------------------------------
loc_12DF8:                              ; CODE XREF: sub_12DDE+8   j
                lea     $9A(a2),a0
loc_12DFC:                              ; CODE XREF: sub_12DDE+2C   j
                                        ; sub_12DDE+32   j
                clr.w   d0
                move.b  (a0)+,d0
                bmi.w   rtss2
                btst    #6,$66(a2,d0.w)
                beq.s   loc_12DFC
                bsr.w   sub_12E12
                bra.s   loc_12DFC
; End of function sub_12DDE


sub_12E12:                              ; CODE XREF: sub_12DDE+14   p
                                        ; sub_12DDE+2E   p
                cmpi.w  #$A,(printy).w
                bhi.w   rtss2
                move.w  $66(a2,d0.w),d2
                andi.w  #$7FF,d2
                movea.l $1E(a2),a1
                adda.w  (a1),a1
                lsr.w   #1,d0
loc_12E2C:                              ; CODE XREF: sub_12E12+1E   j
                adda.w  (a1),a1
                addq.w  #8,a1
                dbf     d0,loc_12E2C
                clr.w   d0
                move.b  -8(a1),d0
                move.w  (printx).w,-(sp)
                movea.w #(word_FFBFA6-M68K_RAM),a1
                bsr.w   sub_18BDC
                movea.w #(mesarea-M68K_RAM),a1
                move.w  #4,(a1)
                bsr.w   print
                move.w  d2,d0
                bsr.w   PushTime
                bsr.w   print
                move.w  (sp)+,(printx).w
                addq.w  #1,(printy).w
                rts
; End of function sub_12E12


sub_12E66:                              ; CODE XREF: sub_B92E+72   p
                movem.l d0-d5/a0-a2,-(sp)
                bsr.w   getlinee
                move.w  (printa).w,-(sp)
                move.w  #$8000,(printa).w
                ext.l   d0
                divu.w  #$100,d0
                cmp.w   #$F,d0
                bls.w   loc_12E88
                moveq   #$F,d0
loc_12E88:                              ; CODE XREF: sub_12E66+1C   j
                moveq   #$F,d1
                sub.w   d0,d1
                clr.w   d0
                movea.l #unk_AB920,a1
                adda.l  4(a1),a1
                movea.w #$30A,a2
                move.w  (a1),d2
                moveq   #1,d3
                move.w  (word_FFB016).w,d4
                moveq   #0,d5
                bsr.w   dobitmap
                move.w  (sp)+,(printa).w
                movem.l (sp)+,d0-d5/a0-a2
                rts
; End of function sub_12E66


getlinee:                               ; CODE XREF: CompLine+1A   p
                                        ; CompLine+24   p ...
                movem.l d1-d5/a0-a3,-(sp)
                lea     $16A(a2),a1
                asl.w   #3,d0
                adda.w  d0,a1
                clr.l   d0
                clr.w   d1
                movea.l #unk_19286,a0
                move.w  $24(a2),d4
                bra.w   loc_12EEA
; ---------------------------------------------------------------------------
loc_12ED2:                              ; CODE XREF: getlinee:loc_12EEA   j
                clr.w   d5
                move.b  (a0,d4.w),d5
                beq.w   loc_12EEA
                clr.w   d3
                move.b  (a1,d5.w),d3
                asl.w   #1,d3
                addq.w  #1,d1
                add.w   $30(a2,d3.w),d0
loc_12EEA:                              ; CODE XREF: getlinee+1A   j
                                        ; getlinee+24   j
                dbf     d4,loc_12ED2
                divu.w  d1,d0
                movem.l (sp)+,d1-d5/a0-a3
                rts
; End of function getlinee


sub_12EF6:                              ; CODE XREF: sub_E1F4:loc_E248   p
                movem.l d1-d3/a0,-(sp)
                clr.l   d0
                clr.w   d1
                moveq   #5,d2
                movea.w $22(a2),a0
loc_12F04:                              ; CODE XREF: sub_12EF6+28   j
                tst.w   $34(a0)
                ble.w   loc_12F1A
                clr.w   d3
                move.b  $66(a0),d3
                add.w   d3,d3
                add.w   $32(a2,d3.w),d0
                addq.w  #1,d1
loc_12F1A:                              ; CODE XREF: sub_12EF6+12   j
                adda.w  #$80,a0
                dbf     d2,loc_12F04
                tst.w   d1
                beq.w   loc_12F2A
                divu.w  d1,d0
loc_12F2A:                              ; CODE XREF: sub_12EF6+2E   j
                movem.l (sp)+,d1-d3/a0
                rts
; End of function sub_12EF6


; determine if shot taken, add to appropriate stats
AddShotStat:                            ; CODE XREF: sub_14620:loc_14724   p
                                        ; sub_14620+214   p ...
                btst    #0,(gmode).w    ; check if clock stopped
                bne.w   rtss2           ; exit if so
                btst    #4,(gmode).w    ; check if highlight
                bne.w   rtss2           ; exit if so
                bclr    #4,(sflags2).w  ; clear shot taken flag
                bne.w   _Cwdupdate      ; branch if it was not cleared before (shot taken)
                btst    #0,(word_FFC2F4).w ; check bit 0
                beq.w   rtss2           ; exit if cleared
                bclr    #3,(byte_FFC2FE).w ; clear bit 3
                bne.w   loc_12F6C       ; branch if not cleared before
                bset    #3,(byte_FFC2FE).w ; set bit 3
                bra.w   rtss2           ; exit
; ---------------------------------------------------------------------------
loc_12F6C:                              ; CODE XREF: AddShotStat+2E   j
                movem.l d0-d1/a1-a3,-(sp) ; push to stack
                move.l  a4,-(sp)        ; push a4 to stack
                movea.l #$FFFFC46E,a4   ; move into a4
                adda.w  (word_FFC472).w,a4 ; add address stored to a4
                movea.l #$FFFFC6CE,a2   ; Home Stats to a2
                btst    #7,2(a4)        ; test a bit(home or away?)
                beq.w   _pllookup       ; branch if zero (home team)
                adda.w  #$364,a2        ; add for away stats
_pllookup:                              ; CODE XREF: AddShotStat+58   j
                clr.w   d0
                move.b  3(a4),d0        ; d0 will be a pnum. Roster offset
                movea.l (sp)+,a4        ; pop off stack
                movea.w $22(a2),a2      ; move address into a2 (C6F0 location for home)
                move.w  #5,d1           ; move 5 into d1
_findplayer:                            ; CODE XREF: AddShotStat+7C   j
                cmp.b   $66(a2),d0      ; move pnum into d0
                beq.w   _foundplayer    ; branch if equal
                adda.w  #$80,a2         ; move to next struct
                dbf     d1,_findplayer  ; decrement till d1 is 0
                bra.w   _ex
; ---------------------------------------------------------------------------
_foundplayer:                           ; CODE XREF: AddShotStat+74   j
                move.w  $52(a2),d0      ; SCnum into d0
                bra.w   _addShot
; ---------------------------------------------------------------------------
_Cwdupdate:                             ; CODE XREF: AddShotStat+1A   j
                movem.l d0-d1/a1-a3,-(sp)
                addi.w  #$64,(crowdlevel).w ; 'd' ; add to crowd level
                addi.w  #$A,(CwdExciteLvl).w ; add to crowd excite level
                move.w  (shotplayer).w,d0
_addShot:                               ; CODE XREF: AddShotStat+88   j
                asl.w   #7,d0
                movea.w #(SortCords-M68K_RAM),a3 ; move player struct start into a3
                adda.w  d0,a3           ; add to a3. a3 now has player struct
                bsr.w   loadTeamStruct
                addq.w  #1,(a2)         ; add to Team Shots
                btst    #5,(sflags2).w  ; check if PP
                beq.w   loc_1300C       ; branch if not
                btst    #6,(sflags2).w  ; check what PP team
                bne.w   loc_13004       ; branch if Away
                btst    #6,$62(a3)      ; check what team
                bne.w   loc_1300C       ; branch if away
_PPshot:                                ; CODE XREF: AddShotStat+DA   j
                addq.w  #1,$354(a2)     ; Add to PP shots
                bra.w   loc_1300C
; ---------------------------------------------------------------------------
loc_13004:                              ; CODE XREF: AddShotStat+BE   j
                btst    #6,$62(a3)      ; check what team
                bne.s   _PPshot         ; branch if away
loc_1300C:                              ; CODE XREF: AddShotStat+B4   j
                                        ; AddShotStat+C8   j ...
                move.l  a2,-(sp)        ; push to stack
                move.w  (gsp).w,d0      ; move game period into d0
                add.w   d0,d0           ; double d0
                adda.w  d0,a2
                addq.w  #1,$34A(a2)     ; add to period shots
                movea.l (sp)+,a2        ; pop from stack
                clr.w   d0
                move.b  $66(a3),d0      ; move pnum into a3
                addi.w  #$E8,d0
                addq.b  #1,(a2,d0.w)    ; add to player shots
                move.w  $26(a1),d0      ; goalie num, a1 opposing team?
                bmi.w   _ex             ; branch if no goalie
                addi.w  #$E8,d0
                addq.b  #1,(a1,d0.w)    ; add to goalie shots against
_ex:                                    ; CODE XREF: AddShotStat+80   j
                                        ; AddShotStat+FE   j
                movem.l (sp)+,d0-d1/a1-a3
                rts
; End of function AddShotStat


loadTeamStruct:                         ; CODE XREF: updateplayers+206   p
                                        ; updateplayers+4BC   p ...
                movea.w #(HmShots-M68K_RAM),a2
                lea     $364(a2),a1     ; Loads AwShots into a1
                btst    #6,$62(a3)      ; Checks if team is home (0) or away (1)
                beq.w   rtss2
                exg     a1,a2           ; swap HmShots into a1, AwShots into a2
                rts
; End of function loadTeamStruct


sub_13056:                              ; CODE XREF: sub_130E6:loc_130FC   p
                bsr.w   ResetBench
                movea.w #(HmShots-M68K_RAM),a2
                lea     $364(a2),a3
                bsr.w   sub_13068
                exg     a2,a3
; End of function sub_13056


sub_13068:                              ; CODE XREF: sub_13056+C   p
                bsr.w   sub_130BE
                clr.w   $16(a3)
                tst.w   (OptLine).w
                bne.w   rtss2
                move.w  $24(a3),d0
                sub.w   $24(a2),d0
                beq.w   rtss2
                move.w  #3,$16(a3)
                tst.w   d0
                bpl.w   rtss2
                move.w  #5,$16(a3)
                rts
; End of function sub_13068


sub_13098:                              ; CODE XREF: ROM:00009DD0   p
                                        ; ROM:00009DDA   p
                moveq   #$32,d0 ; '2'
loc_1309A:                              ; CODE XREF: sub_13098+22   j
                cmpi.w  #$FFFD,$66(a2,d0.w)
                bne.w   loc_130B2
                cmpi.w  #$FFFC,$66(a2,d0.w)
                bne.w   loc_130B2
                bra.w   loc_130B8
; ---------------------------------------------------------------------------
loc_130B2:                              ; CODE XREF: sub_13098+8   j
                                        ; sub_13098+12   j
                move.w  #$1000,$32(a2,d0.w)
loc_130B8:                              ; CODE XREF: sub_13098+16   j
                subq.w  #2,d0
                bpl.s   loc_1309A
                rts
; End of function sub_13098


sub_130BE:                              ; CODE XREF: sub_13068   p
                                        ; sub_137FC   p
                moveq   #$32,d0 ; '2'
loc_130C0:                              ; CODE XREF: sub_130BE+24   j
                cmpi.w  #$FFFC,$66(a2,d0.w)
                beq.w   loc_130E0
                move.w  #$1000,$32(a2,d0.w)
                cmpi.w  #$FFFD,$66(a2,d0.w)
                bne.w   loc_130E0
                move.w  #$FFFE,$66(a2,d0.w)
loc_130E0:                              ; CODE XREF: sub_130BE+8   j
                                        ; sub_130BE+18   j
                subq.w  #2,d0
                bpl.s   loc_130C0
                rts
; End of function sub_130BE


sub_130E6:                              ; CODE XREF: ROM:loc_172B6   p
                cmpi.w  #4,(gsp).w
                bne.w   loc_130FC
                move.w  #0,(gameclock).w
                jsr     (sub_F9CDE).l
loc_130FC:                              ; CODE XREF: sub_130E6+6   j
                bsr.w   sub_13056
                moveq   #$F,d0
                movea.w #(SortCords-M68K_RAM),a0
loc_13106:                              ; CODE XREF: sub_130E6+26   j
                clr.w   (a0)
                adda.w  #$80,a0
                dbf     d0,loc_13106
                move.w  (ExtraChars).w,d4
                movea.l #unk_A892A,a2
                bsr.w   sub_11738
                move.w  #$140,(zamx).w
                move.w  (gsp).w,d0
                tst.w   (OptPlayMode).w
                beq.w   loc_13132
                addq.w  #5,d0
loc_13132:                              ; CODE XREF: sub_130E6+46   j
                asl.w   #2,d0
                lea     unk_131CC(pc),a0
                movea.l (a0,d0.w),a0
                btst    #0,(word_FFC2FA).w
                beq.w   loc_1314C
                movea.l #unk_19A00,a0
loc_1314C:                              ; CODE XREF: sub_130E6+5C   j
                bset    #0,(sflags).w
                movea.l #$7DCE,a1
                jsr     sub_7E36
                bsr.w   sub_1828A
                move.w  d1,(word_FFCF2C).w
loc_13164:                              ; CODE XREF: sub_130E6+AE   j
                tst.w   (word_FFCF2C).w
                bmi.w   loc_1319C
                bsr.w   sub_13384
                bsr.w   sub_133B2
                move.w  #$96,d0
                bsr.w   waitxsr
                btst    #7,d1
                bne.w   loc_13196
                bsr.w   sub_134D8
                move.w  #$3C,d0 ; '<'
                bsr.w   waitxsr
                btst    #7,d1
                beq.s   loc_13164
loc_13196:                              ; CODE XREF: sub_130E6+9A   j
                bset    #3,(sflags3).w
loc_1319C:                              ; CODE XREF: sub_130E6+82   j
                bsr.w   sub_1351C
                bclr    #3,(sflags3).w
                bne.w   loc_131C6
loc_131AA:                              ; CODE XREF: sub_130E6+D8   j
                                        ; sub_130E6+DE   j
                move.w  #$1E0,d0
                bsr.w   waitxsr
                btst    #7,d1
                bne.w   loc_131C6
                tst.w   (cont1team).w
                bne.s   loc_131AA
                tst.w   (cont2team).w
                bne.s   loc_131AA
loc_131C6:                              ; CODE XREF: sub_130E6+C0   j
                                        ; sub_130E6+D0   j
                st      (zamx).w
                rts
; End of function sub_130E6
; ---------------------------------------------------------------------------


sub_131F4:                              ; CODE XREF: StartGame+8A   p
                cmpi.w  #1,(gamelevel).w
                bgt.w   rtss2
                bsr.w   sub_1828A
                movea.w #(gsstruct-M68K_RAM),a0
                moveq   #$10,d0
                mulu.w  d1,d0
                adda.w  d0,a0
loc_1320C:                              ; CODE XREF: sub_131F4+44   j
                cmp.w   (gamenum).w,d1
                beq.w   loc_13234
                btst    #2,$E(a0)
                bne.w   loc_13234
                clr.w   8(a0)
                moveq   #3,d0
                bsr.w   randomd0
                bra.w   loc_13230
; ---------------------------------------------------------------------------
loc_1322C:                              ; CODE XREF: sub_131F4:loc_13230   j
                bsr.w   sub_13276
loc_13230:                              ; CODE XREF: sub_131F4+34   j
                dbf     d0,loc_1322C
loc_13234:                              ; CODE XREF: sub_131F4+1C   j
                                        ; sub_131F4+26   j
                suba.w  #$10,a0
                dbf     d1,loc_1320C
                rts
; End of function sub_131F4


sub_1323E:                              ; CODE XREF: ROM:000172A4   p
                bsr.w   sub_1828A
                move.w  d1,(word_FFCF2C).w
                movea.w #(gsstruct-M68K_RAM),a0
                moveq   #$10,d0
                mulu.w  d1,d0
                adda.w  d0,a0
loc_13250:                              ; CODE XREF: sub_1323E+32   j
                cmp.w   (gamenum).w,d1
                beq.w   loc_1326C
                bclr    #1,$E(a0)
                btst    #2,$E(a0)
                bne.w   loc_1326C
                bsr.w   sub_13276
loc_1326C:                              ; CODE XREF: sub_1323E+16   j
                                        ; sub_1323E+26   j
                suba.w  #$10,a0
                dbf     d1,loc_13250
                rts
; End of function sub_1323E


sub_13276:                              ; CODE XREF: sub_131F4:loc_1322C   p
                                        ; sub_1323E+2A   p
                cmpi.w  #4,8(a0)
                bge.w   rtss2
                movem.l d0-d1/a0-a1,-(sp)
                cmpi.w  #3,8(a0)
                bne.w   loc_132BC
                move.w  #5,8(a0)
                move.w  $A(a0),d0
                sub.w   $C(a0),d0
                cmp.w   #1,d0
                bgt.w   loc_132DC
                cmp.w   #$FFFF,d0
                blt.w   loc_132DC
                move.w  #3,8(a0)
                bset    #1,$E(a0)
                bra.w   loc_132DC
; ---------------------------------------------------------------------------
loc_132BC:                              ; CODE XREF: sub_13276+14   j
                addq.w  #1,8(a0)
                move.w  (a0),d0
                move.w  2(a0),d1
                bsr.w   sub_132E2
                add.w   d0,$A(a0)
                move.w  2(a0),d0
                move.w  (a0),d1
                bsr.w   sub_132E2
                add.w   d0,$C(a0)
loc_132DC:                              ; CODE XREF: sub_13276+2A   j
                                        ; sub_13276+32   j ...
                movem.l (sp)+,d0-d1/a0-a1
                rts
; End of function sub_13276


sub_132E2:                              ; CODE XREF: sub_13276+50   p
                                        ; sub_13276+5E   p
                asl.w   #2,d0
                movea.w #$30E,a1
                movea.l (a1,d0.w),a1
                adda.w  8(a1),a1
                move.b  (a1),d0
                andi.w  #$70,d0 ; 'p'
                lsr.w   #1,d0
                lea     unk_13338(pc),a1
                move.l  (a1,d0.w),(dword_FFD036).w
                move.l  4(a1,d0.w),(dword_FFD03A).w
                asl.w   #2,d1
                movea.w #$30E,a1
                movea.l (a1,d1.w),a1
                adda.w  8(a1),a1
                move.b  (a1),d0
                andi.w  #7,d0
                asl.w   #3,d0
                lea     unk_13338(pc),a1
                move.l  (a1,d0.w),d1
                add.l   d1,(dword_FFD036).w
                move.l  4(a1,d0.w),d1
                add.l   d1,(dword_FFD03A).w
                moveq   #4,d0
                bra.w   sub_10EB4
; End of function sub_132E2
; ---------------------------------------------------------------------------


sub_13378:                              ; CODE XREF: chkprogress+D8   p
                moveq   #$FFFFFFFF,d3
                cmpi.w  #$1E0,(gameclock).w
                bgt.w   rtss2
; End of function sub_13378


sub_13384:                              ; CODE XREF: sub_130E6+86   p
                                        ; sub_13384+10   j ...
                move.w  (word_FFCF2C).w,d3
                bmi.w   rtss2
                subq.w  #1,(word_FFCF2C).w
                cmp.w   (gamenum).w,d3
                beq.s   sub_13384
; End of function sub_13384


sub_13396:                              ; CODE XREF: sub_1354C+14   p
                                        ; ROM:000137B4   p
                moveq   #$10,d0
                mulu.w  d3,d0
                movea.w #(gsstruct-M68K_RAM),a0
                adda.w  d0,a0
                btst    #1,$E(a0)
                bne.s   sub_13384
                btst    #2,$E(a0)
                bne.s   sub_13384
                rts
; End of function sub_13396


sub_133B2:                              ; CODE XREF: chkprogress+DC   p
                                        ; sub_130E6+8A   p ...
                tst.w   d3
                bmi.w   rtss2
                bsr.w   sub_134E4
                bsr.w   Framer
                addq.w  #1,(printx).w
                subq.w  #4,(printy).w
                move.w  (printx).w,-(sp)
                bsr.w   sub_1828A
                move.w  #$A000,(printa).w
                bsr.w   printz
                ori.b   #$20,(a2)+ ; ' '
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.w  (sp),(printx).w
                moveq   #1,d0
                add.w   (gamelevel).w,d0
                tst.w   (OptPlayMode).w
                bne.w   loc_13408
                clr.w   d0
loc_13408:                              ; CODE XREF: sub_133B2+50   j
                lea     unk_13488(pc),a1
                bsr.w   sub_13508
                move.w  8(a0),d0
                subq.w  #1,d0
                movea.l #unk_191E4,a1
                bsr.w   sub_13510
                move.w  (a1),d0
                lsr.w   #1,d0
                neg.w   d0
                add.w   (sp),d0
                addi.w  #$17,d0
                move.w  d0,(printx).w
                bsr.w   print
                move.w  #$8000,(printa).w
                move.w  2(a0),d0
                move.w  $C(a0),d1
                bsr.w   sub_13454
                move.w  (a0),d0
                move.w  $A(a0),d1
                bsr.w   sub_13454
                addq.w  #2,sp
                rts
; End of function sub_133B2


sub_13454:                              ; CODE XREF: sub_133B2+90   p
                                        ; sub_133B2+9A   p
                move.w  4(sp),(printx).w
                addq.w  #1,(printy).w
                movea.w #$30E,a1
                asl.w   #2,d0
                movea.l (a1,d0.w),a1
                adda.w  4(a1),a1
                bsr.w   print
                move.w  4(sp),(printx).w
                addi.w  #$15,(printx).w
                move.w  d1,d0
                moveq   #2,d1
                bsr.w   sub_11D3A
                bra.w   print
; End of function sub_13454
; ---------------------------------------------------------------------------


sub_134D8:                              ; CODE XREF: sub_130E6+9E   p
                                        ; ROM:000137CC   p
                bsr.w   sub_134E4
                move.w  #$7FF,d2
                bra.w   eraser
; End of function sub_134D8


sub_134E4:                              ; CODE XREF: sub_133B2+6   p
                                        ; sub_134D8   p
                bsr.w   printz
                ori.b   #3,d6
                move.b  d0,-(a3)
                btst    #0,(sflags).w
                bne.w   loc_13502
                bsr.w   printz
                ori.b   #3,d6
                move.b  d0,-(a3)
loc_13502:                              ; CODE XREF: sub_134E4+10   j
                moveq   #$1A,d0
                moveq   #5,d1
                rts
; End of function sub_134E4


sub_13508:                              ; CODE XREF: sub_81F2+52   p
                                        ; sub_8280+30   p ...
                bsr.w   sub_13510
                bra.w   print2
; End of function sub_13508


sub_13510:                              ; CODE XREF: sub_8BA6+18   p
                                        ; PrintScores1+CE   p ...
                bra.w   loc_13516
; ---------------------------------------------------------------------------
loc_13514:                              ; CODE XREF: sub_13510:loc_13516   j
                adda.w  (a1),a1
loc_13516:                              ; CODE XREF: sub_13510   j
                dbf     d0,loc_13514
                rts
; End of function sub_13510


sub_1351C:                              ; CODE XREF: sub_130E6:loc_1319C   p
                bsr.w   sub_1828A
                moveq   #$10,d3
                mulu.w  d1,d3
                movea.w #(gsstruct-M68K_RAM),a0
                adda.w  d3,a0
loc_1352A:                              ; CODE XREF: sub_1351C+2A   j
                btst    #2,$E(a0)
                bne.w   loc_13542
                bclr    #1,$E(a0)
                beq.w   loc_13542
                bsr.w   sub_1354C
loc_13542:                              ; CODE XREF: sub_1351C+14   j
                                        ; sub_1351C+1E   j
                suba.w  #$10,a0
                dbf     d1,loc_1352A
                rts
; End of function sub_1351C


sub_1354C:                              ; CODE XREF: sub_1351C+22   p
                movem.l d0-d7/a0-a6,-(sp)
loc_13550:                              ; CODE XREF: ROM:000137A8   j
                btst    #3,(sflags3).w
                bne.w   loc_137F6
                bsr.w   sub_13848
                move.w  d1,d3
                bsr.w   sub_13396
                bsr.w   sub_133B2
                btst    #3,(sflags3).w
                bne.w   loc_137EC
                move.w  #4,(printx).w
                subq.w  #6,(printy).w
                moveq   #$18,d0
                moveq   #3,d1
                bsr.w   Framer
                addq.w  #1,(printx).w
                subq.w  #2,(printy).w
                bsr.w   printz
                ori.b   #$69,(a6) ; 'i'
                beq.s   loc_135FC+2
                bge.s   loc_135FC+5
                beq.s   loc_13602
                moveq   #$20,d2 ; ' '
                bne.s   loc_1360C+4
                ble.s   loc_1360C+1
                movea.l -(sp),a0
                bsr.s   loc_1360C+5
                bcs.s   loc_135E0
                move.w  #$B4,d0
                bsr.w   waitxsr
                btst    #7,d1
                bne.w   loc_137EC
                st      (zamx).w
                clr.w   (CwdExciteLvl).w
                move.w  (a0),(HomeTeam).w
                move.w  2(a0),(VisTeam).w
                move.l  a0,-(sp)
                clr.w   (word_FFC6F4).w
                clr.w   (word_FFCA58).w
                jsr     (clearTeamStats).l
                jsr     restoreteams
                st      (c1playernum).w
loc_135E0:                              ; CODE XREF: sub_1354C+58   j
                st      (c2playernum).w
                clr.w   (cont1team).w
                clr.w   (cont2team).w
                moveq   #$78,d0 ; 'x'
                bsr.w   randomd0
                addi.w  #$3C,d0 ; '<'
                move.w  d0,(gameclock).w
                movea.l (sp),a0
loc_135FC:                              ; CODE XREF: sub_1354C+48   j
                                        ; sub_1354C+4A   j
                move.w  8(a0),(gsp).w
loc_13602:                              ; CODE XREF: sub_1354C+4C   j
                subq.w  #1,(gsp).w
                move.w  $A(a0),(HmGoals).w
loc_1360C:                              ; CODE XREF: sub_1354C+52   j
                                        ; sub_1354C+50   j ...
                move.w  $C(a0),(AwGoals).w
; End of function sub_1354C
                move.b  #$10,(gmode).w
                btst    #0,(gsp+1).w
                beq.w   loc_13628
                bset    #1,(gmode).w
loc_13628:                              ; CODE XREF: ROM:0001361E   j
                clr.b   (sflags).w
                move.b  #4,(sflags2).w
                clr.b   (sflags3).w
                bclr    #4,(disflags).w
                bset    #3,(disflags).w
                clr.w   (glovecords).w
                clr.b   (iflags).w
                st      (RefCnt).w
                st      (puckcross2).w
                st      (puckcross6).w
                jsr     (Z80_MuteAllFM).l
                bsr.w   sub_16BAC
                bsr.w   ClrHor
                movea.l #VDP_DATA,a0
                move.w  #$9100,4(a0)
                move.w  #$9200,4(a0)
                move.w  (ExtraChars).w,d4
                movea.l #unk_5C410,a2
                bsr.w   sub_11738
                clr.w   (Vpos).w
                clr.w   (Hpos).w
                bsr.w   ResetBench
                movea.w #(HmShots-M68K_RAM),a2
                bsr.w   sub_137FC
                adda.w  #$364,a2
                bsr.w   sub_137FC
                bsr.w   resetplstuff
                moveq   #$B,d0
                movea.l #unk_1387C,a0
                movea.w #(SortCords-M68K_RAM),a1
loc_136B0:                              ; CODE XREF: ROM:000136D8   j
                move.w  $34(a1),d1
                btst    #7,$62(a1)
                bne.w   loc_136C0
                addq.w  #6,d1
loc_136C0:                              ; CODE XREF: ROM:000136BA   j
                asl.w   #2,d1
                move.w  (a0,d1.w),(a1)
                move.w  2(a0,d1.w),$14(a1)
                clr.w   $28(a1)
                clr.w   $2A(a1)
                adda.w  #$80,a1
                dbf     d0,loc_136B0
                bsr.w   SprSort
                move.w  #$18,(palcount).w
                move.w  (vcount).w,(oldvcount).w
                move.w  #$B4,-(sp)
loc_136F0:                              ; CODE XREF: ROM:00013714   j
                jsr     Gameloop
                btst    #0,(gmode).w
                beq.w   loc_13704
                subq.w  #1,(sp)
                bmi.w   loc_13738
loc_13704:                              ; CODE XREF: ROM:000136FA   j
                bsr.w   orjoy
                btst    #5,d1
                bne.w   loc_13716
                btst    #7,d1
                beq.s   loc_136F0
loc_13716:                              ; CODE XREF: ROM:0001370C   j
                move.w  (HmGoals).w,d0
                cmp.w   (AwGoals).w,d0
                bne.w   loc_13738
                move.w  (VDP_CNTR).l,d0
                andi.w  #1,d0
                add.w   d0,(HmGoals).w
                eori.w  #1,d0
                add.w   d0,(AwGoals).w
loc_13738:                              ; CODE XREF: ROM:00013700   j
                                        ; ROM:0001371E   j
                addq.w  #2,sp
                movea.l (sp)+,a0
                movem.l d1/a0,-(sp)
                jsr     (KillCrowd).l
                jsr     (Z80_MuteAllFM).l
                movem.l (sp)+,d1/a0
                move.w  (HmGoals).w,$A(a0)
                move.w  (AwGoals).w,$C(a0)
                bsr.w   forceblack
                moveq   #$F,d0
                movea.w #(SortCords-M68K_RAM),a0
loc_13766:                              ; CODE XREF: ROM:0001376C   j
                clr.w   (a0)
                adda.w  #$80,a0
                dbf     d0,loc_13766
                bsr.w   sub_13862
                bsr.w   sub_1720C
                bsr.w   SetHor
                bsr.w   setvideo
                jsr     sub_7DCE
                jsr     sub_7E46
                move.w  #$18,(palcount).w
                move.w  #$79,-(sp) ; 'y'
                bsr.w   song
                movem.l (sp),d0-d7/a0-a6
                move.w  #4,8(a0)
                move.w  $A(a0),d0
                cmp.w   $C(a0),d0
                beq.w   loc_13550
                move.w  #5,8(a0)
                move.w  d1,d3
                bsr.w   sub_13396
                bsr.w   sub_133B2
                move.w  #$B4,d0
                bsr.w   waitxsr
                btst    #7,d1
                bne.w   loc_137E0
                bsr.w   sub_134D8
                move.w  #$3C,d0 ; '<'
                bsr.w   waitxsr
                btst    #7,d1
                beq.w   loc_137E6
loc_137E0:                              ; CODE XREF: ROM:000137C8   j
                                        ; ROM:000137F4   j
                bset    #3,(sflags3).w
loc_137E6:                              ; CODE XREF: ROM:000137DC   j
                                        ; ROM:000137FA   j
                movem.l (sp)+,d0-d7/a0-a6
                rts
; ---------------------------------------------------------------------------
loc_137EC:                              ; CODE XREF: sub_1354C+22   j
                                        ; sub_1354C+66   j
                bsr.w   sub_13862
                bsr.w   sub_1381E
                bra.s   loc_137E0
; ---------------------------------------------------------------------------
loc_137F6:                              ; CODE XREF: sub_1354C+A   j
                bsr.w   sub_1381E
                bra.s   loc_137E6


sub_137FC:                              ; CODE XREF: ROM:00013694   p
                                        ; ROM:0001369C   p
                jsr     (sub_130BE).l
                bsr.w   SetPersonel
                bsr.w   forcepldata
                st      $18(a2)
                bclr    #7,(byte_FFC2FE).w
                st      $1A(a2)
                st      $1C(a2)
                rts
; End of function sub_137FC


sub_1381E:                              ; CODE XREF: ROM:000137F0   p
                                        ; ROM:loc_137F6   p
                move.w  $A(a0),d0
                cmp.w   $C(a0),d0
                bne.w   loc_13840
                move.w  (VDP_CNTR).l,d0
                andi.w  #1,d0
                add.w   d0,$A(a0)
                eori.w  #1,d0
                add.w   d0,$C(a0)
loc_13840:                              ; CODE XREF: sub_1381E+8   j
                move.w  #5,8(a0)
                rts
; End of function sub_1381E


sub_13848:                              ; CODE XREF: sub_1354C+E   p
                move.w  #$5BD,d0
                movea.w #(gmode-M68K_RAM),a1
                movea.l #$FFFF0000,a2
loc_13856:                              ; CODE XREF: sub_13848+10   j
                move.w  (a1)+,(a2)+
                dbf     d0,loc_13856
                move.w  (word_FFC472).w,(a2)+
                rts
; End of function sub_13848


sub_13862:                              ; CODE XREF: ROM:00013770   p
                                        ; ROM:loc_137EC   p
                move.w  #$5BD,d0
                movea.w #(gmode-M68K_RAM),a2
                movea.l #$FFFF0000,a1
loc_13870:                              ; CODE XREF: sub_13862+10   j
                move.w  (a1)+,(a2)+
                dbf     d0,loc_13870
                move.w  (a1)+,(word_FFC472).w
                rts
; End of function sub_13862
; ---------------------------------------------------------------------------


; d2 = new x coord
; d3 = new y coord
; a3 = struct of object
checkcoll:                              ; CODE XREF: updateplayers:_cc   p
                clr.w   (collflag).w
                btst    #7,(sflags).w   ; check if in horiz mode
                beq.w   _nhor1          ; branch if not horizontal
                exg     d2,d3
_nhor1:                                 ; CODE XREF: checkcoll+A   j
                btst    #2,$62(a3)      ; check if in no collision mode
                bne.w   _ex             ; branch if no collision
                movem.l d0-d7,-(sp)
                move.w  (a3),d2         ; Xpos
                move.w  $14(a3),d3      ; Ypos - check coll around hot spot with wall
                move.w  $4A(a3),(wcradiusx).w ; wall coll radius X
                move.w  $4C(a3),(wcradiusy).w ; wall coll radius Y
                bsr.w   checkwallcoll2
                move.w  $4E(a3),d0      ; wallcos
                or.w    $50(a3),d0      ; wallsin
                bne.w   _xx             ; coll didnt happen
                cmpi.w  #$B,$52(a3)     ; check if a3 is a player
                bgt.w   _xx             ; branch if not a player
                movem.l (sp),d0-d7
                move.l  a3,-(sp)
                bsr.w   GetHot
                move.w  (a3),d2         ; Xpos
                move.w  $14(a3),d3      ; Ypos
                add.w   d0,d2
                add.w   d1,d3           ; check coll around end of stick with wall
                move.w  #1,(wcradiusx).w
                move.w  #1,(wcradiusy).w
                bsr.w   checkwallcoll2
_xx:                                    ; CODE XREF: checkcoll+3C   j
                                        ; checkcoll+46   j
                movem.l (sp)+,d0-d7
                bsr.w   checkplcoll     ; check coll with other players
_ex:                                    ; CODE XREF: checkcoll+16   j
                tst.w   (collflag).w    ; now check order of sprites
                bne.w   _restoreold
                move.w  $52(a3),d0      ; SCnum
                asl.w   #1,d0           ; current object number
                movea.w #(OOlistpos-M68K_RAM),a0
                movea.w #(OOlist-M68K_RAM),a1
                movea.w #(Ylist-M68K_RAM),a2
                move.w  (a0,d0.w),d1    ; current objects pos in OOlist
_2:                                     ; CODE XREF: checkcoll+BC   j
                cmp.w   #$F,d1          ; Sortobjs-1
                beq.w   _cl2            ; is it top sprite on screen
                clr.w   d4
                move.b  1(a1,d1.w),d4   ; next higher object number
                cmp.w   (a2,d4.w),d3    ; YPos of next higher object
                ble.w   _cl2
                addq.w  #1,(a0,d0.w)
                subq.w  #1,(a0,d4.w)
                move.b  d4,(a1,d1.w)
                move.b  d0,1(a1,d1.w)
                addq.w  #1,d1
                bra.s   _2
; ---------------------------------------------------------------------------
_cl2:                                   ; CODE XREF: checkcoll+98   j
                                        ; checkcoll+A6   j
                move.w  (a0,d0.w),d1    ; current objects pos in OOlist
                beq.w   _ex2
_3:                                     ; CODE XREF: checkcoll+E6   j
                clr.w   d4
                move.b  -1(a1,d1.w),d4  ; next lower object number
                cmp.w   (a2,d4.w),d3    ; compare to Y pos of next lower object
                bge.w   _ex2
                subq.w  #1,(a0,d0.w)
                addq.w  #1,(a0,d4.w)
                move.b  d4,(a1,d1.w)
                move.b  d0,-1(a1,d1.w)
                subq.w  #1,d1
                bne.s   _3
_ex2:                                   ; CODE XREF: checkcoll+C2   j
                                        ; checkcoll+D0   j
                move.w  d3,(a2,d0.w)    ; update Ylist
                rts
; ---------------------------------------------------------------------------
_restoreold:                            ; CODE XREF: checkcoll+7A   j
                move.w  $1C(a3),(a3)    ; move OldXpos into Xpos
                move.w  $20(a3),$14(a3) ; move OldYpos into Ypos
                rts
; End of function checkcoll


; check collision with other players
; d2/d3 = x/y cords
; a3 = struct
checkplcoll:                            ; CODE XREF: checkcoll+72   p
                btst    #5,$63(a3)      ; check if in line change mode
                bne.w   _ex             ; branch if line change mode
                cmpi.w  #$B,$52(a3)     ; #11, SCnum
                bgt.w   _ex
                move.w  $52(a3),d0      ; SCnum
                asl.w   #1,d0           ; current object number
                movea.w #(OOlistpos-M68K_RAM),a0
                movea.w #(OOlist-M68K_RAM),a1
                movea.w #(Ylist-M68K_RAM),a2
                move.w  (a0,d0.w),d1    ; current objects pos in OOlist
_0:                                     ; CODE XREF: checkplcoll+4C   j
                cmp.w   #$F,d1          ; #sortobjs-1
                beq.w   _cl             ; it is top sprite on screen
                clr.w   d4
                move.b  1(a1,d1.w),d4   ; next higher object number
                move.w  (a2,d4.w),d5    ; y pos of next higher object
                sub.w   d3,d5
                cmp.w   #$10,d5         ; #collrad*2
                bgt.w   _cl             ; no higher sprite coll
                bsr.w   checkcx
                addq.w  #1,d1
                bra.s   _0
; ---------------------------------------------------------------------------
_cl:                                    ; CODE XREF: checkplcoll+2E   j
                                        ; checkplcoll+42   j
                move.w  (a0,d0.w),d1
                beq.w   _ex
_1:                                     ; CODE XREF: checkplcoll+70   j
                clr.w   d4
                move.b  -1(a1,d1.w),d4  ; next lower object number
                move.w  d3,d5
                sub.w   (a2,d4.w),d5    ; y pos of next lower object
                cmp.w   #$10,d5         ; #collrad*2
                bgt.w   _ex
                bsr.w   checkcx
                subq.w  #1,d1
                bne.s   _1
_ex:                                    ; CODE XREF: checkplcoll+6   j
                                        ; checkplcoll+10   j ...
                rts
; End of function checkplcoll


; d4 = obj. # * 2 for possible collision so check x range and distance for collision
;
; d2/d5 = x/y coords
checkcx:                                ; CODE XREF: checkplcoll+46   p
                                        ; checkplcoll+6A   p
                movem.l d0-d7/a0-a3,-(sp)
                asl.w   #6,d4           ; 6 = scsize-1
                movea.l #$FFFFB04A,a2   ; B04A = Start of player structs (SortCords)
                adda.w  d4,a2           ; add d4 to a2. a2 now address of SCStruct-1
                btst    #2,$62(a2)      ; test pfnc pflags = no collision mode
                bne.w   _exit           ; object has no collision mode on
                btst    #5,$63(a2)      ; pf2npc(pflags2) = another no collision mode
                bne.w   _exit           ; exit if no collision mode on
                cmpi.w  #$B,$52(a2)     ; comparing 11 with SCnum for player. Player SCnum are 0-11.
                bgt.w   _exit           ; not a player
                move.w  (a2),d0         ; Xpos
                btst    #7,(sflags).w   ; sfhor(sflags) = screen in horizontal mode
                beq.w   _nhor           ; branch if not in horiz mode
                move.w  $14(a2),d0      ; Ypos
_nhor:                                  ; CODE XREF: checkcx+34   j
                sub.w   d2,d0           ; subtract d2 from d0
                cmp.w   #$FFF0,d0       ; compare delta Xpos to -collrad*2
                blt.w   _exit           ; branch if less than
                cmp.w   #$10,d0         ; compare delta Xpos to collrad*2
                bgt.w   _exit           ; branch if greater than
                muls.w  d5,d5           ; delta y^2
                muls.w  d0,d0           ; delta x^2
                add.l   d5,d0
                cmp.l   #$100,d0        ; compare d0 to (collrad*2)*(collrad*2)
                bgt.w   _exit           ; branch if outside of radius
                move.w  #0,(evalue).w   ; evalue = elasticity value
                move.b  $62(a3),d6      ; move pflags into d6
                move.b  $62(a2),d0      ; move pflags into d0
                eor.b   d0,d6           ; xor d0 with d6
                move.w  $28(a3),d0      ; Now do momentum transfer from object a3 to object a2
                                        ; Xvel
                sub.w   $28(a2),d0      ; subtract Xvel a2 from Xvel a3 (Vx)
                move.w  $2A(a3),d1      ; Yvel
                sub.w   $2A(a2),d1      ; subtract Yvel a2 from Yvel a3 (Vy)
                move.w  (a3),d2         ; Xpos
                sub.w   (a2),d2         ; subtract Xpos of a2 from Xpos of a3
                neg.w   d2              ; Dx
                move.w  $14(a3),d3      ; Ypos
                sub.w   $14(a2),d3      ; subtract Ypos of a2 from Ypos of a3
                neg.w   d3              ; Dy
                movem.w d0-d1,-(sp)
                muls.w  d3,d1           ; Vy*Dy
                muls.w  d2,d0           ; Vx*Dx
                add.l   d0,d1           ; (Vy*Dy)+(Vx*Dx)
                bmi.w   _exit4          ; no collision if v1n < 0
                asr.l   #4,d1           ; divide by 8
                btst    #6,d6           ; pfteam(d6)
                beq.w   _not            ; players are on same team
                move.w  d1,d4
                lsr.w   #8,d4           ; divide by 128
                cmp.w   #5,d4
                bgt.w   _g40
                moveq   #5,d4           ; minimum impact value
_g40:                                   ; CODE XREF: checkcx+AE   j
                add.w   d4,$32(a3)      ; $32 = impact value
                add.w   d4,$32(a2)
                btst    #0,$63(a2)      ; pf2fight(pflags2)
                bne.w   _if
                move.w  $52(a3),$2E(a2) ; SCnum(a3), impactp(a2) = moves a3 SCnum into past impact player for a2
_if:                                    ; CODE XREF: checkcx+C2   j
                btst    #0,$63(a3)      ; pf2fight(pflags2)
                bne.w   _if2
                move.w  $52(a2),$2E(a3) ; SCnum(a2), impactp(a3) = moves a2 SCnum into past impact player for a3
_if2:                                   ; CODE XREF: checkcx+D2   j
                cmp.w   #$14,d4
                blt.w   _n1
                move.w  (puckc).w,d0
                cmp.w   $52(a3),d0      ; SCnum
                beq.w   _nc
                cmp.w   $52(a2),d0      ; SCNum
                bne.w   _n1
_nc:                                    ; CODE XREF: checkcx+EC   j
                bsr.w   newcheck
_n1:                                    ; CODE XREF: checkcx+E0   j
                                        ; checkcx+F4   j
                bsr.w   checkint
                bsr.w   checkcheck
                bsr.w   checkfight
_not:                                   ; CODE XREF: checkcx+A2   j
                move.w  d1,d4           ; d1 = V1n
                movem.w (sp)+,d0-d1
                tst.w   (collflag).w
                bmi.w   _exit
                muls.w  d2,d1           ; Vy*Dx
                muls.w  d3,d0           ; Vx*Dy
                sub.l   d1,d0           ; (Vx*Dy)-(Vy*Dx)
                asr.l   #4,d0
                move.w  d0,d5           ; V1t
                clr.w   d0
                move.b  $67(a3),d0      ; wgt, m1 in calc below
                addi.w  #$8C,d0
                clr.w   d1
                move.b  $67(a2),d1      ; wgt, m2 in calc below
                addi.w  #$8C,d1
                move.w  (evalue).w,d7   ; e*16 value (0-16)
                mulu.w  d1,d7
                lsr.w   #4,d7           ; m2*e
                add.w   d0,d1           ; m1+m2
                sub.w   d7,d0           ; (m1-m2*e)
                muls.w  d4,d0           ; V1n*(m1-m2*e)
                divs.w  d1,d0           ; V1n'=(V1n*(m1-m2*e))/(m1+m2)
                move.w  (evalue).w,d1
                muls.w  d4,d1           ; V1n*e
                asr.w   #4,d1
                add.w   d0,d1           ; V2n'=V1n'+V1n*e
                movem.w d2-d3,-(sp)     ; Save Dx,Dy
                muls.w  d5,d3           ; V1t'*Dy
                muls.w  d0,d2           ; V1n'*Dx
                add.l   d2,d3           ; V1t'*Dy+V1n'*Dx
                asr.l   #4,d3
                add.w   $28(a2),d3      ; Xvel
                move.w  d3,$28(a3)
                movem.w (sp),d2-d3      ; Restore Dx,Dy
                muls.w  d5,d2           ; V1t'*Dx
                muls.w  d0,d3           ; V1n'*Dy
                sub.l   d2,d3           ; V1n'*Dy-V1t'*Dx
                asr.l   #4,d3
                add.w   $2A(a2),d3      ; Yvel
                move.w  d3,$2A(a3)
                movem.w (sp)+,d2-d3     ; Pop d2 and d3 off stack
                muls.w  d1,d2           ; V2n'*Dx
                asr.l   #4,d2
                add.w   d2,$28(a2)      ; Xvel
                muls.w  d1,d3           ; V2n'*Dy
                asr.l   #4,d3
                add.w   d3,$2A(a2)      ; Yvel
                st      (collflag).w
_exit:                                  ; CODE XREF: checkcx+14   j
                                        ; checkcx+1E   j ...
                movem.l (sp)+,d0-d7/a0-a3
                rts
; ---------------------------------------------------------------------------
_exit4:                                 ; CODE XREF: checkcx+98   j
                addq.w  #4,sp
                bra.s   _exit
; End of function checkcx


; Start a new check sound
newcheck:                               ; CODE XREF: checkcx:_nc   p
                                        ; FallDown+38C   j ...
                move.l  d0,-(sp)
                moveq   #3,d0
                bsr.w   randomd0
                addq.w  #1,d0
                add.w   (ltack).w,d0
                andi.w  #3,d0
                move.w  d0,(ltack).w
                addi.w  #$1C,d0
                move.w  d0,-(sp)
                bsr.w   sfx
                move.l  (sp)+,d0
                rts
; End of function newcheck


; Check for interference penalty
; player a2 interferes with a3 or vice-versa
; goalie is only player who can cause an interference call
checkint:                               ; CODE XREF: checkcx:_n1   p
                move.l  d0,-(sp)
                bsr.w   checkint_ci
                exg     a2,a3
                bsr.w   checkint_ci
                exg     a2,a3
                move.l  (sp)+,d0
                rts
; End of function checkint


; a3 = player interfering with goalie
checkint_ci:                            ; CODE XREF: checkint+2   p
                                        ; checkint+8   p
                tst.w   $34(a2)         ; test for goalie
                bne.w   rtss2           ; exits if not goalie
                btst    #0,(gmode).w    ; test gmclock(gmode). Is there play
                bne.w   rtss2           ; no fall downs during celebration
                move.w  (puckc).w,d0    ; Puck carrier's SCnum
                cmp.w   $52(a3),d0      ; SCnum of this struct
                beq.w   _minimpact      ; jump if a3 carrying puck
                cmpi.w  #$19,$32(a3)    ; compare $19 to impact
                ble.w   rtss2           ; exit if less than or equal
_minimpact:                             ; CODE XREF: checkint_ci+1A   j
                cmpi.w  #2,$32(a3)      ; compare 2 to impact
                ble.w   rtss2           ; exit if impact is less than 2
                exg     a2,a3
                bsr.w   FallDown
                exg     a2,a3
                cmpi.w  #$1E,$32(a2)    ; compare 30 decimal to impact
                ble.w   rtss2           ; exit if impact is less than 30 decimal
                btst    #4,$63(a3)      ; pf2pen(pflags2) - Check if player already committed a penalty
                bne.w   rtss2           ; exit if player is already penalized
                tst.w   $34(a2)         ; test if goalie
                bne.w   rtss2           ; double check to make sure player is goalie
                move.w  #1,d0           ; set d0 to team1 value
                btst    #6,$62(a3)      ; check if home or away
                beq.w   _control        ; jump if home (team1)
                move.w  #2,d0           ; set d0 to team2 value
_control:                               ; CODE XREF: checkint_ci+60   j
                cmp.w   (cont1team).w,d0 ; cont1team: 0= none, 1=team1, 2=team2
                beq.w   _playercont     ; branch if on player 1's team
                cmp.w   (cont2team).w,d0 ; check if on player 2's team
                bne.w   _checky         ; branch if controlled by CPU
_playercont:                            ; CODE XREF: checkint_ci+6C   j
                btst    #3,$62(a3)      ; pfjoycon - check if player controlled
                beq.w   rtss2           ; exit if not player controlled
_checky:                                ; CODE XREF: checkint_ci+74   j
                move.w  $14(a2),d0      ; Ypos
                btst    #7,$62(a2)      ; pfgoal - 0 shooting bottom, 1 shooting top
                beq.w   _checkcrease
                neg.w   d0              ; negative d0 if shooting bottom
_checkcrease:                           ; CODE XREF: checkint_ci+8C   j
                cmp.w   #$EF,d0         ; compare to Ypos. Looks like it compares to both ends of crease
                blt.w   rtss2
                cmp.w   #$10A,d0
                bgt.w   rtss2
                move.w  (a2),d0         ; Xpos
                cmp.w   #$14,d0         ; compare Xpos to goalpost
                bgt.w   rtss2
                cmp.w   #$FFEC,d0       ; compare Xpos to goalpost
                blt.w   rtss2
                move.w  #$28,d0 ; '('
                sub.b   $73(a3),d0      ; aggres
                bsr.w   randomd0
                cmp.w   #4,d0           ; d0 = RNG(28-aggres)
                bhi.w   rtss2
                btst    #4,(gmode).w    ; Check if highlight, exit if so
                bne.w   rtss2
                move.l  #$22,d0 ; '"'   ; Interference Penalty
                bra.w   AddPenalty
; End of function checkint_ci


; player is in contact
; look for various contact events
checkcheck:                             ; CODE XREF: checkcx+100   p
                movem.l d0-d4/a0-a3,-(sp)
                bsr.w   CCStart
                exg     a2,a3
                bsr.w   CCStart
                movem.l (sp)+,d0-d4/a0-a3
                rts
; End of function checkcheck


CCStart:                                ; CODE XREF: checkcheck+4   p
                                        ; checkcheck+A   p
                cmpi.w  #$C90,$58(a2)
                beq.w   holdcheck
                cmpi.w  #$1122,$58(a2)
                beq.w   holdcheck
                cmpi.w  #$B24,$58(a2)   ; B check animation
                beq.w   Bcheck
                cmpi.w  #$C5E,$58(a3)   ; $C5E = Speed Burst anim.?
                bne.w   rtss2
                btst    #0,(gmode).w    ; checks gmclock flag in gmode bit
                beq.w   _nofight
                move.w  #$100,$32(a3)   ; $32 = impact (impact value)
                                        ; Used in 92 to start fights.
                                        ; This code is for after a whistle
                move.w  #$100,$32(a2)
_nofight:                               ; CODE XREF: CCStart+2E   j
                move.w  (a2),d0         ; This part of code determines the sprite to use during checking
                                        ; Xpos a2
                sub.w   (a3),d0         ; Xpos a3
                move.w  $14(a2),d1      ; Ypos a2
                sub.w   $14(a3),d1      ; Ypos a3
                bsr.w   vtoa
                sub.w   $54(a3),d0      ; facedir a3
                andi.w  #7,d0
                btst    #3,4(a3)        ; check attribute xflip?
                beq.w   _0
                neg.w   d0
                addq.w  #8,d0
                andi.w  #7,d0
_0:                                     ; CODE XREF: CCStart+5C   j
                asl.w   #1,d0           ; Sets the sprite animation
                lea     checkinglist(pc),a0 ; loads address of check list into a0
                move.w  (a0,d0.w),d1    ; moves check anim. value into d1, based on d0 offset
                bset    #5,$62(a3)      ; pfalock - lock until animation done
                bsr.w   SetSPA
                tst.w   $34(a2)         ; check if a2 is goalie
                beq.w   rtss2
                cmp.w   #$14,d4         ; d4 = impact value
                blt.w   rtss2
                moveq   #$78,d0 ; 'x'   ; NHL92 uses 60 decimal, this is 120 decimal (most likely due to change in attribute math)
                btst    #3,$62(a3)      ; checks if player a3 is player controlled
                beq.w   CheckingCalc
PlayerControlled:                       ; changes d0 from 120 to 240
                asl.w   #1,d0
CheckingCalc:                           ; CODE XREF: CCStart+94   j
                sub.b   $67(a3),d0      ; subtract wgt of a3 player from d0. a3 is player checking.
                add.b   $67(a2),d0      ; add wgt of a2 player to d0
                lsr.w   #1,d0           ; shift d0 1 right word length (divide by 2)
                exg     a2,a3           ; swap addresses in a2 and a3 registers
                jsr     (wallcollduringcheck).l
                exg     a2,a3
                sub.w   $32(a2),d0      ; subtract impact value of player getting checked (a2)
                beq.w   _down           ; If result=0, branch
                bmi.w   _down           ; If result was neg., branch
                btst    #4,$64(a3)      ; wall collision bit
                bne.w   _down           ; branch if bit set
                bsr.w   randomd0        ; d0 is the RNG range.
                                        ; Result will be in d0 (0 <= d0 < range)
                clr.w   (word_FFBF12).w
                move.b  $75(a3),(word_FFBF12+1).w ; $75 is Chk attrib. in player struct
                lsr     (word_FFBF12).w ; Shift right 1 bit
                cmp.b   (word_FFBF12+1).w,d0 ; d0 - Chk rating / 2
                ble.w   _down           ; branch if d0 less than FFBF13
                bsr.w   checkagr
                cmp.w   #4,d0
                bhi.w   rtss2
                btst    #4,(gmode).w    ; checks if highlight
                bne.w   rtss2
                move.b  (VDP_CNTR).l,d0 ; HVcount
                andi.w  #2,d0
                addi.w  #$16,d0         ; #PenCharging
                jsr     (PenShotChk).l
                bra.w   AddPenalty
; ---------------------------------------------------------------------------
_down:                                  ; CODE XREF: CCStart+B2   j
                                        ; CCStart+B6   j ...
                bsr.w   checkagr
                cmp.w   #3,d0
                bhi.w   _dn2
                btst    #4,(gmode).w    ; checks if highlight
                bne.w   _dn2
                move.b  (VDP_CNTR).l,d0 ; HVcount
                andi.w  #2,d0
                addi.w  #$1A,d0         ; #PenRoughing2
                jsr     (PenShotChk).l
                bsr.w   AddPenalty
_dn2:                                   ; CODE XREF: CCStart+114   j
                                        ; CCStart+11E   j
                bra.w   FallDown
; End of function CCStart
; ---------------------------------------------------------------------------
checkinglist:   dc.w $B96               ; DATA XREF: CCStart+6A   o
                                        ; SPAshoulderchkl
                dc.w $BC8               ; SPAshoulderchkr
                dc.w $C2C               ; SPAhipchkr
                dc.w $C2C               ; SPAhipchkr
                dc.w $C2C               ; SPAhipchkr
                dc.w $BFA               ; SPAhipchkl
                dc.w $BFA               ; SPAhipchkl
                dc.w $B96               ; SPAshoulderchkl


; Use Agression attribute and RNG to determine if there will be a penalty
;
; a3 = checking player
; a2 = player being checked
checkagr:                               ; CODE XREF: CCStart+DE   p
                                        ; CCStart:_down   p ...
                move.w  #$28,d0 ; '('   ; Start calculation with 40 decimal (28 hex)
                sub.b   $73(a3),d0      ; Agr(a3) - subtract Agr from d0
                lsr.b   #1,d0           ; divide result by 2
                mulu.w  #$D,d0          ; multiply d0 with 13 decimal
                btst    #3,$62(a3)      ; test if player controlled
                beq.w   _checkpos       ; branch if CPU player
                asl.w   #1,d0           ; multiply by 2
_checkpos:                              ; CODE XREF: checkagr+14   j
                move.w  (a3),d1         ; XPos
                sub.w   (puckx).w,d1    ; subtract x pos of puck with X pos of player
                cmp.w   #$28,d1 ; '('   ; Checking position with respect to puck
                bgt.w   _random         ; if d1 is greater than 28 hex (40 dec), jump
                cmp.w   #$FFD8,d1       ; checking the inverse position (other side of rink)
                blt.w   _random
                move.w  $14(a3),d1      ; Ypos
                sub.w   (pucky).w,d1
                cmp.w   #$28,d1 ; '('   ; same as above
                bgt.w   _random
                cmp.w   #$FFD8,d1       ; checking the inverse position (other side of rink)
                blt.w   _random
                asr.w   #1,d0           ; divide by 2
_random:                                ; CODE XREF: checkagr+24   j
                                        ; checkagr+2C   j ...
                bsr.w   randomd0
                btst    #1,$64(a2)      ; Check for player on breakaway
                beq.w   _teamchk        ; branch if bit is 0
                move.w  $14(a2),d1      ; Ypos of player being checked
                bpl.w   _calc           ; will jump if Ypos is positive
                neg.w   d1              ; flip result (other side of rink)
_calc:                                  ; CODE XREF: checkagr+5C   j
                subi.w  #$108,d1        ; subtract from Ypos
                neg.w   d1              ; flip Y pos
                move.w  #8,d0           ; move 8 into d0. Removes any trace of Agr here
                cmp.w   #$75,d1 ; 'u'   ; compares Ypos calc to 75 hex
                bgt.w   _rand2          ; branch if higher than 75 hex
                move.w  #7,d0           ; move 7 into d0
                cmp.w   #$3A,d1 ; ':'   ; compare 3A hex to Ypos calc
                bgt.w   _rand2          ; jump if higher than 3A hex
                move.w  #4,d0           ; moves 4 into d0
                cmp.w   #$2C,d1 ; ','   ; compares 2C hex to Ypos calc
                bgt.w   _rand2          ; jump if higher than 2C hex
                move.w  #3,d0           ; finally, just move 3 in d0
_rand2:                                 ; CODE XREF: checkagr+70   j
                                        ; checkagr+7C   j ...
                bsr.w   randomd0
_teamchk:                               ; CODE XREF: checkagr+54   j
                btst    #6,$62(a3)      ; checks if home or away team
                bne.w   _away
                btst    #2,(byte_FFC300).w ; check if away team has a penalty called
                bne.w   _nopen
                bra.w   _end
; ---------------------------------------------------------------------------
_away:                                  ; CODE XREF: checkagr+9A   j
                btst    #1,(byte_FFC300).w ; check if home team has penalty called
                beq.w   _end
_nopen:                                 ; CODE XREF: checkagr+A4   j
                move.w  #$7F,d0
_end:                                   ; CODE XREF: checkagr+A8   j
                                        ; checkagr+B2   j
                rts
; End of function checkagr


; player a2 is in hold animation looking to hold opponent a3
holdcheck:                              ; CODE XREF: CCStart+6   j
                                        ; CCStart+10   j
                btst    #5,$62(a3)      ; #pfalock - locked animation
                bne.w   rtss2
                tst.w   $34(a3)         ; position - no hold on goalies
                beq.w   rtss2
                btst    #0,$63(a3)      ; #pf2fight - no hold on fighters
                bne.w   rtss2
                move.w  (a3),d0         ; Xpos a3
                sub.w   (a2),d0         ; Xpos a2
                move.w  $14(a3),d1      ; Ypos a3
                sub.w   $14(a2),d1      ; Ypos a2
                bsr.w   vtoa
                sub.w   $54(a2),d0      ; facedir(a2)
                addq.w  #1,d0
                andi.w  #7,d0
                cmp.w   #2,d0
                bhi.w   rtss2
                move.w  (puckc).w,d0
                cmp.w   $52(a3),d0
                bne.w   _holdcheck?
                bclr    #3,(sflags).w
_holdcheck?:                            ; CODE XREF: holdcheck+46   j
                move.w  $28(a3),d0      ; Xvel(a3)
                add.w   $28(a2),d0      ; Xvel(a2)
                asr.w   #1,d0
                move.w  d0,$28(a3)
                move.w  d0,$28(a2)
                move.w  $2A(a3),d0      ; Yvel(a3)
                add.w   $2A(a2),d0      ; Yvel(a2)
                asr.w   #1,d0
                move.w  d0,$2A(a3)
                move.w  d0,$2A(a2)
                bset    #5,$62(a3)      ; pfalock
                move.w  #$CF4,d1        ; SPAFlail
                bsr.w   SetSPA
                exg     a2,a3
                bset    #5,$62(a3)      ; pfalock
                move.w  #$CC2,d1        ; SPAHold2
                cmpi.w  #$C90,$58(a3)
                beq.w   _setanimation
                move.w  #$1154,d1
_setanimation:                          ; CODE XREF: holdcheck+94   j
                bsr.w   SetSPA
                bsr.w   checkagr
                cmp.w   #6,d0
                bhi.w   _ex
                btst    #4,(gmode).w    ; check for highlight
                bne.w   _ex
                move.w  #$24,d0 ; '$'   ; #PenHooking?
                cmpi.w  #$CC2,$58(a3)   ; #SPAHold2, SPA
                beq.w   _addpen
                move.w  #$1E,d0         ; #PenHolding
_addpen:                                ; CODE XREF: holdcheck+C0   j
                jsr     (PenShotChk).l
                bsr.w   AddPenalty
_ex:                                    ; CODE XREF: holdcheck+A8   j
                                        ; holdcheck+B2   j
                exg     a2,a3
                st      (collflag).w
                rts
; End of function holdcheck


; a3 = player being checked
; a2 = player that is B checking
Bcheck:                                 ; CODE XREF: CCStart+1A   j
                btst    #5,$62(a3)      ; check if locked in animation
                bne.w   rtss2           ; exit if locked
                tst.w   $34(a3)         ; check if goalie
                beq.w   rtss2           ; exit if goalie
                btst    #0,$63(a3)      ; is player fighting?
                bne.w   rtss2           ; exit if fighting
                tst.w   (OptPen).w      ; check for penalties
                bne.w   _checkdir       ; Branch if penalties
                btst    #3,$62(a2)      ; check if player controlled
                beq.w   _checkdir       ; branch if not
                move.w  #$20,d0 ; ' '   ; 20 hex starting value
                add.b   $75(a2),d0      ; add Chk of player B checking
                sub.b   $68(a3),d0      ; sub Agl of player being checked
                btst    #1,(byte_FFC2FE).w
                bne.w   _sub2
                btst    #6,(byte_FFC2FC).w
                beq.w   _rnd
_sub2:                                  ; CODE XREF: Bcheck+40   j
                subq.b  #2,d0           ; sub 2 from d0
_rnd:                                   ; CODE XREF: Bcheck+4A   j
                bsr.w   randomd0
                cmp.w   #$18,d0
                blt.w   rtss2           ; if less than, unsuccessful B check
_checkdir:                              ; CODE XREF: Bcheck+20   j
                                        ; Bcheck+2A   j
                move.w  (a3),d0         ; Xpos a3
                sub.w   (a2),d0         ; sub Xpos a2 from Xpos a3
                move.w  $14(a3),d1      ; Ypos a3
                sub.w   $14(a2),d1      ; sub Ypos a2 from Ypos a3
                bsr.w   vtoa
                sub.w   $54(a2),d0      ; sub facedir from d0
                addq.w  #1,d0
                andi.w  #7,d0           ; pass first 3 bits of d0
                cmp.w   #2,d0
                bhi.w   rtss2           ; exit if higher than 2
                exg     a2,a3
                bsr.w   FallDown
                bsr.w   checkagr
                cmp.w   #4,d0
                bhi.w   _exit
                move.w  #$20,d0 ; ' '   ; Tripping
                jsr     (PenShotChk).l
                bsr.w   AddPenalty
_exit:                                  ; CODE XREF: Bcheck+8C   j
                exg     a2,a3
                st      (collflag).w
                rts
; End of function Bcheck


; player a2 falls down
; player a3 is the hitting player
FallDown:                               ; CODE XREF: checkint_ci+34   p
                                        ; CCStart:_dn2   j ...
                cmpi.w  #$B,$52(a2)     ; 0-11 are player structs
                bgt.w   rtss2           ; exit if not a player struct
                cmpi.w  #$145C,$58(a2)  ; checks various animations and exits if one of them
                beq.w   rtss2
                cmpi.w  #$1AF4,$58(a2)
                beq.w   rtss2
                cmpi.w  #$11E6,$58(a2)
                beq.w   rtss2
                cmpi.w  #$D26,$58(a2)
                beq.w   rtss2
                cmpi.w  #$DD8,$58(a2)
                beq.w   rtss2
                cmpi.w  #$136A,$58(a2)
                beq.w   rtss2
                cmpa.l  (PlayerChked).w,a2 ; compared to previous player checked
                bne.w   _cont           ; branch if not the same
                cmpa.l  (PlayerChking).w,a3 ; compares a3 to previous player checking
                bne.w   _cont           ; branch if not the same
                rts                     ; exit if both players are the same as last Fall Down attempt
; ---------------------------------------------------------------------------
_cont:                                  ; CODE XREF: FallDown+4A   j
                                        ; FallDown+52   j
                move.l  a2,(PlayerChked).w ; player checked
                move.l  a3,(PlayerChking).w ; player checking
                btst    #3,$64(a2)      ; is player a2 doing a one-timer
                bne.w   rtss2           ; exit if yes
                btst    #3,$64(a3)      ; Is player a3 doing a one-timer
                bne.w   rtss2           ; exit if yes
                move.w  #$11E6,d1       ; toddle animation?
                btst    #4,$64(a3)      ; wall collision bit
                bne.w   _cont2          ; jump if hitting wall
CmpPlayerStk:                           ; a2's Stk value. Compares to 18 (24 decimal)
                cmpi.b  #$18,$71(a2)    ; Start of toddle check
                blt.w   _cont2          ; jump if less than
                tst.b   $5F(a2)         ; check if puck collision possible
                bne.w   _cont2          ; jump if not
                move.w  (VDP_CNTR).l,d0 ; frame counter
                andi.w  #$F,d0          ; pass 1st byte of d0
                addi.w  #$10,d0         ; add 10 hex to d0
                cmp.w   $32(a2),d0      ; compare impact value to d0.
                                        ; d0 will be 10-1F hex (16-31 decimal)
                ble.w   _cont2          ; no toddle if d0 <= impact
                move.b  #$3C,$5F(a2) ; '<' ; move 3C (60 decimal) into nopuck
                bra.w   _2
; ---------------------------------------------------------------------------
_cont2:                                 ; CODE XREF: FallDown+7E   j
                                        ; FallDown+88   j ...
                tst.w   $34(a3)         ; check for goalie
                beq.w   _chkpos         ; jump if goalie
                movea.w #(HmShots-M68K_RAM),a0 ; Start of Home Team Stats Struct
                btst    #6,$62(a3)
                beq.w   AddChktoPlayerStats
                adda.w  #$364,a0        ; Change to Away Team Stats
AddChktoPlayerStats:                    ; CODE XREF: FallDown+C6   j
                addq.w  #1,$10(a0)      ; Add 1 Chk to Team Total
                clr.w   d0
                move.b  $66(a3),d0      ; Index of Player
                adda.w  d0,a0
                addq.b  #1,$11C(a0)     ; Add 1 Chk to Player Stats
                addq.w  #1,(word_FFC46E).w
                tst.b   $74(a3)         ; checks fight attribute?
                bne.w   _chkpos         ; jump if fight attribute not 0
                addq.w  #2,(word_FFC46E).w
_chkpos:                                ; CODE XREF: FallDown+B8   j
                                        ; FallDown+E6   j
                move.b  #$78,$5E(a2) ; 'x'
                move.w  (a3),d0         ; Xpos
                sub.w   (a2),d0         ; sub Xpos
                move.w  $14(a3),d1      ; Ypos
                sub.w   $14(a2),d1      ; sub Ypos
                bsr.w   vtoa
                tst.w   $34(a2)         ; check if goalie a2
                beq.w   loc_14378       ; branch if goalie
                jsr     (wallcollduringcheck).l ; check for wall collision
                btst    #4,$64(a2)      ; check wall collision bit
                beq.w   loc_14378       ; jump if not collision
                movem.l d1-d4,-(sp)
                move.w  $28(a2),d1      ; move Xvel into d1
                bpl.w   _yvel           ; branch if positive
                neg.w   d1              ; negate d1
_yvel:                                  ; CODE XREF: FallDown+124   j
                move.w  $2A(a2),d2      ; move Yvel into d2
                bpl.w   _chkpos2        ; branch if positive
                neg.w   d2              ; negate d2
_chkpos2:                               ; CODE XREF: FallDown+12E   j
                move.w  (a2),d3         ; Xpos of player into d3
                sub.w   (a3),d3         ; sub Xpos of checker
                move.w  $14(a2),d4      ; Ypos of player into d4
                sub.w   $14(a3),d4      ; sub Ypos of checker
                cmpi.w  #$108,$14(a3)   ; compare Ypos of a3 to top goal line
                bgt.w   _bnet1          ; branch if behind net
                cmpi.w  #$FEF8,$14(a3)  ; compare to bottom goal line Y
                blt.w   _bnet2          ; branch if behind net
                tst.w   (a3)            ; In between goal lines
                                        ; Check Xpos of checker
                bpl.w   _posx           ; branch if positive (right side of center)
                tst.w   d3              ; check diff of Xpos
                bpl.w   _chktowardcenterice ; branch if positive (player to right of checker)
                cmp.w   #$FFFD,d3       ; comp diff of Xpos with -3
                bgt.w   _chktowardcenterice ; branch if greater than
                bra.w   _chkawayfromcenterice ; player to left of checker
; ---------------------------------------------------------------------------
_posx:                                  ; CODE XREF: FallDown+156   j
                tst.w   d3              ; check diff of Xpos
                bmi.w   _chktowardcenterice ; branch if negative (player to left of checker)
                cmp.w   #3,d3           ; comp diff of Xpos with 3
                blt.w   _chktowardcenterice ; branch if less than
                bra.w   _chkawayfromcenterice ; player to right of checker
; ---------------------------------------------------------------------------
_bnet2:                                 ; CODE XREF: FallDown+150   j
                tst.w   d4              ; check diff of Ypos
                bpl.w   _chktowardcenterice ; branch if positive
                                        ; player higher than checker
                bra.w   _chkawayfromcenterice ; player lower than checker
; ---------------------------------------------------------------------------
_bnet1:                                 ; CODE XREF: FallDown+146   j
                tst.w   d4              ; check diff of Ypos
                bmi.w   _chktowardcenterice ; branch if negative
                                        ; player lower than checker
                bra.w   _chkawayfromcenterice ; player higher than checker
; ---------------------------------------------------------------------------
_chktowardcenterice:                    ; CODE XREF: FallDown+15C   j
                                        ; FallDown+164   j ...
                movem.l (sp)+,d1-d4
                bra.w   loc_14378
; ---------------------------------------------------------------------------
_chkawayfromcenterice:                  ; CODE XREF: FallDown+168   j
                                        ; FallDown+17A   j ...
                movem.l (sp)+,d1-d4     ; pop from stack
                bra.w   *+4
; ---------------------------------------------------------------------------
_playerpos:                             ; CODE XREF: FallDown+19E   j
                cmpi.w  #$10C,$14(a2)   ; Ypos player
                                        ; check if player is above top goal line
                bgt.w   _chkawayfrommiddle ; branch if above
                cmpi.w  #$FEF4,$14(a2)  ; Check if player is below bottom goal line
                blt.w   _chkawayfrommiddle ; branch if below
                cmpi.w  #$68,(a2) ; 'h' ; Xpos player
                                        ; check if right of crease?
                bgt.w   _chkawayfrommiddle ; branch if to the right
                cmpi.w  #$FF98,(a2)     ; check if left of crease?
                blt.w   _chkawayfrommiddle ; branch if to the left
                bra.w   loc_14378       ; right of crease
; ---------------------------------------------------------------------------
_chkawayfrommiddle:                     ; CODE XREF: FallDown+1A8   j
                                        ; FallDown+1B2   j ...
                cmpi.w  #$B,$52(a3)     ; check if SCNum is a player
                bgt.w   loc_14264       ; branch if not player
                addi.w  #$A,(CwdExciteLvl).w
                addi.w  #$96,(crowdlevel).w
                move.w  d1,-(sp)        ; push to stack
                move.b  #0,$40(a3)      ; clear temp1
                move.b  #0,$65(a3)      ; clear glitch
                move.w  #$1AC2,d1
                jsr     (SetSPA).l      ; set animation
                clr.w   $28(a3)         ; clear Xvel
                clr.w   $2A(a3)         ; clear Yvel
                move.w  (sp)+,d1        ; pop from stack
loc_14264:                              ; CODE XREF: FallDown+1D0   j
                movem.l d0/a0,-(sp)     ; push to stack
                cmpi.w  #$10C,$14(a2)   ; check player Ypos with top goal line
                bgt.w   _playerabovetopgoalline ; branch if above
                cmpi.w  #$FEF4,$14(a2)  ; check player Ypos with bottom goal line
                blt.w   _playerbelowbottomgoalline ; branch if below
                tst.w   (a2)            ; test player Xpos
                bmi.w   _playerleftofcenter ; branch if negative
                move.w  #2,d0           ; player right of center
                bra.w   _getchkanim
; ---------------------------------------------------------------------------
_playerleftofcenter:                    ; CODE XREF: FallDown+21C   j
                move.w  #6,d0
                bra.w   _getchkanim
; ---------------------------------------------------------------------------
_playerabovetopgoalline:                ; CODE XREF: FallDown+20C   j
                move.w  #0,d0
                bra.w   _getchkanim
; ---------------------------------------------------------------------------
_playerbelowbottomgoalline:             ; CODE XREF: FallDown+216   j
                move.w  #4,d0
_getchkanim:                            ; CODE XREF: FallDown+224   j
                                        ; FallDown+22C   j ...
                add.w   d0,d0
                movea.l #FallList,a0
                move.w  (a0,d0.w),d1    ; move animation from list into d1
                move.w  $14(a2),(FallYPos).w
                move.w  (a2),(FallXPos).w
                cmp.w   #$18CC,d1       ; player left of center
                bne.w   loc_142F4       ; branch if not
                cmpi.w  #$59,$14(a2) ; 'Y' ; compare $59 to Ypos
                bgt.w   loc_142F4       ; branch if higher
                cmpi.w  #$FFA7,$14(a2)  ; compare -$59 to Ypos
                blt.w   loc_142F4       ; branch if lower
                move.w  d0,-(sp)
                move.w  #7,d0
                jsr     (sub_FE510).l
                move.w  (sp)+,d0
                move.w  #$193E,d1       ; anim value
                btst    #3,4(a2)
                beq.w   loc_1434C
                move.w  #$1A00,d1
                bra.w   loc_1434C
; ---------------------------------------------------------------------------
loc_142F4:                              ; CODE XREF: FallDown+256   j
                                        ; FallDown+260   j ...
                cmp.w   #$17E8,d1       ; player right of center
                bne.w   loc_14326       ; branch if not
                cmpi.w  #$38,$14(a2) ; '8' ; compare $38 to Ypos
                bgt.w   loc_14326       ; branch if higher
                cmpi.w  #$FFC8,$14(a2)  ; compare -38 to Ypos
                blt.w   loc_14326       ; branch if lower
                move.w  #$1A00,d1       ; change anim value
                btst    #3,4(a2)        ; check bit 3 of frame
                beq.w   loc_1434C       ; branch if zero
                move.w  #$193E,d1       ; change anim value
                bra.w   loc_1434C
; ---------------------------------------------------------------------------
loc_14326:                              ; CODE XREF: FallDown+296   j
                                        ; FallDown+2A0   j ...
                btst    #3,4(a2)        ; check bit 3 of frame
                beq.w   loc_1434C       ; branch if zero
                cmp.w   #$17E8,d1       ; right of center
                beq.w   loc_14348       ; branch if right of center
                cmp.w   #$18CC,d1       ; left of center
                bne.w   loc_1434C       ; branch if not left of center
                move.w  #$17E8,d1       ; change anim to same as right of center
                bra.w   loc_1434C
; ---------------------------------------------------------------------------
loc_14348:                              ; CODE XREF: FallDown+2D2   j
                move.w  #$18CC,d1       ; change anim
loc_1434C:                              ; CODE XREF: FallDown+286   j
                                        ; FallDown+28E   j ...
                clr.w   $28(a2)         ; clear Xvel
                clr.w   $2A(a2)         ; clear Yvel
                bset    #5,$64(a2)      ; set falldown bit
                bset    #0,$62(a2)      ; set pfdoff (deceleration)
                movem.l (sp)+,d0/a0     ; pop from stack
                bra.w   loc_14392
; ---------------------------------------------------------------------------
FallList:                               ; DATA XREF: FallDown+23E   o
                dc.w $1776
                dc.w $1776
                dc.w $17E8
                dc.w $17E8
                dc.w $185A
                dc.w $185A
                dc.w $18CC
                dc.w $18CC
; ---------------------------------------------------------------------------
loc_14378:                              ; CODE XREF: FallDown+108   j
                                        ; FallDown+118   j ...
                move.w  #$DD8,d1
                sub.w   $54(a2),d0      ; facedir
                addq.w  #1,d0
                andi.w  #7,d0
                cmp.w   #2,d0
                bls.w   _2
                move.w  #$D26,d1
loc_14392:                              ; CODE XREF: FallDown+302   j
                move.w  $54(a2),d0      ; facedir
                andi.w  #3,d0
                bne.w   _2              ; branch if first 2 bits of d0 arent zero
                cmpi.b  #$14,$75(a3)    ; compare $14 to checker Chk attribute
                blt.w   _2              ; branch if less than
                cmpi.w  #$B,$52(a3)     ; check if SCNum of checker is a player
                bgt.w   _2              ; branch if not
                btst    #5,$64(a2)      ; check if falldown bit is set for player
                bne.w   _2              ; branch if set
                move.w  #$136A,d1       ; move anim into d1
_2:                                     ; CODE XREF: FallDown+B0   j
                                        ; FallDown+328   j ...
                exg     a2,a3           ; swap a2 and a3
                bset    #5,$62(a3)      ; set animation lock
                bsr.w   SetSPA          ; set animation with d1 value
                exg     a2,a3           ; swap back a2 and a3
                tst.w   $34(a3)         ; check if checking player is goalie
                beq.w   _21             ; jump if goalie
                tst.w   $34(a2)         ; check if player checked is goalie
                beq.w   _21             ; jump if goalie
                addi.w  #$12C,(crowdlevel).w ; add to crowd level
                addi.w  #$F,(CwdExciteLvl).w ; add to crowd excite level
_21:                                    ; CODE XREF: FallDown+370   j
                                        ; FallDown+378   j
                move.w  (puckc).w,d0    ; move puck carrier SCNum into d0
                bmi.w   newcheck        ; make check sound
                cmp.w   $52(a2),d0      ; check if puck carrier is a2
                bne.w   newcheck
                st      (puckc).w       ; clear out puck carrier
                btst    #4,(gmode).w    ; check if highlight
                bne.w   _22             ; jump if highlight
                cmpi.w  #$DD8,$58(a2)   ; check animation
                bne.w   _22             ; jump if not equal
                move.w  $54(a2),d0      ; facedir into d0
                andi.w  #3,d0           ; pass first 2 bits of d0
                bne.w   _22
                btst    #4,$63(a2)      ; check if player is unavailable
                bne.w   _22             ; jump if unavailable
                move.l  #$A0,d0
                bsr.w   randomd0
                cmp.w   $32(a2),d0      ; compare impact to d0
                bgt.w   _22             ; jump if d0 higher than impact
                btst    #0,(gmode).w    ; check if clock running
                bne.w   _22             ; jump if not
                exg     a2,a3
                move.w  #$145C,d1       ; set injury animation
                bsr.w   SetSPA
                exg     a2,a3
                bsr.w   setInjuryType
                btst    #5,(byte_FFC2FC).w ; check if game injury
                bne.w   loc_1446A       ; branch if game injury
                exg     a2,a3
                move.w  #$1AF4,d1       ; set injury animation
                bsr.w   SetSPA
                exg     a2,a3
loc_1446A:                              ; CODE XREF: FallDown+3F8   j
                move.w  #4,(word_FFC3EC).w
                move.l  #$14,d0         ; move 14 into d0 - Pen ???
                tst.w   $34(a3)         ; check if a3 goalie
                beq.w   AddPenalty2     ; jump if goalie
                tst.w   (OptPen).w      ; check penalties
                beq.w   AddPenalty2     ; jump if off
                move.l  #$12,d0         ; Pen Roughing
                bsr.w   AddPenalty2
                bra.w   Stop4Pen
; ---------------------------------------------------------------------------
_22:                                    ; CODE XREF: FallDown+3A2   j
                                        ; FallDown+3AC   j ...
                move.w  #$B,-(sp)       ; #SFXcrowdcheer
                btst    #6,$62(a2)      ; check team
                bne.w   _3              ; jump if away team
                move.w  #$C,(sp)        ; #SFXcrowdboo
_3:                                     ; CODE XREF: FallDown+43C   j
                bsr.w   song
                rts
; End of function FallDown


; determines if injury will be for period or game
; a2 = player injured
; a3 = player checking
setInjuryType:                          ; CODE XREF: FallDown+3EE   p
                move.w  d0,-(sp)
                bset    #2,$63(a2)      ; set player unavailable
                addi.w  #$12C,(crowdlevel).w
                addi.w  #$1E,(CwdExciteLvl).w
                move.w  #$D,-(sp)       ; sound effect
                bsr.w   sfx
                move.w  (a2),(xc1).w    ; move Xpos to scroll center
                move.w  $14(a2),(yc1).w ; move Ypos to scroll center
                bset    #6,(sflags).w   ; set sfslock (scroll lock)
                clr.w   d1              ; clear d1
                movea.w #(HmShots-M68K_RAM),a0 ; move Home team Struct to a0
                btst    #6,$62(a2)      ; check if player home or away
                beq.w   _0              ; branch if home
                move.w  #$8000,d1       ; move $8000 into d1
                adda.w  #$364,a0        ; add $364 to a0 (Away Team Struct start)
_0:                                     ; CODE XREF: setInjuryType+38   j
                move.b  $66(a2),d1      ; move roster offset into d1
                move.w  d1,(TempPlOffset).w
                ext.w   d1              ; sign extend - in this case just makes upper bye of word 00
                add.w   d1,d1           ; add d1 to itself
                exg     a2,a3           ; swap a2 and a3
                jsr     (getFgtbyte).l  ; get the Fgt byte (divided by 4)
                exg     a2,a3           ; swap back
                tst.w   d0              ; check if d0 is zero
                bne.w   _not0           ; branch if H/F was more than 3
                bclr    #5,(byte_FFC2FC).w ; clear injury game bit
                move.w  #$FFFD,$66(a0,d1.w) ; update status of player
                bra.w   _exit
; ---------------------------------------------------------------------------
_not0:                                  ; CODE XREF: setInjuryType+5C   j
                cmp.w   #3,d0           ; compare d0 to 3 (if H/F was 12, d0 = 3)
                beq.w   _injurygame
                bclr    #5,(byte_FFC2FC).w
                move.w  #$FFFD,$66(a0,d1.w) ; update status of player
                jsr     (chkFgtBit1).l  ; check Fgt bit 1 of player.
                beq.w   _exit           ; jump if Fgt not 2,6,A
_injurygame:                            ; CODE XREF: setInjuryType+74   j
                bset    #5,(byte_FFC2FC).w ; set injury game bit
                move.w  #$FFFC,$66(a0,d1.w) ; update status of player
_exit:                                  ; CODE XREF: setInjuryType+6C   j
                                        ; setInjuryType+8A   j
                move.w  (sp)+,d0
                rts
; End of function setInjuryType


checkfight:                             ; CODE XREF: checkcx+104   p
                rts
; End of function checkfight


checkwallcoll2:                         ; CODE XREF: checkcoll+30   p
                                        ; checkcoll+6A   p
                bclr    #4,$64(a3)
                move.w  #$88,d4
                sub.w   (wcradiusx).w,d4
                move.w  #$12A,d5
                sub.w   (wcradiusy).w,d5
                movem.w d2-d5,-(sp)
                neg.w   d4
                neg.w   d5
                addi.w  #$40,d4 ; '@'
                addi.w  #$40,d5 ; '@'
                cmp.w   d5,d3
                bgt.w   loc_14592
                cmp.w   d4,d2
                blt.w   loc_145B4
                neg.w   d4
                cmp.w   d4,d2
                bgt.w   loc_145B4
                movea.w #(unk_FFB6CA-M68K_RAM),a2
                bsr.w   sub_14620
                bra.w   loc_145E6
; ---------------------------------------------------------------------------
loc_14592:                              ; CODE XREF: checkwallcoll2+28   j
                neg.w   d5
                cmp.w   d5,d3
                blt.w   loc_145E6
                cmp.w   d4,d2
                blt.w   loc_145B4
                neg.w   d4
                cmp.w   d4,d2
                bgt.w   loc_145B4
                movea.w #(unk_FFB64A-M68K_RAM),a2
                bsr.w   sub_14620
                bra.w   loc_145E6
; ---------------------------------------------------------------------------
loc_145B4:                              ; CODE XREF: checkwallcoll2+2E   j
                                        ; checkwallcoll2+36   j ...
                sub.w   d4,d2
                sub.w   d5,d3
                move.w  d3,d0
                move.w  d2,d1
                neg.w   d1
                muls.w  d3,d3
                muls.w  d2,d2
                add.l   d2,d3
                cmp.l   #$1000,d3
                bls.w   loc_145E6
                exg     d0,d3
                bsr.w   sroot
                exg     d0,d3
                ext.l   d0
                asl.l   #8,d0
                divs.w  d3,d0
                ext.l   d1
                asl.l   #8,d1
                divs.w  d3,d1
                bsr.w   wallcollb2
loc_145E6:                              ; CODE XREF: checkwallcoll2+42   j
                                        ; checkwallcoll2+4A   j ...
                movem.w (sp)+,d2-d5
                move.w  $4E(a3),d0
                or.w    $50(a3),d0
                bne.w   rtss2
                move.w  #$100,d0
                clr.w   d1
                cmp.w   d5,d3
                bge.w   wallcollb2
                neg.w   d5
                neg.w   d0
                cmp.w   d5,d3
                ble.w   wallcollb2
                exg     d0,d1
                cmp.w   d4,d2
                bge.w   wallcollb2
                neg.w   d4
                neg.w   d1
                cmp.w   d4,d2
                ble.w   wallcollb2
                rts
; End of function checkwallcoll2


sub_14620:                              ; CODE XREF: checkwallcoll2+3E   p
                                        ; checkwallcoll2+60   p
                cmpi.w  #$D,$18(a3)
                bgt.w   rtss2
                cmpi.w  #$E,$52(a3)
                bne.w   loc_14AA8
                sub.w   (a2),d2
                moveq   #$10,d4
                add.w   (wcradiusx).w,d4
                cmp.w   d4,d2
                bgt.w   rtss2
                neg.w   d4
                cmp.w   d4,d2
                blt.w   rtss2
                sub.w   $14(a2),d3
                move.w  #2,d5
                add.w   (wcradiusy).w,d5
                cmp.w   d5,d3
                bgt.w   rtss2
                neg.w   d5
                cmp.w   d5,d3
                blt.w   rtss2
                st      (collflag).w
                cmpi.w  #$D,$24(a3)
                blt.w   loc_1467C
                move.w  $24(a3),$18(a3)
                bra.w   loc_1477C
; ---------------------------------------------------------------------------
loc_1467C:                              ; CODE XREF: sub_14620+4E   j
                bclr    #7,$62(a3)
                move.w  (puckc).w,d0
                bmi.w   loc_146B6
                st      (puckc).w
                asl.w   #7,d0
                movea.w #(SortCords-M68K_RAM),a0
                move.b  #8,$5E(a0,d0.w)
                move.w  (pucky).w,d1
                btst    #7,$62(a0,d0.w)
                bne.w   loc_146AA
                neg.w   d1
loc_146AA:                              ; CODE XREF: sub_14620+84   j
                tst.w   d1
                bpl.w   loc_146B6
                bset    #7,$62(a3)
loc_146B6:                              ; CODE XREF: sub_14620+66   j
                                        ; sub_14620+8C   j
                move.w  #$FF00,d0
                move.l  $14(a3),d1
                sub.l   $20(a3),d1
                asr.l   #8,d1
                beq.w   loc_1478A
                bmi.w   loc_146D0
                neg.w   d0
                neg.w   d5
loc_146D0:                              ; CODE XREF: sub_14620+A8   j
                add.w   d3,d5
                move.l  (a3),d3
                sub.l   $1C(a3),d3
                asr.l   #8,d3
                muls.w  d3,d5
                divs.w  d1,d5
                bvs.w   loc_1478A
                sub.w   d5,d2
                cmp.w   d4,d2
                blt.w   loc_1478A
                neg.w   d4
                cmp.w   d4,d2
                bgt.w   loc_1478A
                clr.w   d1
                move.w  $14(a3),d3
                eor.w   d0,d3
                bmi.w   wallcoll
                neg.w   d0
                btst    #7,$62(a3)
                bne.w   wallcoll
                cmpi.w  #$D,$18(a3)
                beq.w   loc_14724
                subq.w  #1,d4
                cmp.w   d4,d2
                bgt.w   loc_14724
                neg.w   d4
                cmp.w   d4,d2
                bge.w   loc_147A0
loc_14724:                              ; CODE XREF: sub_14620+F0   j
                                        ; sub_14620+F8   j
                bsr.w   AddShotStat
                move.w  #$25,-(sp) ; '%'
                btst    #0,(gmode).w
                bne.w   loc_14746
                move.w  #8,(sp)
                addi.w  #$12C,(crowdlevel).w
                addi.w  #$28,(CwdExciteLvl).w ; '('
loc_14746:                              ; CODE XREF: sub_14620+112   j
                bsr.w   sfx
                move.w  #$1000,d0
                bsr.w   randomd0
                tst.w   $14(a3)
                bmi.w   loc_1475C
                neg.w   d0
loc_1475C:                              ; CODE XREF: sub_14620+136   j
                move.w  d0,$2A(a3)
                move.w  #$1000,d0
                bsr.w   randomd0s
                move.w  d0,$28(a3)
                move.w  #$1000,d0
                bsr.w   randomd0s
                move.w  d0,$2C(a3)
                bra.w   puckflip
; ---------------------------------------------------------------------------
loc_1477C:                              ; CODE XREF: sub_14620+58   j
                neg.w   $2C(a3)
                bpl.w   rtss2
                neg.w   $2C(a3)
                rts
; ---------------------------------------------------------------------------
loc_1478A:                              ; CODE XREF: sub_14620+A4   j
                                        ; sub_14620+BE   j ...
                clr.w   d0
                move.w  #$100,d1
                move.w  (a3),d2
                sub.w   $1C(a3),d2
                bmi.w   wallcoll
                neg.w   d1
                bra.w   wallcoll
; ---------------------------------------------------------------------------
loc_147A0:                              ; CODE XREF: sub_14620+100   j
                btst    #2,(BA_PS_flags).w
                beq.w   loc_1481E
                btst    #0,(word_FFC2FA).w
                bne.w   loc_147D8
                movem.l d0/a0,-(sp)
                move.w  (BA_Sktr_SCnum).w,d0
                asl.w   #7,d0
                movea.l #$FFFFB04A,a0
                adda.w  d0,a0
                btst    #7,$62(a0)
                movem.l (sp)+,d0/a0
                bne.w   loc_147E0
                bra.w   loc_147EC
; ---------------------------------------------------------------------------
loc_147D8:                              ; CODE XREF: sub_14620+190   j
                tst.w   (word_FFD594).w
                bne.w   loc_147EC
loc_147E0:                              ; CODE XREF: sub_14620+1B0   j
                tst.w   (pucky).w
                bmi.w   rtss2
                bra.w   loc_147F4
; ---------------------------------------------------------------------------
loc_147EC:                              ; CODE XREF: sub_14620+1B4   j
                                        ; sub_14620+1BC   j
                tst.w   (pucky).w
                bpl.w   rtss2
loc_147F4:                              ; CODE XREF: sub_14620+1C8   j
                bset    #5,(word_FFC2F4).w
                tst.w   (word_FFD594).w
                beq.w   loc_1480A
                addq.w  #1,(word_FFD576).w
                bra.w   loc_1480E
; ---------------------------------------------------------------------------
loc_1480A:                              ; CODE XREF: sub_14620+1DE   j
                addq.w  #1,(word_FFD574).w
loc_1480E:                              ; CODE XREF: sub_14620+1E6   j
                bset    #0,(byte_FFC2FE).w
                jsr     (sub_F37C).l
                bra.w   loc_14828
; ---------------------------------------------------------------------------
loc_1481E:                              ; CODE XREF: sub_14620+186   j
                btst    #0,(gmode).w
                bne.w   rtss2
loc_14828:                              ; CODE XREF: sub_14620+1FA   j
                bset    #0,(word_FFC2F4).w
                bclr    #3,(byte_FFC2FE).w
                bsr.w   AddShotStat
                bsr.w   sub_1A304
                move.w  d0,-(sp)
                move.w  (vcount).w,d0
loc_14842:                              ; CODE XREF: sub_14620+226   j
                cmp.w   (vcount).w,d0
                beq.s   loc_14842
                move.w  (sp)+,d0
                move.w  #0,-(sp)
                bsr.w   sfx
                jsr     (freezewindow).l
                addi.w  #$1F4,(crowdlevel).w
                movea.w #(HmShots-M68K_RAM),a2
                lea     $364(a2),a1
                tst.w   $14(a3)
                bpl.w   loc_14870
                exg     a2,a1
loc_14870:                              ; CODE XREF: sub_14620+24A   j
                btst    #1,(gmode).w
                beq.w   loc_1487C
                exg     a2,a1
loc_1487C:                              ; CODE XREF: sub_14620+256   j
                addq.w  #1,$C(a2)       ; Add to Goals
                btst    #5,(word_FFC2F4).w
                beq.w   loc_14898
                btst    #0,(word_FFC2FA).w
                bne.w   loc_14898
                addq.w  #1,$362(a2)     ; add to SH Goals
loc_14898:                              ; CODE XREF: sub_14620+266   j
                                        ; sub_14620+270   j
                bclr    #4,(word_FFC2FA).w
                beq.w   loc_148A6
                addq.w  #1,$35A(a2)     ; add to BA Goals
loc_148A6:                              ; CODE XREF: sub_14620+27E   j
                btst    #5,(sflags2).w
                beq.w   loc_148D4
                btst    #6,(sflags2).w
                bne.w   loc_148CC
                cmpa.l  #$FFFFCA32,a2
                bne.w   loc_148D4
loc_148C4:                              ; CODE XREF: sub_14620+2B2   j
                addq.w  #1,$356(a2)
                bra.w   loc_148D4
; ---------------------------------------------------------------------------
loc_148CC:                              ; CODE XREF: sub_14620+296   j
                cmpa.l  #$FFFFC6CE,a2
                beq.s   loc_148C4
loc_148D4:                              ; CODE XREF: sub_14620+28C   j
                                        ; sub_14620+2A0   j ...
                movem.l d0/a2,-(sp)
                move.w  (gsp).w,d0
                add.w   d0,d0
                adda.w  d0,a2
                addq.w  #1,$342(a2)
                movem.l (sp)+,d0/a2
                bclr    #7,(byte_FFC2FE).w
                beq.w   loc_148F6
                addq.w  #1,$35E(a2)
loc_148F6:                              ; CODE XREF: sub_14620+2CE   j
                cmpa.w  #$C6CE,a2
                bne.w   loc_1491E
                move.w  (HomeTeam).w,(word_FFD6CA).w
                move.w  #3,(word_FFD6CC).w
                jsr     (sub_FE556).l
                move.w  #$78,(word_FFDECC).w ; 'x'
                move.w  (word_FFD6C8).w,-(sp)
                move.w  (sp)+,(word_FFDECE).w
loc_1491E:                              ; CODE XREF: sub_14620+2DA   j
                cmpi.w  #$168,(word_FFC472).w
                bne.w   loc_1492C
                subq.w  #6,(word_FFC472).w
loc_1492C:                              ; CODE XREF: sub_14620+304   j
                movea.w #(unk_FFC474-M68K_RAM),a0
                adda.w  (word_FFC472).w,a0
                addq.w  #6,(word_FFC472).w
                bsr.w   sub_14A94
                move.w  d0,(a0)+
                moveq   #2,d0
                add.w   $24(a2),d0
                sub.w   $24(a1),d0
                move.b  d0,(a0)+
                addi.w  #$1E,(CwdExciteLvl).w
                cmpa.w  #$C6CE,a2
                beq.w   loc_14964
                subi.w  #$14,(CwdExciteLvl).w
                bset    #7,-1(a0)
loc_14964:                              ; CODE XREF: sub_14620+334   j
                move.w  $18(a2),d0
                move.b  d0,(a0)+
                move.w  #$FFFF,(a0)
                addi.w  #$B4,d0
                addq.b  #1,(a2,d0.w)
                move.w  $1A(a2),d0
                bmi.w   loc_149AA
                cmp.w   $18(a2),d0
                beq.w   loc_149AA
                move.b  d0,(a0)+
                addi.w  #$CE,d0
                addq.b  #1,(a2,d0.w)
                move.w  $1C(a2),d0
                bmi.w   loc_149AA
                cmp.w   $18(a2),d0
                beq.w   loc_149AA
                move.b  d0,(a0)
                addi.w  #$CE,d0
                addq.b  #1,(a2,d0.w)
loc_149AA:                              ; CODE XREF: sub_14620+35A   j
                                        ; sub_14620+362   j ...
                move.w  $26(a1),d0
                bmi.w   loc_149BA
                addi.w  #$B4,d0
                addq.b  #1,(a1,d0.w)
loc_149BA:                              ; CODE XREF: sub_14620+38E   j
                bsr.w   AddShotStat
                bsr.w   sub_1284A
                bclr    #3,(BA_PS_flags).w
                bsr.w   PrintScores1
                move.w  #$2710,(word_FFC304).w
                btst    #0,(word_FFC2FA).w
                beq.w   loc_149E0
                bra.w   loc_149EA
; ---------------------------------------------------------------------------
loc_149E0:                              ; CODE XREF: sub_14620+3B8   j
                move.l  #7,d0
                bsr.w   sub_14A54
loc_149EA:                              ; CODE XREF: sub_14620+3BC   j
                clr.w   (collflag).w
                clr.w   $28(a3)
                clr.w   $2A(a3)
                moveq   #6,d0
                tst.w   (a3)
                bpl.w   loc_14A00
                neg.w   d0
loc_14A00:                              ; CODE XREF: sub_14620+3DA   j
                move.w  d0,(a3)
                move.w  #$110,d0
                tst.w   $14(a3)
                bpl.w   loc_14A10
                neg.w   d0
loc_14A10:                              ; CODE XREF: sub_14620+3EA   j
                move.w  d0,$14(a3)
                move.w  #$600,$2C(a3)
                clr.w   $18(a3)
                st      (puckcross2).w
                st      (puckcross6).w
                bset    #2,$62(a3)
                move.w  #$1A,d0         ; puckunflip
                bsr.w   assreplace
                move.l  a3,-(sp)
                adda.w  #$80,a3
                move.w  #$102E,d1
                bsr.w   SetSPA
                movea.w $22(a1),a3
                move.l  #$E,d0
                bsr.w   AddPenalty2
                movea.l (sp)+,a3
                rts
; End of function sub_14620


sub_14A54:                              ; CODE XREF: sub_14620+3C6   p
                move.l  a3,-(sp)
                movea.w $22(a2),a3
                moveq   #5,d3
loc_14A5C:                              ; CODE XREF: sub_14A54+38   j
                tst.w   $34(a3)
                ble.w   loc_14A88
                btst    #0,$63(a3)
                bne.w   loc_14A88
                bclr    #2,$62(a3)
                bclr    #3,$64(a3)
                beq.w   loc_14A84
                jsr     (sub_FEFF0).l
loc_14A84:                              ; CODE XREF: sub_14A54+26   j
                bsr.w   assinsert
loc_14A88:                              ; CODE XREF: sub_14A54+C   j
                                        ; sub_14A54+16   j
                adda.w  #$80,a3
                dbf     d3,loc_14A5C
                movea.l (sp)+,a3
                rts
; End of function sub_14A54


sub_14A94:                              ; CODE XREF: ROM:0001229E   p
                                        ; sub_14620+318   p
                move.w  (gsp).w,d0
                swap    d0
                clr.w   d0
                lsr.l   #2,d0
                or.w    (PerTimeTotal).w,d0
                sub.w   (gameclock).w,d0
                rts
; End of function sub_14A94
; ---------------------------------------------------------------------------
loc_14AA8:                              ; CODE XREF: sub_14620+10   j
                btst    #5,$63(a3)
                bne.w   rtss2
                cmpi.w  #$A,$18(a3)
                bgt.w   rtss2
                cmpi.w  #$B,$52(a3)
                bgt.w   rtss2
                movem.w d2-d3,-(sp)
                sub.w   $14(a2),d3
                move.w  d3,d0
                sub.w   (a2),d2
                move.w  d2,d1
                neg.w   d0
                asl.w   #4,d2
                muls.w  d2,d2
                divu.w  #$400,d2
                cmp.w   #$100,d2
                bhi.w   loc_14B32
                asl.w   #4,d3
                muls.w  d3,d3
                divu.w  #$79,d3 ; 'y'
                add.w   d2,d3
                cmp.w   #$100,d3
                bhi.w   loc_14B32
                movem.w (sp)+,d2-d3
                bsr.w   sub_14B38
                movem.w d2-d3,-(sp)
                movem.w d0-d1,-(sp)
                muls.w  d0,d0
                muls.w  d1,d1
                add.l   d1,d0
                bsr.w   sroot
                move.w  d0,d2
                movem.w (sp)+,d0-d1
                addq.w  #1,d2
                asl.l   #8,d0
                divs.w  d2,d0
                asl.l   #8,d1
                divs.w  d2,d1
                bset    #4,(word_FFC2F8).w
                bsr.w   wallcoll
                bclr    #4,(word_FFC2F8).w
loc_14B32:                              ; CODE XREF: ROM:00014AE2   j
                                        ; ROM:00014AF4   j
                movem.w (sp)+,d2-d3
                rts


sub_14B38:                              ; CODE XREF: ROM:00014AFC   p
                movem.l d0-d1,-(sp)
                move.w  (VDP_CNTR).l,d0
                andi.w  #$1F,d0
                bne.w   loc_14B8A
                move.w  (pucky).w,d0
                sub.w   $14(a2),d0
                cmp.w   #$28,d0 ; '('
                bgt.w   loc_14B8A
                cmp.w   #$FFD8,d0
                blt.w   loc_14B8A
                move.w  $28(a3),d0
                move.w  $2A(a3),d1
                cmp.w   #$2000,d0
                bgt.w   loc_14B90
                cmp.w   #$E000,d0
                blt.w   loc_14B90
                cmp.w   #$2000,d1
                bgt.w   loc_14B90
                cmp.w   #$E000,d1
                blt.w   loc_14B90
loc_14B8A:                              ; CODE XREF: sub_14B38+E   j
                                        ; sub_14B38+1E   j ...
                movem.l (sp)+,d0-d1
                rts
; ---------------------------------------------------------------------------
loc_14B90:                              ; CODE XREF: sub_14B38+36   j
                                        ; sub_14B38+3E   j ...
                adda.w  #$C,sp
                asr.w   #2,d0
                asr.w   #2,d1
                move.w  d0,$28(a2)
                move.w  d1,$2A(a2)
                clr.w   $28(a3)
                clr.w   $2A(a3)
                bset    #6,(sflags).w
                btst    #0,(gmode).w
                bne.w   rtss2
                move.l  #8,d0
                bra.w   AddPenalty2
; End of function sub_14B38


; check for puck over wall
wallcollb2:                             ; CODE XREF: checkwallcoll2+96   p
                                        ; checkwallcoll2+B2   j ...
                cmpi.w  #$E,$52(a3)     ; #puckSCnum
                bne.w   wallcoll        ; not puck so wall coll
                cmpi.w  #$1D,$18(a3)    ; #12*8/3, Zpos
                bgt.w   _0
                cmpi.w  #$12,$18(a3)    ; #8*8/3, Zpos
                bls.w   wallcoll
                cmpi.w  #$118,$14(a3)   ; #280, Ypos
                blt.w   _0
                cmpi.w  #$D,(a3)        ; 14, Xpos
                blt.w   wallcoll
                cmpi.w  #$F,(a3)        ; 15, Xpos
                bgt.w   wallcoll
                cmpi.w  #$FA0,$2A(a3)   ; #4000, Yvel
                blt.w   wallcoll
                move.l  a3,-(sp)
                asr     $2A(a3)         ; Yvel / 2
                adda.w  #$80,a3         ; Xpos
                move.w  #$1078,d1
                bsr.w   SetSPA
                movea.l (sp)+,a3
                move.w  #$E,-(sp)
                bsr.w   sfx
                addi.w  #$258,(crowdlevel).w
                addi.w  #$F,(CwdExciteLvl).w
_0:                                     ; CODE XREF: wallcollb2+10   j
                                        ; wallcollb2+24   j
                bset    #6,(sflags).w   ; #sfslock
                bset    #2,$62(a3)      ; #pfnc
                tst.w   $14(a3)         ; Ypos
                bpl.w   _1
                ori.w   #$8000,4(a3)    ; attribute(a3)
_1:                                     ; CODE XREF: wallcollb2+7A   j
                clr.w   $86(a3)         ; frame+SCstruct(a3)
                btst    #0,(gmode).w    ; #gmclock
                bne.w   rtss2
                move.l  a3,-(sp)
                move.w  (ltplayer).w,d0
                asl.w   #7,d0           ; #scsize
                movea.w #(SortCords-M68K_RAM),a3 ; #sortcords
                adda.w  d0,a3
                move.l  #6,d0           ; #PenOOP
                bsr.w   AddPenalty2
                movea.l (sp)+,a3
                rts
; End of function wallcollb2


; d0 = cosine of angle of incidence with wall
; d1 = sine of angle of incidence with wall
wallcoll:                               ; CODE XREF: sub_14620+DA   j
                                        ; sub_14620+E6   j ...
                move.w  d0,$4E(a3)      ; wallcos
                move.w  d1,$50(a3)      ; wallsin
                movem.l d2-d3,-(sp)
                movem.w d0-d1,-(sp)
                muls.w  $2A(a3),d0      ; Yvel
                muls.w  $28(a3),d1      ; Xvel
                sub.l   d1,d0
                asr.l   #8,d0
                move.w  d0,d2           ; v1n
                movem.w (sp),d0-d1
                muls.w  $28(a3),d0      ; Xvel
                muls.w  $2A(a3),d1      ; Yvel
                add.l   d1,d0
                asr.l   #8,d0
                move.w  d0,d3           ; v1t
                neg.w   d2
                cmpi.w  #$E,$52(a3)     ; #puckSCnum, SCnum
                bne.w   _player
                bclr    #4,(sflags2).w  ; #sf2shot
                tst.w   d2
                bpl.w   _nocoll
                asr.w   #2,d2           ; reduce normal speed on puck
                cmp.w   #$FC00,d2       ; #-400
                bgt.w   _pok
                move.w  #$800,d0
                bsr.w   randomd0
                neg.w   d0
                move.w  d0,$2C(a3)      ; Zvel
                bsr.w   puckflip
                move.w  d2,d0
                asr.w   #8,d0
                asr.w   #2,d0
                addq.w  #4,d0
                bpl.w   loc_14CE2
                clr.w   d0
loc_14CE2:                              ; CODE XREF: wallcoll+6C   j
                andi.w  #3,d0
                addi.w  #$28,d0 ; '('
                move.w  d0,-(sp)
                bsr.w   sfx
_pok:                                   ; CODE XREF: wallcoll+4E   j
                move.w  d3,d0           ; reduce tangent speed on puck
                asr.w   #6,d0
                sub.w   d0,d3
                asr.w   #1,d0
                sub.w   d0,d3
                bra.w   _noadd
; ---------------------------------------------------------------------------
_player:                                ; CODE XREF: wallcoll+38   j
                cmp.w   #$3E8,d2        ; #1000
                bgt.w   _nocoll
                bclr    #4,(word_FFC2F8).w
                bne.w   loc_14D16
                bset    #4,$64(a3)      ; set wall collision bit
loc_14D16:                              ; CODE XREF: wallcoll+9C   j
                cmp.w   #$F000,d2       ; $-1000
                bgt.w   _nosfx
                cmpi.w  #$A,$32(a3)     ; impact(a3)
                blt.w   _nosfx
                move.w  #$20,-(sp) ; ' ' ; #SFXplayerwall
                bsr.w   sfx
_nosfx:                                 ; CODE XREF: wallcoll+AA   j
                                        ; wallcoll+B4   j
                asr.w   #2,d2
                cmp.w   #$FC7C,d2       ; #-900
                blt.w   _noadd
                move.w  #$FC18,d2       ; #-1000
_noadd:                                 ; CODE XREF: wallcoll+8A   j
                                        ; wallcoll+C6   j
                movem.w (sp),d0-d1
                movem.w d2-d3,-(sp)
                muls.w  d0,d3
                muls.w  d1,d2
                sub.l   d2,d3
                asr.l   #8,d3
                move.w  d3,$28(a3)      ; Xvel
                movem.w (sp)+,d2-d3
                movem.w (sp),d0-d1
                muls.w  d1,d3
                muls.w  d0,d2
                add.l   d2,d3
                asr.l   #8,d3
                move.w  d3,$2A(a3)      ; Yvel
                tst.w   $2C(a3)         ; Zvel
                bmi.w   _nocoll
                clr.w   $2C(a3)         ; Zvel
_nocoll:                                ; CODE XREF: wallcoll+44   j
                                        ; wallcoll+92   j ...
                addq.w  #4,sp
                movem.l (sp)+,d2-d3
                rts
; End of function wallcoll
; ---------------------------------------------------------------------------
_sfx:                                   ; CODE XREF: checkpuckcoll+1E   j
                bclr    #2,(word_FFC2F4).w
                beq.w   rtss2
                move.w  #5,-(sp)
                bra.w   sfx


; look for puck coll with players
; a3 = puck
checkpuckcoll:                          ; CODE XREF: pucknorm+CA   j
                                        ; pucknorm+D2   j ...
                cmpi.w  #$190,$14(a3)   ; compare 190 hex to Ypos (back board?)
                bgt.w   _resetYvel      ; branch if greater than
                cmpi.w  #$FE70,$14(a3)  ; compare -190 to Ypos (back board?)
                bgt.w   _setup          ; branch if greater than
_resetYvel:                             ; CODE XREF: checkpuckcoll+6   j
                clr.w   $2A(a3)         ; clear Yvel
_setup:                                 ; CODE XREF: checkpuckcoll+10   j
                cmpi.w  #$10,$18(a3)    ; compare 10 hex to Zpos (feet in air)
                bgt.s   _sfx
                move.w  $52(a3),d0      ; move SCnum into d0
                asl.w   #1,d0           ; current obj number
                movea.w #(OOlistpos-M68K_RAM),a0
                movea.w #(OOlist-M68K_RAM),a1
                movea.w #(Ylist-M68K_RAM),a2
                move.w  (a0,d0.w),d1    ; current obj position in OOlist
_0:                                     ; CODE XREF: checkpuckcoll+5A   j
                cmp.w   #$F,d1          ; 15 = Total sprites -1
                beq.w   _cl             ; it is top sprite on screen
                clr.w   d4
                move.b  1(a1,d1.w),d4   ; next higher object number
                move.w  (a2,d4.w),d5    ; Y pos of next higher object
                sub.w   $14(a3),d5      ; sub Ypos from d5
                cmp.w   #$16,d5         ; 16 = cbody + cstick
                bgt.w   _cl             ; no higher sprite coll
                bsr.w   _ccx
                addq.w  #1,d1
                bra.s   _0
; ---------------------------------------------------------------------------
_cl:                                    ; CODE XREF: checkpuckcoll+3A   j
                                        ; checkpuckcoll+50   j
                move.w  (a0,d0.w),d1
                beq.w   _ex
_1:                                     ; CODE XREF: checkpuckcoll+80   j
                clr.w   d4
                move.b  -1(a1,d1.w),d4  ; next lower object number
                move.w  $14(a3),d5      ; move Ypos into d5
                sub.w   (a2,d4.w),d5    ; sub Y pos of next lower object
                cmp.w   #$16,d5         ; compare cbody+cstick to d5
                bgt.w   _ex
                bsr.w   _ccx
                subq.w  #1,d1
                bne.s   _1
_ex:                                    ; CODE XREF: checkpuckcoll+60   j
                                        ; checkpuckcoll+76   j
                rts
; ---------------------------------------------------------------------------
_ccx:                                   ; CODE XREF: checkpuckcoll+54   p
                                        ; checkpuckcoll+7A   p
                movem.l d0-d7/a0-a3,-(sp)
                lsr.w   #1,d4           ; divide by 2
                cmp.w   (puckc).w,d4    ; compare puckc to d4
                beq.w   _exit
                cmp.w   #$B,d4          ; compare 11 to d4
                bgt.w   _exit
                asl.w   #7,d4           ; #scsize
                movea.w #(SortCords-M68K_RAM),a2
                adda.w  d4,a2           ; a2 now has address of player struct
                btst    #2,(BA_PS_flags).w ; check bit 2
                beq.w   _ccx2           ; branch if not set
                asr.w   #7,d4           ; change d4 back to SCnum of puckc
                cmp.w   (BA_Sktr_SCnum).w,d4 ; check d4 with SCnum of breakaway skater
                beq.w   _ccx2           ; branch if the same
                cmp.w   (BA_Goalie_SCnum).w,d4 ; check d4 with SCnum of breakaway goalie
                bne.w   _exit           ; exit if not equal
_ccx2:                                  ; CODE XREF: checkpuckcoll+A8   j
                                        ; checkpuckcoll+B2   j
                btst    #2,$62(a2)      ; check if no player collision
                bne.w   _exit           ; exit if set
                tst.b   $5E(a2)         ; check if nopuck collision
                bne.w   _exit           ; branch if nopuck
                btst    #2,$63(a2)      ; check if player unavailable
                bne.w   _chkbody        ; branch if so
                cmpi.w  #5,$18(a3)      ; compare 5 to Zpos
                bgt.w   _chkbody        ; branch if higher
                cmpi.w  #$200,$2C(a3)   ; compare 200 hex to Zvel
                bgt.w   _chkbody        ; branch if higher
                move.l  a2,-(sp)
                bsr.w   GetHot          ; Get Hot Spot d0/d1 = x/y
                add.w   (a2),d0         ; add Xpos a2
                sub.w   (a3),d0         ; sub Xpos a3
                cmp.w   #$E,d0          ; compare to cstick (E hex)
                bgt.w   _chkbody        ; branch if greater
                cmp.w   #$FFF2,d0       ; compare to -cstick
                blt.w   _chkbody        ; branch if less than
                add.w   $14(a2),d1      ; add Ypos a2
                sub.w   $14(a3),d1      ; sub Ypos a3
                cmp.w   #$E,d1          ; compare to cstick
                bgt.w   _chkbody        ; branch if greater
                cmp.w   #$FFF2,d1       ; compare to -cstick
                blt.w   _chkbody        ; branch if less than
                muls.w  d0,d0           ; square d0
                muls.w  d1,d1           ; square d1
                add.l   d1,d0           ; add d1 to d0
                move.l  #$C4,d1         ; move cstick squared to d1
                tst.b   $5E(a3)         ; check nopuck - puck not ready to be caught
                ble.w   _lo             ; branch if less than or equal
                lsr.w   #2,d1           ; divide d1 by 4
_lo:                                    ; CODE XREF: checkpuckcoll+130   j
                cmp.l   d1,d0           ; compare d1 to d0
                bhi.w   _chkbody        ; branch if higher
                bsr.w   puckstick
                bra.w   _exit
; ---------------------------------------------------------------------------
_chkbody:                               ; CODE XREF: checkpuckcoll+D6   j
                                        ; checkpuckcoll+E0   j ...
                tst.w   $34(a2)         ; check if goalie
                beq.w   _chkgoalie      ; branch if goalie
                btst    #3,$64(a2)      ; check if doing one timer
                bne.w   _exit           ; exit if so
                move.w  (a2),d0         ; Xpos into d0
                sub.w   (a3),d0         ; sub Xpos a3
                cmp.w   #8,d0           ; compare to cbody
                bgt.w   _exit           ; exit if greater
                cmp.w   #$FFF8,d0       ; compare to -cbody
                blt.w   _exit           ; exit if less than
                move.w  $14(a2),d1      ; Ypos into d1
                sub.w   $14(a3),d1      ; sub Ypos a3
                cmp.w   #8,d1           ; compare cbody
                bgt.w   _exit           ; exit if greater
                cmp.w   #$FFF8,d1       ; compare -cbody
                blt.w   _exit           ; exit if less than
                muls.w  d0,d0           ; square d0
                muls.w  d1,d1           ; square d1
                add.l   d1,d0           ; add d1 to d0
                cmp.l   #$40,d0 ; '@'   ; compare cbody squared to d0
                bhi.w   _exit           ; exit if higher
                bsr.w   puckbody
loc_14F22:                              ; CODE XREF: checkpuckcoll+8E   j
                                        ; checkpuckcoll+96   j ...
_exit:
                movem.l (sp)+,d0-d7/a0-a3
                rts
; ---------------------------------------------------------------------------
_cbg:                                   ; DATA XREF: checkpuckcoll+1EE   o
                dc.w $C
                dc.w $C
                dc.w $D
                dc.w $D
                dc.w $D
                dc.w $D
                dc.w $D
                dc.w $D
                dc.w $D
                dc.w $D
                dc.w $E
                dc.w $E
                dc.w $E
                dc.w $E
                dc.w $F
                dc.w $F
                dc.w $F
                dc.w $F
                dc.w $F
                dc.w $F
_cbgsq:                                 ; DATA XREF: checkpuckcoll+246   o
                dc.w $90
                dc.w $90
                dc.w $A9
                dc.w $A9
                dc.w $A9
                dc.w $A9
                dc.w $A9
                dc.w $A9
                dc.w $A9
                dc.w $A9
                dc.w $C4
                dc.w $C4
                dc.w $C4
                dc.w $C4
                dc.w $E1
                dc.w $E1
                dc.w $E1
                dc.w $E1
                dc.w $E1
                dc.w $E1
; ---------------------------------------------------------------------------
_chkgoalie:                             ; CODE XREF: checkpuckcoll+148   j
                move.l  a0,-(sp)        ; push on stack
                movea.l #_cbg,a0
                clr.w   d0
                move.b  $68(a2),d0      ; move Agl into d0
                btst    #1,(byte_FFC2FE).w ; check if cwd meter broken (always is)
                bne.w   _boost
                btst    #6,(byte_FFC2FC).w ; check if crowd meter currently broken
                beq.w   _joycont        ; branch if not
_boost:                                 ; CODE XREF: checkpuckcoll+200   j
                addq.b  #2,d0
_joycont:                               ; CODE XREF: checkpuckcoll+20A   j
                lsr.w   #1,d0           ; divide by 2
                btst    #3,$62(a2)      ; check if joystick controlled
                beq.w   _calcagl        ; branch if not
                move.w  #$F,d0          ; move F into d0 (remove Agl)
_calcagl:                               ; CODE XREF: checkpuckcoll+218   j
                add.w   d0,d0           ; add d0 to itself
                btst    #0,(word_FFC2FA).w ; check if shootout
                beq.w   _maxagl         ; branch if not
                tst.w   d0              ; check that d0 is 0
                beq.w   _maxagl         ; branch if zero
                subq.w  #2,d0           ; sub 2 from d0
_maxagl:                                ; CODE XREF: checkpuckcoll+228   j
                                        ; checkpuckcoll+22E   j
                cmp.w   #$1E,d0         ; compare to 1E
                blt.w   _checkbody      ; branch if less than
                move.w  #$1E,d0         ; move 1E into d0
_checkbody:                             ; CODE XREF: checkpuckcoll+238   j
                move.w  (a0,d0.w),(ChkBodyG).w
                movea.l #_cbgsq,a0
                clr.l   (ChkBodySqG).w
                move.w  (a0,d0.w),(ChkBodySqG+2).w
                move.w  (ChkBodyG).w,(NegChkBodyG).w
                neg.w   (NegChkBodyG).w
                btst    #1,(word_FFC2F8).w
                beq.w   loc_1500A       ; branch if not set
                move.w  #$C,(ChkBodyG).w
                move.l  #$90,(ChkBodySqG).w
                move.w  #$FFF4,(NegChkBodyG).w
loc_1500A:                              ; CODE XREF: checkpuckcoll+266   j
                cmpi.w  #$250,$58(a2)   ; check animation
                beq.w   loc_1501E       ; branch if equal
                cmpi.w  #$2A2,$58(a2)   ; check animation
                bne.w   loc_15032       ; branch if not equal
loc_1501E:                              ; CODE XREF: checkpuckcoll+284   j
                move.w  #$12,(ChkBodyG).w
                move.l  #$144,(ChkBodySqG).w
                move.w  #$FFEE,(NegChkBodyG).w
loc_15032:                              ; CODE XREF: checkpuckcoll+28E   j
                movea.l (sp)+,a0        ; pop stack into a0
                cmpi.w  #$F,(puckz).w   ; compare F to puckz
                bgt.w   _exit2          ; exit if higher
                move.w  (a2),d0         ; Xpos into d0
                cmpi.w  #$250,$58(a2)   ; compare animation
                beq.w   _neg            ; branch if equal
                cmpi.w  #$2A2,$58(a2)   ; compare animation
                bne.w   loc_1507A       ; branch if not equal
                move.w  #6,d1           ; move 6 into d1
                bra.w   loc_15060
; ---------------------------------------------------------------------------
_neg:                                   ; CODE XREF: checkpuckcoll+2BA   j
                move.w  #$FFFA,d1       ; move -6 into d1
loc_15060:                              ; CODE XREF: checkpuckcoll+2CC   j
                btst    #7,$62(a2)      ; check which goal shooting at
                bne.w   loc_1506C       ; branch if top
                neg.w   d1              ; negate d1
loc_1506C:                              ; CODE XREF: checkpuckcoll+2DA   j
                btst    #0,$76(a2)      ; check bit zero of handedness
                beq.w   loc_15078       ; branch if equal
                neg.w   d1              ; negate d1
loc_15078:                              ; CODE XREF: checkpuckcoll+2E6   j
                add.w   d1,d0           ; add d1 to d0
loc_1507A:                              ; CODE XREF: checkpuckcoll+2C4   j
                sub.w   (a3),d0         ; sub Xpos a3 from d0
                cmp.w   (ChkBodyG).w,d0 ; compare to d0
                bgt.w   _exit2          ; exit if greater than
                cmp.w   (NegChkBodyG).w,d0 ; compare to d0
                blt.w   _exit2          ; exit if less than
                move.w  $14(a2),d1      ; move Ypos into d1
                sub.w   $14(a3),d1      ; sub Ypos a3 from d1
                cmp.w   (ChkBodyG).w,d1 ; compare to d1
                bgt.w   _exit2          ; exit if greater
                cmp.w   (NegChkBodyG).w,d1 ; compare to d1
                blt.w   _exit2          ; exit if less than
                movem.w d0-d1,-(sp)     ; push to stack
                muls.w  d0,d0           ; square d0
                muls.w  d1,d1           ; square d1
                add.l   d1,d0           ; add d1 to d0
                cmp.l   (ChkBodySqG).w,d0 ; compare to d0
                movem.w (sp)+,d0-d1     ; pop from stack
                bhi.w   _exit2          ; exit if higher
                bsr.w   puckgoalie
                bra.w   _exit
; ---------------------------------------------------------------------------
_exit2:                                 ; CODE XREF: checkpuckcoll+2AE   j
                                        ; checkpuckcoll+2F4   j ...
                bclr    #2,(word_FFC2F4).w ; clear bit 2
                beq.w   _exit           ; exit if it was cleared already
                move.w  (puckc).w,d0    ; move puckc into d0
                cmp.w   $52(a2),d0      ; compare SCnum to d0
                beq.w   _exit           ; branch if equal
                move.w  #5,-(sp)        ; sound
                bsr.w   sfx
                bra.w   _exit
; End of function checkpuckcoll


; puck collides with stick
puckstick:                              ; CODE XREF: checkpuckcoll+13C   p
                tst.w   $34(a2)         ; a2 = player who collided
                                        ; a3 = puck
                bne.w   _0              ; branch if not goalie
                btst    #4,(gmode).w    ; check if highlight
                bne.w   rtss2           ; exit if so (goalie always lets the shot in)
_0:                                     ; CODE XREF: puckstick+4   j
                bclr    #0,$62(a2)      ; clear offside bit
                move.w  (puckc).w,d1    ; move puckc into d1
                bmi.w   _nosteal        ; branch if no puck carrier
                asl.w   #7,d1
                movea.w #(SortCords-M68K_RAM),a0
                adda.w  d1,a0           ; a0 = Struct of puck carrier
                move.b  $62(a0),d1
                move.b  $62(a2),d2
                eor.w   d1,d2           ; compare pflags of each player
                btst    #6,d2           ; check if on same team
                beq.w   rtss2           ; no stealing from teammate
                btst    #5,(word_FFC2F8).w ; check if puckc is in slot
                beq.w   _noslot         ; branch if not
                cmp.l   #$40,d0 ; '@'
                bhi.w   rtss2
                bra.w   loc_15140
; ---------------------------------------------------------------------------
_noslot:                                ; CODE XREF: puckstick+40   j
                cmp.l   #$24,d0 ; '$'
                bhi.w   rtss2
loc_15140:                              ; CODE XREF: puckstick+4E   j
                tst.w   $34(a2)         ; check if colliding player is goalie
                beq.w   _steal          ; branch if goalie
                tst.w   $34(a0)         ; check if goalie
                beq.w   rtss2           ; no stealing from goalie
CheckStkForContactWithSkater:           ; Stk for puckc
                move.b  $71(a0),d0
                lsr.b   #1,d0           ; divide by 2
                bsr.w   makepde         ; adjust for energy level
                move.w  d0,-(sp)        ; push onto stack
                exg     a0,a2           ; swap a2 and a0 (a0 now collider)
                move.b  $71(a0),d0      ; Stk for collider
                lsr.b   #1,d0           ; divie by 2
                bsr.w   makepde         ; adjust for energy
                exg     a0,a2           ; swap back (a0 now puckc)
                neg.w   d0              ; negate d0
                add.w   (sp)+,d0        ; add puckc modified Stk
                addi.w  #$24,d0 ; '$'   ; add 24 hex (36 decimal)
                bsr.w   randomd0        ; RNG
                btst    #5,(word_FFC2F8).w ; check if puckc is in slot
                beq.w   loc_1518C       ; branch if not
                cmp.w   #4,d0           ; compare 4 to d0
                bhi.w   rtss2           ; exit if higher (not losing puck)
                bra.w   _steal
; ---------------------------------------------------------------------------
loc_1518C:                              ; CODE XREF: puckstick+98   j
                cmp.w   #2,d0           ; compare 2 to d0
                bhi.w   rtss2           ; exit if higher (not losing puck)
_steal:                                 ; CODE XREF: puckstick+60   j
                                        ; puckstick+A4   j
                move.b  $71(a0),d0      ; Stk of puckc
                lsr.b   #1,d0           ; divide by 2
                bsr.w   makepde         ; adj for energy
                addi.w  #$14,d0         ; add 14 hex (20 dec)
                move.b  d0,$5E(a0)      ; move result into nopuck (cant get puck timer)
                exg     a0,a2           ; swap a0 and a2 (a0 now collider)
                move.b  $71(a0),d0      ; Stk of collider
                lsr.b   #1,d0           ; divide by 2
                bsr.w   makepde         ; adj for energy
                addi.w  #$14,d0         ; add 14 hex (20 dec)
                move.b  d0,$5E(a0)      ; move result into nopuck
                exg     a0,a2           ; swap back
                move.w  $52(a0),(lastplayer).w ; SCNum of puckc into lastplayer
                bclr    #2,(sflags).w   ; clear pass dir mode
                bclr    #3,(sflags).w   ; clear shot dir mode
_stdef:                                 ; CODE XREF: puckstick+174   j
                move.w  #6,-(sp)        ; #SFXstdef
                bsr.w   sfx
                bsr.w   a2touchpuck
                bra.w   deflect
; ---------------------------------------------------------------------------
_nosteal:                               ; CODE XREF: puckstick+1C   j
                tst.w   $34(a2)         ; check if goalie
                bne.w   _onetimerchk    ; branch if not
                cmp.l   #$40,d0 ; '@'
                bhi.w   rtss2           ; smaller range for stealing puck
_onetimerchk:                           ; CODE XREF: puckstick+FE   j
                btst    #3,$64(a2)      ; check if onetimer
                beq.w   _nosteal2       ; branch if not
                cmp.l   #$64,d0 ; 'd'
                bhi.w   loc_15268
                cmpi.w  #$18,$5A(a2)
                bge.w   _nosteal2
                move.w  #$18,$5A(a2)
                bset    #7,(byte_FFC2FE).w
_nosteal2:                              ; CODE XREF: puckstick+112   j
                                        ; puckstick+126   j
                move.w  (puckvx).w,d0
                move.w  (puckvy).w,d1
                muls.w  d0,d0
                muls.w  d1,d1
                add.l   d1,d0
                clr.w   d1
                btst    #4,(sflags2).w  ; check if shot was taken
                bne.w   loc_15246       ; branch if so
                btst    #3,$64(a2)      ; check if one timer
                bne.w   _onetimer       ; branch if so
PlayerPassOrLoosePuckStkLoad:
                move.b  $71(a2),d1
                mulu.w  #$15E,d1
loc_15246:                              ; CODE XREF: puckstick+14C   j
                addi.w  #$32C8,d1
                mulu.w  d1,d1
                cmp.l   d1,d0
                bls.w   _glue
                move.b  #8,$5E(a2)
                bra.w   _stdef
; ---------------------------------------------------------------------------
_onetimer:                              ; CODE XREF: puckstick+156   j
                exg     a2,a3
                jsr     (onetimershot).l
                exg     a2,a3
                rts
; ---------------------------------------------------------------------------
loc_15268:                              ; CODE XREF: puckstick+11C   j
                cmp.l   #$144,d0
                bhi.w   _ex2
                cmpi.w  #$18,$5A(a2)
                bge.w   _ex2
                move.w  #$18,$5A(a2)
_ex2:                                   ; CODE XREF: puckstick+18A   j
                                        ; puckstick+194   j
                rts
; ---------------------------------------------------------------------------
_glue:                                  ; CODE XREF: puckstick+16A   j
                                        ; puckgoalie+1C6   j
                move.w  #7,-(sp)        ; #SFXpuckget
                move.w  $52(a2),d0      ; move SCnum into d0
                move.w  d0,(puckc).w    ; move d0 into puckc
                movea.w #(HmShots-M68K_RAM),a0 ; Move Home Stats struct into a0
                lea     $364(a0),a1     ; Move Away Stat Struct into a1
                btst    #6,$62(a2)      ; check if player is home or away
                bne.w   loc_152A4       ; branch if away
                exg     a0,a1           ; swap struct addresses
loc_152A4:                              ; CODE XREF: puckstick+1BA   j
                st      $1A(a0)         ; FF into assist 1
                st      $1C(a0)         ; FF into assist 2
                bset    #3,$30(a0)      ; set a flag (not sure what)
                bclr    #4,(sflags3).w  ; clear flag (not sure what, might have to do with faceoff)
                beq.w   loc_152DC       ; branch if it was cleared already
                addq.w  #1,$E(a1)       ; add 1 to faceoff won
                addi.w  #$C8,(crowdlevel).w ; add to crowdlevel
                move.w  #$C,(sp)        ; move C to stack
                cmpa.w  #$C6CE,a1       ; compare if a1 is home
                bne.w   loc_152DC       ; branch if not
                addi.w  #$A,(CwdExciteLvl).w ; add to CwdExciteLvl
                move.w  #$B,(sp)        ; Move B into stack
loc_152DC:                              ; CODE XREF: puckstick+1D4   j
                                        ; puckstick+1EA   j
                bsr.w   song
                move.w  $52(a2),d0      ; move SCnum into d0
                cmp.w   (word_FFBEE0).w,d0 ; compare to d0
                bne.w   loc_152F0       ; branch if not equal
                addq.w  #1,$14(a1)      ; add 1 to pass completed
loc_152F0:                              ; CODE XREF: puckstick+204   j
                st      (word_FFBEE0).w ; set to FFFF
                bclr    #2,(sflags).w   ; clear pass dir mode
                bclr    #3,(sflags).w   ; clear shot dir mode
                tst.w   $34(a2)         ; check if a2 is goalie
                bne.w   _setd0player    ; branch if not
                bsr.w   AddShotStat
                move.w  #$8C,$48(a2)    ; move 8C to temp5 - countdown for faceoff?
                cmpi.w  #$2F4,$58(a2)   ; check for goalie dive animation
                bne.w   _setd0player    ; branch if not equal
                move.w  #5,$48(a2)      ; set temp5 to 5
_setd0player:                           ; CODE XREF: puckstick+220   j
                                        ; puckstick+234   j
                cmp.w   (c1playernum).w,d0
                beq.w   rtss2           ; exit if player controlled
                cmp.w   (c2playernum).w,d0
                beq.w   rtss2           ; exit if player controlled
                tst.w   (cont3team).w
                beq.w   _cont4chk       ; branch if 0
                cmp.w   (c3playernum).w,d0
                beq.w   rtss2           ; exit if player controlled
_cont4chk:                              ; CODE XREF: puckstick+252   j
                tst.w   (cont4team).w
                beq.w   loc_15352       ; branch if 0
                cmp.w   (c4playernum).w,d0
                beq.w   rtss2           ; exit if player controlled
loc_15352:                              ; CODE XREF: puckstick+262   j
                tst.w   (cont3team).w
                bne.w   loc_15362       ; branch if no team
                tst.w   (cont4team).w
                beq.w   _setd0player2   ; branch if no team
loc_15362:                              ; CODE XREF: puckstick+272   j
                movem.l d0/a3,-(sp)
                asl.w   #7,d0
                movea.l #$FFFFB04A,a3
                tst.w   $34(a3,d0.w)    ; check if goalie
                bne.w   loc_15386       ; branch if not
                btst    #3,$62(a3,d0.w) ; check if d0 player controlled
                beq.w   loc_15386       ; branch if not
                movem.l (sp)+,d0/a3     ; exit if player controlled
                rts
; ---------------------------------------------------------------------------
loc_15386:                              ; CODE XREF: puckstick+28E   j
                                        ; puckstick+298   j
                movem.l (sp)+,d0/a3
_setd0player2:                          ; CODE XREF: puckstick+27A   j
                cmp.w   #6,d0
                slt     d1
                ext.w   d1
                addq.w  #2,d1
                move.w  (lastplayer).w,d2
                cmp.w   (c2playernum).w,d2
                beq.w   loc_153AE
                cmp.w   (cont1team).w,d1
                bne.w   loc_153AE
                jmp     setc1player
; ---------------------------------------------------------------------------
loc_153AE:                              ; CODE XREF: puckstick+2B8   j
                                        ; puckstick+2C0   j
                cmp.w   (cont2team).w,d1
                bne.w   loc_153BC
                jmp     setc2player
; ---------------------------------------------------------------------------
loc_153BC:                              ; CODE XREF: puckstick+2CE   j
                cmp.w   (cont1team).w,d1
                bne.w   rtss2
                jmp     setc1player
; End of function puckstick


puckbody:                               ; CODE XREF: checkpuckcoll+192   p
                btst    #3,$64(a2)
                bne.w   rtss2
                cmpi.w  #8,$18(a3)
                bgt.w   _hit
                move.w  d0,d1
                andi.w  #$F,d1
                bne.w   rtss2
_hit:                                   ; CODE XREF: puckbody+10   j
                bsr.w   a2touchpuck
                move.w  #$24,-(sp) ; '$'
                bsr.w   sfx
                clr.w   $2C(a3)
                move.b  #8,$5E(a2)
                move.w  (a3),d0
                sub.w   (a2),d0
                move.w  $14(a3),d1
                sub.w   $14(a2),d1
                bne.w   loc_15414
                move.l  a2,-(sp)
                bsr.w   GetHot
loc_15414:                              ; CODE XREF: puckbody+40   j
                move.w  $28(a3),d2
                move.w  $2A(a3),d3
                move.b  d0,$28(a3)
                move.b  d1,$2A(a3)
                bsr.w   puckflip
                cmpi.w  #8,$18(a3)
                ble.w   rtss2
                muls.w  d2,d2
                muls.w  d3,d3
                add.l   d3,d2
                cmp.l   #$9000000,d2
                bls.w   loc_1544E
                cmpi.w  #$C,$18(a3)
                bgt.w   FallDown
                rts
; ---------------------------------------------------------------------------
loc_1544E:                              ; CODE XREF: puckbody+74   j
                bset    #5,$62(a2)
                bne.w   rtss2
                move.w  #$10D0,d1
                exg     a2,a3
                bsr.w   SetSPA
                exg     a2,a3
rtss2:                                  ; CODE XREF: assgoaliectrl+B0   j
                                        ; assgoaliectrl+D6   j ...
                rts
; End of function puckbody


; puck hits goalie a2
; a3 = puck
puckgoalie:                             ; CODE XREF: checkpuckcoll+32E   p
                btst    #4,(gmode).w    ; check if highlight
                bne.s   rtss2           ; exit if highlight
                clr.w   d2              ; puck region
                cmpi.w  #8,$18(a3)      ; compare to Zpos
                bgt.w   _1
                addq.w  #2,d2           ; add 2 to d2
_1:                                     ; CODE XREF: puckgoalie+10   j
                neg.w   d0              ; negate d0
                neg.w   d1              ; negate d1
                bsr.w   vtoa            ; convert directions
                sub.w   $54(a2),d0      ; sub facedir into d0
                andi.w  #7,d0           ; pass first 3 bits to d0
                                        ;
                                        ; 0 = puck straight in front of G
                                        ; 1-3 = puck to G right
                                        ; 4 = puck straight behind G
                                        ; 5-7 = puck to G left
                move.w  d0,d1           ; move d0 into d1
                andi.w  #3,d1           ; pass first 2 bits of d1
                bne.w   _2              ; will branch if puck is to the left or right of G
                move.w  (VDP_CNTR).l,d0 ; just for random bit
_2:                                     ; CODE XREF: puckgoalie+2C   j
                andi.w  #4,d0           ; pass 3rd bit of d0. d0 will be either 4 (left) or 0 (right)
                lsr.w   #2,d0           ; divide by 4. d0 will be either 1 (left) or 0 (right)
                eori.w  #1,d0           ; XOR d0 - will make 1 a 0 (left), and 0 a 1 (right)
                add.w   d0,d2           ; add to d2. d2 will now be 0 or 1 (Zpos > 8) or 2 or 3 (Zpos <= 8)
                add.w   d2,d2           ; add d2 to itself. 0 Glove L, 2 Glove R, 4 Stick L, 6 Stick R
                lea     _list(pc),a0    ; contains offsets for save attributes
                move.w  (a0,d2.w),d0    ; move from list into d0
                moveq   #$F,d1          ; move F into d1
                add.b   (a2,d0.w),d1    ; save odds - save attribute
                lea     _list2(pc),a0
                btst    #3,4(a2)        ; attribute a2 - x flip?
                beq.w   _3
                eori.w  #2,d2           ; XOR d2 with 2
_3:                                     ; CODE XREF: puckgoalie+5C   j
                move.w  6(a2),d0        ; move frame into d0
                move.w  #$197,-(sp)     ; push #SPFgoalie to stack
                cmp.w   #$233,d0        ; compare 233 hex to d0
                blt.w   _32             ; branch if less than
                move.w  #$292,(sp)      ; move #292 to stack
                lea     _list3(pc),a0
_32:                                    ; CODE XREF: puckgoalie+70   j
                sub.w   (sp)+,d0        ; sub stack value (SPFgoalie) from d0
                move.b  (a0,d0.w),d0    ; move value from list2 or list3 at offset to d0
                lsr.w   d2,d0           ; shift d0 by d2
                andi.w  #3,d0           ; pass first 2 bits of d0
                bclr    #2,(word_FFC2F4).w ; clear bit 2
                bsr.w   AddShotStat
                bsr.w   a2touchpuck
                cmpi.w  #$3000,(puckvy).w ; compare with puck velocity y
                bgt.w   _setsfx         ; branch if greater
                cmpi.w  #$D000,(puckvy).w ; compare -3000 with puckvy
                bgt.w   loc_15526       ; branch if greater
_setsfx:                                ; CODE XREF: puckgoalie+9C   j
                move.w  #$B,-(sp)       ; home song
                btst    #6,$62(a2)      ; check home or away
                beq.w   loc_15522       ; branch if home
                move.w  #$D,(sp)        ; away song
loc_15522:                              ; CODE XREF: puckgoalie+B4   j
                bsr.w   song
loc_15526:                              ; CODE XREF: puckgoalie+A6   j
                move.w  #$24,-(sp) ; '$' ; #SFXpuckbody
                bsr.w   sfx
                move.w  (puckc).w,d2    ; move puckc into d2
                bmi.w   _chkanim        ; branch if no puckc
                st      (puckc).w
                asl.w   #7,d2
                movea.w #(SortCords-M68K_RAM),a0
                adda.w  d2,a0
                move.b  #$14,$5E(a0)
                move.w  $52(a0),(lastplayer).w
                bclr    #2,(sflags).w
                bclr    #3,(sflags).w
_bounceoff:                             ; CODE XREF: puckgoalie+134   j
                                        ; puckgoalie+19A   j ...
                clr.w   $2C(a3)         ; clear puck Zvel
                move.b  #$A,$5E(a2)     ; move A into nopuck collision
                move.w  #4,$46(a2)      ; move 4 into temp4
                move.w  (a3),d0         ; move puck Xpos into d0
                sub.w   (a2),d0         ; sub Xpos of goalie from d0
                move.w  $14(a3),d1      ; move puck Ypos into d1
                sub.w   $14(a2),d1      ; sub Ypos of goalie from d1
                bne.w   loc_15580       ; branch if not equal
                move.l  a2,-(sp)        ; pop onto stack
                bsr.w   GetHot
loc_15580:                              ; CODE XREF: puckgoalie+110   j
                move.b  d0,$28(a3)      ; move d0 into puck Xvel
                move.b  d1,$2A(a3)      ; move d1 into puck Yvel
                bra.w   puckflip        ; flip puck
; ---------------------------------------------------------------------------
                bset    #2,(word_FFC2F4).w ; set bit 2
                rts
; ---------------------------------------------------------------------------
_chkanim:                               ; CODE XREF: puckgoalie+CC   j
                cmpi.w  #$2F4,$58(a2)   ; check for goalie dive animation
                beq.s   _bounceoff      ; branch if equal
                moveq   #2,d0           ; move 2 into d0
                add.b   $6C(a2),d0      ; add puck control to d0
                asl.w   #8,d0           ; mult by 256
                asl.w   #1,d0           ; mult by 2
                bsr.w   randomd0        ; random
                addi.w  #$C00,d0        ; add C00 to d0
                add.w   d0,d0           ; double d0
                bpl.w   _pos            ; branch if positive
                move.w  #$7FFF,d0       ; make max positive
_pos:                                   ; CODE XREF: puckgoalie+14A   j
                btst    #1,$63(a2)      ; check if in animation
                bne.w   _chkpuckv       ; branch if so
                cmpi.w  #$2C,(a3) ; ',' ; compare 2C to Xpos of puck
                bgt.w   _chkpuckv       ; branch if greater than
                cmpi.w  #$FFD4,(a3)
                blt.w   _chkpuckv       ; branch if less than -2C
                cmpi.w  #$10E,$14(a3)   ; compare 10E to puck Ypos
                bgt.w   _chkpuckv       ; branch if greater than
                cmpi.w  #$FEF2,$14(a3)  ; compare to -10E
                blt.w   _chkpuckv       ; branch if less than
                cmpi.w  #$D2,$14(a3)    ; compare D2 to Ypos
                bgt.w   _closepuck      ; branch if greater than
                cmpi.w  #$FF2E,$14(a3)  ; compare -D2 to Ypos
                bgt.w   _chkpuckv       ; branch if greater than
_closepuck:                             ; CODE XREF: puckgoalie+186   j
                asr.w   #2,d0           ; divide by 4
_chkpuckv:                              ; CODE XREF: puckgoalie+158   j
                                        ; puckgoalie+160   j ...
                cmp.w   (puckvx).w,d0   ; compare puckvx with d0
                blt.w   _bounceoff      ; branch if less than
                cmp.w   (puckvy).w,d0   ; compare puckvy to d0
                blt.w   _bounceoff      ; branch if less than
                neg.w   d0              ; negate d0, compare if shot going down
                cmp.w   (puckvx).w,d0
                bgt.w   _bounceoff      ; branch if greater than
                cmp.w   (puckvy).w,d0
                bgt.w   _bounceoff      ; branch if greater than
                btst    #2,$63(a2)      ; check if player unavailable
                bne.w   _bounceoff      ; branch if so
                clr.w   $2C(a3)         ; clear puck Zvel
                bra.w   _glue
; End of function puckgoalie
; ---------------------------------------------------------------------------
_list:          dc.w $73                ; DATA XREF: puckgoalie+44   o
                                        ; GGSleft
                dc.w $6E                ; GGSright
                dc.w $70                ; GSSleft
                dc.w $72                ; GSSright
; ---------------------------------------------------------------------------
deflect:                                ; CODE XREF: puckstick+F6   j
                st      (puckc).w
                move.w  #$1000,d0
                bsr.w   randomd0s
                move.w  d0,$2A(a3)
                move.w  #$1000,d0
                bsr.w   randomd0s
                move.w  d0,$28(a3)
                move.w  #$1000,d0
                bsr.w   randomd0
                move.w  d0,$2C(a3)
                bra.w   puckflip


; pass d0 as value to be scaled by player a3's energy level
; return d0 as result
makepde:                                ; CODE XREF: doshot+90   p
                                        ; puckstick+72   p ...
                ext.w   d0
                move.w  d0,-(sp)
                movem.l d1/a2-a3,-(sp)
                movea.l a0,a3
                bsr.w   getpde
                btst    #4,(byte_FFC2FC).w
                beq.w   _0
                move.w  #$1000,d0
_0:                                     ; CODE XREF: makepde+14   j
                movem.l (sp)+,d1/a2-a3
                muls.w  (sp)+,d0
                asl.l   #4,d0
                swap    d0
                ext.l   d0
                rts
; End of function makepde


; get player a3's energy level into d0
getpde:                                 ; CODE XREF: burst   p
                                        ; playeracc+AC   p ...
                movea.w #(HmShots-M68K_RAM),a2
                btst    #6,$62(a3)      ; #pfteam - home or away
                beq.w   _0
                adda.w  #$364,a2        ; team is away
_0:                                     ; CODE XREF: getpde+A   j
                move.b  $66(a3),d1      ; pnum
                ext.w   d1
                add.w   d1,d1
                move.w  $32(a2,d1.w),d0
                rts
; End of function getpde


; d1 = rostnum of player
; d0 = new energy level
setpde:                                 ; CODE XREF: burst+12   p
                                        ; playeracc+186   j ...
                tst.w   d0
                bpl.w   _0
                clr.w   d0
_0:                                     ; CODE XREF: setpde+2   j
                move.w  d0,$32(a2,d1.w)
                rts
; End of function setpde


SetPersonel:                            ; CODE XREF: ROM:00009E76   p
                                        ; lcfound+2A   p ...
                movem.l d0-d5/a0-a4,-(sp)
                movea.w $22(a2),a3
                moveq   #5,d4
loc_15792:                              ; CODE XREF: SetPersonel+16   j
                st      $60(a3)
                st      $61(a3)
                adda.w  #$80,a3
                dbf     d4,loc_15792
                bsr.w   sub_15832
                moveq   #5,d4
                movea.w #(unk_FFCF14-M68K_RAM),a4
loc_157AC:                              ; CODE XREF: SetPersonel:loc_157E0   j
                clr.w   d5
                move.b  (a4,d4.w),d5
                beq.w   loc_157E0
                subq.w  #1,d5
                moveq   #5,d3
                movea.w $22(a2),a3
                suba.w  #$80,a3
loc_157C2:                              ; CODE XREF: SetPersonel+42   j
                adda.w  #$80,a3
                cmp.b   $66(a3),d5
                dbeq    d3,loc_157C2
                bne.w   loc_157E0
                move.b  6(a4,d4.w),$60(a3)
                move.b  d5,$61(a3)
                clr.b   (a4,d4.w)
loc_157E0:                              ; CODE XREF: SetPersonel+2A   j
                                        ; SetPersonel+46   j
                dbf     d4,loc_157AC
                moveq   #5,d4
                movea.w #(unk_FFCF14-M68K_RAM),a4
loc_157EA:                              ; CODE XREF: SetPersonel:loc_15828   j
                clr.w   d5
                move.b  (a4,d4.w),d5
                beq.w   loc_15828
                subq.w  #1,d5
                moveq   #5,d3
                movea.w $22(a2),a3
                suba.w  #$80,a3
loc_15800:                              ; CODE XREF: SetPersonel+80   j
                                        ; SetPersonel+8E   j
                adda.w  #$80,a3
                tst.b   $61(a3)
                dbmi    d3,loc_15800
                bpl.w   loc_15812
                movea.w a3,a0
loc_15812:                              ; CODE XREF: SetPersonel+84   j
                tst.w   $34(a3)
                dbpl    d3,loc_15800
                move.b  6(a4,d4.w),$60(a0)
                move.b  d5,$61(a0)
                clr.b   (a4,d4.w)
loc_15828:                              ; CODE XREF: SetPersonel+68   j
                dbf     d4,loc_157EA
                movem.l (sp)+,d0-d5/a0-a4
                rts
; End of function SetPersonel


sub_15832:                              ; CODE XREF: SetPersonel+1A   p
                movea.w #(unk_FFCF14-M68K_RAM),a4
                clr.l   (a4)
                clr.w   4(a4)
                movea.l #unk_19286,a0
                tst.w   $26(a2)
                bpl.w   loc_1584C
                addq.w  #1,a0
loc_1584C:                              ; CODE XREF: sub_15832+14   j
                lea     $16A(a2),a1
                move.w  $16(a2),d0
                asl.w   #3,d0
                adda.w  d0,a1
                move.w  $24(a2),d4
                bra.w   loc_1587E
; ---------------------------------------------------------------------------
loc_15860:                              ; CODE XREF: sub_15832:loc_1587E   j
                clr.w   d5
                move.b  (a0,d4.w),d5
                move.b  (a1,d5.w),(a4,d4.w)
                move.b  d5,6(a4,d4.w)
                bne.w   loc_1587E
                moveq   #1,d3
                add.w   $26(a2),d3
                move.b  d3,(a4,d4.w)
loc_1587E:                              ; CODE XREF: sub_15832+2A   j
                                        ; sub_15832+3E   j
                dbf     d4,loc_15860
                moveq   #5,d4
loc_15884:                              ; CODE XREF: sub_15832:loc_158D6   j
                move.b  (a4,d4.w),d3
                beq.w   loc_158D6
                ext.w   d3
                subq.w  #1,d3
                add.w   d3,d3
                cmpi.w  #$FFFD,$66(a2,d3.w)
                beq.w   loc_158AE
                cmpi.w  #$FFFC,$66(a2,d3.w)
                beq.w   loc_158AE
                tst.w   $66(a2,d3.w)
                ble.w   loc_158D6
loc_158AE:                              ; CODE XREF: sub_15832+66   j
                                        ; sub_15832+70   j
                lea     $16A(a2),a1
                move.b  6(a4,d4.w),d0
                ext.w   d0
                asl.w   #1,d0
                movea.l #unk_1921C,a0
                adda.w  (a0,d0.w),a0
loc_158C4:                              ; CODE XREF: sub_15832+A2   j
                clr.w   d0
                move.b  (a0)+,d0
                bmi.w   loc_158DC
                move.b  (a1,d0.w),d0
                bsr.w   sub_158F2
                beq.s   loc_158C4
loc_158D6:                              ; CODE XREF: sub_15832+56   j
                                        ; sub_15832+78   j ...
                dbf     d4,loc_15884
                rts
; ---------------------------------------------------------------------------
loc_158DC:                              ; CODE XREF: sub_15832+96   j
                jsr     (sub_9F9A).l
                move.w  d0,d3
loc_158E4:                              ; CODE XREF: sub_15832+BC   j
                move.w  d3,d0
                subq.w  #1,d3
                bmi.s   loc_158D6
                bsr.w   sub_158F2
                beq.s   loc_158E4
                bra.s   loc_158D6
; End of function sub_15832


sub_158F2:                              ; CODE XREF: sub_15832+9E   p
                                        ; sub_15832+B8   p
                move.w  d0,d1
                subq.w  #1,d0
                add.w   d0,d0
                tst.w   $66(a2,d0.w)
                bgt.w   loc_15928
                cmpi.w  #$FFFD,$66(a2,d0.w)
                beq.w   loc_15928
                cmpi.w  #$FFFC,$66(a2,d0.w)
                beq.w   loc_15928
                moveq   #5,d0
loc_15916:                              ; CODE XREF: sub_158F2+28   j
                cmp.b   (a4,d0.w),d1
                dbeq    d0,loc_15916
                beq.w   loc_15928
                move.b  d1,(a4,d4.w)
                rts
; ---------------------------------------------------------------------------
loc_15928:                              ; CODE XREF: sub_158F2+A   j
                                        ; sub_158F2+14   j ...
                clr.w   d1
                rts
; End of function sub_158F2


sub_1592C:                              ; CODE XREF: puckpenshot+F4   p
                                        ; puckpenshot+100   p
                movem.l d0-d5/a0-a3,-(sp)
                movea.w $22(a2),a3
                moveq   #5,d4
loc_15936:                              ; CODE XREF: sub_1592C+72   j
                move.w  $52(a3),d0
                cmp.w   (BA_Sktr_SCnum).w,d0
                beq.w   loc_1595C
                cmp.w   (BA_Goalie_SCnum).w,d0
                beq.w   loc_15976
                bset    #2,$63(a3)      ; set player unavailable
                move.w  #$20,d0 ; ' '   ; assignment CAE0?
                bsr.w   assreplace
                bra.w   loc_15992
; ---------------------------------------------------------------------------
loc_1595C:                              ; CODE XREF: sub_1592C+12   j
                bsr.w   Setplass
                move.b  $61(a3),(byte_FFC31E).w
                move.b  (BA_Skater_Offset+1).w,$61(a3)
                move.w  #4,$34(a3)
                bra.w   loc_1597E
; ---------------------------------------------------------------------------
loc_15976:                              ; CODE XREF: sub_1592C+1A   j
                bsr.w   Setplass
                clr.w   $34(a3)
loc_1597E:                              ; CODE XREF: sub_1592C+46   j
                clr.w   d3
                move.b  $61(a3),d3
                add.w   d3,d3
                move.w  #$FFFF,$66(a2,d3.w)
                lsr.w   #1,d3
                bsr.w   setplayer
loc_15992:                              ; CODE XREF: sub_1592C+2C   j
                st      $61(a3)
                st      $60(a3)
                adda.w  #$80,a3
                dbf     d4,loc_15936
                movem.l (sp)+,d0-d5/a0-a3
                rts
; End of function sub_1592C


; no skating on/off - force players to correct data (for faceoffs only)
; a2=  team struct
forcepldata:                            ; CODE XREF: puckfaceoff2+152   p
                                        ; puckfaceoff2+15E   p ...
                movem.l d0-d4/a0-a3,-(sp)
                movea.w $22(a2),a3      ; 22 offset of team struct is tmsort (address of first sort obj)
                moveq   #5,d4           ; will run the loop 6 times
_top:                                   ; CODE XREF: forcepldata+72   j
                move.b  $60(a3),d0      ; newpos = requested next pos of player
                ext.w   d0
                tst.w   $34(a3)         ; check for goalie
                bne.w   loc_159DA
                tst.w   d0              ; is he staying as a goalie?
                beq.w   loc_159DA
                move.w  $52(a3),-(sp)   ; push SCNum to stack
                move.w  #$F,$52(a3)     ; put F into SCNum
                jsr     (nullsub_2).l   ; code removed?
                move.w  (sp)+,$52(a3)   ; pop original SCNum back into SCNum
loc_159DA:                              ; CODE XREF: forcepldata+14   j
                                        ; forcepldata+1A   j
                move.w  d0,$34(a3)      ; move newpos(d0) into position
                bmi.w   _next
                bsr.w   Setplass
                cmpi.w  #4,$34(a3)      ; check if C
                bne.w   _notnear        ; branch if not
                move.l  #$11,d0         ; $11 = anearest
                bsr.w   assinsert
_notnear:                               ; CODE XREF: forcepldata+44   j
                clr.w   d3
                move.b  $61(a3),d3      ; move newpnum into d3
                add.w   d3,d3           ; add d3 to itself
                move.w  #$FFFF,$66(a2,d3.w) ; move -1 into tmpdst
                                        ; put player on the ice
                lsr.w   #1,d3           ; divide d3 by 2
                bsr.w   setplayer
_next:                                  ; CODE XREF: forcepldata+36   j
                st      $61(a3)         ; set newpnum to FF
                st      $60(a3)         ; set newpos to FF
                adda.w  #$80,a3         ; move to next sortobj (player struct)
                dbf     d4,_top
                movem.l (sp)+,d0-d4/a0-a3
                rts
; End of function forcepldata


; remove all players from pen box/put all players on their own bench
ResetBench:                             ; CODE XREF: puckpenshot+E8   p
                                        ; puckfaceoff2+146   p ...
                clr.b   (PBnum).w       ; PBnum = HV00
                                        ; H = home players in PB
                                        ; V = away players in PB
                moveq   #$10,d1
                movea.w #(HmShots-M68K_RAM),a0
                bsr.w   _rb
                moveq   #1,d1
                adda.w  #$364,a0        ; change to Away Team
_rb:                                    ; CODE XREF: ResetBench+A   p
                moveq   #$32,d0 ; '2'   ; $32 = (MaxRos-1)*2 = 50 decimal
_rb1:                                   ; CODE XREF: ResetBench+60   j
                add.b   d1,(PBnum).w
                tst.w   $66(a0,d0.w)    ; check tmpdst
                                        ; check and see which players are in the box
                                        ; (-2=bench, -1=ice, 0+=pen box)
                                        ; starts from end of list and works backwards through loop
                ble.w   _cont
                btst    #4,$66(a0,d0.w) ; test 3rd bit in tmpdst (4 decimal)
                beq.w   _next
                move.w  $66(a0,d0.w),d2 ; move tmpdst into d2
                andi.w  #$7FF,d2        ; mask 7FF with d2. Passes lowest 11 bits
                bne.w   _next
                sub.b   d1,(PBnum).w
                bra.w   _next
; ---------------------------------------------------------------------------
_cont:                                  ; CODE XREF: ResetBench+1E   j
                sub.b   d1,(PBnum).w
                cmpi.w  #$FFFD,$66(a0,d0.w) ; compare -4 with tmpdst
                beq.w   _next
                cmpi.w  #$FFFC,$66(a0,d0.w) ; compare -3 with tmpdst
                beq.w   _next
                move.w  #$FFFE,$66(a0,d0.w) ; move -2 into tmpdst
_next:                                  ; CODE XREF: ResetBench+28   j
                                        ; ResetBench+34   j ...
                subq.w  #2,d0
                bpl.s   _rb1
; End of function ResetBench
                rts


; set players (a3) initial assignment
Setplass:                               ; CODE XREF: check4bench+80   j
                                        ; check4bench+90   j ...
                move.w  $34(a3),d0
                bmi.w   rtss2
                lea     _alist(pc),a0
                move.b  (a0,d0.w),d0
                bra.w   assreplace
; End of function Setplass
; ---------------------------------------------------------------------------


; Bring player onto the ice and set his attributes
; d3 = offset of player on roster
; a3 = sortcord of player
setplayer:                              ; CODE XREF: assbench+132   j
                                        ; puckpenshot+15A   p ...
                bclr    #6,$63(a3)      ; clear line change mode? (I believe pflags2 are 1 off because of fighting missing)
                movea.w #(HmShots-M68K_RAM),a0 ; Start of Team Struct
                btst    #6,$62(a3)      ; checks if home or away (if 0, home)
                beq.w   _0
AwayTeam:                               ; $364 = size of Team Struct
                adda.w  #$364,a0
_0:                                     ; CODE XREF: setplayer+10   j
                move.b  d3,$66(a3)      ; move d3 into pnum (offset on roster)
                move.l  #$A,d0          ; $A = #aepen
                ext.w   d3
                add.w   d3,d3           ; in NHL92 = asl #1,d3. Accomplishes the same. Doubles d3
                move.w  $66(a0,d3.w),d1 ; move tmpdst(a0, d3) into d1
                bpl.w   _da
                move.l  #9,d0           ; assben
                cmp.w   #$FFFE,d1       ; -2 in this case
                bne.w   _nda
_da:                                    ; CODE XREF: setplayer+2A   j
                bsr.w   assinsert
                bclr    #5,$62(a3)
                clr.w   $58(a3)
_nda:                                   ; CODE XREF: setplayer+38   j
                move.w  #$FFFF,$66(a0,d3.w) ; clear out temp space
                lsr.w   #1,d3           ; shift d3 back to its original value
                movea.l $1E(a0),a0      ; Offset 1E from Team Struct = The address where the team's data is stored (roster, etc)
                move.l  a0,-(sp)        ; pushes starting position onto the stack
                adda.w  8(a0),a0        ; moves to offset where Off/Def byte is. From here 94 differs from 92
                clr.l   (PPBonus).w     ; Clears all bonuses
                tst.w   $34(a3)         ; check if goalie
                beq.w   _playdatamove
                btst    #5,(sflags2).w  ; might be checking for a PP
                beq.w   _habonus
                bsr.w   chkpk2          ; prob determines what team is PP or PK
                beq.w   _pk
                move.b  1(a0),(PPBonus).w ; moves PP/PK byte into PPBonus
                andi.b  #$F,(PPBonus).w ; passes lower nibble of PP/PK byte (bug)
                bra.w   _habonus
; ---------------------------------------------------------------------------
_pk:                                    ; CODE XREF: setplayer+76   j
                move.b  1(a0),d0        ; moves PP/PK byte into d0
                lsr.b   #4,d0           ; shifts d0.b 4 places, to remove the lower nibble
                neg.b   d0              ; switches value to negative (because its a PK, its negative bonus)
                move.b  d0,(PKBonus).w  ; move d0 into PKBonus
_habonus:                               ; CODE XREF: setplayer+6E   j
                                        ; setplayer+86   j
                move.b  2(a0),d0        ; This is location of Home/Away adv
                andi.b  #$F,d0          ; pass the lower nibble (Away) to d0
                neg.b   d0              ; make d0 negative (away disadvantage)
                btst    #6,$62(a3)      ; check if player is home or away
                bne.w   _3rdperbonuscheck
                move.b  2(a0),d0        ; player is home, move Home/Away byte back in to d0
                lsr.b   #4,d0           ; Shift d0 4 places right, to move upper nibble into d0
_3rdperbonuscheck:                      ; CODE XREF: setplayer+A6   j
                move.b  d0,(HmAwBonus).w ; move d0 into HA bonus
                cmpi.w  #2,(gsp).w      ; Check if period is 3rd or OT
                blt.w   _playdatamove
                bgt.w   _chklead        ; branch if OT
                jsr     ClockLength     ; find period length
                lsr.w   #1,d0           ; divide by 2 (5 min length = 2:30)
                cmp.w   (gameclock).w,d0 ; compare to game clock
                bgt.w   _playdatamove   ; branch if d0 greater than gameclock (bug)
_chklead:                               ; CODE XREF: setplayer+BE   j
                move.w  (HmGoals).w,d0
                sub.w   (AwGoals).w,d0  ; HmGoals-AwGoals
                beq.w   _load3pbonus    ; branch if tied
                btst    #6,$62(a3)      ; Check if home or away
                beq.w   _home           ; branch if home
                eori    #8,ccr          ; If Aw team, checks if N flag is set from HmGoals-AwGoals.
                                        ; Xors the CCR, if N flag set, it will make it 0, if cleared, will make it 1.
                                        ; If Aw team leading, it will jump boost for away team.
_home:                                  ; CODE XREF: setplayer+E2   j
                bpl.w   _playdatamove   ; branch for the team who is leading
_load3pbonus:                           ; CODE XREF: setplayer+D8   j
                move.b  #2,(ThirdPBonus).w ; move 2 into 3rd Per Bonus
_playdatamove:                          ; CODE XREF: setplayer+64   j
                                        ; setplayer+BA   j ...
                movea.l (sp)+,a0        ; moves Team Data start to a0
                adda.w  (a0),a0         ; moves to player data offset (byte 0 and 1 of Team Data)
_skiploop:                              ; CODE XREF: setplayer+FC   j
                adda.w  (a0),a0         ; skips the player's name length (current byte is name length)
                addq.w  #8,a0           ; skips players attributes
                dbf     d3,_skiploop    ; loops until current player index is met (which was stored in d3)
                subq.w  #8,a0           ; Jump back to start of players attributes
                move.b  (a0),$6F(a3)    ; Jersey Number
                move.b  1(a0),d3        ; move Wgt/Agl byte to d3
                andi.w  #$F0,d3         ; Mask Wgt nibble
                lsr.w   #1,d3           ; shift d3 1 bit right (This is taking Wgt and mult by 8)
                move.b  d3,$67(a3)      ; store in player struct
                move.b  1(a0),d3        ; move Wgt/Agl byte to d3
                andi.b  #$F,d3          ; mask Agl nibble
                move.w  #3,(word_FFBF14).w ; move 3 into BF14
                jsr     (AttributeCalc).l ; attribute math and add hot/cold
                move.b  d3,$68(a3)      ; move Agl byte to player struct
                move.b  2(a0),d3        ; load Spd/OfA byte to d3
                lsr.b   #4,d3           ; remove OfA nibble by shifting 4 bits right, moving Spd into lower nibble
                move.w  #4,(word_FFBF14).w ; move 4 into BF14
                jsr     (AttributeCalc).l
                move.b  d3,$69(a3)      ; move Spd byte into player struct
                move.b  2(a0),d3        ; move Spd/OfA byte to d3
                andi.b  #$F,d3          ; mask d3 and pass only OfA nibble
                move.w  #5,(word_FFBF14).w ; move 5 into BF14
                jsr     (AttributeCalc).l
                add.b   (PPBonus).w,d3  ; add Bonsuses to OfA
                add.b   (PKBonus).w,d3
                add.b   (HmAwBonus).w,d3
                add.b   (ThirdPBonus).w,d3
                bsr.w   checkattriblimits
                lsr.b   #1,d3           ; shift right 1 bit (divide by 2)
                eori.b  #$F,d3          ; XOR d3 with F
                addi.b  #$F,d3          ; add F to d3
                lsr.b   #1,d3           ; divide by 2
                move.b  d3,$6A(a3)      ; OfA byte = (30-((OfA + Bonuses)/2))/2
                move.b  3(a0),d3        ; move DfA/ShP byte to d3
                lsr.b   #4,d3           ; see above
                move.w  #6,(word_FFBF14).w
                jsr     (AttributeCalc).l
                add.b   (HmAwBonus).w,d3
                bsr.w   checkattriblimits
                lsr.b   #1,d3
                eori.b  #$F,d3
                addi.b  #$F,d3
                lsr.b   #1,d3
                move.b  d3,$6B(a3)      ; same math and formula as OfA
                move.b  3(a0),$6C(a3)
                andi.b  #$F,$6C(a3)
                move.b  $6C(a3),d3
                move.w  #7,(word_FFBF14).w
                jsr     (AttributeCalc).l
                move.b  d3,$6C(a3)      ; ShP does not get any bonuses
                move.b  4(a0),d3        ; move Chk/Hnd byte into d3
                lsr.b   #4,d3
                move.w  #8,(word_FFBF14).w
                jsr     (AttributeCalc).l
                add.b   (ThirdPBonus).w,d3 ; Chk gets 3rd P bonus only
                bsr.w   checkattriblimits
                move.b  d3,$75(a3)      ; move Chk into player struct
                bclr    #3,4(a3)        ; clear bit 3 in attribute of player struct
                move.b  4(a0),$76(a3)   ; move Chk/Hnd byte to Hnd in player struct
                andi.b  #1,$76(a3)      ; masks Hnd byte with 1, only passing first bit
                eori.b  #1,$76(a3)      ; XOR Hnd byte with 1. Sets to opposite what the bit was.
                                        ; So L will be a 1 and R will be a 0
                bne.w   _attribloadcont
                bset    #3,4(a3)        ; sets bit 3 of attribute byte in player struct (to match Hnd if Hnd bit is set)
_attribloadcont:                        ; CODE XREF: setplayer+1FA   j
                move.b  4(a0),$74(a3)   ; moves Chk/Hnd byte into Fgt byte in player struct
                andi.b  #$E,$74(a3)     ; mask the byte with E, ignoring the Hnd bit - will always be even
                move.b  5(a0),d3        ; move Stk/ShA byte into d3
                lsr.b   #4,d3
                move.w  #$A,(word_FFBF14).w
                jsr     (AttributeCalc).l
                add.b   (PPBonus).w,d3
                add.b   (PKBonus).w,d3
                add.b   (HmAwBonus).w,d3
                bsr.w   checkattriblimits
                move.b  d3,$71(a3)      ; Stk gets PP/PK/Tm Bonus
                move.b  5(a0),d3
                andi.b  #$F,d3
                move.w  #$B,(word_FFBF14).w
                jsr     (AttributeCalc).l
                add.b   (PPBonus).w,d3
                add.b   (PKBonus).w,d3
                add.b   (HmAwBonus).w,d3
                bsr.w   checkattriblimits
                move.b  d3,$6D(a3)      ; ShA gets PP/PK/Tm Bonus
                move.b  6(a0),d3        ; move End/PS Bias byte into d3
                lsr.b   #4,d3
                move.w  #$C,(word_FFBF14).w
                jsr     (AttributeCalc).l
                move.b  d3,$72(a3)      ; End gets no bonuses
                move.b  6(a0),d3
                andi.b  #$F,d3
                move.w  #$D,(word_FFBF14).w
                jsr     (AttributeCalc).l
                add.b   (ThirdPBonus).w,d3
                add.b   (ThirdPBonus).w,d3
                bsr.w   checkattriblimits
                move.b  d3,$70(a3)      ; PS Bias gets a double 3rd P bonus
                move.b  7(a0),d3        ; move Pas/Agr byte into d3
                lsr.b   #4,d3
                move.w  #$E,(word_FFBF14).w
                jsr     (AttributeCalc).l
                add.b   (PPBonus).w,d3
                add.b   (HmAwBonus).w,d3
                bsr.w   checkattriblimits
                move.b  d3,$6E(a3)      ; Pas gets PP and Tm bonus
                move.b  7(a0),$73(a3)   ; moves Pas/Agr into Agr byte in player struct
                move.b  $73(a3),d3      ; moves Pas/Agr byte into d3 (weird way to do it)
                andi.b  #$F,d3
                move.w  #$F,(word_FFBF14).w
                jsr     (AttributeCalc).l
                move.b  d3,$73(a3)      ; Agr gets no bonus
                andi.b  #$F,$73(a3)     ; mask Agr byte with F, so max is 15 decimal
                rts
; End of function setplayer


checkattriblimits:                      ; CODE XREF: setplayer+166   p
                                        ; setplayer+190   p ...
                tst.b   d3              ; test if d3 is zero or higher
                bpl.w   _pos
                clr.w   d3              ; if negative, clear
_pos:                                   ; CODE XREF: checkattriblimits+2   j
                cmp.b   #$1E,d3         ; compare upper limit
                ble.w   _withinlimits
                move.w  #$1E,d3         ; if higher, set to 1E
_withinlimits:                          ; CODE XREF: checkattriblimits+C   j
                rts
; End of function checkattriblimits
; ---------------------------------------------------------------------------
loc_15D9A:                              ; DATA XREF: setupice+194   o
                                        ; sub_16BAC+CC   o
                movem.l d0-d7/a0-a6,-(sp)
                btst    #2,(disflags).w
                bne.w   loc_15DBA
                bclr    #0,(disflags).w
                beq.w   loc_15DB6
                bsr.w   sub_15E6E
loc_15DB6:                              ; CODE XREF: ROM:00015DAE   j
                bsr.w   cramfade
loc_15DBA:                              ; CODE XREF: ROM:00015DA4   j
                btst    #0,(sflags).w
                bne.w   loc_15E1A
                btst    #2,(word_FFC2FA).w
                bne.w   loc_15DD8
                btst    #0,(gmode).w
                bne.w   loc_15E1A
loc_15DD8:                              ; CODE XREF: ROM:00015DCA   j
                btst    #1,(word_FFC2FA).w
                bne.w   loc_15E2A
                tst.w   (gameclock).w
                beq.w   loc_15E1A
                subi.w  #$AAA,(word_FFC46A).w
                bcc.w   loc_15E1A
                bset    #3,(disflags).w
                subq.w  #1,(gameclock).w
                cmpi.w  #$3D,(gameclock).w ; '='
                bgt.w   loc_15E1A
                cmpi.w  #$3C,(gameclock).w ; '<'
                blt.w   loc_15E1A
                move.w  #2,-(sp)
                bsr.w   sfx
loc_15E1A:                              ; CODE XREF: ROM:00015DC0   j
                                        ; ROM:00015DD4   j ...
                addq.w  #1,(vcount).w
                jsr     (sub_1A50A).l
                movem.l (sp)+,d0-d7/a0-a6
                rte
; ---------------------------------------------------------------------------
loc_15E2A:                              ; CODE XREF: ROM:00015DDE   j
                tst.w   (word_FFD454).w
                beq.s   loc_15E1A
                subi.w  #$AAA,(word_FFD456).w
                bcc.s   loc_15E1A
                bset    #3,(disflags).w
                btst    #7,(word_FFC2FA).w
                bne.s   loc_15E1A
                subq.w  #1,(word_FFD454).w
                bra.s   loc_15E1A
; ---------------------------------------------------------------------------
loc_15E4C:                              ; DATA XREF: forcefade+10   o
                                        ; sub_17A18   o ...
                movem.l d0-d7/a0-a6,-(sp)
                btst    #2,(disflags).w
                bne.w   loc_15E5E
                bsr.w   cramfade
loc_15E5E:                              ; CODE XREF: ROM:00015E56   j
                addq.w  #1,(vcount).w
                jsr     (sub_1A50A).l
                movem.l (sp)+,d0-d7/a0-a6


IRQ7:                                   ; DATA XREF: ROM:00000060   o
                                        ; ROM:00000064   o ...
                rte
; End of function IRQ7


sub_15E6E:                              ; CODE XREF: ROM:00015DB2   p
                bsr.w   sub_15EA4
; End of function sub_15E6E


sub_15E72:                              ; CODE XREF: ROM:00017C5A   p
                movea.w #(unk_FFC018-M68K_RAM),a0
                move.w  (word_FFC2E8).w,d0
                move.w  (VSPRITES).w,d1
                bsr.w   DoDMA
; End of function sub_15E72


sub_15E82:                              ; CODE XREF: setupice+18C   p
                                        ; sub_16BAC+BE   p
                movea.l (dword_FFBD14).w,a6
                cmpa.l  #$FFFFB8B4,a6
                beq.w   rtss2
loc_15E90:                              ; CODE XREF: sub_15E82+1E   j
                move.w  -(a6),d1
                move.w  -(a6),d0
                movea.l -(a6),a0
                bsr.w   DoDMA
                cmpa.l  #$FFFFB8B4,a6
                bne.s   loc_15E90
                rts
; End of function sub_15E82


sub_15EA4:                              ; CODE XREF: sub_15E6E   p
                move.w  (VSCRLPM).w,d0
                addq.w  #2,d0
                bsr.w   Vmaddr
                move.w  (Hscroll).w,(a0)
                move.l  #$40020010,4(a0)
                move.w  (Vscroll).w,(a0)
                rts
; End of function sub_15EA4


; this is not vblank code but sets up ram for vblank transfer
setvideo:                               ; CODE XREF: Gameloop+4A   j
                                        ; sub_7CF8+BC   p ...
                movem.l d0-d7/a0-a6,-(sp)
loc_15EC4:                              ; CODE XREF: setvideo+A   j
                btst    #0,(disflags).w
                bne.s   loc_15EC4
                movea.w #(unk_FFB8B4-M68K_RAM),a5
                bsr.w   updatescroll
                movea.w #(unk_FFC018-M68K_RAM),a6
                moveq   #1,d6
                bsr.w   checkfo
                bsr.w   sub_16480
                bsr.w   sub_165FC
                bsr.w   sub_1661A
                bsr.w   sub_162FE
                bsr.w   showzam
                jsr     (sub_FD78A).l
                bsr.w   showcrowd
                bsr.w   showref
                jsr     (Crowd_Noise?).l
                cmpa.w  #$C018,a6
                bne.w   loc_15F12
                clr.l   (a6)+
                clr.l   (a6)+
loc_15F12:                              ; CODE XREF: setvideo+4A   j
                clr.b   -5(a6)
                move.l  a6,d0
                subi.l  #$FFFFC018,d0
                lsr.w   #1,d0
                move.w  d0,(word_FFC2E8).w
                move.l  a5,(dword_FFBD14).w
                bset    #0,(disflags).w
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function setvideo


updatescroll:                           ; CODE XREF: setvideo+10   p
                btst    #7,(sflags).w
                bne.w   rtss2
                moveq   #$FFFFFFC0,d0
                sub.w   (Hpos).w,d0
                move.w  (Vpos).w,d1
                move.w  d0,(Hscroll).w
                move.w  d1,(Vscroll).w
                neg.w   (Vscroll).w
                move.w  (Oldrow).w,d4
                asr.w   #3,d1
                move.w  d1,(Oldrow).w
                moveq   #$1F,d3
                cmp.w   d4,d1
                beq.w   rtss2
                movea.l #unk_5605A,a0
                btst    #4,(word_FFC2F4).w
                beq.w   loc_15F7C
                movea.l #unk_B5180,a0
loc_15F7C:                              ; CODE XREF: updatescroll+3E   j
                adda.l  4(a0),a0
                blt.w   _su0
_sd:                                    ; CODE XREF: updatescroll+80   j
                move.w  d1,d0
                neg.w   d0
                addi.w  #$1E,d0
                andi.w  #$1F,d0
                asl.w   #7,d0
                add.w   (VmMap2).w,d0
                move.w  d0,6(a5)
                move.w  #$1E,d0
                sub.w   d1,d0
                move.w  (a0),4(a5)
                mulu.w  (a0),d0
                add.w   d0,d0
                lea     4(a0,d0.w),a1
                move.l  a1,(a5)
                addq.w  #8,a5
                subq.w  #1,d1
                cmp.w   d4,d1
                dbeq    d3,_sd
                rts
; ---------------------------------------------------------------------------
_su0:                                   ; CODE XREF: updatescroll+4C   j
                                        ; updatescroll+B6   j
                move.w  d1,d0
                neg.w   d0
                addi.w  #$1D,d0
                andi.w  #$1F,d0
                asl.w   #7,d0
                add.w   (VmMap2).w,d0
                move.w  d0,6(a5)
                move.w  #$3D,d0 ; '='
                sub.w   d1,d0
                move.w  (a0),4(a5)
                mulu.w  (a0),d0
                add.w   d0,d0
                lea     4(a0,d0.w),a1
                move.l  a1,(a5)
                addq.w  #8,a5
                addq.w  #1,d1
                cmp.w   d4,d1
                dbeq    d3,_su0
                rts
; End of function updatescroll


; draw ref graphics
; a5 = dma list
; a6 = sprite table
; d6 = link counter
showref:                                ; CODE XREF: setvideo+3C   p
                bclr    #1,(sflags2).w
                beq.w   rtss2
                movea.w #(RefRamMap-M68K_RAM),a0
                movea.w #(VmMap1-M68K_RAM),a1
                move.w  2(a1),d2
                moveq   #2,d0           ; Xpos on ice screen
                btst    #7,(sflags).w
                beq.w   loc_16014
                moveq   #$F,d0          ; Ypos on scoreboard screen
loc_16014:                              ; CODE XREF: showref+1E   j
                asl.w   d2,d0
                moveq   #2,d1
                asl.w   d2,d1
                addq.w  #2,d0
                btst    #7,(sflags).w
                beq.w   loc_1602A
                addi.w  #$B,d0
loc_1602A:                              ; CODE XREF: showref+32   j
                asl.w   #1,d0
                add.w   (a1),d0
                moveq   #7,d2
loc_16030:                              ; CODE XREF: showref+4E   j
                move.l  a0,(a5)+
                move.w  #7,(a5)+
                move.w  d0,(a5)+
                adda.w  #$E,a0
                add.w   d1,d0
                dbf     d2,loc_16030
                rts
; End of function showref


; check for face off sprites
checkfo:                                ; CODE XREF: setvideo+1A   p
                btst    #0,(sflags).w
                bne.w   rtss2
                btst    #4,(disflags).w
                beq.w   rtss2
                movea.w #(dword_FFBDA8-M68K_RAM),a3
                moveq   #2,d0
loc_1605E:                              ; CODE XREF: checkfo:loc_160EE   j
                move.w  (a3),d4
                bmi.w   loc_160EE
                beq.w   loc_160EE
                movea.l #unk_A78AE,a2
                adda.l  4(a2),a2
                add.w   d4,d4
                move.w  2(a2,d4.w),d5
                sub.w   (a2,d4.w),d5
                lsr.w   #3,d5
                subq.w  #1,d5
                adda.w  (a2,d4.w),a2
loc_16084:                              ; CODE XREF: checkfo+A4   j
                move.w  2(a2),d2
                addi.w  #$80,d2
                add.w   (fodropy).w,d2
                move.w  d2,(a6)
                move.w  (a2),d2
                btst    #3,2(a3)
                beq.w   loc_160AE
                move.b  7(a2),d2
                andi.w  #$C,d2
                addq.w  #4,d2
                asl.w   #1,d2
                neg.w   d2
                sub.w   (a2),d2
loc_160AE:                              ; CODE XREF: checkfo+56   j
                addi.w  #$80,d2
                add.w   (fodropx).w,d2
                move.w  d2,6(a6)
                move.b  7(a2),2(a6)
                move.b  d6,3(a6)
                move.w  6(a2),d2
                andi.w  #$F800,d2
                or.w    4(a2),d2
                move.w  2(a3),d1
                andi.w  #$F800,d1
                eor.w   d1,d2
                add.w   (word_FFB01C).w,d2
                move.w  d2,4(a6)
                addq.w  #1,d6
                addq.w  #8,a6
                addq.w  #8,a2
                dbf     d5,loc_16084
                addq.w  #4,a3
loc_160EE:                              ; CODE XREF: checkfo+1C   j
                                        ; checkfo+20   j
                dbf     d0,loc_1605E
                rts
; End of function checkfo


showzam:                                ; CODE XREF: setvideo+2E   p
                move.w  (zamx).w,d0
                bmi.w   rtss2
                movea.l #ZamFrameList,a0
                lsr.w   #2,d0
                move.w  #$12A,d1
                moveq   #1,d2
                move.w  (ExtraChars).w,d3
                bsr.w   SetSframe
                move.w  d0,d2
                lsr.w   #1,d2
                ext.l   d2
                divu.w  #3,d2
                swap    d2
                addq.w  #2,d2
                bsr.w   SetSframe
                moveq   #5,d2
                move.w  (HmGoals).w,d4
                cmp.w   (AwGoals).w,d4
                bls.w   SetSframe
                move.w  d0,d2
                subi.w  #$DA,d2
                bpl.w   loc_1613E
                clr.w   d2
loc_1613E:                              ; CODE XREF: showzam+44   j
                lsr.w   #2,d2
                add.w   d2,d2
                cmp.w   #$1A,d2
                blt.w   loc_16150
                move.l  #$18,d2
loc_16150:                              ; CODE XREF: showzam+52   j
                movea.l #unk_1615E,a1
                move.w  (a1,d2.w),d2
                bra.w   SetSframe
; End of function showzam
; ---------------------------------------------------------------------------


SetSframe:                              ; CODE XREF: showzam+1A   p
                                        ; showzam+2C   p ...
                cmp.w   #$40,d6 ; '@'
                bge.w   rtss2
                movem.l d0-d5/a0,-(sp)
                adda.l  4(a0),a0
                add.w   d2,d2
                move.w  2(a0,d2.w),d4
                sub.w   (a0,d2.w),d4
                lsr.w   #3,d4
                subq.w  #1,d4
                adda.w  (a0,d2.w),a0
loc_1619A:                              ; CODE XREF: SetSframe+4E   j
                move.w  2(a0),(a6)
                add.w   d1,(a6)+
                move.b  7(a0),(a6)+
                move.b  d6,(a6)+
                move.w  6(a0),d2
                andi.w  #$F800,d2
                add.w   4(a0),d2
                add.w   d3,d2
                move.w  d2,(a6)+
                move.w  (a0),(a6)
                add.w   d0,(a6)+
                addq.w  #1,d6
                cmp.w   #$40,d6 ; '@'
                beq.w   loc_161CA
                addq.w  #8,a0
                dbf     d4,loc_1619A
loc_161CA:                              ; CODE XREF: SetSframe+48   j
                movem.l (sp)+,d0-d5/a0
                rts
; End of function SetSframe


showcrowd:                              ; CODE XREF: setvideo+38   p
                btst    #4,(word_FFC2F4).w
                bne.w   locret_162FC
                movea.l #CrowdFrameList,a1
                adda.l  4(a1),a1
                move.w  (Hpos).w,d4
                move.w  (Vpos).w,d5
                btst    #7,(sflags).w
                beq.w   loc_161FE
                moveq   #$FFFFFFC0,d4
                move.l  #$100,d5
loc_161FE:                              ; CODE XREF: showcrowd+22   j
                clr.w   d0
                move.b  (PBnum).w,d2
                moveq   #$1A,d3
                bsr.w   sub_16226
                move.b  (PBnum).w,d2
                lsr.w   #4,d2
                moveq   #$1D,d3
                bsr.w   sub_16226
                move.b  (crowdframe).w,d0
                bsr.w   sub_16246
                move.b  (crowdframe+1).w,d0
                bra.w   sub_16246
; End of function showcrowd


sub_16226:                              ; CODE XREF: showcrowd+36   p
                                        ; showcrowd+42   p
                andi.w  #$F,d2
                cmp.w   #3,d2
                bls.w   loc_16234
                moveq   #3,d2
loc_16234:                              ; CODE XREF: sub_16226+8   j
                bra.w   loc_16240
; ---------------------------------------------------------------------------
loc_16238:                              ; CODE XREF: sub_16226:loc_16240   j
                move.w  d3,d0
                add.w   d2,d0
                bsr.w   sub_16246
loc_16240:                              ; CODE XREF: sub_16226:loc_16234   j
                dbf     d2,loc_16238
                rts
; End of function sub_16226


sub_16246:                              ; CODE XREF: showcrowd+4A   p
                                        ; showcrowd+52   j ...
                ext.w   d0
                beq.w   rtss2
                btst    #7,(sflags).w
                beq.w   loc_1625A
                addi.w  #$1F,d0
loc_1625A:                              ; CODE XREF: sub_16246+C   j
                cmp.w   #$40,d6 ; '@'
                bge.w   rtss2
                movem.l d0-d5,-(sp)
                add.w   d0,d0
                movea.l a1,a0
                move.w  2(a0,d0.w),d1
                sub.w   (a0,d0.w),d1
                lsr.w   #3,d1
                subq.w  #1,d1
                move.w  d1,-(sp)
                adda.w  (a0,d0.w),a0
                move.w  d4,d0
                addi.w  #$C0,d0
                move.w  d0,d1
                subi.w  #$90,d0
                addi.w  #$80,d1
                move.w  #$170,d2
                sub.w   d5,d2
                move.w  d2,d3
                subi.w  #$80,d2
                addi.w  #$70,d3 ; 'p'
                move.w  (sp)+,d4
loc_1629E:                              ; CODE XREF: sub_16246+AE   j
                cmp.w   2(a0),d2
                bgt.w   loc_162F2
                cmp.w   2(a0),d3
                blt.w   loc_162F2
                cmp.w   (a0),d0
                bgt.w   loc_162F2
                cmp.w   (a0),d1
                blt.w   loc_162F2
                move.w  2(a0),d5
                addi.w  #$70,d5 ; 'p'
                sub.w   d2,d5
                move.w  d5,(a6)+
                move.b  7(a0),(a6)+
                move.b  d6,(a6)+
                move.w  6(a0),d5
                andi.w  #$F800,d5
                add.w   4(a0),d5
                add.w   (word_FFB01A).w,d5
                move.w  d5,(a6)+
                move.w  (a0),d5
                addi.w  #$70,d5 ; 'p'
                sub.w   d0,d5
                move.w  d5,(a6)+
                addq.w  #1,d6
                cmp.w   #$40,d6 ; '@'
                beq.w   loc_162F8
loc_162F2:                              ; CODE XREF: sub_16246+5C   j
                                        ; sub_16246+64   j ...
                addq.w  #8,a0
                dbf     d4,loc_1629E
loc_162F8:                              ; CODE XREF: sub_16246+A8   j
                movem.l (sp)+,d0-d5
locret_162FC:                           ; CODE XREF: showcrowd+6   j
                rts
; End of function sub_16246


sub_162FE:                              ; CODE XREF: sub_7CF8+5C   p
                                        ; setvideo+2A   p
                btst    #7,(sflags).w
                beq.w   loc_163BE
                btst    #0,(word_FFC2FA).w
                bne.w   locret_16382
                move.l  a1,-(sp)
                jsr     (printz).l
                ori.b   #$D,d6
                btst    d2,d0
                move.w  (gameclock).w,d0
                ext.l   d0
                divu.w  #$258,d0
                move.l  d0,-(sp)
                tst.w   d0
                bne.w   loc_1633A
                addq.w  #1,(printx).w
                bra.w   loc_16340
; ---------------------------------------------------------------------------
loc_1633A:                              ; CODE XREF: sub_162FE+30   j
                jsr     (sub_16384).l
loc_16340:                              ; CODE XREF: sub_162FE+38   j
                move.l  (sp)+,d0
                swap    d0
                ext.l   d0
                divu.w  #$3C,d0 ; '<'
                move.l  d0,-(sp)
                jsr     (sub_16384).l
                move.l  (sp)+,d0
                swap    d0
                ext.l   d0
                addq.w  #2,(printx).w
                divu.w  #$A,d0
                move.l  d0,-(sp)
                jsr     (sub_16384).l
                move.l  (sp)+,d0
                swap    d0
                ext.l   d0
                jsr     (sub_16384).l
                movea.l (sp)+,a1
                jsr     (printz).l
                ori.b   #$D,d6
                btst    d2,d0
locret_16382:                           ; CODE XREF: sub_162FE+10   j
                rts
; End of function sub_162FE


sub_16384:                              ; CODE XREF: sub_162FE:loc_1633A   p
                                        ; sub_162FE+4E   p ...
                movea.l #unk_16396,a1
                asl.w   #2,d0
                adda.w  d0,a1
                jsr     (print).l
                rts
; End of function sub_16384
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_163BE:                              ; CODE XREF: sub_162FE+6   j
                bclr    #3,(disflags).w
                beq.w   rtss2
                btst    #3,(sflags2).w
                bne.w   rtss2
                cmpi.w  #4,(gsp).w
                beq.w   rtss2
                movea.w #(unk_FFBF8C-M68K_RAM),a0
                movea.l #unk_AAC52,a1
                adda.l  4(a1),a1
                move.w  $78(a1),d0
                add.w   (word_FFB012).w,d0
                ori.w   #$8000,d0
                move.w  d0,(word_FFBF86).w
                move.w  (gameclock).w,d0
                btst    #1,(word_FFC2FA).w
                beq.w   loc_1640C
                move.w  (word_FFD454).w,d0
loc_1640C:                              ; CODE XREF: ROM:00016404   j
                ext.l   d0
                divu.w  #$A,d0
                bsr.w   sub_16468
                divu.w  #6,d0
                bsr.w   sub_16468
                subq.w  #2,a0
                divu.w  #$A,d0
                bsr.w   sub_16468
                swap    d0
                tst.l   d0
                bne.w   loc_16434
                moveq   #$FFFFFFF0,d0
                swap    d0
loc_16434:                              ; CODE XREF: ROM:0001642C   j
                bsr.w   sub_16468
                move.l  a0,(a5)+
                move.w  #5,(a5)+
                movea.w #(VmMap1-M68K_RAM),a1
                moveq   #$18,d0
                moveq   #3,d2
                btst    #7,(sflags).w
                beq.w   loc_16458
                movea.w #(VmMap2-M68K_RAM),a1
                moveq   #5,d0
                moveq   #$D,d2
loc_16458:                              ; CODE XREF: ROM:0001644C   j
                move.w  2(a1),d1
                asl.w   d1,d0
                add.w   d2,d0
                asl.w   #1,d0
                add.w   (a1),d0
                move.w  d0,(a5)+
                rts


sub_16468:                              ; CODE XREF: ROM:00016412   p
                                        ; ROM:0001641A   p ...
                swap    d0
                asl.w   #1,d0
                move.w  $64(a1,d0.w),d0
                add.w   (word_FFB012).w,d0
                ori.w   #$8000,d0
                move.w  d0,-(a0)
                swap    d0
                ext.l   d0
                rts
; End of function sub_16468


sub_16480:                              ; CODE XREF: setvideo+1E   p
                btst    #7,(sflags).w
                bne.w   rtss2
                movea.w #(unk_FFBDD0-M68K_RAM),a0
                movea.w #(unk_FFBE88-M68K_RAM),a3
                move.w  #$180,d3
                bsr.w   sub_164D6
                adda.w  #$1C,a0
                adda.w  #$14,a3
                move.w  #$183,d3
                bsr.w   sub_164D6
                tst.w   (cont3team).w
                beq.w   rtss2
                movea.w #(unk_FFBE24-M68K_RAM),a0
                adda.w  #$14,a3
                move.w  #$346,d3
                bsr.w   sub_164D6
                tst.w   (cont4team).w
                beq.w   rtss2
                movea.w #(unk_FFBE40-M68K_RAM),a0
                adda.w  #$14,a3
                move.w  #$349,d3
; End of function sub_16480


sub_164D6:                              ; CODE XREF: sub_16480+16   p
                                        ; sub_16480+26   p ...
                tst.w   $18(a0)
                bmi.w   rtss2
                st      6(a3)
                move.w  (a0),d0
                btst    #0,(word_FFC2FA).w
                bne.w   loc_16502
                btst    #3,(sflags2).w
                bne.w   loc_16502
                btst    #2,(BA_PS_flags).w
                beq.w   loc_1651A
loc_16502:                              ; CODE XREF: sub_164D6+14   j
                                        ; sub_164D6+1E   j
                move.w  d0,-(sp)
                tst.w   d0
                bpl.w   loc_1650C
                neg.w   d0
loc_1650C:                              ; CODE XREF: sub_164D6+30   j
                cmp.w   #$A6,d0
                blt.w   loc_16518
                move.w  (sp)+,d0
                rts
; ---------------------------------------------------------------------------
loc_16518:                              ; CODE XREF: sub_164D6+3A   j
                move.w  (sp)+,d0
loc_1651A:                              ; CODE XREF: sub_164D6+28   j
                move.w  $14(a0),d1
                btst    #7,(sflags).w
                beq.w   loc_16534
                exg     d0,d1
                neg.w   d0
                subi.w  #$C5,d1
                bra.w   loc_1653C
; ---------------------------------------------------------------------------
loc_16534:                              ; CODE XREF: sub_164D6+4E   j
                sub.w   (Hpos).w,d0
                sub.w   (Vpos).w,d1
loc_1653C:                              ; CODE XREF: sub_164D6+5A   j
                clr.w   d2
                cmp.w   #$74,d0 ; 't'
                blt.w   loc_1654A
                bset    #3,d2
loc_1654A:                              ; CODE XREF: sub_164D6+6C   j
                cmp.w   #$FF8C,d0
                bgt.w   loc_16556
                bset    #2,d2
loc_16556:                              ; CODE XREF: sub_164D6+78   j
                cmp.w   #$64,d1 ; 'd'
                blt.w   loc_16562
                bset    #0,d2
loc_16562:                              ; CODE XREF: sub_164D6+84   j
                cmp.w   #$FF9C,d1
                bgt.w   loc_1656E
                bset    #1,d2
loc_1656E:                              ; CODE XREF: sub_164D6+90   j
                tst.w   d2
                beq.w   rtss2
                movea.l #jdtab,a1
                move.b  (a1,d2.w),d2
                asl.w   #3,d2
                movea.l #unk_165BC,a1
                move.w  (a1,d2.w),d4
                beq.w   loc_16590
                move.w  d4,d0
loc_16590:                              ; CODE XREF: sub_164D6+B4   j
                addi.w  #$100,d0
                move.w  d0,(a3)
                move.w  2(a1,d2.w),d4
                beq.w   loc_165A0
                move.w  d4,d1
loc_165A0:                              ; CODE XREF: sub_164D6+C4   j
                neg.w   d1
                addi.w  #$F0,d1
                move.w  d1,2(a3)
                add.w   4(a1,d2.w),d3
                move.w  d3,6(a3)
                move.w  6(a1,d2.w),4(a3)
                bra.w   sub_167AA
; End of function sub_164D6
; ---------------------------------------------------------------------------


sub_165FC:                              ; CODE XREF: setvideo+22   p
                movea.w #(OOlist-M68K_RAM),a4
                move.w  #$F,d0
loc_16604:                              ; CODE XREF: sub_165FC+18   j
                clr.w   d1
                move.b  (a4)+,d1
                asl.w   #6,d1
                movea.w #(SortCords-M68K_RAM),a3
                adda.w  d1,a3
                bsr.w   sub_16782
                dbf     d0,loc_16604
                rts
; End of function sub_165FC


sub_1661A:                              ; CODE XREF: setvideo+26   p
                bsr.w   sub_16648
                move.w  #6,d0
                movea.w #(unk_FFBDB4-M68K_RAM),a3
loc_16626:                              ; CODE XREF: sub_1661A+28   j
                movea.w a6,a0
                bsr.w   sub_16782
                cmpa.w  a6,a0
                beq.w   loc_1663E
                move.w  2(a3),d1
                add.w   d1,6(a0)
                add.w   d1,$E(a0)
loc_1663E:                              ; CODE XREF: sub_1661A+14   j
                adda.w  #$1C,a3
                dbf     d0,loc_16626
                rts
; End of function sub_1661A


sub_16648:                              ; CODE XREF: sub_1661A   p
                movea.w #(unk_FFBE5C-M68K_RAM),a0
                st      $18(a0)
                move.b  (glovecords).w,d0
                beq.w   loc_1666E
                move.b  (glovecords+1).w,d1
                ext.w   d0
                asl.w   #2,d0
                move.w  d0,(a0)
                ext.w   d1
                asl.w   #2,d1
                move.w  d1,$14(a0)
                clr.w   $18(a0)
loc_1666E:                              ; CODE XREF: sub_16648+C   j
                move.w  #5,d4
                movea.w #(unk_FFBDB4-M68K_RAM),a0
                movea.w #(dword_FFBE7A-M68K_RAM),a1
                movea.w #(SortCords-M68K_RAM),a2
                move.w  (word_FFBE78).w,d3
loc_16682:                              ; CODE XREF: sub_16648+98   j
                cmp.w   #1,d4
                bne.w   loc_16694
                move.w  (word_FFBE86).w,d3
                lsr.w   #4,d3
                bra.w   *+4
; ---------------------------------------------------------------------------
loc_16694:                              ; CODE XREF: sub_16648+3E   j
                                        ; sub_16648+48   j
                move.w  d3,d0
                andi.w  #$F,d0
                move.w  #$F,d1
                cmp.w   #$E,d0
                beq.w   loc_166CC
                st      $18(a0)
                cmp.w   #$F,d0
                beq.w   loc_166D8
                asl.w   #7,d0
                move.w  (a2,d0.w),(a0)
                move.w  $14(a2,d0.w),$14(a0)
                clr.w   $18(a0)
                move.b  $35(a2,d0.w),d1
                asl.w   #8,d1
                move.b  $6F(a2,d0.w),d1
loc_166CC:                              ; CODE XREF: sub_16648+5A   j
                cmp.w   (a1),d1
                beq.w   loc_166D8
                move.w  d1,(a1)
                bsr.w   sub_166E6
loc_166D8:                              ; CODE XREF: sub_16648+66   j
                                        ; sub_16648+86   j
                lsr.w   #4,d3
                adda.w  #$1C,a0
                addq.w  #2,a1
                dbf     d4,loc_16682
                rts
; End of function sub_16648


sub_166E6:                              ; CODE XREF: sub_16648+8C   p
                lea     unk_1677A(pc),a4
                clr.w   2(a0)
                move.w  d1,d2
                lsr.w   #4,d2
                andi.w  #$F,d2
                bne.w   loc_16702
                move.w  #$FFF0,d2
                subq.w  #4,2(a0)
loc_16702:                              ; CODE XREF: sub_166E6+10   j
                addi.w  #$30,d2 ; '0'
                clr.w   d0
                bsr.w   sub_1674A
                move.w  d1,d2
                andi.w  #$F,d2
                cmp.w   #$F,d2
                bne.w   loc_1671E
                move.w  #$FFF0,d2
loc_1671E:                              ; CODE XREF: sub_166E6+30   j
                addi.w  #$30,d2 ; '0'
                moveq   #1,d0
                bsr.w   sub_1674A
                move.w  d1,d2
                btst    #7,(byte_FFC2FC).w
                beq.w   loc_16736
                clr.w   d2
loc_16736:                              ; CODE XREF: sub_166E6+4A   j
                lsr.w   #8,d2
                andi.w  #7,d2
                bne.w   loc_16744
                addq.w  #4,2(a0)
loc_16744:                              ; CODE XREF: sub_166E6+56   j
                move.b  (a4,d2.w),d2
                moveq   #2,d0
; End of function sub_166E6


sub_1674A:                              ; CODE XREF: sub_166E6+22   p
                                        ; sub_166E6+3E   p
                movea.l #unk_AAC52,a3
                adda.l  4(a3),a3
                add.w   d2,d2
                move.w  4(a3,d2.w),d2
                andi.w  #$7FF,d2
                asl.w   #5,d2
                movea.l #unk_AAC52,a3
                lea     $A(a3,d2.w),a3
                move.l  a3,(a5)+
                move.w  #$10,(a5)+
                add.w   $12(a0),d0
                asl.w   #5,d0
                move.w  d0,(a5)+
                rts
; End of function sub_1674A
; ---------------------------------------------------------------------------


sub_16782:                              ; CODE XREF: sub_165FC+14   p
                                        ; sub_1661A+E   p
                movem.l d0-d2,-(sp)
                move.w  (a3),d0
                move.w  $14(a3),d1
                move.w  $18(a3),d2
                bmi.w   loc_167A4
                bsr.w   find3d
                cmp.w   #$4E20,d1
                beq.w   loc_167A4
                bsr.w   sub_167AA
loc_167A4:                              ; CODE XREF: sub_16782+E   j
                                        ; sub_16782+1A   j
                movem.l (sp)+,d0-d2
                rts
; End of function sub_16782


sub_167AA:                              ; CODE XREF: sub_164D6+E2   j
                                        ; sub_16782+1E   p ...
                move.w  4(a3),-(sp)
                movem.l d0-d5/a0-a2,-(sp)
                move.w  6(a3),d4
                bmi.w   loc_16916
                beq.w   loc_16916
                andi.w  #$F800,d4
                eor.w   d4,4(a3)
                move.w  6(a3),d4
                andi.w  #$7FF,d4
                movea.l #unk_5DE7A,a2
                adda.l  4(a2),a2
                add.w   d4,d4
                cmp.w   2(a2),d4
                bge.w   loc_16916
                move.w  2(a2,d4.w),d5
                sub.w   (a2,d4.w),d5
                lsr.w   #3,d5
                subq.w  #1,d5
                adda.w  (a2,d4.w),a2
                clr.w   d3
                clr.w   d4
loc_167F6:                              ; CODE XREF: sub_167AA+168   j
                move.w  d0,-(sp)
                move.w  6(a3),d0
                andi.w  #$7FF,d0
                cmp.w   8(a3),d0
                beq.w   loc_16882
                tst.w   d5
                bne.w   loc_16812
                move.w  d0,8(a3)
loc_16812:                              ; CODE XREF: sub_167AA+60   j
                movem.w d0-d4,-(sp)
                move.w  4(a2),d2
                clr.w   d4
                move.b  7(a2),d4
                movea.l #unk_1920C,a0
                move.b  (a0,d4.w),d4
                cmp.w   8(sp),d4
                bgt.w   loc_16854
                cmp.w   4(sp),d2
                blt.w   loc_16854
                move.w  4(sp),d0
                add.w   8(sp),d0
                sub.w   d2,d0
                sub.w   d4,d0
                bmi.w   loc_16854
                movem.w (sp)+,d0-d1
                addq.w  #6,sp
                bra.w   loc_1687E
; ---------------------------------------------------------------------------
loc_16854:                              ; CODE XREF: sub_167AA+84   j
                                        ; sub_167AA+8C   j ...
                add.w   8(sp),d3
                movem.w (sp)+,d0-d1
                addq.w  #6,sp
                movem.w d0-d4,-(sp)
                add.w   $12(a3),d3
                ext.l   d2
                asl.l   #5,d2
                addi.l  #unk_5DE84,d2
                asl.w   #4,d4
                asl.w   #5,d3
                move.l  d2,(a5)+
                move.w  d4,(a5)+
                move.w  d3,(a5)+
                movem.w (sp)+,d0-d4
loc_1687E:                              ; CODE XREF: sub_167AA+A6   j
                move.b  d3,$A(a3,d5.w)
loc_16882:                              ; CODE XREF: sub_167AA+5A   j
                move.w  (sp)+,d0
                movem.w d0-d2,-(sp)
                move.w  2(a2),d2
                btst    #4,4(a3)
                beq.w   loc_168A8
                move.b  7(a2),d2
                andi.w  #3,d2
                addq.w  #1,d2
                asl.w   #3,d2
                neg.w   d2
                sub.w   2(a2),d2
loc_168A8:                              ; CODE XREF: sub_167AA+E8   j
                add.w   d2,d1
                move.w  d1,(a6)
                move.w  (a2),d2
                btst    #3,4(a3)
                beq.w   loc_168C8
                move.b  7(a2),d2
                andi.w  #$C,d2
                addq.w  #4,d2
                asl.w   #1,d2
                neg.w   d2
                sub.w   (a2),d2
loc_168C8:                              ; CODE XREF: sub_167AA+10A   j
                add.w   d2,d0
                move.w  d0,6(a6)
                move.b  7(a2),2(a6)
                move.b  d6,3(a6)
                move.w  6(a2),d2
                move.w  4(a3),d0
                eor.w   d0,d2
                andi.w  #$F800,d2
                btst    #0,5(a3)
                beq.w   loc_168FC
                btst    #$E,d2
                beq.w   loc_168FC
                bset    #$D,d2
loc_168FC:                              ; CODE XREF: sub_167AA+142   j
                                        ; sub_167AA+14A   j
                or.b    $A(a3,d5.w),d2
                add.w   $12(a3),d2
                move.w  d2,4(a6)
                movem.w (sp)+,d0-d2
                addq.w  #1,d6
                addq.w  #8,a6
                addq.w  #8,a2
                dbf     d5,loc_167F6
loc_16916:                              ; CODE XREF: sub_167AA+C   j
                                        ; sub_167AA+10   j ...
                movem.l (sp)+,d0-d5/a0-a2
                move.w  (sp)+,4(a3)
                rts
; End of function sub_167AA


; input - d0=xfield, d1=yfield, d2=height of field
; output - d0=xscreen, d1=yscreen
find3d:                                 ; CODE XREF: sub_16782+12   p
                btst    #7,(sflags).w
                beq.w   loc_16936
                exg     d0,d1
                neg.w   d0
                subi.w  #$C5,d1
                bra.w   loc_1693E
; ---------------------------------------------------------------------------
loc_16936:                              ; CODE XREF: find3d+6   j
                sub.w   (Hpos).w,d0
                sub.w   (Vpos).w,d1
loc_1693E:                              ; CODE XREF: find3d+12   j
                cmp.w   #$90,d0
                bgt.w   loc_16970
                cmp.w   #$FF70,d0
                blt.w   loc_16970
                addi.w  #$100,d0
                add.w   d2,d1
                asr.w   #1,d2
                add.w   d2,d1
                cmp.w   #$90,d1
                bgt.w   loc_16970
                cmp.w   #$FF70,d1
                blt.w   loc_16970
                neg.w   d1
                addi.w  #$F0,d1
                rts
; ---------------------------------------------------------------------------
loc_16970:                              ; CODE XREF: find3d+22   j
                                        ; find3d+2A   j ...
                move.w  #$4E20,d1
                rts
; End of function find3d


updatesound:                            ; CODE XREF: periodiceevents+10   p
                move.w  (crowdlevel).w,d0
                asl.w   #3,d0
                addi.w  #$400,d0
                cmp.w   #$EFF,d0
                bls.w   _ip
                move.w  #$EFF,d0
_ip:                                    ; CODE XREF: updatesound+E   j
                moveq   #$28,d2 ; '('
                sub.w   (asv).w,d0
                cmp.w   d2,d0
                bgt.w   loc_169A0
                neg.w   d2
                cmp.w   d2,d0
                bge.w   _non
loc_169A0:                              ; CODE XREF: updatesound+1E   j
                add.w   d2,(asv).w
                bpl.w   _non
                clr.w   (asv).w
_non:                                   ; CODE XREF: updatesound+26   j
                                        ; updatesound+2E   j
                move.b  #$C8,(VDP_PSG).l
                move.b  #1,(VDP_PSG).l
                move.b  (asv).w,d0
                eori.b  #$F,d0
                ori.b   #$F0,d0
                move.b  d0,(VDP_PSG).l
                rts
; End of function updatesound


KillCrowd:                              ; CODE XREF: Begin+42   p
                                        ; sub_7DCE+1E   p ...
                move.b  #$E7,(VDP_PSG).l
                move.b  #$DF,(VDP_PSG).l
                move.b  #$C8,(VDP_PSG).l
                move.b  #1,(VDP_PSG).l
                move.b  #$FF,(VDP_PSG).l
                rts
; End of function KillCrowd


setupice:                               ; CODE XREF: StartGame+90   p
                                        ; ROM:00007884   p
                movem.l d0-d7/a0-a6,-(sp)
                bset    #1,(disflags).w
                move.w  #$C000,(VmMap2).w
                move.w  #6,(Map2col1).w
                move.w  #$DC00,(VSPRITES).w
                move.w  #$E000,(VmMap1).w
                move.w  #6,(Map1col1).w
                move.w  #$F000,(VmMap3).w
                move.w  #5,(Map3col1).w
                move.w  #$FC00,(VSCRLPM).w
                moveq   #0,d0
                bsr.w   setvram
                bclr    #0,(sflags).w
                move.w  (disflags).w,-(sp)
                bset    #2,(disflags).w
                clr.w   (Hpos).w
                clr.w   (Vpos).w
                move.w  #$7D0,(Oldrow).w
                st      (zamx).w
                move.w  #$800,d0
                move.w  (VmMap1).w,d1
                move.w  #$7FF,d2
                bsr.w   DoFill
                clr.w   d4
                move.w  d4,(word_FFB018).w
                movea.l #unk_56062,a2
                btst    #4,(word_FFC2F4).w
                beq.w   loc_16A88
                movea.l #unk_B5188,a2
loc_16A88:                              ; CODE XREF: setupice+84   j
                bsr.w   sub_11738
                jsr     (sub_FEA52).l
                move.w  d4,(word_FFB020).w
                bsr.w   sub_16CAC
                move.w  d4,(word_FFB016).w
                movea.l #unk_AB928,a2
                bsr.w   sub_11738
                move.w  d4,(word_FFB01A).w
                movea.l #unk_A4B5C,a2
                bsr.w   sub_11738
                move.w  d4,(word_FFD6AC).w
                addi.w  #$32,d4 ; '2'
                move.w  d4,(word_FFB024).w
                bsr.w   sub_16DA2
                bsr.w   sub_16C96
                bsr.w   sub_11F12
                move.w  d4,(word_FFB012).w
                movea.l #unk_AAC5A,a2
                bsr.w   sub_1172C
                or.l    d4,-$3211(a3)
                move.w  d4,(word_FFB010).w
                movea.l #unk_A9A18,a2
                bsr.w   sub_1172C
                or.l    d4,-$3211(a3)
                bsr.w   sub_16D18
                move.w  d4,(ExtraChars).w
                btst    #1,(gmode).w
                beq.w   loc_16B20
                movea.w #(SortCords-M68K_RAM),a3
                moveq   #$B,d0
loc_16B12:                              ; CODE XREF: setupice+122   j
                bchg    #7,$62(a3)
                adda.w  #$80,a3
                dbf     d0,loc_16B12
loc_16B20:                              ; CODE XREF: setupice+10E   j
                bsr.w   sub_1720C
                move.w  #$FFFF,(word_FFBE78).w
                move.w  #$FFFF,(word_FFBE86).w
                clr.l   (dword_FFBE7A).w
                clr.l   (dword_FFBE7E).w
                clr.l   (dword_FFBE82).w
                st      (c1playernum).w
                st      (c2playernum).w
                movea.w #(unk_FFB8B4-M68K_RAM),a5
                movea.w #(unk_FFC018-M68K_RAM),a6
                moveq   #1,d6
                movea.w #(unk_FFBDB4-M68K_RAM),a3
                clr.w   d0
                clr.w   d1
                bsr.w   sub_167AA
                adda.w  #$1C,a3
                bsr.w   sub_167AA
                adda.w  #$1C,a3
                bsr.w   sub_167AA
                adda.w  #$1C,a3
                bsr.w   sub_167AA
                adda.w  #$1C,a3
                bsr.w   sub_167AA
                adda.w  #$1C,a3
                bsr.w   sub_167AA
                move.l  a5,(dword_FFBD14).w
                bsr.w   sub_15E82
                move.w  (sp)+,(disflags).w
                move.l  #loc_15D9A,(vbint).w
                bclr    #0,(disflags).w
                bclr    #2,(disflags).w
                move    #$2300,sr
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function setupice


sub_16BAC:                              ; CODE XREF: ROM:0001365C   p
                movem.l d0-d7/a0-a6,-(sp)
                bsr.w   forceblack
                bclr    #0,(sflags).w
                move.w  (disflags).w,-(sp)
                bset    #2,(disflags).w
                clr.w   (Hpos).w
                clr.w   (Vpos).w
                move.w  #$7D0,(Oldrow).w
                st      (zamx).w
                move.w  (word_FFB024).w,d4
                bsr.w   sub_16DA2
                bsr.w   sub_16C96
                btst    #1,(gmode).w
                beq.w   loc_16C00
                movea.w #(SortCords-M68K_RAM),a3
                moveq   #$B,d0
loc_16BF2:                              ; CODE XREF: sub_16BAC+50   j
                bchg    #7,$62(a3)
                adda.w  #$80,a3
                dbf     d0,loc_16BF2
loc_16C00:                              ; CODE XREF: sub_16BAC+3C   j
                bsr.w   sub_1720C
                move.w  #$FFFF,(word_FFBE78).w
                move.w  #$FFFF,(word_FFBE86).w
                clr.l   (dword_FFBE7A).w
                clr.l   (dword_FFBE7E).w
                clr.l   (dword_FFBE82).w
                st      (c1playernum).w
                st      (c2playernum).w
                bsr.w   sub_16CAC
                movea.w #(unk_FFB8B4-M68K_RAM),a5
                movea.w #(unk_FFC018-M68K_RAM),a6
                moveq   #1,d6
                movea.w #(unk_FFBDB4-M68K_RAM),a3
                clr.w   d0
                clr.w   d1
                bsr.w   sub_167AA
                adda.w  #$1C,a3
                bsr.w   sub_167AA
                adda.w  #$1C,a3
                bsr.w   sub_167AA
                adda.w  #$1C,a3
                bsr.w   sub_167AA
                adda.w  #$1C,a3
                bsr.w   sub_167AA
                adda.w  #$1C,a3
                bsr.w   sub_167AA
                move.l  a5,(dword_FFBD14).w
                bsr.w   sub_15E82
                move.w  #$1C,(palcount).w
                move.w  (sp)+,(disflags).w
                move.l  #loc_15D9A,(vbint).w
                bclr    #0,(disflags).w
                bclr    #2,(disflags).w
                move    #$2300,sr
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_16BAC


sub_16C96:                              ; CODE XREF: sub_9CDC+92   p
                                        ; setupice+CC   p ...
                movea.l #unk_5605A,a0
                adda.l  (a0),a0
                moveq   #$F,d0
                movea.w #(palfadenew-M68K_RAM),a1
loc_16CA4:                              ; CODE XREF: sub_16C96+10   j
                move.l  (a0)+,(a1)+
                dbf     d0,loc_16CA4
                rts
; End of function sub_16C96


sub_16CAC:                              ; CODE XREF: sub_9CDC+80   p
                                        ; ROM:0000A3DC   p ...
                move.w  (word_FFB020).w,d4
                movea.l #unk_B3538,a2
                bsr.w   sub_1172C
                or.l    d4,-$3211(a3)
                rts
; End of function sub_16CAC


sub_16CC4:                              ; CODE XREF: sub_9CDC+86   p
                                        ; ROM:0000A3E2   p
                move.w  (word_FFB016).w,d4
                movea.l #unk_AB928,a2
                bra.w   sub_11738
; End of function sub_16CC4


sub_16CD2:                              ; CODE XREF: sub_9CDC+8C   p
                                        ; ROM:0000A3E8   p
                move.w  (word_FFB01A).w,d4
                movea.l #unk_A4B5C,a2
                bra.w   sub_11738
; End of function sub_16CD2


sub_16CE0:                              ; CODE XREF: sub_7CF8+82   p
                move.w  (ExtraChars).w,d4
                movea.l #unk_5CF6C,a2
                bra.w   sub_11738
; End of function sub_16CE0


sub_16CEE:                              ; CODE XREF: ROM:0000A3EE   p
                move.w  (ExtraChars).w,d4
                movea.l #unk_5C410,a2
                bra.w   sub_11738
; End of function sub_16CEE


sub_16CFC:                              ; CODE XREF: ROM:0000A404   p
                move.w  (word_FFB01C).w,d4
                movea.l #unk_A78B6,a2
                bra.w   sub_11738
; End of function sub_16CFC


sub_16D0A:                              ; CODE XREF: ROM:0000A3FE   p
                move.w  (ExtraChars).w,d4
                movea.l #unk_55BFE,a2
                bra.w   sub_11738
; End of function sub_16D0A


sub_16D18:                              ; CODE XREF: setupice+100   p
                move.w  d4,(word_FFB022).w
                addi.w  #$2C,d4 ; ','
                movea.w #(unk_FFC334-M68K_RAM),a1
                movea.l #unk_ABA14,a0
                lea     8(a0),a2
                bsr.w   sub_11738
                adda.l  4(a0),a0
                move.l  a0,-(sp)
                move.w  (HomeTeam).w,d0
                move.w  (word_FFB022).w,d1
                asl.w   #5,d1
                bsr.w   sub_16D64
                movea.l (sp)+,a0
                move.w  (VisTeam).w,d0
                move.w  (word_FFB022).w,d1
                addi.w  #$16,d1
                asl.w   #5,d1
                bsr.w   sub_16D64
                move.w  (word_FFB022).w,d4
                addi.w  #$2C,d4 ; ','
                rts
; End of function sub_16D18


sub_16D64:                              ; CODE XREF: sub_16D18+2A   p
                                        ; sub_16D18+3E   p
                mulu.w  #$2C,d0 ; ','
                lea     4(a0,d0.w),a0
                move.w  #$15,d3
loc_16D70:                              ; CODE XREF: sub_16D64+38   j
                moveq   #$20,d0 ; ' '
                move.w  d1,-(sp)
                move.b  (a0),(a1)
                andi.w  #$F800,(a1)
                lsr.w   #5,d1
                ori.w   #$8000,d1
                or.w    d1,(a1)+
                move.w  (sp)+,d1
                move.w  (a0)+,d2
                andi.w  #$7FF,d2
                add.w   (word_FFB022).w,d2
                addi.w  #$2C,d2 ; ','
                asl.w   #5,d2
                bsr.w   sub_114B8
                addi.w  #$20,d1 ; ' '
                dbf     d3,loc_16D70
                rts
; End of function sub_16D64


sub_16DA2:                              ; CODE XREF: setupice+C8   p
                                        ; sub_16BAC+2E   p
                movea.l #unk_16E06,a2
                movea.w #(unk_FFBE88-M68K_RAM),a3
                moveq   #3,d0
loc_16DAE:                              ; CODE XREF: sub_16DA2+2A   j
                move.w  #$FFFF,8(a3)
                move.w  (a2)+,(a3)
                move.w  (a2)+,2(a3)
                move.w  (a2)+,6(a3)
                move.w  (a2)+,4(a3)
                move.w  d4,$12(a3)
                add.w   (a2)+,d4
                adda.w  #$14,a3
                dbf     d0,loc_16DAE
                movea.l #unk_16E2E,a2
                movea.l #$FFFFBDB4,a3
                moveq   #6,d0
loc_16DDE:                              ; CODE XREF: sub_16DA2+5C   j
                st      8(a3)
                move.w  (a2)+,(a3)
                move.w  (a2)+,$14(a3)
                move.w  (a2)+,$18(a3)
                move.w  (a2)+,6(a3)
                move.w  (a2)+,4(a3)
                move.w  d4,$12(a3)
                add.w   (a2)+,d4
                adda.w  #$1C,a3
                dbf     d0,loc_16DDE
                bra.w   sub_16E82
; End of function sub_16DA2
; ---------------------------------------------------------------------------


sub_16E82:                              ; CODE XREF: sub_16DA2+60   j
                                        ; setoptions+180   p
                clr.w   d6
                movea.w #(OOlist-M68K_RAM),a1
                lea     unk_16EEE(pc),a2
                movea.w #(SortCords-M68K_RAM),a3
                movea.w #(OOlistpos-M68K_RAM),a4
loc_16E94:                              ; CODE XREF: sub_16E82+66   j
                moveq   #$1F,d0
                movea.w a3,a0
loc_16E98:                              ; CODE XREF: sub_16E82+18   j
                clr.l   (a0)+
                dbf     d0,loc_16E98
                move.w  d6,$52(a3)
                st      8(a3)
                st      $66(a3)
                move.w  (a2)+,(a3)
                move.w  (a2)+,$14(a3)
                move.w  (a2)+,$18(a3)
                move.w  (a2)+,6(a3)
                move.w  (a2)+,4(a3)
                move.w  d4,$12(a3)
                add.w   (a2)+,d4
                move.w  (a2)+,$4A(a3)
                move.w  (a2)+,$4C(a3)
                addq.w  #1,a2
                move.b  (a2)+,$38(a3)
                addq.w  #1,a2
                move.b  (a2)+,$62(a3)
                adda.w  #$80,a3
                asl.w   #1,d6
                move.b  d6,(a1)+
                lsr.w   #1,d6
                move.w  d6,(a4)+
                addq.w  #1,d6
                cmp.w   #$10,d6
                bne.s   loc_16E94
                bra.w   SprSort
; End of function sub_16E82
; ---------------------------------------------------------------------------


; sort objects in struct SortObj and set corresponding tables for keeping them sorted later
SprSort:                                ; CODE XREF: ROM:0000A032   p
                                        ; ROM:0000A29C   p ...
                movem.l d0-d4/a0-a2,-(sp)
                movea.l #$FFFFB86A,a2   ; OOlistpos
                movea.l #$FFFFB84A,a1   ; Ylist
                movea.l #$FFFFB04A,a0   ; SortCords
                move.w  #$F,d3          ; Sortobjs -1
_loop0:                                 ; CODE XREF: SprSort+30   j
                move.w  $14(a0),d4
                btst    #7,(sflags).w
                beq.w   _101
                move.w  (a0),d4
_101:                                   ; CODE XREF: SprSort+24   j
                move.w  d4,(a1)+
                adda.w  #$80,a0
                dbf     d3,_loop0
                movea.l #$FFFFB84A,a1
loc_17068:                              ; CODE XREF: SprSort+7A   j
                clr.w   d4
                movea.l #$FFFFB88A,a0
                move.w  #$E,d3
                clr.w   d0
                clr.w   d1
loc_17078:                              ; CODE XREF: SprSort:loc_170A2   j
                move.b  (a0)+,d0
                move.b  (a0),d1
                move.w  (a1,d0.w),d2
                cmp.w   (a1,d1.w),d2
                ble.w   loc_170A2
                move.b  d0,(a0)
                move.b  d1,-1(a0)
                move.l  a0,d2
                subi.l  #$FFFFB88A,d2
                move.w  d2,(a2,d0.w)
                subq.w  #1,d2
                move.w  d2,(a2,d1.w)
                st      d4
loc_170A2:                              ; CODE XREF: SprSort+56   j
                dbf     d3,loc_17078
                tst.w   d4
                bne.s   loc_17068
                movem.l (sp)+,d0-d4/a0-a2
                rts
; End of function SprSort


; reset team variables/and players on both teams
resetplstuff:                           ; CODE XREF: puckpenshot+104   p
                                        ; puckfaceoff2+162   p ...
                movem.l d0-d2/a0-a3,-(sp)
                movea.w #(HmShots-M68K_RAM),a2
                bsr.w   _top
                movea.w #(byte_FFCA32-M68K_RAM),a2
                bsr.w   _top
                movem.l (sp)+,d0-d2/a0-a3
                rts
; ---------------------------------------------------------------------------
_top:                                   ; CODE XREF: resetplstuff+8   p
                                        ; resetplstuff+10   p
                bclr    #4,$30(a2)      ; clear team offside bit
                moveq   #5,d2
                movea.w $22(a2),a3      ; tmsort
_loop:                                  ; CODE XREF: resetplstuff+4C   j
                clr.b   $63(a3)         ; pflags2
                tst.w   $34(a3)         ; check for goalie
                bmi.w   _next
                move.w  #$50C,d1
                bsr.w   SetSPA
                clr.w   $32(a3)         ; impact
                clr.b   $5E(a3)         ; nopuck
                andi.b  #$C2,$62(a3)    ; 2^pfteam + 2^pfgoal +2^pfna, pflags
_next:                                  ; CODE XREF: resetplstuff+2E   j
                adda.w  #$80,a3         ; SCstruct size
                dbf     d2,_loop
                rts
; End of function resetplstuff


clearTeamStats:                         ; CODE XREF: StartGame:loc_778C   p
                                        ; sub_1354C+86   p ...
                move.w  (word_FFC6F4).w,-(sp)
                move.w  (word_FFCA58).w,-(sp)
                movem.l a1-a3,-(sp)
                move.w  #$19F,d0
                movea.l #$FFFFCBD4,a1
                movea.l #$FFFFC870,a0
                movea.l #$FFFFD6D2,a2
                movea.l #$FFFFD872,a3
loc_1712A:                              ; CODE XREF: clearTeamStats+2C   j
                move.b  (a0)+,(a2)+
                move.b  (a1)+,(a3)+
                dbf     d0,loc_1712A
                movem.l (sp)+,a1-a3
                move.l  #$363,d0
                movea.w #(HmShots-M68K_RAM),a0
loc_17140:                              ; CODE XREF: clearTeamStats+40   j
                clr.b   (a0)+
                dbf     d0,loc_17140
                movea.w #(byte_FFCA32-M68K_RAM),a0
                move.w  #$363,d0
loc_1714E:                              ; CODE XREF: clearTeamStats+4E   j
                clr.b   (a0)+
                dbf     d0,loc_1714E
                movem.l a1-a3,-(sp)
                move.w  #$19F,d0
                movea.l #$FFFFCBD4,a1
                movea.l #$FFFFC870,a0
                movea.l #$FFFFD6D2,a2
                movea.l #$FFFFD872,a3
loc_17174:                              ; CODE XREF: clearTeamStats+76   j
                move.b  (a2)+,(a0)+
                move.b  (a3)+,(a1)+
                dbf     d0,loc_17174
                movem.l (sp)+,a1-a3
                move.w  (sp)+,(word_FFCA58).w
                move.w  (sp)+,(word_FFC6F4).w
                st      (byte_FFC768).w
                st      (byte_FFCACC).w
; End of function clearTeamStats


sub_17190:                              ; CODE XREF: sub_17AF4+74   p
                movem.l d0/a0-a2,-(sp)
                movea.w #(HmShots-M68K_RAM),a2
                move.w  (HomeTeam).w,d0
                move.w  #$B04A,$22(a2)
                bsr.w   sub_171BE
                movea.w #(byte_FFCA32-M68K_RAM),a2
                move.w  (VisTeam).w,d0
                move.w  #$B34A,$22(a2)
                bsr.w   sub_171BE
                movem.l (sp)+,d0/a0-a2
                rts
; End of function sub_17190


sub_171BE:                              ; CODE XREF: sub_17190+12   p
                                        ; sub_17190+24   p
                move.w  d0,$28(a2)
                movea.w #$30E,a0
                asl.w   #2,d0
                move.l  (a0,d0.w),$1E(a2)
                tst.w   (OptLine).w
                beq.w   loc_171F4
                movea.l $1E(a2),a0
                adda.w  6(a0),a0
                lea     $16A(a2),a1
                move.l  (a0)+,(a1)+
                move.l  (a0)+,(a1)+
                addq.w  #8,a0
                move.w  #$B,d0
loc_171EC:                              ; CODE XREF: sub_171BE+30   j
                move.l  (a0)+,(a1)+
                dbf     d0,loc_171EC
                rts
; ---------------------------------------------------------------------------
loc_171F4:                              ; CODE XREF: sub_171BE+14   j
                moveq   #$D,d0
                movea.l $1E(a2),a0
                adda.w  6(a0),a0
                addq.w  #8,a0
                lea     $16A(a2),a1
loc_17204:                              ; CODE XREF: sub_171BE+48   j
                move.l  (a0)+,(a1)+
                dbf     d0,loc_17204
                rts
; End of function sub_171BE


sub_1720C:                              ; CODE XREF: sub_9CDC+98   j
                                        ; ROM:00013774   p ...
                clr.w   d1
                movea.w #(HmShots-M68K_RAM),a0
                bsr.w   sub_1721C
                moveq   #$20,d1 ; ' '
                adda.w  #$364,a0
; End of function sub_1720C


sub_1721C:                              ; CODE XREF: sub_1720C+6   p
                movea.l $1E(a0),a2
                adda.w  2(a2),a2
                adda.w  d1,a2
                movea.w #(unk_FFBD68-M68K_RAM),a1
                adda.w  d1,a1
                moveq   #7,d0
loc_1722E:                              ; CODE XREF: sub_1721C+14   j
                move.l  (a2)+,(a1)+
                dbf     d0,loc_1722E
                rts
; End of function sub_1721C
; ---------------------------------------------------------------------------
loc_17236:                              ; CODE XREF: puckfaceoff+92   j
                                        ; puckfaceoff+9C   j
                addq.w  #1,(gsp).w
                bchg    #1,(gmode).w
                cmpi.w  #3,(gsp).w
                blt.w   loc_17274
                beq.w   loc_17262
                move.w  #3,(gsp).w
                tst.w   (OptPlayMode).w
                bne.w   loc_17262
                move.w  #4,(gsp).w
loc_17262:                              ; CODE XREF: ROM:0001724A   j
                                        ; ROM:00017258   j
                move.w  (HmGoals).w,d0
                sub.w   (AwGoals).w,d0
                beq.w   loc_17274
                move.w  #4,(gsp).w
loc_17274:                              ; CODE XREF: ROM:00017246   j
                                        ; ROM:0001726A   j
                bsr.w   forceblack
loc_17278:                              ; CODE XREF: StartGame+9C   j
                jsr     ResetClock
                move.w  d0,-(sp)
                move.w  (vcount).w,d0
loc_17282:                              ; CODE XREF: ROM:00017286   j
                cmp.w   (vcount).w,d0
                beq.s   loc_17282
                jsr     (Z80_MuteAllFM).l
                move.w  d0,-(sp)
                move.w  (vcount).w,d0
loc_17294:                              ; CODE XREF: ROM:00017298   j
                cmp.w   (vcount).w,d0
                beq.s   loc_17294
                move.w  (sp)+,d0
                move.w  #$79,-(sp) ; 'y'
                bsr.w   song
                bsr.w   sub_1323E
                cmpi.w  #4,(gsp).w
                bne.w   loc_172B6
                bsr.w   sub_182A2
loc_172B6:                              ; CODE XREF: ROM:000172AE   j
                bsr.w   sub_130E6
                cmpi.w  #4,(gsp).w
                beq.w   loc_172C8
                jmp     (StartPer).w
; ---------------------------------------------------------------------------
loc_172C8:                              ; CODE XREF: ROM:000172C0   j
                bsr.w   sub_180FC
                tst.w   (OptPlayMode).w
                beq.w   loc_172E0
                bclr    #1,(sflags).w
                jsr     (sub_9428).l
loc_172E0:                              ; CODE XREF: ROM:000172D0   j
                bsr.w   sub_17336
loc_172E4:                              ; CODE XREF: demoread+5E   j
                                        ; sub_FC4C0+A   j
                move.w  #$78,-(sp) ; 'x'
                bsr.w   song
                bra.w   loc_172FA
; ---------------------------------------------------------------------------
loc_172F0:                              ; CODE XREF: Begin+84   j
                bsr.w   KillCrowd
                jsr     (sub_FF042).l
loc_172FA:                              ; CODE XREF: ROM:000172EC   j
                bsr.w   KillCrowd
                move    #$2700,sr
                movea.w #(Stack-M68K_RAM),sp
                movea.w #(VSCRLPM-M68K_RAM),a0
loc_1730A:                              ; CODE XREF: ROM:00017310   j
                clr.l   (a0)+
                cmpa.w  #$D03E,a0
                blt.s   loc_1730A
                jsr     (sub_F739E).l
                jsr     (sub_FBB88).l
                bsr.w   sub_17336
                btst    #0,(word_FFC2FA).w
                bne.w   loc_17332
                jsr     (sub_FCC76).l
loc_17332:                              ; CODE XREF: ROM:00017328   j
                jmp     (StartGame).w


sub_17336:                              ; CODE XREF: ROM:loc_172E0   p
                                        ; ROM:0001731E   p
                tst.w   (OptPlayMode).w
                beq.w   rtss2
                move.l  #loc_17692,(vbint).l
                bclr    #1,(disflags).w
                move.w  #0,(VSCRLPM).w
                move.w  #$BC00,(VSPRITES).w
                move.w  #$B000,(VmMap3).w
                move.w  #6,(Map3col1).w
                move.w  #$C000,(VmMap2).w
                move.w  #7,(Map2col1).w
                move.w  #$E000,(VmMap1).w
                move.w  #7,(Map1col1).w
                move.w  #0,d0
                bsr.w   setvram
                bsr.w   printz
                ori.b   #0,d6
                ori.b   #$3C,d0 ; '<'
                ori.b   #$80,d0
                moveq   #$1C,d1
                move.w  #$7FF,d2
                bsr.w   eraser
                bsr.w   printz
                ori.b   #0,d6
                ori.b   #$28,d0 ; '('
                moveq   #2,d1
                move.w  #$7FF,d2
                bsr.w   eraser
                bsr.w   sub_11F20
                bsr.w   sub_11F04
                movea.l #unk_B3648,a2
                move.w  d4,(ExtraChars).w
                bsr.w   sub_11738
                bsr.w   printz
                ori.b   #0,d6
                ori.b   #$7C,d0 ; '|'
                ori.b   #$24,d5 ; '$'
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                clr.w   d0
                clr.w   d1
                move.w  (a1),d2
                move.w  2(a1),d3
                moveq   #3,d5
                bsr.w   dobitmap
                movea.l #unk_F3098,a1
                lea     8(a1),a2
                adda.l  (a1),a1
                moveq   #7,d0
                movea.w #(unk_FFBD68-M68K_RAM),a0
loc_17406:                              ; CODE XREF: sub_17336+DE   j
                move.l  -$40(a0),$20(a0)
                move.l  (a1)+,-$40(a0)
                move.l  -$20(a0),(a0)+
                dbf     d0,loc_17406
                move.w  d4,(word_FFB016).w
                bsr.w   sub_11738
                move.w  #$104,(word_FFB8B2).w
                move.w  #$A0,(word_FFB8B0).w
                movea.l #VDP_CTRL,a0
                move.w  #$9202,(a0)
                movea.w #(unk_FFCEF4-M68K_RAM),a1
                movea.l #unk_1928E,a0
                move.w  (gamelevel).w,d0
                asl.w   #1,d0
                adda.w  (a0,d0.w),a0
                clr.w   d4
                move.b  (a0)+,d4
loc_1744E:                              ; CODE XREF: sub_17336+134   j
                bsr.w   printz
                ori.b   #0,d6
                ori.b   #$D8,d0
                cmp.b   $11D8(a1),d0
                cmp.b   $4241(a3),d0
                move.b  (a1)+,d1
                add.w   d1,d1
                bsr.w   sub_17652
                dbf     d4,loc_1744E
                clr.w   d4
                move.b  (a0)+,d4
loc_17472:                              ; CODE XREF: sub_17336+152   j
                bsr.w   printz
                ori.b   #0,d6
                andi.b  #$D8,d0
                cmp.b   $4240(a1),d0
                move.b  (a0)+,d0
                bsr.w   sub_17626
                dbf     d4,loc_17472
                bsr.w   printz
                ori.b   #0,d6
                ori.b   #$78,d0 ; 'x'
                ori.b   #$EA,d7
                beq.w   loc_174C0
                clr.w   d4
                move.b  (a0)+,d4
                bmi.w   loc_174C0
                movea.w #(gsstruct-M68K_RAM),a2
loc_174AC:                              ; CODE XREF: sub_17336+186   j
                move.b  (a0)+,(printx+1).w
                move.b  (a0)+,(printy+1).w
                bsr.w   sub_175FC
                adda.w  #$10,a2
                dbf     d4,loc_174AC
loc_174C0:                              ; CODE XREF: sub_17336+166   j
                                        ; sub_17336+16E   j
                bsr.w   printz2
                ori.b   #1,a0
                bchg    d0,d1
                move.b  d0,d5
                lea     unk_176DE(pc),a1
                move.w  (gamelevel).w,d0
                bsr.w   sub_13510
                move.w  (a1),d0
                lsr.w   #1,d0
                sub.w   d0,(printx).w
                bsr.w   print2
                tst.w   (gamelevel).w
                beq.w   loc_17508+2
                bsr.w   printz
                ori.b   #$A,(a2)+
                bchg    d0,(a0)
                moveq   #$65,d1 ; 'e'
                movea.l (a3)+,a0
                movea.l $7220(sp),a0
                subq.b  #6,-(a0)
                moveq   #$6F,d2 ; 'o'
                movea.l 0(a0),a0
loc_17508:                              ; CODE XREF: sub_17336+1B2   j
                bcs.w   loc_1A706
                ori.b   #$26,(a0)+ ; '&'
                move.w  #$79,-(sp) ; 'y'
                bsr.w   song
                clr.w   d0
                clr.w   d4
                move.w  #$FFFF,(word_FFD5B0).w
                move.w  #1,(word_FFD5AC).w
                bsr.w   sub_17572
loc_1752C:                              ; CODE XREF: sub_17336+20A   j
                bsr.w   sub_175D8
                movea.l #rtss2,a0
                jsr     (sub_FED2A).l
                bsr.w   sub_17542
                bra.s   loc_1752C
; End of function sub_17336


sub_17542:                              ; CODE XREF: sub_17336+206   p
                bsr.w   ReadJoy1
                move.w  d3,-(sp)
                bsr.w   ReadJoy2
                or.w    (sp)+,d3
                btst    #7,d3
                bne.w   loc_175D4
                btst    #3,d3
                beq.w   loc_17564
                move.w  #$FFFE,(word_FFD5B0).w
loc_17564:                              ; CODE XREF: sub_17542+18   j
                btst    #2,d3
                beq.w   sub_17572
                move.w  #2,(word_FFD5B0).w
; End of function sub_17542


sub_17572:                              ; CODE XREF: sub_17336+1F2   p
                                        ; sub_17542+26   j
                move.w  (word_FFD5B0).w,d0
                beq.w   rtss2
                add.w   (word_FFD5AC).w,d0
                move.w  (gamelevel).w,d1
                cmp.w   #3,d1
                bls.w   loc_1758C
                moveq   #3,d1
loc_1758C:                              ; CODE XREF: sub_17572+14   j
                mulu.w  #$70,d1 ; 'p'
                cmp.w   d1,d0
                bgt.w   rtss2
                neg.w   d1
                cmp.w   d1,d0
                blt.w   rtss2
                move.w  d0,(word_FFD5AC).w
                clr.w   (word_FFB8AE).w
                move.w  d0,d1
                addi.w  #$100,d1
                cmp.w   #$40,d1 ; '@'
                blt.w   loc_175C0
                cmp.w   #$200,d1
                bgt.w   loc_175C0
                move.w  d1,(word_FFB8AE).w
loc_175C0:                              ; CODE XREF: sub_17572+3E   j
                                        ; sub_17572+46   j
                ext.l   d0
                divs.w  #$70,d0 ; 'p'
                swap    d0
                tst.w   d0
                bne.w   rtss2
                clr.w   (word_FFD5B0).w
                rts
; End of function sub_17572
; ---------------------------------------------------------------------------
loc_175D4:                              ; CODE XREF: sub_17542+10   j
                addq.w  #4,sp
                rts


sub_175D8:                              ; CODE XREF: sub_17336:loc_1752C   p
                tst.w   (palcount).w
                bpl.w   loc_175EC
                eori.w  #$EE,(word_FFBD6A).w
                move.w  #$18,(palcount).w
loc_175EC:                              ; CODE XREF: sub_175D8+4   j
                                        ; sub_175D8+1C   j
                move.w  (vcount).w,d0
                cmp.w   (oldvcount).w,d0
                beq.s   loc_175EC
                move.w  d0,(oldvcount).w
                rts
; End of function sub_175D8


sub_175FC:                              ; CODE XREF: sub_17336+17E   p
                movea.w #(mesarea-M68K_RAM),a1
                move.w  #6,(a1)+
                move.w  4(a2),d0
                addi.w  #$30,d0 ; '0'
                move.b  d0,(a1)+
                move.b  #$2D,(a1)+ ; '-'
                move.w  6(a2),d0
                addi.w  #$30,d0 ; '0'
                move.b  d0,(a1)+
                clr.b   (a1)+
                movea.w #(mesarea-M68K_RAM),a1
                bra.w   print
; End of function sub_175FC


sub_17626:                              ; CODE XREF: sub_17336+14E   p
                movem.l d0-d7/a0-a3,-(sp)
                movea.l #unk_B3640,a0
                movea.l a0,a1
                adda.l  (a0),a0
                adda.l  4(a1),a1
                movea.w #$30A,a2
                clr.w   d1
                moveq   #2,d2
                moveq   #$17,d3
                move.w  (ExtraChars).w,d4
                moveq   #0,d5
                bsr.w   dobitmap
                movem.l (sp)+,d0-d7/a0-a3
                rts
; End of function sub_17626


sub_17652:                              ; CODE XREF: sub_17336+130   p
                movem.l d0-d7/a0-a3,-(sp)
                movea.w #(unk_FFCEF4-M68K_RAM),a0
                move.w  (potreeteam).w,d0
                move.b  (a0,d0.w),d0
                add.b   d0,d0
                cmp.b   d0,d1
                bne.w   loc_17670
                move.w  #$6000,(printa).w
loc_17670:                              ; CODE XREF: sub_17652+14   j
                movea.l #unk_ABA14,a1
                adda.l  4(a1),a1
                movea.w #$30A,a2
                clr.w   d0
                move.w  (a1),d2
                moveq   #2,d3
                moveq   #2,d4
                moveq   #0,d5
                bsr.w   dobitmap
                movem.l (sp)+,d0-d7/a0-a3
                rts
; End of function sub_17652
; ---------------------------------------------------------------------------
loc_17692:                              ; DATA XREF: sub_17336+8   o
                movem.l d0-d7/a0-a6,-(sp)
                btst    #2,(disflags).w
                bne.w   loc_176CE
                movea.w #(unk_FFC018-M68K_RAM),a0
                move.w  (word_FFC2E8).w,d0
                beq.w   loc_176CA
                clr.w   (word_FFC2E8).w
                move.w  (VSPRITES).w,d1
                bsr.w   DoDMA
                move.w  (VSCRLPM).w,d0
                bsr.w   Vmaddr
                move.w  #$FEA0,d0
                add.w   (word_FFD5AC).w,d0
                move.w  d0,(a0)
loc_176CA:                              ; CODE XREF: ROM:000176A8   j
                bsr.w   cramfade
loc_176CE:                              ; CODE XREF: ROM:0001769C   j
                addq.w  #1,(vcount).w
                jsr     (sub_1A50A).l
                movem.l (sp)+,d0-d7/a0-a6
                rte
; ---------------------------------------------------------------------------


sub_17718:                              ; CODE XREF: sub_FCC76+1E6   p
                move.w  #$FFFF,(word_FFD5AE).w
                st      (word_FFD5B0).w
                clr.w   (word_FFD5B2).w
                clr.w   (word_FFD5B4).w
                movea.w #(word_FFD5B8-M68K_RAM),a0
                rts
; End of function sub_17718


sub_17730:                              ; CODE XREF: sub_FCC76:loc_FCF5A   p
                cmpi.w  #$1000,(word_FFD5B4).w
                bgt.w   rtss2
                tst.w   (asv).w
                bmi.w   loc_1774A
                subq.w  #1,(word_FFD5B4).w
                bpl.w   rtss2
loc_1774A:                              ; CODE XREF: sub_17730+E   j
                movea.l #unk_4B5C0,a1
                move.w  (word_FFD5B0).w,d0
                bpl.w   loc_17796
                clr.w   (word_FFD5AC).w
                move.w  (word_FFD5B2).w,d0
                addq.w  #2,(word_FFD5B2).w
                movea.w #(word_FFD5B8-M68K_RAM),a0
                move.w  (a0,d0.w),d0
                bpl.w   loc_1777E
                move.w  #$7FFF,(word_FFD5B4).w
                move.w  #$1E0,(word_FFD5B6).w
                rts
; ---------------------------------------------------------------------------
loc_1777E:                              ; CODE XREF: sub_17730+3C   j
                bsr.w   sub_179D2
                movea.l a1,a2
                bra.w   loc_1778E
; ---------------------------------------------------------------------------
loc_17788:                              ; CODE XREF: sub_17730+5C   j
                                        ; sub_17730:loc_1778E   j
                cmpi.b  #$D,(a2)+
                bne.s   loc_17788
loc_1778E:                              ; CODE XREF: sub_17730+54   j
                dbf     d0,loc_17788
                suba.l  a1,a2
                move.w  a2,d0
loc_17796:                              ; CODE XREF: sub_17730+24   j
                lea     (a1,d0.w),a2
                move.w  #$A,(word_FFD5B4).w
                move.w  (word_FFD5AC).w,d0
                cmpi.b  #$5F,(a2) ; '_'
                beq.w   loc_179B0
                cmpi.b  #$2B,(a2) ; '+'
                beq.w   loc_1799C
                cmpi.b  #$24,(a2) ; '$'
                beq.w   loc_17956
                cmpi.b  #$7B,(a2) ; '{'
                beq.w   loc_179B0
                cmpi.b  #$7D,(a2) ; '}'
                beq.w   loc_179A8
                cmpi.b  #$5B,(a2) ; '['
                beq.w   loc_1797E
                cmpi.b  #$5D,(a2) ; ']'
                beq.w   loc_17976
                cmpi.b  #$3C,(a2) ; '<'
                beq.w   loc_1792E
                cmpi.b  #$3E,(a2) ; '>'
                beq.w   loc_17938
                cmpi.b  #$7C,(a2) ; '|'
                beq.w   loc_17942
                cmpi.b  #$5C,(a2) ; '\'
                beq.w   loc_1794C
                cmpi.b  #$40,(a2) ; '@'
                beq.w   loc_178C0
                cmpi.b  #$23,(a2) ; '#'
                beq.w   loc_178CA
                cmpi.b  #$25,(a2) ; '%'
                beq.w   loc_178D4
                cmpi.b  #$3D,(a2) ; '='
                beq.w   loc_178DE
                cmpi.b  #$2A,(a2) ; '*'
                beq.w   loc_178F2
                cmpi.b  #$5E,(a2) ; '^'
                beq.w   loc_17906
                cmpi.b  #$3B,(a2) ; ';'
                beq.w   loc_1791A
                st      (word_FFD5B0).w
                movea.w #(word_FFBFA6-M68K_RAM),a0
                clr.w   d1
loc_1783E:                              ; CODE XREF: sub_17730+136   j
                cmpi.b  #$D,(a2)
                beq.w   loc_17876
                addq.w  #1,d0
loc_17848:                              ; CODE XREF: sub_17730+13C   j
                move.b  (a2),(a0)+
                addq.w  #1,d1
                cmpi.b  #$2C,(a2) ; ','
                beq.w   loc_1785C
                cmpi.b  #$2E,(a2) ; '.'
                bne.w   loc_17862
loc_1785C:                              ; CODE XREF: sub_17730+120   j
                addi.w  #$28,(word_FFD5B4).w ; '('
loc_17862:                              ; CODE XREF: sub_17730+128   j
                cmpi.b  #$20,(a2)+ ; ' '
                bne.s   loc_1783E
                cmpi.b  #$20,(a2) ; ' '
                beq.s   loc_17848
                subq.w  #1,d0
                suba.w  a1,a2
                move.w  a2,(word_FFD5B0).w
loc_17876:                              ; CODE XREF: sub_17730+112   j
                move.w  d1,(mesarea).w
                addq.w  #2,(mesarea).w
                btst    #0,d1
                beq.w   loc_1788C
                clr.b   (a0)
                addq.w  #1,(mesarea).w
loc_1788C:                              ; CODE XREF: sub_17730+152   j
                movea.w #(mesarea-M68K_RAM),a1
loc_17890:                              ; CODE XREF: sub_17730+298   j
                                        ; sub_17730+29E   j
                cmp.w   #$1D,d0
                ble.w   loc_1789C
                bsr.w   sub_179D2
loc_1789C:                              ; CODE XREF: sub_17730+164   j
                bsr.w   printz
                ori.b   #9,d6
                subi.b  #$38,d0 ; '8'
                add.l   d2,-$2E88(a4)
                cmp.b   $3038(a0),d0
                add.l   d2,-$2E88(a6)
                cmp.b   $6100(a2),d0
                add.w   d1,(word_FFD5AC).w
                rts
; ---------------------------------------------------------------------------
loc_178C0:                              ; CODE XREF: sub_17730+D0   j
                jsr     (sub_FCB9A).l
                bra.w   loc_179B8
; ---------------------------------------------------------------------------
loc_178CA:                              ; CODE XREF: sub_17730+D8   j
                jsr     (sub_FEEC8).l
                bra.w   loc_179B8
; ---------------------------------------------------------------------------
loc_178D4:                              ; CODE XREF: sub_17730+E0   j
                jsr     (sub_FEF5A).l
                bra.w   loc_179B8
; ---------------------------------------------------------------------------
loc_178DE:                              ; CODE XREF: sub_17730+E8   j
                move.l  a2,-(sp)
                movea.l #$FFFFC6CE,a2
                jsr     (sub_FD5AE).l
                movea.l (sp)+,a2
                bra.w   loc_179B8
; ---------------------------------------------------------------------------
loc_178F2:                              ; CODE XREF: sub_17730+F0   j
                move.l  a2,-(sp)
                movea.l #$FFFFCA32,a2
                jsr     (sub_FD5AE).l
                movea.l (sp)+,a2
                bra.w   loc_179B8
; ---------------------------------------------------------------------------
loc_17906:                              ; CODE XREF: sub_17730+F8   j
                move.l  a2,-(sp)
                movea.l #$FFFFC6CE,a2
                jsr     (sub_FD5F4).l
                movea.l (sp)+,a2
                bra.w   loc_179B8
; ---------------------------------------------------------------------------
loc_1791A:                              ; CODE XREF: sub_17730+100   j
                move.l  a2,-(sp)
                movea.l #$FFFFCA32,a2
                jsr     (sub_FD5F4).l
                movea.l (sp)+,a2
                bra.w   loc_179B8
; ---------------------------------------------------------------------------
loc_1792E:                              ; CODE XREF: sub_17730+B0   j
                jsr     (sub_F7144).l
                bra.w   loc_17986
; ---------------------------------------------------------------------------
loc_17938:                              ; CODE XREF: sub_17730+B8   j
                jsr     (sub_F7172).l
                bra.w   loc_17986
; ---------------------------------------------------------------------------
loc_17942:                              ; CODE XREF: sub_17730+C0   j
                jsr     (sub_F727C).l
                bra.w   loc_17986
; ---------------------------------------------------------------------------
loc_1794C:                              ; CODE XREF: sub_17730+C8   j
                jsr     (sub_F72AA).l
                bra.w   loc_17986
; ---------------------------------------------------------------------------
loc_17956:                              ; CODE XREF: sub_17730+88   j
                movea.l #$FFFFC6CE,a1
                tst.w   (word_FFBF50).w
                beq.w   loc_1796A
                movea.l #$FFFFCA32,a1
loc_1796A:                              ; CODE XREF: sub_17730+230   j
                movea.l $1E(a1),a1
                adda.w  4(a1),a1
                bra.w   loc_179B8
; ---------------------------------------------------------------------------
loc_17976:                              ; CODE XREF: sub_17730+A8   j
                movea.w #(byte_FFCA32-M68K_RAM),a1
                bra.w   loc_17982
; ---------------------------------------------------------------------------
loc_1797E:                              ; CODE XREF: sub_17730+A0   j
                movea.w #(HmShots-M68K_RAM),a1
loc_17982:                              ; CODE XREF: sub_17730+24A   j
                move.w  $26(a1),d1
loc_17986:                              ; CODE XREF: sub_17730+204   j
                                        ; sub_17730+20E   j ...
                movea.l $1E(a1),a1
                adda.w  (a1),a1
                bra.w   loc_17994
; ---------------------------------------------------------------------------
loc_17990:                              ; CODE XREF: sub_17730:loc_17994   j
                adda.w  (a1),a1
                addq.w  #8,a1
loc_17994:                              ; CODE XREF: sub_17730+25C   j
                dbf     d1,loc_17990
                bra.w   loc_179B8
; ---------------------------------------------------------------------------
loc_1799C:                              ; CODE XREF: sub_17730+80   j
                movea.l (dword_FFCA50).w,a1
                adda.w  4(a1),a1
                bra.w   loc_179B8
; ---------------------------------------------------------------------------
loc_179A8:                              ; CODE XREF: sub_17730+98   j
                movea.l (dword_FFCA50).w,a1
                bra.w   loc_179B4
; ---------------------------------------------------------------------------
loc_179B0:                              ; CODE XREF: sub_17730+78   j
                                        ; sub_17730+90   j
                movea.l (dword_FFC6EC).w,a1
loc_179B4:                              ; CODE XREF: sub_17730+27C   j
                adda.w  4(a1),a1
loc_179B8:                              ; CODE XREF: sub_17730+196   j
                                        ; sub_17730+1A0   j ...
                addq.w  #1,(word_FFD5B0).w
                add.w   (a1),d0
                subq.w  #1,d0
                move.w  (a1),d1
                subq.w  #2,d1
                tst.b   1(a1,d1.w)
                bne.w   loc_17890
                subq.w  #1,d1
                bra.w   loc_17890
; End of function sub_17730


sub_179D2:                              ; CODE XREF: sub_17730:loc_1777E   p
                                        ; sub_17730+168   p
                clr.w   (word_FFD5AC).w
                addq.w  #1,(word_FFD5AE).w
                cmpi.w  #7,(word_FFD5AE).l
                blt.w   rtss2
                subq.w  #1,(word_FFD5AE).w
                movem.l d0-d3,-(sp)
                move.l  #7,d3
                move.w  (VmMap1).w,d1
                addi.w  #$212,d1
loc_179FC:                              ; CODE XREF: sub_179D2+3C   j
                move.l  #$3A,d0 ; ':'
                move.w  d1,d2
                addi.w  #$80,d2
                bsr.w   sub_114B8
                move.w  d2,d1
                dbf     d3,loc_179FC
                movem.l (sp)+,d0-d3
                rts
; End of function sub_179D2


sub_17A18:                              ; CODE XREF: Begin+54   p
                move.l  #loc_15E4C,(vbint).w
                bclr    #1,(disflags).w
                move.w  #5,(Map3col1).w
                move.w  #$A000,(VmMap2).w
                move.w  #7,(Map2col1).w
                move.w  #$C000,(VmMap1).w
                move.w  #7,(Map1col1).w
                move.w  #$F000,(VmMap3).w
                move.w  #$F800,(VSPRITES).w
                move.w  #$FC00,(VSCRLPM).w
                movea.w #(palfadenew-M68K_RAM),a0
                moveq   #$1F,d1
loc_17A5C:                              ; CODE XREF: sub_17A18+46   j
                clr.l   (a0)+
                dbf     d1,loc_17A5C
                bsr.w   sub_11044
                bsr.w   loc_115AA
                bsr.w   printz
                ori.b   #0,d6
                ori.b   #$7C,d0 ; '|'
                ori.b   #$5A,a3 ; 'Z'
                movea.l a2,a0
                movea.l a2,a1
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                clr.w   d0
                clr.w   d1
                move.w  (a1),d2
                move.w  2(a1),d3
                clr.w   d4
                moveq   #$F,d5
                bsr.w   dobitmap
                move.w  #$EEE,(palfadenew).w
                move.w  #0,(word_FFBD36).w
                move.w  #$18,(palcount).w
                move    #$2500,sr
                move.w  #$50,(RNGseed).w ; 'P'
loc_17AB0:                              ; CODE XREF: sub_17A18+A8   j
                moveq   #4,d0
                bsr.w   waitx
                tst.w   d1
                bne.w   loc_17AC2
                subq.w  #1,(RNGseed).w
                bpl.s   loc_17AB0
loc_17AC2:                              ; CODE XREF: sub_17A18+A0   j
                move    #$2700,sr
                rts
; End of function sub_17A18


sub_17AC8:                              ; CODE XREF: ROM:000F844A   p
                cmpi.w  #2,(OptPlayMode).w
                blt.w   rtss2
                cmpi.w  #4,(OptPlayMode).w
                beq.w   rtss2
                moveq   #7,d0
                tst.w   (FourWayPlay).w
                beq.w   loc_17AEA
                move.w  #$B,d0
loc_17AEA:                              ; CODE XREF: sub_17AC8+1A   j
                sub.w   (OptNOP).w,d0
                move.w  d0,(pojoy).w
                rts
; End of function sub_17AC8


sub_17AF4:                              ; CODE XREF: sub_F7B20+2E   p
                movem.l d0-d7/a0-a2,-(sp)
                cmpi.w  #4,(OptPlayMode).w
                beq.w   loc_17B0A
                tst.w   (OptPlayMode).w
                bne.w   loc_17B16
loc_17B0A:                              ; CODE XREF: sub_17AF4+A   j
                move.w  (Opt1Team).w,(HomeTeam).w
                move.w  (Opt2Team).w,(VisTeam).w
loc_17B16:                              ; CODE XREF: sub_17AF4+12   j
                bsr.w   printz
                ori.b   #7,d6
                btst    d0,d0
                move.w  (VisTeam).w,d1
                move.w  d1,d0
                asl.w   #6,d0
                movea.l #unk_F8BF4,a0
                move.l  $26(a0,d0.w),(dword_FFBD4E).w
                move.w  (word_FFD43A).w,d4
                bsr.w   sub_17B78
                bsr.w   printz
                ori.b   #$16,d6
                btst    d0,d0
                move.w  (HomeTeam).w,d1
                move.w  d1,d0
                asl.w   #6,d0
                movea.l #unk_F8BF4,a0
                move.l  2(a0,d0.w),(dword_FFBD4A).w
                move.w  #$EEE,(word_FFBD52).w
                move.w  #2,d4
                bsr.w   sub_17B78
                bsr.w   sub_17190
                move.w  #$64,(palcount).w ; 'd'
                movem.l (sp)+,d0-d7/a0-a2
                rts
; End of function sub_17AF4


sub_17B78:                              ; CODE XREF: sub_17AF4+44   p
                                        ; sub_17AF4+70   p
                clr.w   d0
                asl.w   #1,d1
                movea.l #unk_AFE12,a0
                movea.l a0,a1
                adda.l  (a0),a0
                adda.l  4(a1),a1
                movea.w #$30A,a2
                move.w  (a1),d2
                moveq   #2,d3
                moveq   #0,d5
                bra.w   dobitmap
; End of function sub_17B78
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_17C42:                              ; DATA XREF: setoptions   o
                                        ; ROM:000FB024   o
                movem.l d0-d7/a0-a6,-(sp)
                btst    #2,(disflags).w
                bne.w   loc_17C62
                bclr    #0,(disflags).w
                beq.w   loc_17C5E
                bsr.w   sub_15E72
loc_17C5E:                              ; CODE XREF: ROM:00017C56   j
                bsr.w   cramfade
loc_17C62:                              ; CODE XREF: ROM:00017C4C   j
                addq.w  #1,(vcount).w
                jsr     (sub_1A50A).l
                movem.l (sp)+,d0-d7/a0-a6
                rte


sub_17C72:                              ; CODE XREF: Begin+6C   p
                st      (demoflag).w
                movea.l #$FFFFD048,a0
                movea.l #unk_17C8E,a1
                move.w  #8,d0
loc_17C86:                              ; CODE XREF: sub_17C72+16   j
                move.w  (a1)+,(a0)+
                dbf     d0,loc_17C86
                rts
; End of function sub_17C72
; ---------------------------------------------------------------------------


sub_17CA0:                              ; CODE XREF: sub_F76CE   j
                                        ; sub_F7942+192   p
                movem.l d0-d7/a0-a3,-(sp)
                movea.w #(unk_FFD088-M68K_RAM),a3
                bsr.w   sub_1803E
                move.w  (gamelevel).w,d0
                or.w    (bosgames).w,d0
                beq.w   loc_17D10
                bsr.w   MakeTree
                moveq   #7,d0
                tst.w   (FourWayPlay).w
                beq.w   loc_17CCA
                move.w  #$B,d0
loc_17CCA:                              ; CODE XREF: sub_17CA0+22   j
                tst.w   (FourWayPlay).w
                bne.w   loc_17CE4
                cmpi.w  #2,(pojoy).w
                blt.w   loc_17D08
                subq.w  #2,(pojoy).w
                bra.w   loc_17D08
; ---------------------------------------------------------------------------
loc_17CE4:                              ; CODE XREF: sub_17CA0+2E   j
                cmpi.w  #1,(pojoy).w
                bne.w   loc_17CF8
                move.w  #3,(pojoy).w
                bra.w   loc_17D08
; ---------------------------------------------------------------------------
loc_17CF8:                              ; CODE XREF: sub_17CA0+4A   j
                cmpi.w  #2,(pojoy).w
                bne.w   loc_17D08
                move.w  #4,(pojoy).w
loc_17D08:                              ; CODE XREF: sub_17CA0+38   j
                                        ; sub_17CA0+40   j ...
                sub.w   (pojoy).w,d0
                move.w  d0,(OptNOP).w
loc_17D10:                              ; CODE XREF: sub_17CA0+14   j
                movem.l (sp)+,d0-d7/a0-a3
                rts
; End of function sub_17CA0


; new playoff generates tree with same team 1
NewPO:                                  ; CODE XREF: j_NewPO   j
                moveq   #$20,d0 ; ' '   ; 20 = 32 decimal
                bsr.w   randomd0
_top:                                   ; CODE XREF: NewPO+2E   j
                addq.w  #1,d0           ; adds 1 to d0 (d0 cannot be 0)
                andi.w  #$1F,d0         ; mask d0 with 1F (31 decimal). Makes sure its 31 or less
                asl.w   #4,d0           ; multiply d0 by 16
                movea.l #$5576,a0       ; location of playoffseats
                adda.w  d0,a0           ; use d0 as offset
                lsr.w   #4,d0           ; divide d0 by 16
                moveq   #$F,d1          ; move 15 into d1
                move.w  (Opt1Team).w,d2 ; Team 1 on menu
                cmp.w   #$19,d2         ; compares #NumOfTeams-3 to d2 (25 decimal)
                bls.w   _loop           ; branch if d2 less than 19 hex
                moveq   #$19,d2         ; move 19 into d2 (limits team selection)
_loop:                                  ; CODE XREF: NewPO+22   j
                                        ; NewPO+2A   j
                cmp.b   (a0)+,d2        ; compare team at a0+ to d2 (looks at second byte of a0)
                dbeq    d1,_loop        ; iterate through loop until team is found
                bne.s   _top
                eori.w  #$F,d1
                move.w  d1,(potreeteam).w ; which team are you on the initial playoff tree
                move.w  d0,(postarts).w ; 0-31 for which playoff tree to use as frame
                clr.w   (gamelevel).w   ; 0-3 for the depth into the playoff tree
                move.w  #7,(bosgames).w ; 0-6 game of series or 7 if not in best of seven
                cmpi.w  #2,(OptPlayMode).w ; play mode on Main Menu
                beq.w   MakeTree        ; jump to make playoff tree if play mode is 2
                clr.w   (bosgames).w
                moveq   #7,d0           ; clr games won
                movea.w #(gsstruct-M68K_RAM),a0 ; Game struct variables start
_cg:                                    ; CODE XREF: NewPO+66   j
                clr.w   4(a0)           ; gspotwins
                clr.w   6(a0)           ; gspobwins
                adda.w  #$10,a0         ; gssize
                dbf     d0,_cg
; End of function NewPO


MakeTree:                               ; CODE XREF: sub_17CA0+18   p
                                        ; NewPO+4C   j ...
                movem.l d0-d4/a0-a3,-(sp)
                move.w  (postarts).w,d1
                asl.w   #4,d1
                movea.w #(unk_FFCEF4-M68K_RAM),a0
                movea.l #$5576,a1
                adda.w  d1,a1
                move.l  (a1),(a0)
                move.l  4(a1),4(a0)
                move.l  8(a1),8(a0)
                move.l  $C(a1),$C(a0)
                lea     $10(a0),a1
                moveq   #$E,d2
                move.w  (word_FFCEF2).w,d0
loc_17DB4:                              ; CODE XREF: MakeTree+42   j
                move.w  d0,d1
                andi.w  #1,d1
                move.b  (a0,d1.w),(a1)+
                addq.w  #2,a0
                lsr.w   #1,d0
                dbf     d2,loc_17DB4
                bsr.w   sub_1828A
                tst.w   d1
                bmi.w   loc_17DFE
                movea.w #(unk_FFCEF4-M68K_RAM),a0
                adda.w  d2,a0
                adda.w  d2,a0
                movea.w #(gsstruct-M68K_RAM),a1
loc_17DDC:                              ; CODE XREF: MakeTree+76   j
                clr.w   $A(a1)
                clr.w   $C(a1)
                clr.w   8(a1)
                bclr    #1,$E(a1)
                bsr.w   sub_17E04
                adda.w  #$10,a1
                dbf     d1,loc_17DDC
                bsr.w   FigureJoy
loc_17DFE:                              ; CODE XREF: MakeTree+4C   j
                movem.l (sp)+,d0-d4/a0-a3
                rts
; End of function MakeTree


sub_17E04:                              ; CODE XREF: MakeTree+6E   p
                cmpi.w  #2,(bosgames).w
                beq.w   loc_17E32
                cmpi.w  #3,(bosgames).w
                beq.w   loc_17E32
                cmpi.w  #5,(bosgames).w
                beq.w   loc_17E32
                bset    #0,$E(a1)
                move.b  (a0)+,3(a1)
                move.b  (a0)+,1(a1)
                rts
; ---------------------------------------------------------------------------
loc_17E32:                              ; CODE XREF: sub_17E04+6   j
                                        ; sub_17E04+10   j ...
                bclr    #0,$E(a1)
                move.b  (a0)+,1(a1)
                move.b  (a0)+,3(a1)
                rts
; End of function sub_17E04


; set contteams appropriately
FigureJoy:                              ; CODE XREF: MakeTree+7A   p
                                        ; sub_F739E+22E   p
                movem.l d0-d3/a0-a1,-(sp)
                clr.w   (cont1team).w
                clr.w   (cont2team).w
                clr.w   (cont3team).w
                clr.w   (cont4team).w
                tst.w   (demoflag).w
                beq.w   loc_17FDC
                tst.w   (OptPlayMode).w
                beq.w   _fjnpo
                btst    #0,(word_FFC2FA).w
                bne.w   _fjnpo
                bsr.w   sub_1828A
                movea.w #(unk_FFCEF4-M68K_RAM),a0 ; #potree
                move.w  (potreeteam).w,d2
                move.b  (a0,d2.w),d2
                movea.w #(gsstruct-M68K_RAM),a1
                moveq   #$10,d4
                mulu.w  d1,d4
                adda.w  d4,a1
                st      (gamenum).w
                clr.w   d0
_f0:                                    ; CODE XREF: FigureJoy+60   j
                cmp.w   (a1),d2
                beq.w   _it1
                cmp.w   2(a1),d2
                beq.w   _it2
                suba.w  #$10,a1
                dbf     d1,_f0
                bra.w   loc_17FE0
; ---------------------------------------------------------------------------
_it2:                                   ; CODE XREF: FigureJoy+58   j
                moveq   #4,d0
                tst.w   (FourWayPlay).w
                beq.w   _it22
                move.w  #5,d0
_it22:                                  ; CODE XREF: FigureJoy+6E   j
                move.w  (a1),(Opt2Team).w
                move.w  2(a1),(Opt1Team).w
                bra.w   _itx
; ---------------------------------------------------------------------------
_it1:                                   ; CODE XREF: FigureJoy+50   j
                clr.w   d0
                move.w  2(a1),(Opt2Team).w
                move.w  (a1),(Opt1Team).w
_itx:                                   ; CODE XREF: FigureJoy+80   j
                add.w   (pojoy).w,d0
                move.w  d1,(gamenum).w
                move.w  (a1),(HomeTeam).w
                move.w  2(a1),(VisTeam).w
                asl.w   #2,d0
                lea     _pojoylist(pc),a0
                tst.w   (FourWayPlay).w
                beq.w   loc_17EF6
                lea     _pojoylist2(pc),a0
loc_17EF6:                              ; CODE XREF: FigureJoy+AC   j
                move.w  (a0,d0.w),(cont1team).w
                move.w  2(a0,d0.w),(cont2team).w
                tst.w   (FourWayPlay).w
                beq.w   loc_17FE0
                cmp.w   #4,d0
                beq.w   loc_17F1E
                cmp.w   #$18,d0
                beq.w   loc_17F1E
                bra.w   loc_17F2E
; ---------------------------------------------------------------------------
loc_17F1E:                              ; CODE XREF: FigureJoy+CC   j
                                        ; FigureJoy+D4   j
                move.w  (cont1team).w,(cont3team).w
                move.w  (cont2team).w,(cont4team).w
                bra.w   loc_17FE0
; ---------------------------------------------------------------------------
loc_17F2E:                              ; CODE XREF: FigureJoy+D8   j
                cmp.w   #8,d0
                beq.w   loc_17F42
                cmp.w   #$1C,d0
                beq.w   loc_17F42
                bra.w   loc_17FE0
; ---------------------------------------------------------------------------
loc_17F42:                              ; CODE XREF: FigureJoy+F0   j
                                        ; FigureJoy+F8   j
                move.w  (cont1team).w,(cont3team).w
                move.w  #0,(cont4team).w
                bra.w   loc_17FE0
; ---------------------------------------------------------------------------
_pojoylist:                             ; DATA XREF: FigureJoy+A4   o
                dc.w 1
                dc.w 0
                dc.w 1
                dc.w 1
                dc.w 1
                dc.w 2
                dc.w 2
                dc.w 1
                dc.w 2
                dc.w 0
                dc.w 2
                dc.w 2
                dc.w 2
                dc.w 1
                dc.w 1
                dc.w 2
_pojoylist2:                            ; DATA XREF: FigureJoy+B0   o
                dc.w 1
                dc.w 0
                dc.w 1
                dc.w 2
                dc.w 1
                dc.w 2
                dc.w 1
                dc.w 1
                dc.w 1
                dc.w 2
                dc.w 2
                dc.w 0
                dc.w 2
                dc.w 1
                dc.w 2
                dc.w 1
                dc.w 2
                dc.w 2
                dc.w 2
                dc.w 1
; ---------------------------------------------------------------------------
_fjnpo:                                 ; CODE XREF: FigureJoy+20   j
                                        ; FigureJoy+2A   j
                move.w  (OptNOP).w,d0
                asl.w   #2,d0
                lea     _noplist(pc),a0
                move.w  (a0,d0.w),(cont1team).w
                move.w  2(a0,d0.w),(cont2team).w
                cmp.w   #$14,d0
                bne.w   loc_17FC8
                move.w  (cont1team).w,(cont3team).w
                move.w  #0,(cont4team).w
                bra.w   loc_17FDC
; ---------------------------------------------------------------------------
loc_17FC8:                              ; CODE XREF: FigureJoy+172   j
                cmp.w   #$18,d0
                bne.w   loc_17FDC
                move.w  (cont1team).w,(cont3team).w
                move.w  (cont2team).w,(cont4team).w
loc_17FDC:                              ; CODE XREF: FigureJoy+18   j
                                        ; FigureJoy+182   j ...
                bsr.w   sub_18002
loc_17FE0:                              ; CODE XREF: FigureJoy+64   j
                                        ; FigureJoy+C4   j ...
                movem.l (sp)+,d0-d3/a0-a1
                rts
; End of function FigureJoy
; ---------------------------------------------------------------------------
_noplist:       dc.w 0                  ; DATA XREF: FigureJoy+15E   o
                dc.w 0
                dc.w 1
                dc.w 0
                dc.w 2
                dc.w 0
                dc.w 1
                dc.w 1
                dc.w 1
                dc.w 2
                dc.w 1
                dc.w 2
                dc.w 1
                dc.w 2


sub_18002:                              ; CODE XREF: FigureJoy:loc_17FDC   p
                st      (gamenum).w
                clr.l   d3
                move.w  (HomeTeam).w,d1
                bset    d1,d3
                move.w  (VisTeam).w,d1
                bset    d1,d3
                movea.w #(gsstruct-M68K_RAM),a1
                moveq   #7,d2
loc_1801A:                              ; CODE XREF: sub_18002+2A   j
                bsr.w   OptionRNG
                move.w  d0,(a1)
                bsr.w   OptionRNG
                move.w  d0,2(a1)
                adda.w  #$10,a1
                dbf     d2,loc_1801A
                rts
; End of function sub_18002


; calls randomd0 when changing options
OptionRNG:                              ; CODE XREF: sub_18002:loc_1801A   p
                                        ; sub_18002+1E   p ...
                moveq   #$1A,d0
                bsr.w   randomd0
                bset    d0,d3
                bne.s   OptionRNG
                rts
; End of function OptionRNG


sub_1803E:                              ; CODE XREF: sub_17CA0+8   p
                                        ; sub_180FC+5C   p ...
                moveq   #4,d0
                lea     $A(a3),a0
loc_18044:                              ; CODE XREF: sub_1803E+8   j
                move.w  -(a0),-(sp)
                dbf     d0,loc_18044
                moveq   #7,d2
                movea.w #(unk_FFCED6-M68K_RAM),a1
loc_18050:                              ; CODE XREF: sub_1803E+4C   j
                bclr    #2,$E(a1)
                moveq   #5,d0
                bsr.w   sub_1826C
                move.w  d0,6(a1)
                cmp.w   #4,d0
                bne.w   loc_1806E
                bset    #2,$E(a1)
loc_1806E:                              ; CODE XREF: sub_1803E+26   j
                moveq   #5,d0
                bsr.w   sub_1826C
                move.w  d0,4(a1)
                cmp.w   #4,d0
                bne.w   loc_18086
                bset    #2,$E(a1)
loc_18086:                              ; CODE XREF: sub_1803E+3E   j
                suba.w  #$10,a1
                dbf     d2,loc_18050
                move.w  #$4000,d0
                bsr.w   sub_1826C
                move.w  d0,(word_FFCEF2).w
                move.w  #8,d0
                bsr.w   sub_1826C
                move.w  d0,(pojoy).w
                tst.w   (FourWayPlay).w
                bne.w   loc_180C8
                cmpi.w  #1,(pojoy).w
                beq.w   loc_180C2
                cmpi.w  #2,(pojoy).w
                bne.w   loc_180C8
loc_180C2:                              ; CODE XREF: sub_1803E+76   j
                move.w  #4,(pojoy).w
loc_180C8:                              ; CODE XREF: sub_1803E+6C   j
                                        ; sub_1803E+80   j
                moveq   #$10,d0
                bsr.w   sub_1826C
                move.w  d0,(potreeteam).w
                moveq   #4,d0
                bsr.w   sub_1826C
                move.w  d0,(gamelevel).w
                moveq   #8,d0
                bsr.w   sub_1826C
                move.w  d0,(bosgames).w
                moveq   #$20,d0 ; ' '
                bsr.w   sub_1826C
                move.w  d0,(postarts).w
                moveq   #4,d0
                lea     (a3),a0
loc_180F4:                              ; CODE XREF: sub_1803E+B8   j
                move.w  (sp)+,(a0)+
                dbf     d0,loc_180F4
                rts
; End of function sub_1803E


sub_180FC:                              ; CODE XREF: ROM:loc_172C8   p
                tst.w   (OptNOP).w
                beq.w   rtss2
                tst.w   (OptPlayMode).w
                beq.w   rtss2
                cmpi.w  #4,(OptPlayMode).w
                beq.w   rtss2
                move.w  #1,(OptPlayMode).w
                move.w  #1,(TempOptPlayMode).w
                bsr.w   sub_18380
                bsr.w   MakeTree
                cmpi.w  #4,(gamelevel).w
                beq.w   loc_18160
                tst.w   (gamenum).w
                bmi.w   loc_18160
                movea.w #(unk_FFD088-M68K_RAM),a3
                bsr.w   sub_18192
                jsr     (sub_FE696).l
                btst    #2,(sflags3).w
                beq.w   rtss2
                movea.w #(unk_FFD176-M68K_RAM),a3
                bsr.w   sub_1803E
                bra.w   MakeTree
; ---------------------------------------------------------------------------
loc_18160:                              ; CODE XREF: sub_180FC+34   j
                                        ; sub_180FC+3C   j
                movea.w #(unk_FFD088-M68K_RAM),a3
                bsr.w   sub_1820E
                jsr     (sub_FE696).l
                move.w  #2,(OptPlayMode).w
                move.w  #2,(TempOptPlayMode).w
                cmpi.w  #7,(bosgames).w
                beq.w   rtss2
                move.w  #3,(OptPlayMode).w
                move.w  #3,(TempOptPlayMode).w
                rts
; End of function sub_180FC


sub_18192:                              ; CODE XREF: sub_180FC+44   p
                                        ; sub_18380+100   p
                bsr.w   sub_1820E
                move.w  (postarts).w,d0
                moveq   #$20,d1 ; ' '
                bsr.w   sub_181F6
                move.w  (bosgames).w,d0
                moveq   #8,d1
                bsr.w   sub_181F6
                move.w  (gamelevel).w,d0
                moveq   #4,d1
                bsr.w   sub_181F6
                move.w  (potreeteam).w,d0
                moveq   #$10,d1
                bsr.w   sub_181F6
                move.w  (pojoy).w,d0
                moveq   #8,d1
                bsr.w   sub_181F6
                move.w  (word_FFCEF2).w,d0
                move.w  #$4000,d1
                bsr.w   sub_181F6
                moveq   #5,d1
                moveq   #7,d2
                movea.w #(gsstruct-M68K_RAM),a1
loc_181DC:                              ; CODE XREF: sub_18192+5E   j
                move.w  4(a1),d0
                bsr.w   sub_181F6
                move.w  6(a1),d0
                bsr.w   sub_181F6
                adda.w  #$10,a1
                dbf     d2,loc_181DC
                rts
; End of function sub_18192


sub_181F6:                              ; CODE XREF: sub_18192+A   p
                                        ; sub_18192+14   p ...
                movem.l d0-d1,-(sp)
                exg     d0,d1
                bsr.w   sub_18236
                clr.l   d0
                move.w  d1,d0
                bsr.w   sub_1821A
                movem.l (sp)+,d0-d1
                rts
; End of function sub_181F6


sub_1820E:                              ; CODE XREF: sub_180FC+68   p
                                        ; sub_18192   p
                movea.w a3,a0
                moveq   #4,d0
loc_18212:                              ; CODE XREF: sub_1820E+6   j
                clr.w   (a0)+
                dbf     d0,loc_18212
                rts
; End of function sub_1820E


sub_1821A:                              ; CODE XREF: sub_181F6+E   p
                movem.l d1/a0,-(sp)
                lea     $A(a3),a0
                moveq   #3,d1
                add.l   d0,-(a0)
                bra.w   loc_1822C
; ---------------------------------------------------------------------------
loc_1822A:                              ; CODE XREF: sub_1821A:loc_1822C   j
                addq.w  #1,-(a0)
loc_1822C:                              ; CODE XREF: sub_1821A+C   j
                dbcc    d1,loc_1822A
                movem.l (sp)+,d1/a0
                rts
; End of function sub_1821A


sub_18236:                              ; CODE XREF: sub_181F6+6   p
                movem.l d1-d4/a0,-(sp)
                movea.w a3,a0
                moveq   #4,d4
loc_1823E:                              ; CODE XREF: sub_18236+C   j
                move.w  (a0),-(sp)
                clr.w   (a0)+
                dbf     d4,loc_1823E
                moveq   #4,d4
loc_18248:                              ; CODE XREF: sub_18236+2C   j
                move.w  d0,d1
                mulu.w  (sp)+,d1
                lea     2(a3),a0
                adda.w  d4,a0
                adda.w  d4,a0
                move.w  d4,d2
                add.l   d1,-(a0)
                bra.w   loc_1825E
; ---------------------------------------------------------------------------
loc_1825C:                              ; CODE XREF: sub_18236:loc_1825E   j
                addq.w  #1,-(a0)
loc_1825E:                              ; CODE XREF: sub_18236+22   j
                dbcc    d2,loc_1825C
                dbf     d4,loc_18248
                movem.l (sp)+,d1-d4/a0
                rts
; End of function sub_18236


sub_1826C:                              ; CODE XREF: sub_1803E+1A   p
                                        ; sub_1803E+32   p ...
                movem.l d1-d2/a0,-(sp)
                movea.w a3,a0
                moveq   #4,d1
                clr.l   d2
loc_18276:                              ; CODE XREF: sub_1826C+10   j
                move.w  (a0),d2
                divu.w  d0,d2
                move.w  d2,(a0)+
                dbf     d1,loc_18276
                swap    d2
                move.w  d2,d0
                movem.l (sp)+,d1-d2/a0
                rts
; End of function sub_1826C


sub_1828A:                              ; CODE XREF: ROM:0000813C   p
                                        ; sub_130E6+76   p ...
                move.l  d0,-(sp)
                moveq   #$FFFFFFF0,d2
                moveq   #$10,d1
                move.w  (gamelevel).w,d0
loc_18294:                              ; CODE XREF: sub_1828A+E   j
                add.w   d1,d2
                lsr.w   #1,d1
                dbf     d0,loc_18294
                subq.w  #1,d1
                move.l  (sp)+,d0
                rts
; End of function sub_1828A


sub_182A2:                              ; CODE XREF: ROM:000172B2   p
                cmpi.w  #1,(OptPlayMode).w
                blt.w   rtss2
                bsr.w   sub_1833A
                movea.w #(unk_FFCEF4-M68K_RAM),a0
                move.w  (potreeteam).w,d2
                move.b  (a0,d2.w),d2
                movea.w #(HmShots-M68K_RAM),a2
                cmp.w   $28(a2),d2
                beq.w   loc_182CC
                adda.w  #$364,a2
loc_182CC:                              ; CODE XREF: sub_182A2+22   j
                adda.w  #$B4,a2
                moveq   #$67,d0 ; 'g'
                movea.w #(unk_FFCD96-M68K_RAM),a1
loc_182D6:                              ; CODE XREF: sub_182A2+3A   j
                clr.w   d1
                move.b  (a2)+,d1
                add.w   d1,(a1)+
                dbf     d0,loc_182D6
                movea.w #(unk_FFCD96-M68K_RAM),a0
                movea.l #unk_18336,a1
                movea.w #(unk_FFD092-M68K_RAM),a2
                moveq   #$67,d0 ; 'g'
                clr.w   d4
loc_182F2:                              ; CODE XREF: sub_182A2+8E   j
                clr.l   d1
                move.w  (a0)+,d1
                move.w  d0,d2
                andi.w  #3,d2
                move.b  (a1,d2.w),d2
                clr.l   d3
                bset    d2,d3
                subq.w  #1,d3
                cmp.w   d3,d1
                ble.w   loc_1830E
                move.w  d3,d1
loc_1830E:                              ; CODE XREF: sub_182A2+66   j
                not.l   d3
                move.w  d4,d5
                andi.w  #$F,d5
                rol.l   d5,d3
                rol.l   d5,d1
                move.w  d4,d5
                lsr.w   #4,d5
                add.w   d5,d5
                neg.w   d5
                addi.w  #$100,d5
                and.l   d3,-$22(a2,d5.w)
                or.l    d1,-$22(a2,d5.w)
                add.w   d2,d4
                dbf     d0,loc_182F2
                rts
; End of function sub_182A2
; ---------------------------------------------------------------------------


sub_1833A:                              ; CODE XREF: sub_9428+4   p
                                        ; sub_182A2+A   p
                movea.w #(unk_FFCD96-M68K_RAM),a0
                movea.l #unk_18336,a1
                movea.w #(unk_FFD092-M68K_RAM),a2
                moveq   #$67,d0 ; 'g'
                clr.w   d4
loc_1834C:                              ; CODE XREF: sub_1833A+40   j
                move.w  d4,d5
                lsr.w   #4,d5
                add.w   d5,d5
                neg.w   d5
                addi.w  #$100,d5
                move.l  -$22(a2,d5.w),d1
                move.w  d4,d5
                andi.w  #$F,d5
                lsr.l   d5,d1
                move.w  d0,d2
                andi.w  #3,d2
                move.b  (a1,d2.w),d2
                add.w   d2,d4
                clr.w   d3
                bset    d2,d3
                subq.w  #1,d3
                and.w   d3,d1
                move.w  d1,(a0)+
                dbf     d0,loc_1834C
                rts
; End of function sub_1833A


sub_18380:                              ; CODE XREF: sub_180FC+26   p
                move.w  (gamenum).w,d0
                mulu.w  #$10,d0
                movea.w #(gsstruct-M68K_RAM),a0
                move.w  (HmGoals).w,$A(a0,d0.w)
                move.w  (AwGoals).w,$C(a0,d0.w)
                bsr.w   sub_1828A
                movea.w #(gsstruct-M68K_RAM),a0
                moveq   #$10,d3
                mulu.w  d1,d3
                adda.w  d3,a0
                cmpi.w  #7,(bosgames).w
                beq.w   loc_184D0
loc_183B0:                              ; CODE XREF: sub_18380+6C   j
                cmpi.w  #4,4(a0)
                beq.w   loc_183E8
                cmpi.w  #4,6(a0)
                beq.w   loc_183E8
                clr.w   d3
                btst    #0,$E(a0)
                beq.w   loc_183D4
                eori.w  #2,d3
loc_183D4:                              ; CODE XREF: sub_18380+4C   j
                move.w  $A(a0),d0
                sub.w   $C(a0),d0
                bpl.w   loc_183E4
                eori.w  #2,d3
loc_183E4:                              ; CODE XREF: sub_18380+5C   j
                addq.w  #1,4(a0,d3.w)
loc_183E8:                              ; CODE XREF: sub_18380+36   j
                                        ; sub_18380+40   j
                suba.w  #$10,a0
                dbf     d1,loc_183B0
                addq.w  #1,(bosgames).w
                cmpi.w  #7,(bosgames).w
                beq.w   loc_1848A
                move.w  (gamenum).w,d0
                mulu.w  #$10,d0
                movea.w #(gsstruct-M68K_RAM),a0
                adda.w  d0,a0
                cmpi.w  #4,4(a0)
                beq.w   loc_18420
                cmpi.w  #4,6(a0)
                bne.w   rtss2
loc_18420:                              ; CODE XREF: sub_18380+92   j
                cmpi.w  #3,(gamelevel).w
                bge.w   loc_1848A
                bsr.w   sub_1828A
                movea.w #(gsstruct-M68K_RAM),a0
                moveq   #$10,d3
                mulu.w  d1,d3
                adda.w  d3,a0
loc_18438:                              ; CODE XREF: sub_18380+E8   j
                                        ; sub_18380+F2   j ...
                cmp.w   (gamenum).w,d1
                beq.w   loc_18474
                cmpi.w  #4,4(a0)
                beq.w   loc_18474
                cmpi.w  #4,6(a0)
                beq.w   loc_18474
                addq.w  #1,4(a0)
                move.l  #$C8,d0
                jsr     (randomd0).l
                andi.w  #1,d0
                beq.s   loc_18438
                subq.w  #1,4(a0)
                addq.w  #1,6(a0)
                bra.s   loc_18438
; ---------------------------------------------------------------------------
loc_18474:                              ; CODE XREF: sub_18380+BC   j
                                        ; sub_18380+C6   j ...
                suba.w  #$10,a0
                dbf     d1,loc_18438
                movea.w #(unk_FFD176-M68K_RAM),a3
                bsr.w   sub_18192
                bset    #2,(sflags3).w
loc_1848A:                              ; CODE XREF: sub_18380+7A   j
                                        ; sub_18380+A6   j
                clr.w   (bosgames).w
                bsr.w   sub_1828A
                movea.w #(gsstruct-M68K_RAM),a0
                moveq   #$10,d3
                mulu.w  d1,d3
                adda.w  d3,a0
                clr.w   d3
loc_1849E:                              ; CODE XREF: sub_18380+136   j
                cmpi.w  #4,4(a0)
                beq.w   loc_184AA
                bset    d1,d3
loc_184AA:                              ; CODE XREF: sub_18380+124   j
                clr.w   4(a0)
                clr.w   6(a0)
                suba.w  #$10,a0
                dbf     d1,loc_1849E
                moveq   #1,d1
                asl.w   d2,d1
                subq.w  #1,d1
                and.w   d1,(word_FFCEF2).w
                asl.w   d2,d3
                or.w    d3,(word_FFCEF2).w
                addq.w  #1,(gamelevel).w
                rts
; ---------------------------------------------------------------------------
loc_184D0:                              ; CODE XREF: sub_18380+2C   j
                clr.w   d3
loc_184D2:                              ; CODE XREF: sub_18380+170   j
                move.w  $A(a0),d0
                cmp.w   $C(a0),d0
                bhi.w   loc_184E0
                bset    d1,d3
loc_184E0:                              ; CODE XREF: sub_18380+15A   j
                btst    #0,$E(a0)
                beq.w   loc_184EC
                bchg    d1,d3
loc_184EC:                              ; CODE XREF: sub_18380+166   j
                suba.w  #$10,a0
                dbf     d1,loc_184D2
                moveq   #1,d1
                asl.w   d2,d1
                subq.w  #1,d1
                and.w   d1,(word_FFCEF2).w
                asl.w   d2,d3
                or.w    d3,(word_FFCEF2).w
                addq.w  #1,(gamelevel).w
                rts
; End of function sub_18380


sub_1850A:                              ; CODE XREF: UpdatePA+20   p
                cmpi.w  #$40,(RefCnt).w ; '@'
                bgt.w   rtss2
                bset    #7,(gmode).w
                bne.w   rtss2
                movem.l d0/a1,-(sp)
                bset    #3,(disflags).w
                move.w  (vcount).w,d0
loc_1852C:                              ; CODE XREF: sub_1850A+26   j
                cmp.w   (vcount).w,d0
                beq.s   loc_1852C
                movem.l (sp)+,d0/a1
                movem.l d0-d5/a0-a4,-(sp)
                bsr.w   printz
                ori.b   #2,d6
                moveq   #$1C,d0
                moveq   #9,d1
                bsr.w   Framer
                bsr.w   printz
                ori.b   #9,(a2)+
                moveq   #$61,d2 ; 'a'
                moveq   #$73,d1 ; 's'
                movea.l $6620(sp),a0
                moveq   #$68,d2 ; 'h'
                bcs.s   loc_18580+2
                blt.s   loc_185C8+3
                eor.b   d7,d3
                btst    d7,d0
                movea.l #unk_5605A,a1
                movea.w #$30A,a2
                adda.l  4(a1),a1
                moveq   #$D,d0
                moveq   #$5B,d1 ; '['
                moveq   #6,d2
                moveq   #4,d3
loc_18580:                              ; CODE XREF: sub_1850A+56   j
                move.w  (word_FFB018).w,d4
                clr.w   d5
                bsr.w   dobitmap
                bsr.w   sub_18620
                move.w  #$12,(printy).w
                moveq   #2,d2
loc_18596:                              ; CODE XREF: sub_1850A+B6   j
                bsr.w   sub_185E0
                move.w  #$1A,(printx).w
                addq.w  #1,(printy).w
                movea.l $1E(a2),a1
                adda.w  4(a1),a1
                adda.w  (a1),a1
                bsr.w   print
                bsr.w   sub_18A90
                move.w  #3,(printx).w
                bsr.w   print
                dbf     d2,loc_18596
                move.w  (HmGoals).w,d0
loc_185C8:                              ; CODE XREF: sub_1850A+5A   j
                sub.w   (AwGoals).w,d0
                ble.w   loc_185DA
                move.w  #$F,-(sp)
                jsr     (song).l
loc_185DA:                              ; CODE XREF: sub_1850A+C2   j
                movem.l (sp)+,d0-d5/a0-a4
                rts
; End of function sub_1850A


sub_185E0:                              ; CODE XREF: sub_1850A:loc_18596   p
                movem.l d1-d2/a1/a4,-(sp)
                movea.w #(unk_FFCF36-M68K_RAM),a4
                clr.l   d0
                moveq   #$33,d2 ; '3'
loc_185EC:                              ; CODE XREF: sub_185E0:loc_185F8   j
                cmp.l   (a4)+,d0
                bge.w   loc_185F8
                lea     -4(a4),a1
                move.l  (a1),d0
loc_185F8:                              ; CODE XREF: sub_185E0+E   j
                dbf     d2,loc_185EC
                clr.l   (a1)
                move.w  a1,d0
                subi.w  #$CF36,d0
                lsr.w   #2,d0
                movea.w #(HmShots-M68K_RAM),a2
                cmp.w   #$1A,d0
                blt.w   loc_1861A
                subi.w  #$1A,d0
                adda.w  #$364,a2
loc_1861A:                              ; CODE XREF: sub_185E0+2E   j
                movem.l (sp)+,d1-d2/a1/a4
                rts
; End of function sub_185E0


sub_18620:                              ; CODE XREF: sub_1850A+80   p
                movea.w #(unk_FFCF36-M68K_RAM),a4
                jsr     ClockLength
                move.w  d0,d5
                add.w   d2,d5
                movea.w #(HmShots-M68K_RAM),a2
                lea     $364(a2),a3
                bsr.w   sub_1867E
                movea.w a3,a2
                lea     -$364(a2),a3
                bsr.w   sub_1867E
                cmpi.w  #3,(gsp).w
                bne.w   locret_1867C
                tst.w   d3
                beq.w   locret_1867C
                movea.w #(word_FFC46E-M68K_RAM),a0
                adda.w  (word_FFC472).w,a0
                clr.w   d0
                btst    #7,2(a0)
                beq.w   loc_1866A
                addi.w  #$1A,d0
loc_1866A:                              ; CODE XREF: sub_18620+42   j
                add.b   3(a0),d0
                asl.w   #2,d0
                movea.w #(unk_FFCF36-M68K_RAM),a0
                move.l  #$7FFFFFFF,(a0,d0.w)
locret_1867C:                           ; CODE XREF: sub_18620+28   j
                                        ; sub_18620+2E   j
                rts
; End of function sub_18620


sub_1867E:                              ; CODE XREF: sub_18620+14   p
                                        ; sub_18620+1E   p
                movea.w a2,a1
                move.w  $C(a2),d3
                sub.w   $C(a3),d3
                ext.l   d3
                moveq   #$19,d4
                jsr     (sub_9F40).l
                neg.w   d0
                add.w   d4,d0
loc_18696:                              ; CODE XREF: sub_1867E+98   j
                move.l  d3,(a4)
                cmp.w   d0,d4
                bhi.w   loc_186D8
                clr.w   d1
                move.b  $B4(a2),d1
                mulu.w  #$2AF8,d1
                add.l   d1,(a4)
                clr.w   d1
                move.b  $CE(a2),d1
                mulu.w  #$2774,d1
                add.l   d1,(a4)
                clr.w   d1
                move.b  $E8(a2),d1
                mulu.w  #$A,d1
                tst.w   d3
                bne.w   loc_186D2
                mulu.w  #$64,d1 ; 'd'
                add.l   d1,(a4)
                clr.l   d1
                add.w   $136(a1),d1
loc_186D2:                              ; CODE XREF: sub_1867E+44   j
                add.l   d1,(a4)
                bra.w   loc_18710
; ---------------------------------------------------------------------------
loc_186D8:                              ; CODE XREF: sub_1867E+1C   j
                cmp.w   $136(a1),d5
                bhi.w   loc_18710
                clr.w   d1
                move.b  $B4(a2),d1
                mulu.w  #$64,d1 ; 'd'
                clr.w   d2
                move.b  $E8(a2),d2
                beq.w   loc_18710
                divu.w  d2,d1
                cmp.w   #4,d1
                bhi.w   loc_18710
                addi.l  #$7D00,(a4)
                tst.w   d1
                bne.w   loc_18710
                addi.l  #$124F8,(a4)
loc_18710:                              ; CODE XREF: sub_1867E+56   j
                                        ; sub_1867E+5E   j ...
                addq.w  #2,a1
                addq.w  #1,a2
                addq.w  #4,a4
                dbf     d4,loc_18696
                rts
; End of function sub_1867E
; ---------------------------------------------------------------------------
loc_1871C:                              ; CODE XREF: periodiceevents+54   j
                movem.l d0-d2/a0-a4,-(sp)
                bsr.w   printz
                ori.b   #$B,d6
                btst    d1,d0
                moveq   #$12,d0
                moveq   #5,d1
                bsr.w   Framer
                btst    #5,(byte_FFC2FC).w
                bne.w   loc_18768
                bsr.w   printz
                ori.b   #$C,-(a4)
                subi.w  #$6E6A,a1
                moveq   #$6F,d2 ; 'o'
                move.w
                cmpi.b  #$75,d6 ; 'u'
                moveq   #$20,d2 ; ' '
                bne.s   loc_187C4+3
                moveq   #$20,d1 ; ' '
                moveq   #$65,d0 ; 'e'
                moveq   #$69,d1 ; 'i'
                ble.s   loc_187C4
                cmpm.b  (a4)+,(sp)+
                btst    d2,d0
                bra.w   loc_1878E
; ---------------------------------------------------------------------------
loc_18768:                              ; CODE XREF: ROM:00018738   j
                bsr.w   printz
                ori.b   #$C,-(a2)
                subi.w  #$6E6A,a1
                moveq   #$6F,d2 ; 'o'
                move.w
                cmpi.b  #$75,d6 ; 'u'
                moveq   #$20,d2 ; ' '
                bne.s   loc_187F2+1
                moveq   #$20,d1 ; ' '
                beq.s   loc_187E8+1
                blt.s   loc_187EE+1
                cmpm.b  (a4)+,(sp)+
                btst    d2,d0
loc_1878E:                              ; CODE XREF: ROM:00018764   j
                bsr.w   sub_18AC6
                bsr.w   print
                btst    #0,(byte_FFB7AD).w
                beq.w   loc_187B0+2
                bsr.w   printz
                ori.b   #$14,a6
                addi.w  #$6865,$67(a4,d2.w)
                bsr.s   loc_18818+5
loc_187B0:                              ; CODE XREF: ROM:0001879C   j
                bcs.w   unk_1D491
                move.b  d7,-(sp)
                rts


sub_187B8:                              ; CODE XREF: chkprogress:_sops   p
                bset    #7,(word_FFC2FA).w
                btst    #0,(word_FFC2FA).w
loc_187C4:                              ; CODE XREF: ROM:0001875E   j
                                        ; ROM:00018756   j
                beq.w   loc_187CE
                jmp     loc_FC320
; ---------------------------------------------------------------------------
loc_187CE:                              ; CODE XREF: sub_187B8:loc_187C4   j
                movem.l d0-d2/a0-a4,-(sp)
                move.w  #$FFFF,d0
                jsr     (prefmes).l
                bsr.w   printz
                ori.b   #3,d6
                andi.b  #$1B,d0
loc_187E8:                              ; CODE XREF: ROM:00018786   j
                moveq   #8,d1
                bsr.w   Framer
loc_187EE:                              ; CODE XREF: ROM:00018788   j
                lea     unk_18884(pc),a1
loc_187F2:                              ; CODE XREF: ROM:00018782   j
                bsr.w   sub_11DF4
                move.w  (BA_Sktr_SCnum).w,d0
                asl.w   #7,d0
                movea.l #$FFFFB04A,a2
                adda.w  d0,a2
                clr.w   d0
                move.b  $66(a2),d0
                movea.l #$FFFFC6CE,a2
                tst.w   (BA_Team).w
                beq.w   loc_1881E
loc_18818:                              ; CODE XREF: ROM:000187AE   p
                movea.l #$FFFFCA32,a2
; End of function sub_187B8
loc_1881E:                              ; CODE XREF: sub_187B8+5C   j
                bsr.w   sub_18AE8
                bsr.w   print
                bsr.w   printz
                ori.b   #4,d6
                btst    d3,d0
                movem.l a1/a3,-(sp)
                move.w  (word_FFD410).w,d0
                movea.l #PenaltyList,a1
                adda.w  (a1,d0.w),a1
                lea     2(a1),a1
                bsr.w   print
                movem.l (sp)+,a1/a3
                bsr.w   printz
                ori.b   #$62,a0 ; 'b'
                subi.b  #$38,a0 ; '8'
                add.b   a6,d2
                movea.l #$FFFFCA32,a2
                tst.w   (BA_Team).w
                beq.w   loc_18872
                movea.l #$FFFFC6CE,a2
loc_18872:                              ; CODE XREF: ROM:00018868   j
                jsr     (sub_18AE8).l
                jsr     (print).l
                movem.l (sp)+,d0-d2/a0-a4
                rts
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_1889A:                              ; CODE XREF: SetPA+1E   p
                movem.l d0-d2/a0-a4,-(sp)
                btst    #2,(BA_PS_flags).w
                beq.w   loc_188AE
                bset    #2,(sflags2).w
loc_188AE:                              ; CODE XREF: ROM:000188A4   j
                movea.w #(HmShots-M68K_RAM),a2
                jsr     (sub_BB36).l
                adda.w  #$364,a2
                jsr     (sub_BB36).l
                movea.w #(word_FFC46E-M68K_RAM),a4
                adda.w  (word_FFC472).w,a4
                bsr.w   printz
                ori.b   #$B,d6
                andi.b  #$13,d0
                move.w  #5,d1
                tst.b   4(a4)
                bmi.w   loc_188EE
                addq.w  #2,d1
                tst.b   5(a4)
                bmi.w   loc_188EE
                addq.w  #1,d1
loc_188EE:                              ; CODE XREF: ROM:000188DE   j
                                        ; ROM:000188E8   j
                bsr.w   Framer
                jsr     (sub_F9FC0).l
                movea.w #(HmShots-M68K_RAM),a2
                move.w  (word_FFD448).w,(word_FFBF48).w
                btst    #7,2(a4)
                beq.w   loc_18916
                adda.w  #$364,a2
                move.w  (word_FFD44A).w,(word_FFBF48).w
loc_18916:                              ; CODE XREF: ROM:00018908   j
                lea     unk_18A14(pc),a1
                bclr    #0,(byte_FFC300).w
                beq.w   loc_18928
                lea     unk_18A34(pc),a1
loc_18928:                              ; CODE XREF: ROM:00018920   j
                clr.w   d0
                move.b  3(a4),d0
                addi.w  #$B4,d0
                cmpi.b  #3,(a2,d0.w)
                bne.w   loc_1896E
                movem.w d1,-(sp)
                clr.w   d1
                move.b  3(a4),d1
                cmp.w   (word_FFBF48).w,d1
                movem.w (sp)+,d1
                blt.w   loc_1896E
                adda.w  (a1),a1
                move.w  d0,-(sp)
                move.w  $28(a2),d0
                cmp.w   (HomeTeam).w,d0
                bne.w   loc_1896C
                move.w  #0,d0
                jsr     (sub_FE510).l
loc_1896C:                              ; CODE XREF: ROM:0001895E   j
                move.w  (sp)+,d0
loc_1896E:                              ; CODE XREF: ROM:00018938   j
                                        ; ROM:0001894E   j
                bsr.w   sub_11DF4
                clr.w   d0
                move.b  3(a4),d0
                move.w  d0,-(sp)
                move.w  #$C,(printx).w
                bsr.w   sub_18B26
                bsr.w   print
                move.w  (sp)+,d0
                movem.w d1,-(sp)
                clr.w   d1
                move.b  3(a4),d1
                cmp.w   (word_FFBF48).w,d1
                movem.w (sp)+,d1
                blt.w   loc_189A6
                jsr     (sub_FEAFA).l
loc_189A6:                              ; CODE XREF: ROM:0001899C   j
                clr.w   d0
                move.b  4(a4),d0
                bmi.w   loc_18A08
                bclr    #5,(word_FFC2F4).w
                bne.w   loc_18A08
                bsr.w   printz
                ori.b   #$E,(a2)
                addi.w  #$7373,d1
                bvs.s   unk_18A3B
                moveq   #$20,d2 ; ' '
                bhi.s   unk_18A45
                move.w
                cmpi.b  #0,d7
                bsr.w   sub_18B26
                bsr.w   print
                move.w  (sp)+,d0
                jsr     (sub_FEAE4).l
                clr.w   d0
                move.b  5(a4),d0
                bmi.w   loc_18A08
                bsr.w   printz
                ori.b   #$C,d6
                        #0
                bsr.w   sub_18B26
                bsr.w   print
                move.w  (sp)+,d0
                jsr     (sub_FEAE4).l
loc_18A08:                              ; CODE XREF: ROM:000189AC   j
                                        ; ROM:000189B6   j ...
                bclr    #5,(word_FFC2F4).w
                movem.l (sp)+,d0-d2/a0-a4
                rts
; ---------------------------------------------------------------------------


sub_18A56:                              ; CODE XREF: sub_B92E:loc_B946   p
                bsr.w   printz
                ori.b   #$B,d6
                andi.b  #$13,d0
                moveq   #8,d1
                move.l  #$7FF,d2
                bra.w   eraser
; End of function sub_18A56


sub_18A6E:                              ; CODE XREF: UpdatePA+40   p
                movem.l d0/a2,-(sp)
                movea.w #(HmShots-M68K_RAM),a2
                move.w  (TempPlOffset).w,d0
                bpl.w   loc_18A86
                andi.w  #$FF,d0
                adda.w  #$364,a2
loc_18A86:                              ; CODE XREF: sub_18A6E+C   j
                bsr.w   sub_18A90
                movem.l (sp)+,d0/a2
                rts
; End of function sub_18A6E


sub_18A90:                              ; CODE XREF: sub_8566+62   p
                                        ; sub_8D4E+8   p ...
                movem.l d0-d3/a0/a2-a3,-(sp)
                bsr.w   sub_18BC8
                move.l  a0,-(sp)
                movea.w #(mesarea-M68K_RAM),a3
                move.w  #4,(a3)
                lea     2(a3),a1
                adda.w  (a0),a0
                move.b  (a0),d0
                bsr.w   sub_18BDC
                bsr.w   sub_11D96
                ori.b   #0,d4
                movea.l (sp)+,a1
                bsr.w   sub_11D9E
                movea.w #(mesarea-M68K_RAM),a1
                movem.l (sp)+,d0-d3/a0/a2-a3
                rts
; End of function sub_18A90


sub_18AC6:                              ; CODE XREF: ROM:loc_1878E   p
                movem.l d0/a2,-(sp)
                movea.w #(HmShots-M68K_RAM),a2
                move.w  (TempPlOffset).w,d0
                bpl.w   loc_18ADE
                andi.w  #$FF,d0
                adda.w  #$364,a2
loc_18ADE:                              ; CODE XREF: sub_18AC6+C   j
                bsr.w   sub_18AE8
                movem.l (sp)+,d0/a2
                rts
; End of function sub_18AC6


sub_18AE8:                              ; CODE XREF: sub_9112+6   p
                                        ; ROM:loc_1881E   p ...
                movem.l d0-d3/a0/a2,-(sp)
                bsr.w   sub_18BC8
                move.l  a0,-(sp)
                movea.w #(word_FFBFA6-M68K_RAM),a1
                adda.w  (a0),a0
                move.b  (a0),d0
                bsr.w   sub_18BDC
                move.b  #$20,(a1)+ ; ' '
                movea.l (sp)+,a0
                move.w  (a0)+,d0
                lea     -2(a0,d0.w),a2
                move.b  (a0)+,(a1)+
                move.w  #$2E20,(a1)+
loc_18B10:                              ; CODE XREF: sub_18AE8+2C   j
                cmpi.b  #$20,(a0)+ ; ' '
                bne.s   loc_18B10
loc_18B16:                              ; CODE XREF: sub_18AE8+32   j
                move.b  (a0)+,(a1)+
                cmpa.l  a0,a2
                bne.s   loc_18B16
                bsr.w   sub_18BAE
                movem.l (sp)+,d0-d3/a0/a2
                rts
; End of function sub_18AE8


sub_18B26:                              ; CODE XREF: sub_9744+58   p
                                        ; ROM:00018980   p ...
                movem.l d0-d3/a0/a2,-(sp)
                bsr.w   sub_18BC8
                move.l  a0,-(sp)
                movea.w #(word_FFBFA6-M68K_RAM),a1
                adda.w  (a0),a0
                move.b  (a0),d0
                bsr.w   sub_18BDC
                move.b  #$20,(a1)+ ; ' '
                movea.l (sp)+,a0
                move.w  (a0)+,d0
                lea     -2(a0,d0.w),a2
loc_18B48:                              ; CODE XREF: sub_18B26+26   j
                cmpi.b  #$20,(a0)+ ; ' '
                bne.s   loc_18B48
loc_18B4E:                              ; CODE XREF: sub_18B26+2C   j
                move.b  (a0)+,(a1)+
                cmpa.l  a0,a2
                bne.s   loc_18B4E
                bsr.w   sub_18BAE
                movem.l (sp)+,d0-d3/a0/a2
                rts
; End of function sub_18B26


sub_18B5E:                              ; CODE XREF: ROM:loc_FA3F0   p
                movem.l d0-d3/a0/a2,-(sp)
                bsr.w   sub_18BC8
                movea.w #(word_FFBFA6-M68K_RAM),a1
                bra.w   loc_18B7E
; End of function sub_18B5E


sub_18B6E:                              ; CODE XREF: sub_85EE+72   p
                                        ; ROM:000FA9B0   p ...
                movem.l d0-d3/a0/a2,-(sp)
                bsr.w   sub_18BC8
                movea.w #(word_FFBFA6-M68K_RAM),a1
                move.b  #$20,(a1)+ ; ' '
loc_18B7E:                              ; CODE XREF: sub_18B5E+C   j
                move.w  (a0)+,d0
                lea     -2(a0,d0.w),a2
loc_18B84:                              ; CODE XREF: sub_18B6E+1A   j
                cmpi.b  #$20,(a0)+ ; ' '
                bne.s   loc_18B84
loc_18B8A:                              ; CODE XREF: sub_18B6E+26   j
                move.b  (a0)+,(a1)+
                cmpa.l  a0,a2
                beq.w   loc_18B9E
                tst.b   (a0)
                bne.s   loc_18B8A
                bra.w   loc_18B9E
; ---------------------------------------------------------------------------
loc_18B9A:                              ; CODE XREF: sub_18B6E+34   j
                move.b  #$20,(a1)+ ; ' '
loc_18B9E:                              ; CODE XREF: sub_18B6E+20   j
                                        ; sub_18B6E+28   j
                cmpa.w  #$BFB2,a1
                blt.s   loc_18B9A
                bsr.w   sub_18BAE
                movem.l (sp)+,d0-d3/a0/a2
                rts
; End of function sub_18B6E


sub_18BAE:                              ; CODE XREF: sub_18AE8+34   p
                                        ; sub_18B26+2E   p ...
                move.w  a1,d0
                subi.w  #$BFA4,d0
                btst    #0,d0
                beq.w   loc_18BC0
                clr.b   (a1)+
                addq.w  #1,d0
loc_18BC0:                              ; CODE XREF: sub_18BAE+A   j
                movea.w #(mesarea-M68K_RAM),a1
                move.w  d0,(a1)
                rts
; End of function sub_18BAE


sub_18BC8:                              ; CODE XREF: sub_18A90+4   p
                                        ; sub_18AE8+4   p ...
                movea.l $1E(a2),a0
                adda.w  (a0),a0
                bra.w   loc_18BD6
; ---------------------------------------------------------------------------
loc_18BD2:                              ; CODE XREF: sub_18BC8:loc_18BD6   j
                adda.w  (a0),a0
                addq.w  #8,a0
loc_18BD6:                              ; CODE XREF: sub_18BC8+6   j
                dbf     d0,loc_18BD2
                rts
; End of function sub_18BC8


sub_18BDC:                              ; CODE XREF: sub_12E12+30   p
                                        ; sub_18A90+1A   p ...
                move.w  d0,-(sp)
                lsr.b   #4,d0
                bne.w   loc_18BE8
                move.b  #$F0,d0
loc_18BE8:                              ; CODE XREF: sub_18BDC+4   j
                addi.b  #$30,d0 ; '0'
                move.b  d0,(a1)+
                move.w  (sp)+,d0
                andi.w  #$F,d0
                addi.b  #$30,d0 ; '0'
                move.b  d0,(a1)+
                rts
; End of function sub_18BDC


AdrErr:                                 ; DATA XREF: ROM:off_8   o
                                        ; ROM:0000000C   o
                move    #$2700,sr
                bsr.w   sub_11DE2
                ori.b   #0,(a2)
                ori.w   #$6464,d1
                moveq   #$65,d1 ; 'e'
                movea.l d5,a0
                moveq   #$72,d1 ; 'r'
                ble.s   loc_18C86+2
                move.l  $A(sp),d0
                move.l  2(sp),d1
                bra.w   loc_18C70
; End of function AdrErr


InvOpCode:                              ; DATA XREF: ROM:off_10   o
                move    #$2700,sr
                bsr.w   sub_11DE2
                ori.b   #0,(a0)+
                ori.w   #$6C6C,a1
                bcs.s   loc_18C98+3
                bsr.s   loc_18CA0+2
                movea.l a1,a0
                bgt.s   loc_18CAA+3
                moveq   #$72,d2 ; 'r'
                moveq   #$69,d2 ; 'i'
                ble.s   loc_18CB0
                move.l  2(sp),d0
                move.l  d0,d1
                bra.w   loc_18C70
; End of function InvOpCode


DivBy0:                                 ; DATA XREF: ROM:off_14   o
                move    #$2700,sr
                bsr.w   sub_11DE2
                ori.b   #0,(a6)
                ori.w   #$6976,d4
                bvs.s   loc_18CD0+1
                bvs.s   loc_18CCC+3
                bgt.s   loc_18C80+2
                bhi.s   sub_18CDC+1
                movea.l dword_1F1D8(pc),a0
                ble.w   unk_1AC99
                ori.b   #0,d2
loc_18C70:                              ; CODE XREF: AdrErr+22   j
                                        ; InvOpCode+26   j
                movea.w #(mesarea-M68K_RAM),a0
                move.w  #$18,(a0)+
                move.b  #$BD,(a0)+
                move.b  #0,(a0)+
loc_18C80:                              ; CODE XREF: DivBy0+14   j
                move.b  #2,(a0)+
                move.l  d1,-(sp)
loc_18C86:                              ; CODE XREF: AdrErr+18   j
                bsr.w   sub_18CDC
                move.b  #$BD,(a0)+
                move.b  #0,(a0)+
                move.b  #4,(a0)+
                move.l  (sp)+,d0
loc_18C98:                              ; CODE XREF: InvOpCode+10   j
                bsr.w   sub_18CDC
                movea.w #(mesarea-M68K_RAM),a1
loc_18CA0:                              ; CODE XREF: InvOpCode+12   p
                bsr.w   sub_11DF4
; End of function DivBy0
                movea.l #VDP_DATA,a0
loc_18CAA:                              ; CODE XREF: InvOpCode+16   j
                move.w  #$9100,4(a0)
loc_18CB0:                              ; CODE XREF: InvOpCode+1E   j
                move.w  #$9206,4(a0)
                move.w  #$8F02,4(a0)
                move.l  #$C0200000,4(a0)
                movea.l #unk_5605A,a1
                adda.l  (a1),a1
loc_18CCC:                              ; CODE XREF: DivBy0+12   j
                adda.w  #$20,a1 ; ' '
loc_18CD0:                              ; CODE XREF: DivBy0+10   j
                moveq   #7,d0
loc_18CD2:                              ; CODE XREF: ROM:00018CD4   j
                move.l  (a1)+,(a0)
                dbf     d0,loc_18CD2
loc_18CD8:                              ; CODE XREF: ROM:loc_18CD8   j
                bra.w   loc_18CD8


sub_18CDC:                              ; CODE XREF: DivBy0:loc_18C86   p
                                        ; DivBy0:loc_18C98   p ...
                moveq   #7,d2
loc_18CDE:                              ; CODE XREF: sub_18CDC+1A   j
                rol.l   #4,d0
                move.w  d0,d1
                andi.w  #$F,d1
                addi.w  #$30,d1 ; '0'
                cmp.w   #$39,d1 ; '9'
                ble.w   loc_18CF4
                addq.w  #7,d1
loc_18CF4:                              ; CODE XREF: sub_18CDC+12   j
                move.b  d1,(a0)+
                dbf     d2,loc_18CDE
                rts
; End of function sub_18CDC
; ---------------------------------------------------------------------------
asstab:         dc.l $15464             ; DATA XREF: updateplayers+4B2   o
                                        ; jump table of all the player logic assignments
                dc.l assdefo
                dc.l assdefd
                dc.l asswingd
                dc.l asswingo
                dc.l asscenterd
                dc.l asscentero
                dc.l assscore
                dc.l assstanley
                dc.l assben
                dc.l assepen
                dc.l assbench
                dc.l asspenalty
                dc.l assdopen
                dc.l assgoaliecpu
                dc.l sub_DD2E
                dc.l $DF18              ; asspuckc
                dc.l $E6F4              ; assnearest
                dc.l assshoot
                dc.l asspassrec
                dc.l assfight
                dc.l assfwatch
                dc.l assfaceoff
                dc.l assfaceoffpl
                dc.l pucknorm
                dc.l puckshadow
                dc.l puckunflip
                dc.l puckfaceoff
                dc.l puckfaceoff2
                dc.l assgoaliectrl
                dc.l puckshootout
                dc.l puckpenshot
                dc.l assgoaliebreakwait
                dc.l chkpuckc
                dc.l assbreakaway
                dc.l assonetimer
PenaltyList:    dc.w 0                  ; DATA XREF: AddPenalty+84   o
                                        ; chkprogress+A2   o ...
                dc.w $3E                ; PenEOP
                dc.w $50                ; PenEOG
                dc.w $94                ; PenFO
                dc.w $94                ; PenFO
                dc.w $C2                ; PenCharging
                dc.w $72                ; PenIcing
                dc.w $62                ; Pen??
                dc.w $82                ; PenOffside
                dc.w $190               ; PenRoughing
                dc.w $6A                ; Pen??
                dc.w $C8                ; PenCharging
                dc.w $10C               ; PenSlashing
                dc.w $1B0               ; PenRoughing2
                dc.w $234               ; PenCrossCheck
                dc.w $1F0               ; PenHooking
                dc.w $150               ; PenTripping
                dc.w $280               ; PenInterference
                dc.w $2B0               ; PenHolding
                dc.w $2C4               ; PenFighting
                dc.w $2E4               ; PenFighting*
                dc.w $306               ; PenInst
                dc.w $B0                ; PenPenalty
                dc.w $212               ; PenHooking2
                dc.w $170               ; PenTripping2
                dc.w $A2                ; PenFO2
                dc.w $298               ; PenInterference2
                dc.w $1D0               ; PenRoughing3
                dc.w $EA                ; PenCharging2
                dc.w $25A               ; PenCrossCheck2
                dc.w $12E               ; PenSlashing2
dword_19420:    dc.l $1FBA000A          ; DATA XREF: sub_FA8AC:loc_FA8F8   r
                                        ; sub_FA9F8+10   r ...
dword_19582:    dc.l $130F000A          ; DATA XREF: sub_FA8AC+5A   r
                                        ; sub_FA9F8:loc_FAA18   r ...


sub_1A050:                              ; CODE XREF: Begin+5A   p
                move.l  #loc_1A148,(vbint).l
                move    #$2500,sr
                clr.w   (word_FFD458).w
                jsr     (ReadJoy1).l
                move.w  d3,d0
                movea.l #$200000,a0
                move.w  #$E,d3
                move.w  #2,d4
                cmp.b   #$E0,d0
                beq.w   loc_1A0C2
                cmp.b   #$B0,d0
                beq.w   loc_1A11E
                moveq   #0,d0
                move.l  #$2000,d1
                movea.l #$FFFF0000,a0
                bsr.w   sub_1A244
                bsr.w   sub_1A14E
                tst.w   (word_FFD458).w
                bpl.w   locret_1A0C0
                bsr.w   sub_1A19C
                moveq   #0,d0
                move.l  #$2000,d1
                movea.l #$FFFF0000,a0
                bsr.w   sub_1A244
                bsr.w   sub_1A14E
locret_1A0C0:                           ; CODE XREF: sub_1A050+52   j
                rts
; ---------------------------------------------------------------------------
loc_1A0C2:                              ; CODE XREF: sub_1A050+2C   j
                move.w  #$1FFF,d2
loc_1A0C6:                              ; CODE XREF: sub_1A050+92   j
                move.w  #1,d1
                move.w  #7,d0
loc_1A0CE:                              ; CODE XREF: sub_1A050+8A   j
                move.w  d1,(a0)
                cmp.b   1(a0),d1
                bne.w   loc_1A100
                lsl.w   #1,d1
                dbf     d0,loc_1A0CE
                adda.w  #2,a0
                dbf     d2,loc_1A0C6
                movea.l #$200000,a0
                move.l  #$120034,(a0)+
                move.l  #$560078,(a0)+
                move.w  #$E0,d3
                move.w  #$20,d4 ; ' '
loc_1A100:                              ; CODE XREF: sub_1A050+84   j
                                        ; sub_1A050+E4   j ...
                move.w  d3,d0
loc_1A102:                              ; CODE XREF: sub_1A050+CC   j
                move.l  #$C0000000,(VDP_CTRL).l
                move.w  d0,d1
                and.w   d3,d1
                move.w  d1,(VDP_DATA).l
                bsr.w   sub_1A140
                sub.w   d4,d0
                bra.s   loc_1A102
; ---------------------------------------------------------------------------
loc_1A11E:                              ; CODE XREF: sub_1A050+34   j
                move.w  #3,d1
loc_1A122:                              ; CODE XREF: sub_1A050+DA   j
                adda.w  #1,a0
                lsl.l   #8,d0
                move.b  (a0)+,d0
                dbf     d1,loc_1A122
                cmp.l   #$12345678,d0
                bne.s   loc_1A100
                move.w  #$E0,d3
                move.w  #$20,d4 ; ' '
                bra.s   loc_1A100
; End of function sub_1A050


sub_1A140:                              ; CODE XREF: sub_1A050+C6   p
                jsr     (sub_80BA).l
                rts
; End of function sub_1A140
; ---------------------------------------------------------------------------
loc_1A148:                              ; DATA XREF: sub_1A050   o
                addq.w  #1,(vcount).w
                rte


sub_1A14E:                              ; CODE XREF: sub_1A050+4A   p
                                        ; sub_1A050+6C   p
                move.w  #$1FFD,d1
                clr.w   d0
                lea     (M68K_RAM).l,a0
loc_1A15A:                              ; CODE XREF: sub_1A14E+E   j
                add.b   (a0)+,d0
                dbf     d1,loc_1A15A
                clr.w   d1
                cmp.b   1(a0),d0
                beq.w   loc_1A16C
                addq.w  #1,d1
loc_1A16C:                              ; CODE XREF: sub_1A14E+18   j
                not.w   d0
                cmp.b   (a0),d0
                beq.w   loc_1A176
                addq.w  #1,d1
loc_1A176:                              ; CODE XREF: sub_1A14E+22   j
                swap    d0
                move.b  (a0),d0
                not.b   d0
                cmp.b   1(a0),d0
                beq.w   loc_1A186
                addq.w  #1,d1
loc_1A186:                              ; CODE XREF: sub_1A14E+32   j
                swap    d0
                tst.w   d1
                bne.w   loc_1A196
                clr.w   (word_FFD458).w
                bra.w   locret_1A19A
; ---------------------------------------------------------------------------
loc_1A196:                              ; CODE XREF: sub_1A14E+3C   j
                st      (word_FFD458).w
locret_1A19A:                           ; CODE XREF: sub_1A14E+44   j
                rts
; End of function sub_1A14E


sub_1A19C:                              ; CODE XREF: sub_1A050+56   p
                lea     (M68K_RAM).l,a0
                move.w  #$1FFF,d0
                clr.l   d1
loc_1A1A8:                              ; CODE XREF: sub_1A19C+E   j
                move.b  d1,(a0)+
                dbf     d0,loc_1A1A8
                move.b  #$FF,(byte_FF1FFE).l
                moveq   #0,d0
                move.l  #$2000,d1
                movea.l #$FFFF0000,a0
                bsr.w   sub_1A1E4
                moveq   #1,d0
                moveq   #1,d1
                move.b  #1,(M68K_RAM).l
                movea.l #$FFFF0000,a0
                bsr.w   sub_1A1E4
                bsr.w   sub_1A206
                rts
; End of function sub_1A19C


sub_1A1E4:                              ; CODE XREF: sub_1A19C+28   p
                                        ; sub_1A19C+3E   p ...
                movem.l d0-d2/a0-a1,-(sp)
                movea.l #$200000,a1
                add.l   d0,d0
                subq.l  #1,d1
                clr.w   d2
loc_1A1F4:                              ; CODE XREF: sub_1A1E4+18   j
                move.b  (a0)+,d2
                move.w  d2,(a1,d0.w)
                addq.w  #2,d0
                dbf     d1,loc_1A1F4
                movem.l (sp)+,d0-d2/a0-a1
                rts
; End of function sub_1A1E4


sub_1A206:                              ; CODE XREF: sub_1A19C+42   p
                                        ; sub_F9CDE+F0   p ...
                lea     (M68K_RAM).l,a0
                move.l  #$2000,d1
                clr.l   d0
                bsr.w   sub_1A244
                lea     (M68K_RAM).l,a0
                clr.w   d0
                move.w  #$1FFD,d1
loc_1A224:                              ; CODE XREF: sub_1A206+20   j
                add.b   (a0)+,d0
                dbf     d1,loc_1A224
                move.b  d0,1(a0)
                not.w   d0
                move.b  d0,(a0)
                movea.l #$FFFF1FFE,a0
                moveq   #2,d1
                move.l  #$1FFE,d0
                bsr.s   sub_1A1E4
                rts
; End of function sub_1A206


sub_1A244:                              ; CODE XREF: sub_1A050+46   p
                                        ; sub_1A050+68   p ...
                movem.l d0-d2/a0-a1,-(sp)
                movea.l #$200000,a1
                add.l   d0,d0
                subq.l  #1,d1
loc_1A252:                              ; CODE XREF: sub_1A244+16   j
                move.b  1(a1,d0.w),d2
                move.b  d2,(a0)+
                addq.w  #2,d0
                dbf     d1,loc_1A252
                movem.l (sp)+,d0-d2/a0-a1
                rts
; End of function sub_1A244


Z80_MuteAllFM:                          ; CODE XREF: Begin+36   p
                                        ; ROM:0000787E   p ...
                movem.l d0-d7/a0-a2,-(sp)
                bsr.w   sub_1AD54
                move.b  #$77,(dword_FFD182).w ; 'w'
                move.b  #$77,(dword_FFD182+2).w ; 'w'
                moveq   #6,d0
                movea.w #(unk_FFD187-M68K_RAM),a0
loc_1A27E:                              ; CODE XREF: Z80_MuteAllFM+1E   j
                move.b  #$7F,(a0)+
                dbf     d0,loc_1A27E
                bsr.w   sub_1A574
                bsr.w   sub_1A66E
                movem.l (sp)+,d0-d7/a0-a2
locret_1A292:                           ; CODE XREF: p_initfx+4   j
                                        ; sub_1A5C0+4   j ...
                rts
; End of function Z80_MuteAllFM


p_initfx:                               ; CODE XREF: sfx+12   p
                                        ; song+E   p
                cmp.w   #$7A,d0 ; 'z'
                bhi.s   locret_1A292
                movem.l d0-d3/a0-a2,-(sp)
                cmp.w   #$30,d0 ; '0'
                blt.w   loc_1A2AA
                bsr.w   sub_1A304
loc_1A2AA:                              ; CODE XREF: p_initfx+E   j
                lea     (unk_FFD3D4).w,a1
                moveq   #7,d3
loc_1A2B0:                              ; CODE XREF: p_initfx+24   j
                move.l  (a1),d1
                move.w  d3,d2
                movea.w a1,a2
loc_1A2B6:                              ; CODE XREF: p_initfx+28   j
                cmp.l   (a1),d1
                bgt.s   loc_1A2B0
                addq.w  #6,a1
                dbf     d3,loc_1A2B6
                tst.w   (a2)
                bpl.w   loc_1A2FE
                asl.w   #2,d0
                lea     (unk_2C648).l,a0
                movea.l (a0,d0.w),a0
                move.l  a0,(a2)
                clr.w   4(a2)
                move.b  (a0),5(a2)
                lea     (unk_FFD1A4).w,a0
                asl.w   #3,d2
                adda.w  d2,a0
                moveq   #7,d0
loc_1A2E6:                              ; CODE XREF: p_initfx+66   j
                clr.w   (a0)
                clr.b   2(a0)
                clr.b   3(a0)
                move.w  #$7F,4(a0)
                adda.w  #$40,a0 ; '@'
                dbf     d0,loc_1A2E6
loc_1A2FE:                              ; CODE XREF: p_initfx+2E   j
                movem.l (sp)+,d0-d3/a0-a2
                rts
; End of function p_initfx


sub_1A304:                              ; CODE XREF: Gameloop+2C   p
                                        ; clockcont+18   p ...
                movem.l d0-d3/a0-a3,-(sp)
                move    sr,-(sp)
                move    #$2700,sr
                lea     (unk_FFD3D4).w,a1
                moveq   #7,d3
                movea.l (off_2C708).l,a0
loc_1A31A:                              ; CODE XREF: sub_1A304+1A   j
                cmpa.l  (a1),a0
                addq.w  #6,a1
                dble    d3,loc_1A31A
                bgt.w   loc_1A368
                clr.l   (dword_FFD182).w
                clr.b   (byte_FFD186).w
                move.l  #$FFFFFFFF,-6(a1)
                moveq   #5,d1
                lea     (unk_FFD3A4).w,a2
loc_1A33C:                              ; CODE XREF: sub_1A304+5C   j
                move.b  (a2),d2
                andi.w  #7,d2
                cmp.w   d2,d3
                bne.w   loc_1A35E
                bsr.w   sub_1A64C
                move.b  4(a2),d0
                lea     (unk_FFD187).w,a1
                move.b  #$7F,(a1,d0.w)
                bset    d0,(dword_FFD182+2).w
loc_1A35E:                              ; CODE XREF: sub_1A304+40   j
                addq.w  #8,a2
                dbf     d1,loc_1A33C
                bsr.w   sub_1A574
loc_1A368:                              ; CODE XREF: sub_1A304+1E   j
                move    (sp)+,sr
                movem.l (sp)+,d0-d3/a0-a3
                rts
; End of function sub_1A304


sub_1A370:                              ; CODE XREF: sub_1A50A   p
                movem.l d1/a0,-(sp)
                tst.w   (FourWayPlay).w
                beq.w   loc_1A39C
                bsr.s   sub_1A3B2
                move.b  d0,(byte_FFBEF6).w
                bsr.s   sub_1A3DC
                move.b  d0,(byte_FFBEF7).w
                bsr.w   sub_1A406
                move.b  d0,(byte_FFBEF8).w
                bsr.w   sub_1A430
                move.b  d0,(byte_FFBEF9).w
                bra.w   loc_1A3AC
; ---------------------------------------------------------------------------
loc_1A39C:                              ; CODE XREF: sub_1A370+8   j
                bsr.w   sub_1A470
                move.b  d0,(byte_FFBEF6).w
                bsr.w   sub_1A464
                move.b  d0,(byte_FFBEF7).w
loc_1A3AC:                              ; CODE XREF: sub_1A370+28   j
                movem.l (sp)+,d1/a0
                rts
; End of function sub_1A370


sub_1A3B2:                              ; CODE XREF: sub_1A370+C   p
                move.w  #$100,(IO_Z80BUS).l
                move.w  #$64,d0 ; 'd'
loc_1A3BE:                              ; CODE XREF: sub_1A3B2+16   j
                btst    #0,(IO_Z80BUS).l
                beq.s   loc_1A3D0
                dbf     d0,loc_1A3BE
                bsr.w   sub_1A4EE
loc_1A3D0:                              ; CODE XREF: sub_1A3B2+14   j
                move.b  #$C,(IO_CT2_DATA+1).l
                bra.w   loc_1A456
; End of function sub_1A3B2


sub_1A3DC:                              ; CODE XREF: sub_1A370+12   p
                move.w  #$100,(IO_Z80BUS).l
                move.w  #$64,d0 ; 'd'
loc_1A3E8:                              ; CODE XREF: sub_1A3DC+16   j
                btst    #0,(IO_Z80BUS).l
                beq.s   loc_1A3FA
                dbf     d0,loc_1A3E8
                bsr.w   sub_1A4EE
loc_1A3FA:                              ; CODE XREF: sub_1A3DC+14   j
                move.b  #$1C,(IO_CT2_DATA+1).l
                bra.w   loc_1A456
; End of function sub_1A3DC


sub_1A406:                              ; CODE XREF: sub_1A370+18   p
                move.w  #$100,(IO_Z80BUS).l
                move.w  #$64,d0 ; 'd'
loc_1A412:                              ; CODE XREF: sub_1A406+16   j
                btst    #0,(IO_Z80BUS).l
                beq.s   loc_1A424
                dbf     d0,loc_1A412
                bsr.w   sub_1A4EE
loc_1A424:                              ; CODE XREF: sub_1A406+14   j
                move.b  #$2C,(IO_CT2_DATA+1).l ; ','
                bra.w   loc_1A456
; End of function sub_1A406


sub_1A430:                              ; CODE XREF: sub_1A370+20   p
                move.w  #$100,(IO_Z80BUS).l
                move.w  #$64,d0 ; 'd'
loc_1A43C:                              ; CODE XREF: sub_1A430+16   j
                btst    #0,(IO_Z80BUS).l
                beq.s   loc_1A44E
                dbf     d0,loc_1A43C
                bsr.w   sub_1A4EE
loc_1A44E:                              ; CODE XREF: sub_1A430+14   j
                move.b  #$3C,(IO_CT2_DATA+1).l ; '<'
loc_1A456:                              ; CODE XREF: sub_1A3B2+26   j
                                        ; sub_1A3DC+26   j ...
                movem.l d1/a0,-(sp)
                lea     ($A10003).l,a0
                bra.w   loc_1A498
; End of function sub_1A430


sub_1A464:                              ; CODE XREF: sub_1A370+34   p
                movem.l d1/a0,-(sp)
                lea     ($A10005).l,a0
                bra.s   loc_1A47A
; End of function sub_1A464


sub_1A470:                              ; CODE XREF: sub_1A370:loc_1A39C   p
                movem.l d1/a0,-(sp)
                lea     ($A10003).l,a0
loc_1A47A:                              ; CODE XREF: sub_1A464+A   j
                move.w  #$100,(IO_Z80BUS).l
                move.w  #$64,d0 ; 'd'
loc_1A486:                              ; CODE XREF: sub_1A470+20   j
                btst    #0,(IO_Z80BUS).l
                beq.s   loc_1A498
                dbf     d0,loc_1A486
                bsr.w   sub_1A4EE
loc_1A498:                              ; CODE XREF: sub_1A430+30   j
                                        ; sub_1A470+1E   j
                moveq   #0,d0
                move.b  #0,(a0)
                nop
                nop
                move.b  (a0),d0
                move.b  #$40,(a0) ; '@'
                nop
                nop
                move.b  (a0),d1
                move.w  #0,(IO_Z80BUS).l
                asl.b   #2,d0
                andi.b  #$C0,d0
                andi.b  #$3F,d1 ; '?'
                or.b    d1,d0
                not.b   d0
                not.b   d1
                andi.w  #$F,d1
                lea     unk_1A4DE(pc),a0
                andi.b  #$F0,d0
                or.b    (a0,d1.w),d0
                not.b   d0
                movem.l (sp)+,d1/a0
                rts
; End of function sub_1A470
; ---------------------------------------------------------------------------


sub_1A4EE:                              ; CODE XREF: sub_1A3B2+1A   p
                                        ; sub_1A3DC+1A   p ...
                move.w  #$100,(IO_Z80RES).l
                move.w  #$100,(IO_Z80BUS).l
loc_1A4FE:                              ; CODE XREF: sub_1A4EE+18   j
                btst    #0,(IO_Z80BUS).l
                bne.s   loc_1A4FE
                rts
; End of function sub_1A4EE


sub_1A50A:                              ; CODE XREF: Begin+3C   p
                                        ; ROM:00015E1E   p ...
                bsr.w   sub_1A370
                clr.b   (byte_FFD180).w
                clr.l   (dword_FFD182).w
                clr.b   (byte_FFD186).w
loc_1A51A:                              ; CODE XREF: sub_1A50A+36   j
                lea     (unk_FFD3D4).w,a5
                moveq   #7,d7
loc_1A520:                              ; CODE XREF: sub_1A50A+1C   j
                bsr.w   sub_1A5C0
                addq.w  #6,a5
                dbf     d7,loc_1A520
                btst    #0,(word_FFDEF2).w
                beq.w   loc_1A542
                subq.w  #1,(word_FFD070).w
                bpl.w   loc_1A542
                addq.w  #6,(word_FFD070).w
                bra.s   loc_1A51A
; ---------------------------------------------------------------------------
loc_1A542:                              ; CODE XREF: sub_1A50A+26   j
                                        ; sub_1A50A+2E   j
                tst.b   (byte_FFD180).w
                beq.w   loc_1A54E
                bsr.w   sub_1A574
loc_1A54E:                              ; CODE XREF: sub_1A50A+3C   j
                movea.w #(unk_FFD3A4-M68K_RAM),a0
                moveq   #5,d0
loc_1A554:                              ; CODE XREF: sub_1A50A+58   j
                addq.b  #1,5(a0)
                bne.w   loc_1A560
                subq.b  #1,5(a0)
loc_1A560:                              ; CODE XREF: sub_1A50A+4E   j
                addq.w  #8,a0
                dbf     d0,loc_1A554
                rts
; End of function sub_1A50A
; ---------------------------------------------------------------------------
loc_1A568:                              ; CODE XREF: sub_1A574+1E   j
                                        ; sub_1A574+26   j
                clr.w   (IO_Z80BUS).l
                moveq   #$64,d0 ; 'd'
loc_1A570:                              ; CODE XREF: ROM:loc_1A570   j
                dbf     d0,loc_1A570


sub_1A574:                              ; CODE XREF: Z80_MuteAllFM+22   p
                                        ; sub_1A304+60   p ...
                move.w  #$100,(IO_Z80BUS).l
loc_1A57C:                              ; CODE XREF: sub_1A574+10   j
                btst    #0,(IO_Z80BUS).l
                bne.s   loc_1A57C
                movea.l #Z80_RAM,a0
                cmpi.b  #0,$97(a0)
                bne.s   loc_1A568
                cmpi.b  #$7D,$96(a0) ; '}'
                bne.s   loc_1A568
                move.b  #$D1,$96(a0)
                move.b  #0,$97(a0)
                adda.w  #2,a0
                movea.w #(dword_FFD182-M68K_RAM),a1
                moveq   #$20,d0 ; ' '
loc_1A5B2:                              ; CODE XREF: sub_1A574+40   j
                move.b  (a1)+,(a0)+
                dbf     d0,loc_1A5B2
                clr.w   (IO_Z80BUS).l
locret_1A5BE:                           ; CODE XREF: ROM:0001A75C   j
                rts
; End of function sub_1A574


sub_1A5C0:                              ; CODE XREF: sub_1A50A:loc_1A520   p
                                        ; sub_1A5C0+48   j
                subq.w  #1,4(a5)
                bpl.w   locret_1A292
loc_1A5C8:                              ; CODE XREF: sub_1A5C0+32   j
                tst.w   (a5)
                bmi.w   locret_1A292
                movea.l (a5),a0
                addq.l  #4,(a5)
                clr.w   4(a5)
                move.b  4(a0),5(a5)
                move.b  1(a0),d0
                bne.w   loc_1A5F4
                st      (a5)
                tst.w   2(a0)
                bmi.w   locret_1A292
                move.l  2(a0),(a5)
                bra.s   loc_1A5C8
; ---------------------------------------------------------------------------
loc_1A5F4:                              ; CODE XREF: sub_1A5C0+20   j
                move.b  1(a0),d0
                andi.w  #$70,d0 ; 'p'
                lsr.w   #3,d0
                lea     unk_1A60A(pc),a2
                adda.w  (a2,d0.w),a2
                jsr     (a2)
                bra.s   sub_1A5C0
; End of function sub_1A5C0
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_1A61A:                              ; CODE XREF: ROM:0001A692   j
                move.b  1(a0),d0
                andi.w  #$F,d0
                asl.w   #3,d0
                or.w    d7,d0
                asl.w   #8,d0
                move.b  2(a0),d0
                movea.w #(unk_FFD3D4-M68K_RAM),a2
                moveq   #5,d1
loc_1A632:                              ; CODE XREF: ROM:0001A636   j
                                        ; ROM:0001A644   j
                subq.w  #8,a2
                cmp.w   (a2),d0
                dbeq    d1,loc_1A632
                bne.w   locret_1A292
                btst    #0,6(a2)
                dbne    d1,loc_1A632
                beq.w   locret_1A292


sub_1A64C:                              ; CODE XREF: sub_1A304+44   p
                bclr    #0,6(a2)
                beq.w   locret_1A292
                cmpi.b  #$60,3(a2) ; '`'
                bge.w   sub_1A66E
                move.b  4(a2),d0
                bset    d0,(dword_FFD182).w
                st      (byte_FFD180).w
                rts
; End of function sub_1A64C


sub_1A66E:                              ; CODE XREF: Z80_MuteAllFM+26   p
                                        ; sub_1A64C+10   j
                move.w  #$100,(IO_Z80BUS).l
loc_1A676:                              ; CODE XREF: sub_1A66E+10   j
                btst    #0,(IO_Z80BUS).l
                bne.s   loc_1A676
                clr.b   (byte_A0008E).l
                clr.w   (IO_Z80BUS).l
                rts
; End of function sub_1A66E
; ---------------------------------------------------------------------------
                tst.b   3(a0)
                beq.s   loc_1A61A
                movea.w #(unk_FFD3CC-M68K_RAM),a2
                lea     (unk_FFD1A4).w,a3
                move.b  1(a0),d0
                andi.w  #$F,d0
                asl.w   #3,d0
                or.w    d7,d0
                move.w  d0,d6
                asl.w   #3,d0
                move.b  3(a3,d0.w),d0
                cmp.b   #$60,d0 ; '`'
                bge.w   loc_1A74E
                subq.w  #8,a2
                moveq   #4,d1
                bra.w   loc_1A6C8
; ---------------------------------------------------------------------------
loc_1A6C0:                              ; CODE XREF: ROM:0001A6D0   j
                cmp.b   5(a2),d2
                bhi.w   loc_1A6CE
loc_1A6C8:                              ; CODE XREF: ROM:0001A6BC   j
                movea.w a2,a4
                move.b  5(a4),d2
loc_1A6CE:                              ; CODE XREF: ROM:0001A6C4   j
                subq.w  #8,a2
                dbf     d1,loc_1A6C0
                moveq   #4,d1
                movea.w #(unk_FFD3CC-M68K_RAM),a2
loc_1A6DA:                              ; CODE XREF: ROM:0001A6E2   j
                                        ; ROM:0001A6F0   j
                subq.w  #8,a2
                btst    #0,6(a2)
                dbeq    d1,loc_1A6DA
                bne.w   loc_1A6FC
                movea.w a2,a4
                cmp.b   3(a4),d0
                dbeq    d1,loc_1A6DA
                beq.w   loc_1A720
                bra.w   loc_1A704
; ---------------------------------------------------------------------------
loc_1A6FC:                              ; CODE XREF: ROM:0001A6E6   j
                cmp.b   3(a4),d0
                beq.w   loc_1A720
loc_1A704:                              ; CODE XREF: ROM:0001A6F8   j
                movea.w a4,a2
loc_1A706:                              ; CODE XREF: sub_17336:loc_17508   j
                move.b  d0,3(a2)
                clr.w   d1
                move.b  4(a2),d1
                bset    d1,(byte_FFD186).w
                movea.w #(unk_FFD19C-M68K_RAM),a4
                move.b  d0,(a4,d1.w)
                st      (byte_FFD180).w
loc_1A720:                              ; CODE XREF: ROM:0001A6F4   j
                                        ; ROM:0001A700   j
                clr.b   5(a2)
                bset    #0,6(a2)
                move.b  d6,(a2)
                move.b  2(a0),1(a2)
                move.b  3(a0),2(a2)
                clr.w   d1
                move.b  4(a2),d1
                bset    d1,(dword_FFD182).w
                bset    d1,(dword_FFD182+1).w
                bsr.w   sub_1ABAA
                bra.w   sub_1A7D8
; ---------------------------------------------------------------------------
loc_1A74E:                              ; CODE XREF: ROM:0001A6B4   j
                bset    #0,6(a2)
                beq.w   loc_1A760
                cmp.b   3(a2),d0
                ble.w   locret_1A5BE
loc_1A760:                              ; CODE XREF: ROM:0001A754   j
                move.b  d0,3(a2)
                clr.b   5(a2)
                move.b  d6,(a2)
                move.b  2(a0),1(a2)
                move.b  3(a0),2(a2)
                ext.w   d0
                subi.w  #$60,d0 ; '`'
                asl.w   #3,d0
                lea     unk_1B01C(pc),a1
                move.l  4(a1,d0.w),d1
                move.l  (a1,d0.w),d0
                move.w  #$100,(IO_Z80BUS).l
loc_1A792:                              ; CODE XREF: ROM:0001A79A   j
                btst    #0,(IO_Z80BUS).l
                bne.s   loc_1A792
                movea.l #Z80_RAM,a1
                move.b  d0,$25(a1)
                lsr.w   #8,d0
                move.b  d0,$24(a1)
                swap    d0
                move.b  d0,$23(a1)
                move.b  d1,$28(a1)
                lsr.w   #8,d1
                move.b  d1,$27(a1)
                swap    d1
                move.b  d1,$26(a1)
                move.b  #$29,$96(a1) ; ')'
                move.b  #0,$97(a1)
                clr.w   (IO_Z80BUS).l
                bsr.w   sub_1ABAA


sub_1A7D8:                              ; CODE XREF: ROM:0001A74A   j
                                        ; ROM:0001AC76   p
                clr.l   d3
                move.b  1(a2),d3
                divu.w  #$C,d3
                move.w  d3,-(sp)
                swap    d3
                add.w   d3,d3
                lea     unk_1A890(pc),a4
                move.w  (a4,d3.w),d2
                clr.w   d1
                move.b  (a2),d1
                asl.w   #3,d1
                move.w  (a3,d1.w),d3
                beq.w   loc_1A834
                moveq   #$C,d1
                cmpi.b  #$60,3(a2) ; '`'
                bge.w   loc_1A81C
                move.b  3(a2),d1
                asl.w   #5,d1
                lea     ($2C248).l,a4
                move.b  byte_2C266-unk_2C248(a4,d1.w),d1
                ext.w   d1
loc_1A81C:                              ; CODE XREF: sub_1A7D8+2E   j
                muls.w  d1,d3
                asr.l   #2,d3
                asr.w   #7,d3
                addi.w  #$C0,d3
                add.w   d3,d3
                lea     unk_1A8A8(pc),a4
                mulu.w  (a4,d3.w),d2
                asl.l   #1,d2
                swap    d2
loc_1A834:                              ; CODE XREF: sub_1A7D8+22   j
                move.w  (sp)+,d3
                cmpi.b  #$60,3(a2) ; '`'
                bge.w   loc_1A860
                asl.w   #3,d3
                asl.w   #8,d3
                or.w    d3,d2
                clr.w   d3
                move.b  4(a2),d3
                bset    d3,(dword_FFD182+3).w
                add.w   d3,d3
                movea.w #(unk_FFD18E-M68K_RAM),a4
                move.w  d2,(a4,d3.w)
                st      (byte_FFD180).w
                rts
; ---------------------------------------------------------------------------
loc_1A860:                              ; CODE XREF: sub_1A7D8+64   j
                btst    #0,6(a2)
                beq.w   locret_1A88E
                move.w  #$100,(IO_Z80BUS).l
loc_1A872:                              ; CODE XREF: sub_1A7D8+A2   j
                btst    #0,(IO_Z80BUS).l
                bne.s   loc_1A872
                neg.w   d3
                addq.w  #8,d3
                lsr.w   d3,d2
                move.b  d2,(byte_A0008E).l
                clr.w   (IO_Z80BUS).l
locret_1A88E:                           ; CODE XREF: sub_1A7D8+8E   j
                rts
; End of function sub_1A7D8
; ---------------------------------------------------------------------------


sub_1ABAA:                              ; CODE XREF: ROM:0001A746   p
                                        ; ROM:0001A7D4   p
                movem.l d0,-(sp)
                clr.w   d0
                move.b  2(a2),d0
                clr.w   d1
                move.b  (a2),d1
                asl.w   #3,d1
                mulu.w  4(a3,d1.w),d0
                lsr.w   #7,d0
                cmpi.b  #$60,3(a2) ; '`'
                bge.w   loc_1AC00
                lea     unk_1ABF0(pc),a4
                lsr.w   #3,d0
                move.b  (a4,d0.w),d0
                clr.w   d3
                move.b  4(a2),d3
                movea.w #(unk_FFD187-M68K_RAM),a4
                move.b  d0,(a4,d3.w)
                bset    d3,(dword_FFD182+2).w
                st      (byte_FFD180).w
                movem.l (sp)+,d0
                rts
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_1AC00:                              ; CODE XREF: sub_1ABAA+1C   j
                move.w  #$100,(IO_Z80BUS).l
loc_1AC08:                              ; CODE XREF: sub_1ABAA+66   j
                btst    #0,(IO_Z80BUS).l
                bne.s   loc_1AC08
                lsr.b   #2,d0
                cmp.w   #3,d0
                bgt.w   loc_1AC1E
                moveq   #3,d0
loc_1AC1E:                              ; CODE XREF: sub_1ABAA+6E   j
                move.b  d0,(byte_A00083).l
                clr.w   (IO_Z80BUS).l
                movem.l (sp)+,d0
                rts
; End of function sub_1ABAA
; ---------------------------------------------------------------------------
                lea     (unk_FFD1A4).w,a3
                move.b  1(a0),d0
                andi.w  #$F,d0
                asl.w   #3,d0
                or.w    d7,d0
                asl.w   #3,d0
                move.b  2(a0),3(a3,d0.w)
                rts
; ---------------------------------------------------------------------------
                lea     (unk_FFD1A4).w,a3
                move.b  1(a0),d0
                andi.w  #$F,d0
                asl.w   #3,d0
                or.w    d7,d0
                move.w  d0,d4
                asl.w   #3,d0
                move.w  2(a0),(a3,d0.w)
                subi.w  #$2000,(a3,d0.w)
                movea.w #(unk_FFD3A4-M68K_RAM),a2
                moveq   #5,d0
loc_1AC70:                              ; CODE XREF: ROM:0001AC7C   j
                cmp.b   (a2),d4
                bne.w   loc_1AC7A
                bsr.w   sub_1A7D8
loc_1AC7A:                              ; CODE XREF: ROM:0001AC72   j
                addq.w  #8,a2
                dbf     d0,loc_1AC70
                rts
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
                rts


Z80_LoadROM:                            ; CODE XREF: Begin:loc_76E8   p
                movem.l d0-d2/a0-a2,-(sp)
                bsr.w   sub_1AD54
                move.w  #$100,(IO_Z80RES).l
                move.w  #$100,(IO_Z80BUS).l
loc_1ACDA:                              ; CODE XREF: Z80_LoadROM+20   j
                btst    #0,(IO_Z80BUS).l
                bne.s   loc_1ACDA
                movea.l #unk_1AD90,a1
                movea.l #Z80_RAM,a2
                move.w  #$294,d0
loc_1ACF4:                              ; CODE XREF: Z80_LoadROM+34   j
                move.b  (a1)+,(a2)+
                dbf     d0,loc_1ACF4
                movea.l #unk_A02000,a2
                moveq   #8,d2
                move.l  #$1C,d3
loc_1AD08:                              ; CODE XREF: Z80_LoadROM+64   j
                move.w  #$FF,d0
loc_1AD0C:                              ; CODE XREF: Z80_LoadROM+5C   j
                move.w  d0,d1
                subi.w  #$80,d1
                asl.w   #3,d1
                ext.l   d1
                divs.w  d2,d1
                addi.w  #$80,d1
                move.b  d1,-(a2)
                dbf     d0,loc_1AD0C
                clr.b   (a2)
                addq.w  #1,d2
                dbf     d3,loc_1AD08
                move.w  #0,(IO_Z80RES).l
                move.w  #0,(IO_Z80BUS).l
                move.w  #$1F4,d0
loc_1AD3E:                              ; CODE XREF: Z80_LoadROM:loc_1AD3E   j
                dbf     d0,loc_1AD3E
                move.w  #$100,(IO_Z80RES).l
                clr.b   (byte_FFD180).w
                movem.l (sp)+,d0-d2/a0-a2
                rts
; End of function Z80_LoadROM


sub_1AD54:                              ; CODE XREF: Z80_MuteAllFM+4   p
                                        ; Z80_LoadROM+4   p
                lea     (unk_FFD3D4).w,a0
                moveq   #7,d0
                moveq   #$FFFFFFFF,d1
loc_1AD5C:                              ; CODE XREF: sub_1AD54+C   j
                move.l  d1,(a0)
                addq.w  #6,a0
                dbf     d0,loc_1AD5C
                moveq   #5,d0
                movea.w #(unk_FFD3D4-M68K_RAM),a0
loc_1AD6A:                              ; CODE XREF: sub_1AD54+36   j
                subq.w  #8,a0
                move.b  d0,4(a0)
                cmp.w   #3,d0
                blt.w   loc_1AD7C
                addq.b  #1,4(a0)
loc_1AD7C:                              ; CODE XREF: sub_1AD54+20   j
                st      3(a0)
                st      (a0)
                clr.b   1(a0)
                clr.b   6(a0)
                dbf     d0,loc_1AD6A
                rts
; End of function sub_1AD54
; ---------------------------------------------------------------------------
dword_1F1D8:    dc.l $7F7F7F80          ; DATA XREF: DivBy0+18   r
byte_2C266:     dc.b 7                  ; DATA XREF: sub_1A7D8+3E   r
off_2C708:      dc.l unk_2CEF2          ; DATA XREF: sub_1A304+10   r
dword_EDF9B:    dc.l $CC22BCCC          ; DATA XREF: ROM:000F471A   r
; ---------------------------------------------------------------------------
loc_F39F8:                              ; CODE XREF: sub_F8868+162   j
                subq.w  #2,(a5)
                subq.w  #1,(a5)
                subq.w  #2,(a5)
                subq.w  #2,(a5)
                subq.w  #2,(a5)
                subq.w  #2,(a5)
                move.w  0(a3)
                sub.w   0(sp),d3
                subq.w  #3,($77755779).l
                subq.w  #3,0(sp)
                move.w  (a5)+,0(a1)
                move.w
                adda.l  ,sp
                move.w
                move.w
                adda.l  (a5)+,a6
                subq.l  #2
                adda.l  ,a6
                move.w
                subq.l  #3
                move.w
                move.b
                move.b
                move.b
                move.b
                move.w  ($DFFF55BF).l,-$223(a1)
                move.w
                adda.l  (sp)+,a6
                move.w
                subq.l  #2
                move.w  off_0(pc)
                adda.l  ,a6
                subq.l  #3
                adda.l  ,a6
                seq     (a5)+
                adda.l  (sp)+,a6
                seq     (a5)+
                adda.l  ,sp
                subq.l  #3
                adda.l  ,a6
                move.w
                adda.l  ,sp
                adda.l  ,a6
                suba.l  (a5)+,a5
                adda.l  ,sp
                adda.l  ,a6
                adda.l  (a3)+,a6
                adda.l  (a3)+,a6
                adda.l  ,sp
                add.l   off_0(pc),d6
                adda.l  (a3)+,a6
                adda.l  (a3)+,a6
                adda.l  (a3)+,a6
                adda.l  (a3)+,a6
                adda.l  (a3)+,a6
                adda.l  (a3)+,a6
                add.l   off_0(pc),d6
                add.l   off_0(pc),d6
                add.l   off_0(pc),d6
                adda.l  (a3)+,a6
                adda.l  (a5)+,a6
                eor.l   d5,d5
                adda.l  (a5)+,a6
                add.l   off_0(pc),d6
                adda.l  (a3)+,a6
                adda.l  ,sp
                add.l   off_0(pc),d6
                add.l   off_0(pc),d6
                add.l   off_0(pc),d6
                add.l   off_0(pc),d6
                adda.l  (a3)+,a6
                adda.l  (a3)+,a6
                adda.l  (a3)+,a6
                add.l   off_0(pc),d6
                add.l   off_0(pc),d6
                adda.l  (a3)+,a6
                adda.l  ,sp
                adda.l  (a5)+,a6
                adda.l  (a5)+,sp
                eor.l   d5,(a1)+
                eor.l   d5,(a1)+
                eor.l   d5,(a1)+
                sub.l   d4,(a3)+
                eor.l   d5,($9999BBB9).l
                sub.l   d4,(a1)+
                eor.l   d5,(a1)+
                sub.l   d4,(a1)+
                eor.l   d5,(a1)+
                sub.l   d4,(a1)+
                eor.l   d5,(a1)+
                sub.w   d4,($9B999979).l
                eor.l   d4,(a1)+
                sub.w   d4,($B9999979).l
                sub.l   d4,(a1)+
                sub.l   d4,(a1)+
                sub.l   d4,(sp)
                sub.l   d4,(a1)+
                sub.l   d4,(a1)+
                eor.l   d5,($99999999).l
                sub.l   d4,(a3)+
                eor.l   d4,(a1)+
                sub.w   0(sp),d4
                sub.w   d4,($BB999999).l
                eor.l   d5,(a1)+
                sub.w   d4,($BBB99979).l
                eor.l   d5,($9999BB99).l
                sub.l   d4,(a1)+
                eor.l   d5,d5
                eor.l   d4,(a1)+
                eor.l   d5,d5
                eor.l   d5,(a1)+
                eor.l   d5,($9999B999).l
                sub.l   d4,(a1)+
                eor.l   d5,d5
                eor.l   d4,(a1)+
                eor.l   d5,d5
                eor.l   d5,d5
                eor.l   d5,d5
                eor.l   d5,($DBBBBBBB).l
                eor.l   d5,d5
                eor.l   d5,d5
                add.l   off_0(pc),d5
                sub.l   d4,(a1)+
                cmpa.l  ,a6
                sub.l   d4,(a1)+
                cmpa.l  (a5)+,a5
                sub.l   d4,(a1)+
                eor.l   d5,d5
                sub.l   d4,(a1)+
                sub.l   ,d5
                sub.w   d3,($9BDD9999).l
                sub.l   ,d5
                sub.l   d3,(a1)+
                suba.l  (a5)+,a5
                sub.l   ,d5
                sub.l   d3,(a1)+
                suba.l  (a5)+,a5
                sub.l   ,d5
                sub.l   d3,(a1)+
                sub.l   ,d4
                sub.l   d4,(sp)
                sub.l   ,d4
                sub.w   0(sp),d3
                sub.l   ,d4
                sub.l   d4,(a1)+
                cmpa.l  (a5)+,a5
                sub.l   ,d5
                suba.l  (a5)+,a5
                sub.l   d3,(a1)+
                sub.l   ,d5
                sub.l   d4,(a1)+
                eor.l   d5,d5
                sub.l   d4,(a1)+
                sub.l   ,d5
                sub.l   d4,(a1)+
                sub.l   off_0(pc),d5
                sub.l   ,d5
                sub.l   d4,(a1)+
                eor.l   d5,d5
                sub.l   d4,(a1)+
                cmpa.l  (a5)+,a5
                sub.l   d4,(a1)+
                cmpa.l  (a5)+,a5
                sub.l   d4,(a1)+
                cmpa.l  (a5)+,a5
                sub.l   ,d5
                eor.l   d4,d4
                eor.l   d5,d5
                sub.l   off_0(pc),d5
                sub.l   off_0(pc),d4
                eor.l   d5,d5
                cmpa.l  (a5)+,a5
                sub.l   off_0(pc),d4
                ori.b   #$F0,d0
                ori.b   #$F0,d0
                ori.b   #$FD,d0
                ori.b   #$FD,d0
                ori.b   #$FF,d0
                ori.b   #$FF,d0
                ori.b   #$FF,d0
                ori.b   #$FF,d0
                ori.b   #$FF,d0
                ori.b   #$FF,d0
                ori.b   #$FF,d0
                ori.b   #$FF,d0
                ori.b   #$FF,d0
                ori.b   #$FF,d0
                ori.b   #$FF,d0
                line_f  unk_FFFFFF,#0
                adda.l  ,sp
                line_f  unk_FFFFFF,#0
                line_f  unk_FFFFFF,#0
                ori.b   #$FF,d0
                ori.b   #$FF,d0
                ori.b   #$FF,d0
                ori.b   #$FD,d0
                ori.b   #$FF,d0
                ori.b   #$FF,d0
                ori.b   #$FF,d0
                ori.b   #$FF,d0
                ori.b   #$FF,d0
                ori.b   #$FF,d0
                cmp.b   d0,d0
                adda.l  ,a6
                line_f  unk_FFFFFF,#0
                ori.b   #$FD,sp
                ori.b   #$FD,a5
                ori.b   #$FD,sp
                ori.b   #$FD,sp
                ori.b   #$FD,sp
                ori.b   #$FD,sp
                ori.b   #$DD,sp
                ori.b   #$FD,sp
                ori.b   #$FD,sp
                ori.b   #$FB,sp
                ori.b   #$FB,sp
                ori.b   #$DB,sp
                ori.b   #$FB,sp
                ori.b   #$DB,sp
                ori.b   #$DB,sp
                ori.b   #$D9,sp
                ori.b   #$D9,sp
                ori.b   #$F9,sp
                ori.b   #$FB,sp
                ori.b   #$FB,sp
                ori.b   #$FD,sp
                ori.b   #$FB,sp
                        d7
                        d7
                sub.l   d4,(a1)+
                sub.w   d4,($99999999).l
                sub.l   d4,(a1)+
                sub.l   d4,(a1)+
                eor.l   d4,(a1)+
                sub.l   d4,(a1)+
                sub.l   d4,(a1)+
                sub.l   d4,(a1)+
                eor.l   d4,(a1)+
                sub.l   d4,(a1)+
                eor.l   d4,($97779999).l
                sub.l   d4,(a1)+
                sub.l   d4,(a1)+
                sub.l   d4,(sp)
                eor.l   d5,(sp)
                sub.l   d4,(a1)+
                sub.w   d3,([0],a1.l,$77779999)
                sub.l   d4,(sp)
                sub.l   d4,(a1)+
                sub.w   d4,($99999997).l
                sub.w   d4,($99999999).l
                sub.w   d4,($99999999).l
                sub.l   d4,(a1)+
                sub.l   d4,(a1)+
                sub.l   d4,(a1)+
                sub.l   d4,(a1)+
                eor.l   d4,(a1)+
                sub.w   d4,($99999997).l
                eor.l   d4,(a1)+
                sub.l   d4,(a1)+
                sub.w   d4,([0],d7.l,-$466688AB)
                eor.l   d5,d5
                eor.l   d5,($99977777).l
                sub.l   d4,(sp)
                sub.w   0(sp),d4
                sub.l   d4,(sp)
                subq.w  #3,0(sp)
                subq.w  #3,0(sp)
                subq.w  #3,0(sp)
                subq.w  #3,0(sp)
                subq.w  #3,0(sp)
                subq.w  #3,0(sp)
                subq.w  #3,0(sp)
                subq.w  #2,(a5)
                subq.w  #2,(a5)
                subq.w  #2,(a5)
                move.w  0(a3)
                subq.w  #2,(sp)
                subq.w  #2,(a5)
                subq.w  #2,(a5)
                subq.w  #2,(a5)
                sub.w   d3,([$77775553,sp],$77777533)
                sub.w   d4,([-$6888AACD,sp,d7.w*8],-$688888CD)
                subq.w  #2,(a5)
                move.w  0(a3)
                move.w  (a1),-(a1)
                subq.b  #1,([a1,d1.w])
                sub.l   d4,(a1)+
                sub.l   d4,(a1)+
                subq.w  #2,(a3)
                move.w  ([a3],$33335553),-(a1)
                move.w  (a1),-(a1)
                subq.b  #2,([a3,d3.w*2])
                subq.w  #2,(a3)
                move.w  (a1),-(a1)
                subq.l  #3
                adda.l  ,sp
                subq.l  #2
                adda.l  (a5)+,sp
                adda.l  ,a6
                adda.l  (a5)+,a6
                adda.l  (sp)+,sp
                suba.l  (a5)+,a5
                adda.l  (sp)+,a6
                smi     (sp)+
                subq.l  #4
                adda.l  ,sp
                adda.l  (a5)+,a6
                smi     (a5)+
                smi     (a5)+
                adda.l  (sp)+,a6
                svs     (sp)+
                smi     (a5)+
                adda.l  (sp)+,a6
                smi     (a5)+
                svs     (a5)+
                svs     (a5)+
                adda.l  ,sp
                suba.l  (sp)+,a6
                adda.l  ,sp
                slt     (sp)+
                adda.l  ,sp
                move.w  (a3)+,0(a2)
                suba.l  ,a6
                slt     (sp)+
                adda.l  (a5)+,a6
                adda.l  (a5)+,a6
                adda.l  ,sp
                adda.l  (a5)+,a6
                adda.l  ,sp
                adda.l  (a5)+,a6
                adda.l  (a5)+,a6
                adda.l  (a5)+,a6
                adda.l  (a5)+,a6
                adda.l  (a3)+,a6
                adda.l  (a3)+,a6
                adda.l  (a5)+,a6
                adda.l  (a5)+,a6
                adda.l  (a5)+,a6
                adda.l  (a3)+,a6
                eor.l   d5,d5
                eor.l   d5,($BBBBBBB9).l
                add.l   off_0(pc),d5
                eor.l   d5,d5
                eor.l   d5,d5
                add.l   off_0(pc),d6
                add.l   off_0(pc),d5
                eor.l   d6,d6
                eor.l   d5,d5
                eor.l   d5,($9999BBB9).l
                sub.l   d4,(a1)+
                eor.l   d5,d5
                eor.l   d5,($BBB999B9).l
                eor.l   d5,d5
                sub.l   d4,(a1)+
                eor.l   d5,d5
                sub.l   d4,(a1)+
                eor.l   d5,d5
                eor.l   d5,($BBB99999).l
                add.l   off_0(pc),d5
                add.l   off_0(pc),d5
                eor.l   d5,d5
                sub.l   d4,(a1)+
                add.l   off_0(pc),d5
                add.l   off_0(pc),d5
                add.l   off_0(pc),d5
                eor.l   d5,d5
                eor.l   d5,d5
                add.l   d5,($9999BBB9).l
                sub.l   d4,(sp)
                eor.l   d5,(a1)+
                sub.l   d4,(a1)+
                eor.l   d5,d5
                eor.l   d4,(a1)+
                add.l   off_0(pc),d6
                add.l   off_0(pc),d5
                eor.l   d5,d5
                sub.l   d4,(a1)+
                add.l   off_0(pc),d5
                eor.l   d5,d5
                sub.l   d4,(a1)+
                eor.l   d5,d5
                sub.l   d4,(a1)+
                sub.l   d4,(a1)+
                cmpa.l  (a5)+,a5
                sub.l   off_0(pc),d4
                sub.l   off_0(pc),d4
                sub.l   d4,(a3)+
                cmpa.l  (a5)+,a5
                sub.l   off_0(pc),d4
                sub.l   off_0(pc),d4
                eor.l   d5,d5
                sub.l   ,d5
                sub.l   d4,(a1)+
                sub.l   ,d5
                sub.l   ,d4
                sub.l   d4,(a1)+
                eor.l   d5,d5
                sub.l   d4,(a3)+
                cmpa.l  (a5)+,a5
                sub.l   d4,(a1)+
                eor.l   d5,d5
                sub.l   d4,(a1)+
                sub.l   ,d5
                sub.l   d4,(a3)+
                eor.l   d5,d5
                sub.l   d4,(a1)+
                sub.l   off_0(pc),d5
                sub.l   off_0(pc),d4
                sub.l   off_0(pc),d4
                sub.l   off_0(pc),d4
                sub.l   off_0(pc),d4
                sub.l   off_0(pc),d4
                sub.l   ,d4
                sub.l   d4,(a3)+
                sub.l   off_0(pc),d5
                sub.l   ,d4
                sub.l   ,d4
                sub.l   off_0(pc),d4
                eor.l   d5,d5
                sub.l   d4,(a1)+
                eor.l   d5,d5
                sub.l   d4,(a1)+
                sub.l   off_0(pc),d5
                sub.l   off_0(pc),d5
                sub.l   off_0(pc),d4
                sub.l   off_0(pc),d4
                sub.l   off_0(pc),d4
                line_f  unk_FFFFFF,#0
                add.b   d0,d0
                adda.l  ,a6
                line_f  unk_FFFFFF,#0
                line_f  unk_FFFFFF,#0
                adda.l  ,a5
                line_f  unk_FFFFFF,#0
                adda.l  ,a6
                line_f  unk_FFFFFF,#0
                adda.l  ,a6
                line_f  unk_FFFFFF,#0
                adda.l  ,a6
                line_f  unk_FFFFFF,#0
                adda.l  ,a6
                line_f  unk_FFFFFF,#0
                adda.l  ,a6
                adda.l  ,sp
                adda.l  (sp)+,a6
                adda.l  (sp)+,sp
                line_f  unk_FFFFFF,#0
                adda.l  (sp)+,a6
                line_f  unk_FFFFFF,#0
                adda.l  (sp)+,a6
                line_f  unk_FFFFFF,#0
                adda.l  (sp)+,a6
                line_f  unk_FFFFFF,#0
                adda.l  (sp)+,a6
                line_f  unk_FFFFFF,#0
                adda.l  (sp)+,a6
                line_f  unk_FFFFFF,#0
                adda.l  ,a6
                line_f  unk_FFFFFF,#0
                adda.l  ,sp
                line_f  unk_FFFFFF,#0
                adda.l  ,a6
                line_f  unk_FFFFFF,#0
                adda.l  ,a6
                line_f  unk_FFFFFF,#0
                adda.l  ,sp
                line_f  unk_FFFFFF,#0
                adda.l  (sp)+,a6
                line_f  unk_FFFFFF,#0
                adda.l  (sp)+,a6
                line_f  unk_FFFFFF,#0
                adda.l  ,sp
                adda.l  ,sp
                adda.l  ,a6
                adda.l  ,sp
                adda.l  (sp)+,a6
                adda.l  (sp)+,a6
                adda.l  (sp)+,a6
                adda.l  (sp)+,sp
                eor.l   d5,d5
                sub.l   d4,(a1)+
                add.l   off_0(pc),d5
                add.l   off_0(pc),d5
                add.l   off_0(pc),d5
                add.l   off_0(pc),d5
                add.l   d5,($9999BBBB).l
                sub.l   d4,(a1)+
                adda.l  (a5)+,a6
                adda.l  (a5)+,a6
                adda.l  (a5)+,a6
                adda.l  (a5)+,a6
                adda.l  ,sp
                line_f  unk_FFFFFF,#0
                sub.l   d4,(a1)+
                sub.l   off_0(pc),d4
                sub.l   off_0(pc),d4
                sub.l   off_0(pc),d4
                sub.l   off_0(pc),d4
                sub.l   off_0(pc),d5
                sub.l   off_0(pc),d4
                sub.l   off_0(pc),d5
                adda.l  ,sp
                ori.b   #0,d0
                ori.b   #$FF,d0
                adda.l  (sp)+,a6
                adda.l  (sp)+,a6
                adda.l  (sp)+,a6
                adda.l  ,a6
                adda.l  ,a6
                adda.l  ,a6
                line_f  unk_FFFFFF,#0
                adda.l  ,a6
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #$FF,d0
                        d7
                        d7
                ori.b   #$FF,sp
                ori.b   #$DD,d0
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d0
                sub.l   d4,(sp)
                sub.l   d4,(sp)
                eor.l   d4,(sp)
                eor.l   d5,(sp)
                eor.l   d4,(sp)
                sub.w   0(sp),d3
                sub.w   0(sp),d3
                add.l   off_0(pc),d6
                add.l   d5,(unk_FFFFFF).l
                ori.b   #$FF,d0
                ori.b   #0,d0
                subq.b  #2,([$55533311,a3,d3.w*2])
                subq.w  #2,(a3)
                move.w  (a1),-(a1)
                subq.b  #2,([$53333333,a3,d3.w*2],$33333333)
                move.w  ([a3,d1.w],-$46666667),-(a1)
                eor.l   d4,($B9B9FDFB).l
                ori.b   #$FF,sp
                suba.l  ,sp
                cmpa.l  ,sp
                adda.l  (sp)+,sp
                addi.b  #-$12,d0
                cmpi.l  #$AAA0A88,$888(a2)
                        #$66
                addi.w  #$444,d4
                subi.b  #$22,-(a2) ; '"'
                andi.b  #0,d0
                addi.b  #-$34,d0
                subi.w  #$222,d4
                ori.w   #$48,0(a2) ; 'H'
                        #0
                ori.w   #$40,-(a2) ; '@'
                ori.b   #$A,$66A(a4)
                andi.w  #$600,d6
                andi.l  #$2820282,d2
                andi.l  #$2820282,d2
                andi.l  #$2820282,d2
                andi.l  #$2820282,d2
                andi.l  #$2820282,d2
                addi.b  #-$78,d0
                ori.b   #6,d0
                ori.w   #0,(a6)
                ori.b   #0,d0
                ori.b   #$20,sp ; ' '
                ori.b   #$10,d0
                ori.b   #0,sp
                ori.b   #$20,-(a0) ; ' '
                ori.b   #$20,sp ; ' '
                ori.b   #$30,-(a0) ; '0'
                ori.b   #0,sp
                ori.w   #$40,d0 ; '@'
                ori.b   #$20,sp ; ' '
                ori.w   #$50,d0 ; 'P'
                ori.b   #0,sp
                ori.w   #$60,-(a0) ; '`'
                ori.b   #$20,sp ; ' '
                ori.w   #$70,-(a0) ; 'p'
                ori.b   #0,sp
                ori.l   #$88000D,d0
                ori.b   #$80,-(a0)
                ori.l   #unk_D0000,d0
                bset    d6,0(a2)
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #1,d0
                ori.b   #2,d0
                ori.b   #2,d0
                ori.b   #2,d0
                ori.b   #2,d0
                ori.b   #2,d0
                ori.b   #2,d0
                move.b  -(a0),1(a1)
                move.l  -(a0),2(a1)
                move.l  -(a0),0(a1)
                move.l  d4,$2202(a1)
                move.l  2(a3,d3.w*8),-(a1)
                move.l  2(a4,d4.w*8),-(a1)
                move.l  -(a6),$6602(a1)
                move.l  -(a0),2(a1)
                move.l  d0,d2
                btst    d0,-(a3)
                move.w  d0,$1233(a1)
                ori.b   #$66,d0 ; 'f'
                move.l  d0,d1
                ori.b   #$60,d2 ; '`'
                ori.b   #$60,d2 ; '`'
                ori.b   #$60,d2 ; '`'
                ori.b   #$60,d2 ; '`'
                ori.b   #$32,d2 ; '2'
                movea.w d0,a2
                move.w  0(a3,d3.w*2)
                bne.s   loc_F4472
                bne.s   loc_F4474
                move.l  -(a2),d1
                ori.b   #$46,d0 ; 'F'
                ori.b   #$46,d0 ; 'F'
                ori.b   #$46,d0 ; 'F'
                ori.b   #$46,d0 ; 'F'
                ori.b   #$12,d0
                move.l  -(a2),d1
                btst    d0,-(a3)
                move.w  $34(a3,d0.w*2),-(a1)
                bne.s   loc_F4494
                andi.b  #0,$34(a4,d0.w*2)
                bra.s   loc_F4458
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_F4458:                              ; CODE XREF: ROM:000F4434   j
                bra.s   loc_F445C
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_F445C:                              ; CODE XREF: ROM:loc_F4458   j
                bra.s   loc_F4460
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_F4460:                              ; CODE XREF: ROM:loc_F445C   j
                bra.s   loc_F4464
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_F4464:                              ; CODE XREF: ROM:loc_F4460   j
                ori.b   #$40,d1 ; '@'
                ori.b   #0,d2
                ori.b   #$20,d2 ; ' '
                move.l  -(a3),d1
loc_F4472:                              ; CODE XREF: ROM:000F440A   j
                movea.w -(a0),a2
loc_F4474:                              ; CODE XREF: ROM:000F440C   j
                move.l  $2333(a3),-(a1)
                move.w  -(a0),$6668(a1)
                move.w  -(a0),2(a1)
                move.l  d0,-(a1)
                ori.b   #$40,d0 ; '@'
                ori.b   #$60,d0 ; '`'
                ori.b   #$60,d0 ; '`'
                ori.b   #$60,d0 ; '`'
loc_F4494:                              ; CODE XREF: ROM:000F442C   j
                ori.b   #$60,d0 ; '`'
                ori.b   #$60,d0 ; '`'
                ori.b   #$60,d0 ; '`'
                ori.b   #0,d0
                ori.b   #0,d2
                ori.b   #0,d2
                ori.b   #0,d4
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #$60,d1 ; '`'
                ori.b   #$60,d2 ; '`'
                ori.b   #$60,d2 ; '`'
                ori.b   #$60,d2 ; '`'
                ori.b   #0,d2
                ori.b   #$11,d0
                move.b  (a1),-(a0)
                move.b  (a1),-(a0)
                move.b  (a2),-(a0)
                move.b  -(a2),-(a0)
                move.l  -(a2),d1
                movea.w -(a0),a2
                ori.b   #$60,d2 ; '`'
                move.l  -(a2),d1
                movea.w -(a0),a2
                btst    d1,(a3,d4.w*8)
                ori.w   #0,-(a6)
                ori.b   #$22,d0 ; '"'
                move.l  -(a3),d1
                move.l  -(a2),d1
                move.l  -(a3),d1
                move.l  -(a2),d1
                move.l  0(a5)
                ori.b   #$44,d0 ; 'D'
                chk.l   ([$44606666,a6,d3.w*2],$66000000),d1
                ori.b   #$22,d0 ; '"'
                move.l  -(a2),d1
                addq.b  #1,-(a2)
                move.l  -(a2),d1
                move.l  -(a2),d1
                move.l  -(a2),d1
                andi.b  #0,$33(a4,d0.w*2)
                move.w  -(a2),d1
                ori.b   #$33,-(a3) ; '3'
                ori.b   #$66,d3 ; 'f'
                ori.b   #0,d0
                move.l  -(a2),d1
                move.l  -(a2),d1
                move.l  -(a2),d1
                movea.l d2,a1
                move.l  -(a2),d1
                move.l  -(a2),d1
                ori.b   #2,-(a3)
                move.l  2(a3,d6.w),d1
                move.w  2(a4,d6.w),-(a1)
                bne.s   loc_F45B6
                ori.b   #0,d0
                ori.b   #$22,d0 ; '"'
                move.l  -(a2),d1
                move.l  -(a2),d1
                move.l  -(a2),d1
                move.l  -(a2),d1
                move.l  -(a2),d1
                move.w  -(a0),2(a1)
                move.w  -(a0),2(a1)
                move.w  -(a0),2(a1)
                movea.l -(a0),a3
                ori.b   #0,d2
                ori.b   #$22,d0 ; '"'
                move.w  -(a2),-(a1)
                move.l  -(a4),d1
                move.w  -(a2),d1
                movea.l d3,a1
                move.l  -(a2),d1
                movea.w -(a0),a2
                ori.b   #$60,d0 ; '`'
                ori.b   #$60,d0 ; '`'
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #$60,d0 ; '`'
                ori.b   #$FF,d0
                        ,d4
                        ,d4
                and.l   (a1)+,d4
                sub.l   d4,(a1)+
                eor.l   d5,d5
                _bArith16Setup
loc_F45B6:                              ; CODE XREF: ROM:000F454E   j
                sub.l   off_0(),d5
                or.l    d4,-1(a3)
                        ,d4
                        ,d4
                sub.l   d4,(a1)+
                sub.l   d4,(a1)+
                mulu.w  ,d6
                mulu.w  ,d6
                eor.l   d5,d5
                cmpa.w  a3,a6
                eor.l   d5,d5
                eor.l   d5,d5
                _bArith16Setup
                eor.l   d5,d5
                cmp.l   off_0(pc),d5
                        ,d4
                or.l    d1,d4
                sub.l   d4,(a1)+
                sub.l   d4,(a1)
                mulu.w  ,d6
                mulu.w  d1,d6
                mulu.w  ,d6
                mulu.w  d2,d6
                and.l   d5,#$CBC2BCBB
                cmpa.l  d3,a5
                eor.l   d5,d5
                and.l   $44(a2,d2.w*4),d6
                move.w  $33(a3,d2.w*4),-(a1)
                move.w  ([$34432333,a3,d2.w*2],$54992344),-(a1)
                chk.w   (a4),d1
                movea.l d3,a2
                move.w  $33(a4,d2.w*4),d2
                move.w  ([$33333333,a3,d2.w*2],$43453333),-(a1)
                neg.w   d4
                move.w  $43(a4,d4.w*4),-(a1)
                neg.w   d4
                chk.l   $44(a3,d5.w*4),d1
                move.w  ([$33333333,a3,d4.w*2],$33333333),-(a1)
                move.w  ([$3333,sp,d2.w*2],$33333333),-(a1)
                move.w  ([$33333355,a3,d3.w*2],$33355BBB),-(a1)
                move.w  (a3)+,-$4445(a1)
                eor.l   d5,d5
                sub.l   d4,(a1)+
                eor.l   d4,($43333333).l
                move.w  $33(a3,d3.w*4),-(a1)
                move.w  ([$55553333,a3,d3.w*2],-$4444444B),-(a1)
                eor.l   d5,d5
                eor.l   d5,d5
                eor.l   d5,d5
                eor.l   d5,d5
                eor.l   d4,($B9B92323).l
                move.l  -(a3),-(a1)
                movea.w d2,a1
                move.l  -(a3),d1
                move.l  -(a4),d2
                move.w  (word_3244).w,d1
                neg.b   $2324(a0)
                clr.b   -(a4)
                addq.w  #2,d4
                .b      0(a2)
                neg.w   (a4)
                muls.w  (a4),d6
                neg.w   d4
                movea.w (a3),a1
                move.w  $42(a3,d4.w*4),-(a1)
                neg.w   d4
                neg.b   $44(a2,d3.w*4)
                neg.b   -(a2)
                movea.l d4,a2
                clr.b   -(a2)
                neg.w   d4
                move.l  -(a3),d1
                neg.w   d4
                movea.l d4,a1
                neg.w   d2
                movea.w d4,a2
                not.w   -1(sp)
                not.w   -$7778(a0)
                not.w   -$4667(a3)
                not.w   -$3334(a4)
                mulu.w  ,d6
                not.w   -$3335(a4)
                eor.l   d5,d5
                not.w   -$3345(a3)
                        ,d4
                        ,d4
                sub.l   d4,(a1)+
                sub.l   d4,(a1)+
                mulu.w  ,d6
                mulu.w  ,d6
                and.l   #$CBBBBCBB,d6
                eor.l   d5,d5
                and.l   off_0(pc),d5
                eor.l   d5,d5
                eor.l   d5,d5
                        ,d4
                        ,d4
loc_F470A:
                sub.l   d4,(a1)+
                sub.l   d4,(a1)+
                mulu.w  ,d6
                eor.l   d5,d5
                eor.l   d5,d5
                cmp.l   -(sp),d5
                eor.l   d5,d5
                _GetIndType
                cmp.l   dword_EDF9B(pc),d5
                _stScanLoop
                suba.l  ,a3
                divu.w  ,d4
                divu.w  ,d6
                muls.w  ,d7
                sub.l   -$4445(a3),d5
                sub.l   d4,(a2)+
                _AAAB
                sub.l   d4,-$5446(a2)
                sub.l   d4,(a1)+
                sub.l   loc_F470A+1(pc,a0.l),d5
                sub.l   -$7768(a2),d5
                sub.l   d4,(a1)+
                sub.l   d4,(a2)+
                or.l    d4,(a1)+
                eor.l   d5,d5
                eor.l   d5,0(a2)
                eor.l   d5,0(a2)
                eor.l   d5,0(a2)
                eor.l   d5,-$56(a2,a2.l*2)
                eor.l   d5,-$55(a2,a2.l*2)
                cmp.l   0(a2),d5
                cmp.l   0(a2),d5
                cmp.l   -(a2),d5
                move.l  ([$24323333,a3,d3.w*2],$24233333),d1
                move.l  ([$23333333,a3,d3.w*2],$23333333),d1
                move.l  0(a3,d3.w*2)
                move.l  ([$11111146,a3,d3.w*2],$11913464),-(a1)
                move.b  (a3),-(a4)
                move.b  $41(a3,d4.w*4),-(a0)
                move.b  $42(a4,d4.w*4),-(a0)
                move.b  d4,$4331(a1)
                move.b  ([$1332,a4,d3.w*2],$2222),-(a1)
                bcs.s   loc_F4846+3
                bcs.s   loc_F484A+1
                neg.w   d4
                subq.w  #2,(a5)
                move.l  -(a2),-(a0)
                move.b  (a1),-(a0)
                movea.l d5,a2
                move.b  (a1),-(a0)
                movea.l d4,a2
                move.b  (a1),-(a0)
                movea.l d4,a2
                move.l  (a2),-(a0)
                neg.w   d4
                move.l  -(a2),d1
                move.l  0(a3)
                bcs.s   loc_F486A
                subq.w  #2,(a5)
                subq.w  #2,(a5)
                subq.w  #2,(a5)
                subq.w  #2,(a4)
                addq.w  #2,d4
                neg.w   d4
                neg.w   d4
                neg.w   d4
                neg.w   d4
                neg.w   d4
                move.w  ([$66669999,a3,d3.w*2],$56566599),-(a1)
                neg.w   d4
                addq.w  #3,(a1)+
                neg.w   d4
                neg.w   d3
                neg.l   d5
                neg.b   $47(a3,d3.w*4)
                move.w  a0,$3332(a1)
                move.l  (a1)+,d1
                neg.b   -(a2)
                neg.w   d4
loc_F4846:                              ; CODE XREF: ROM:000F47E2   j
                nbcd    $44(a3,d4.w*4)
loc_F484A:                              ; CODE XREF: ROM:000F47E4   j
                nbcd    -(a4)
                neg.w   d4
                clr.w   d4
                neg.w   d4
                neg.w   d4
                neg.w   d4
                add.w   d4,d2
                neg.w   d4
                not.w   -$3445(a4)
                not.w   -$4445(a4)
loc_F486A:                              ; CODE XREF: ROM:000F4804   j
                not.w   -$4445(a3)
                not.w   -$4445(a4)
                not.w   -$4456(a3)
                not.w   -$5446(a3)
                not.w   (a3)+
                eor.l   d5,$466B(a2)
                _stScanLoop
                eor.l   d5,d5
                eor.l   d5,d5
                eor.l   d5,d5
                _AAA9
                eor.l   d5,-$4556(a3)
                cmp.l   off_0(pc),d5
                _QuickTimeDispatch
                _UpdateResFile
                _AnimateEntry
                sub.l   d4,(a1)+
                sub.l   d4,-$6668(a1)
                sub.l   d4,(a1)+
                sub.l   d7,d4
                _UpdateResFile
                divs.w  ,d7
                sub.l   d4,(sp)
                subx.l  d7,d4
                sub.w   d4,#$FFFF
                or.w    ,d4
                divu.w  ,d4
                sub.l   (a1)+,d4
                unpk    -(a1),-(a4),#$FFF7
                moveq   #$FFFFFF89,d4
                moveq   #$FFFFFF88,d4
                sub.l   d4,(a2)+
                _PaletteDispatch
                sub.l   d4,(a2)+
                sub.l   -(a2),d5
                sub.l   d4,(a1)+
                _PaletteDispatch
                sub.l   d4,(a1)+
                sub.l   (a1),d5
                or.l    d4,(a1)+
                sub.l   d4,(a2)
                or.l    (a1)+,d4
                sub.l   d4,(a2)
                unpk    -(a1),-(a4),#$9992
                moveq   #$FFFFFF88,d4
                sub.l   d4,(a2)
                move.l  ([$24333333,a3,d3.w*2],$44233343),-(a1)
                move.b  ([$13333333,a3,d3.w*2],$13333333),d1
                move.l  ([$13333333,a3,d3.w*2],$34222222),-(a1)
                move.w  (a2),-(a6)
                move.l  -(a2),d1
                move.w  (a1),-(a6)
                move.w  -(a2),d1
                move.w  -(a1),d7
                move.b  (a1),-(a0)
                move.w  d1,-(a6)
                andi.b  #$E5,(a2)
                addq.b  #8,(a1)
                roxr.w  #7,d5
                move.w  (a6)+,(a6)+
                move.l  -(a2),d1
                move.b  -(a2),d1
                move.l  -(a2),d1
                move.b  -(a2),-(a0)
                move.b  (a2),d1
                move.b  (a1)+,-(a0)
                move.b  (a1),-(a0)
                move.b  (a0),-(a0)
                move.b  (a1),-(a0)
                addq.b  #8,d7
                btst    d0,(a1)
                bset    d3,-$18FF(a6)
                move.w  $22(a3,d2.w*2),-(a1)
                move.l  -(a2),d1
                move.l  -(a2),d1
                move.b  (a2),d1
                move.b  (a2),-(a0)
                move.b  (a1),-(a0)
                move.b  (a1),-(a0)
                move.b  (a1),-(a0)
                move.b  (a1),-(a0)
                move.b  (a1),-(a0)
                        #$18
                rol     -(sp)
                roxr.w  d7,d7
                move.l  -(a2),d1
                move.l  -(a2),d1
                move.l  -(a1),d1
                move.b  -(a2),-(a0)
                move.b  (a1),d1
                move.b  (a2),-(a0)
                move.b  (a1),-(a0)
                btst    d0,(sp)
                move.b  (a1),-(a0)
                ori.w   #$1117,$7E(sp,d0.l*8)
                move.b  -$24(sp,a6.l*8),$77EE(a0)
                sub.l   d4,(a1)+
                rol.l   #4,d1
                sub.l   d2,(a1)+
                add.l   d4,(a1)+
                        ,d4
                and.l   d4,(a1)+
                subx.l  -(a1),-(a4)
                and.w   d4,(a1)+
                sub.l   d4,(a1)+
                and.l   d4,(a1)+
                sub.l   d4,(a1)+
                and.l   d2,(a1)+
                sub.l   d4,(a1)+
                and.l   d4,(a1)+
                sub.l   d2,(a1)+
                not.w   -$4557(a2)
                not.w   -$5657(a3)
                not.w   (a2)+
                _AnimateEntry
                _UpdateResFile
                _UpdateResFile
                sub.l   d4,(a0)+
                _UpdateResFile
                not.w   -$6668(a2)
                sub.l   d4,(a1)+
                sub.w   0(sp),d4
                or.w    0(sp),d4
                or.w    ,d3
                subx.l  -(a0),-(a4)
                divs.w  ,d3
                unpk    d7,d4,#$77FF
                sub.l   d7,d4
                or.l    d7,d4
                or.w    0(sp),d4
                moveq   #$FFFFFF89,d4
                or.l    d4,(a2)
                moveq   #$FFFFFF88,d4
                or.l    (a2),d4
                or.l    (a2),d4
                or.l    d2,d4
                or.l    (a2),d4
                or.l    d2,d4
                move.b  0(a3)
                move.l  ([$23333334,a3,d3.w*2],$23334343),-(a1)
                move.l  $34(a4,d3.w*4),d2
                move.l  d3,$4343(a1)
                move.l  $33(a4,d3.w*4),d2
                move.l  d3,$4499(a1)
                move.w  -$1222(a5),($33CEDDDD).l
                move.w  #$DDCD,d2
                muls.w  (a4)+,d6
                movea.w d4,a2
                adda.w  (a5)+,a6
                neg.w   d4
                chk.w   off_0(pc,d4.l),d6
                move    (a3)+,ccr
                subq.w  #1,d3
                adda.w  (a6)+,sp
                adda.w  (a6)+,sp
                adda.l  (a5)+,a6
                adda.l  (a5)+,a6
                adda.w  (a5)+,a6
                adda.l  (a5)+,a6
                muls.w  ,d6
                muls.w  ,d6
                adda.l  (a3)+,a5
                adda.w  (a4)+,a6
                mulu.w  ,d6
                eor.l   d5,d5
                _bArith16Setup
                mulu.w  ,d6
                adda.w  (a6)+,sp
                adda.w  (a6)+,sp
                adda.l  (a5)+,a6
                adda.l  (a5)+,a6
                adda.l  (a5)+,a6
                adda.l  (a4)+,a6
                muls.w  ,d6
                muls.w  ,d6
                adda.w  (a4)+,a6
                add.l   off_0(pc),d6
                eor.l   d5,d5
                cmpa.l  a3,a5
                muls.w  ,d5
                adda.l  (a5)+,a6
                and.l   #$DDCBBCA0,d6
                add.l   #$BBC0CCCB,d6
                _SoundDispatch, autoPop
                cmp.l   (pc,a3.w),d6
                eor.l   d5,0(a2)
                cmp.l   (a0,d0.w),d5
                bchg    d2,(a4)
                neg.w   d4
                ori.w   #$4999,(a4)
                addi.b  #-$67,a1
                ori.w   #$9999,-(a0)
                addi.b  #-$67,d5
                bra.s   loc_F4B58
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_F4B58:                              ; CODE XREF: ROM:000F4AF6   j
                move.l  0(a4)
                move.b  d3,$5999(a1)
                move.l  0(a4)
                movea.l d4,a2
                neg.w   d3
                movea.l d4,a2
                chk.l   ([$33392333,a3,d4.w],$34442334),d4
                clr.w   d3
                move.w  $44(a3,d4.w*2),-(a1)
                movea.w d3,a1
                movea.l d4,a1
                movea.w d3,a2
                move.l  d4,$4444(a1)
                movea.w d4,a2
                neg.w   d4
                movea.l d4,a2
                neg.w   d4
                movea.w d4,a2
                neg.b   $44(a3,d3.w*4)
                neg.b   -(a4)
                add.l   -$4445(a3),d5
                addq.b  #8,a2
                _AABB
                bclr    d6,$4955(a2)
                addq.b  #8,d0
                neg.b   d6
                bcs.w   loc_F8F4C
loc_F4BB8:                              ; CODE XREF: ROM:000F4C1E   j
                bra.s   loc_F4C1A
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_F4C1A:                              ; CODE XREF: ROM:loc_F4BB8   j
                addi.w  #-$6FB7,-(a0)
                bne.s   loc_F4BB8+1
                bclr    d4,(a1)+
                addq.w  #3,-(sp)
                addq.w  #3,-(sp)
                addq.w  #7,(sp)
loc_F4C2E:                              ; CODE XREF: ROM:000F4C3E   j
                muls.w  ,d7
                not.w   -1(sp)
                addq.w  #7,-1(sp)
                bgt.s   loc_F4C2E+1
                ori.b   #1,d0
                ori.b   #1,d0
                ori.b   #1,d0
                ori.b   #1,d0
                ori.b   #1,d0
                ori.b   #1,d0
                ori.b   #1,d0
                ori.b   #0,d0
                move.b  -(a3),d1
                move.w  $22(a2,d1.w*2),d2
                move.l  $23(a4,d1.w*2),d2
                movea.l d4,a2
                move.b  -(a2),d1
                movea.l d4,a2
                move.b  $44(a3,d4.w*4),-(a1)
                move.b  -(a4),d1
                movea.l d4,a2
                move.b  (a2),-(a0)
                neg.w   d4
                addq.w  #2,d4
                neg.w   d4
                movea.l d4,a2
                clr.w   d4
                neg.w   d4
                move.w  d4,$4324(a1)
                movea.w d4,a2
                neg.w   d4
                neg.w   d4
                neg.w   d4
                addq.l  #2,d4
                neg.w   d4
                neg.w   d4
                or.w    d4,d4
                        ,d4
                neg.w   d4
                bchg    d4,-(a6)
                neg.w   d4
                chk.l   d6,d4
                neg.l   (a1)+
                neg.l   (a0)
                neg.l   (a5)
                neg.l   (a6)
                chk.w   (a5),d4
                sub.w   d4,$4444(a1)
                chk.w   (a1)+,d4
                bne.s   loc_F4D28
                addi.b  #6,d6
                bra.s   loc_F4D28
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_F4D28:                              ; CODE XREF: ROM:000F4CC0   j
                                        ; ROM:000F4CC6   j
                ori.b   #$80,d0
                ori.b   #$80,d0
                ori.b   #$80,d0
                ori.b   #$80,d0
                ori.b   #$80,d0
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d0
loc_F4D4C:
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d1
                ori.b   #$44,d2 ; 'D'
                addq.w  #2,-(a6)
                move.b  -(a2),d1
                move.l  $2333(sp),d1
                move.w  $66(a4,d2.w*8),-(a1)
                bne.s   loc_F4DE8
                not.w   -(a6)
                bne.s   loc_F4DEA
                cmpa.w  a4,a6
                mulu.w  ,d6
                _PBBlockMove
                mulu.w  ,d6
                or.l    d4,loc_F4D4C(pc,a4.l*4)
                moveq   #$FFFFFFBB,d4
                eor.l   d5,d5
                move.l  -(a2),d1
                move.w  $36(a3,sp.w*2),-(a1)
                bne.s   loc_F4E08
                bne.s   loc_F4E14+1
                mulu.w  ,d6
                mulu.w  ,d6
                mulu.w  ,d6
                mulu.w  ,d6
                mulu.w  ,d6
                mulu.w  ,d6
                and.l   d5,#$CBCC2BBB
                move.b  -(a2),d1
                move.w  ([$66B23666,a1,d3.w*2],$55666666),(a2)
                mulu.w  ,d6
                mulu.w  ,d6
                mulu.w  ,d6
                mulu.w  ,d6
                mulu.w  ,d6
                mulu.w  ,d6
                mulu.w  ,d6
                mulu.w  ,d6
                move.l  -(a2),d1
                chk.w   ([$36C0B43E,pc,d3.w*2],$36B6666F),d5
                bne.s   loc_F4E4C
                mulu.w  ,d6
loc_F4DE8:                              ; CODE XREF: ROM:000F4D80   j
                mulu.w  ,d6
loc_F4DEA:                              ; CODE XREF: ROM:000F4D84   j
                mulu.w  ,d6
                mulu.w  ,d6
                mulu.w  ,d6
                cmp.l   (a1)+,d5
                cmpa.w  a3,a6
                eor.w   d3,$22(sp,d1.w*2)
                move.l  $3333(a2),d1
                move.w  $66(a4,d6.w*8),-(a1)
                bne.s   loc_F4E34+1
                ble.l   $567608AB
loc_F4E08:                              ; CODE XREF: ROM:000F4DA0   j
                eor.w   d4,d4
                suba.w  sp,a4
                suba.l  sp,a3
loc_F4E14:                              ; CODE XREF: ROM:000F4DA4   j
                move.l  -(a2),d1
                move.w  $66(a3,d6.w*8),-(a1)
                bne.s   loc_F4E88
                or.b    d0,d0
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d0
loc_F4E34:                              ; CODE XREF: ROM:000F4E00   j
                ori.b   #0,d0
                ori.b   #$30,d0 ; '0'
                ori.b   #$80,d0
                ori.b   #0,d0
                ori.b   #0,d0
loc_F4E48:
                ori.b   #0,d1
loc_F4E4C:                              ; CODE XREF: ROM:000F4DE4   j
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d0
                ori.b   #0,d1
                ori.b   #0,d1
                ori.b   #0,a0
                ori.b   #$22,d0 ; '"'
                movea.l -(a0),a1
                move.l  ([$6666436,a3],d3.w*2,0),-(a1)
                andi.w  #$2400,d6
                andi.b  #$22,$36(a6,d2.w*2) ; '"'
                move.w  -$89(a3),-(a1)
                sub.l   d4,(a3)+
loc_F4E88:                              ; CODE XREF: ROM:000F4E20   j
                sub.l   d4,(a2)+
                or.l    d4,(a1)+
                        ,d4
                unpk    -(a1),-(a3),#$F234
                move.l  -(a3),d1
                move.w  ([$36ABAAA2,a3.l*2],$36BB),-(a1)
                _GetNewPalette
                move.w  ([loc_F8566+3,a1.l],$2292),(a3)
                move.w  loc_F4E48(pc,d3.w*8),(a3)
                move.w  $3692(a3),$3332(a1)
                move.w  a0,(a3)
                move.l  ([$36BBBBB2,a3.l*2],$36AA),-(a1)
                eor.l   d5,-$5E(a2,d3.w*8)
                eor.l   d5,-$6E(a2,d3.w*8)
                eor.l   d5,-$6E(a2,d3.w*8)
                eor.b   d5,-(a3)
                move.w  (a2),(a3)
                move.l  -$7E(a3,d4.w*8),d1
                move.w  d4,$6882(a1)
                eor.l   d5,$7233(a2)
                _AAA9
                move.l  d6,$2222(a1)
                movea.w $3333(sp),a2
                move.w
                movea.w -(a3),a3
                movea.w $3696(sp),a2
                move.w  $3687(sp),$6336(a1)
                not.w   $33(sp,sp.w*8)
loc_F4F02:                              ; CODE XREF: ROM:loc_F4F02   j
                bra.w   loc_F4F02+2
; ---------------------------------------------------------------------------


; adjust puckvy and puckvz if one timer
onetimershotadj:                        ; CODE XREF: doshot+240   p
                movem.l d0-d7/a0-a6,-(sp)
                move.w  (pucky).w,d0
                bpl.w   $F66FC
                neg.w   d0
                subi.w  #$108,d0        ; CODE XREF: onetimershotadj+8   j
                bpl.w   loc_F6706
                neg.w   d0
loc_F6706:                              ; CODE XREF: onetimershotadj+12   j
                swap    d0
                andi.l  #$FFFF0000,d0
                move.w  (puckvy).w,d1
                beq.w   $F6772
                bpl.w   loc_F671C
                neg.w   d1
loc_F671C:                              ; CODE XREF: onetimershotadj+28   j
                move.w  #$11,d2
                tst.w   (word_FFD06E).w
                beq.w   loc_F672C
                move.w  #$16,d2
loc_F672C:                              ; CODE XREF: onetimershotadj+36   j
                divu.w  d1,d0
                andi.l  #$FFFF,d0
                divu.w  d2,d0
                tst.w   d0
                bne.w   loc_F6740
                move.w  #1,d0
loc_F6740:                              ; CODE XREF: onetimershotadj+4A   j
                move.l  #unk_A0000,d1
                move.w  d0,d3
                mulu.w  d2,d0
                divu.w  d0,d1
                move.w  d2,d4
                add.w   d2,d2
                add.w   d4,d2
                mulu.w  d3,d2
                cmp.l   #$7FFF,d2
                blt.w   loc_F6762
                move.w  #$7FFF,d2
loc_F6762:                              ; CODE XREF: onetimershotadj+6C   j
                add.w   d2,d1
                tst.w   d1
                bpl.w   loc_F676E
                move.w  #$7FFF,d1
loc_F676E:                              ; CODE XREF: onetimershotadj+78   j
                move.w  d1,(puckvz).w
                movem.l (sp)+,d0-d7/a0-a6
                                        ; CODE XREF: onetimershotadj+24   j
                rts
; End of function onetimershotadj


sub_F6778:                              ; CODE XREF: passmode:loc_BCA4   p
                movem.l d0-d7/a0-a6,-(sp)
                move.w  #$C,d0
                move.w  (word_FFD418).w,d1
                mulu.w  d1,d0
                swap    d0
                andi.l  #$FFFF0000,d0
                jsr     (sroot).l
                move.w  d0,(puckvz).w
                ext.l   d0
                move.w  #3,d4
                divu.w  d4,d0
                clr.l   d1
                move.w  (word_FFD414).w,d1
                sub.w   (puckx).w,d1
                swap    d1
                tst.w   d0
                bne.w   loc_F67B6
                move.w  #1,d0
loc_F67B6:                              ; CODE XREF: sub_F6778+36   j
                divs.w  d0,d1
                move.w  d1,(puckvx).w
                clr.l   d1
                move.w  (word_FFD416).w,d1
                sub.w   (pucky).w,d1
                swap    d1
                divs.w  d0,d1
                move.w  d1,(puckvy).w
                movea.l #$FFFFB74A,a3
                move.w  (puckvz).w,d0
                jsr     (puckflip).l
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_F6778


sub_F67E4:                              ; CODE XREF: passmode+48   p
                movem.l d0-d7/a0-a6,-(sp)
                bclr    #2,(word_FFC2F8).w
                tst.w   $34(a3)
                bne.w   loc_F6800
                movea.l #word_F691E,a0
                bra.w   loc_F6830
; ---------------------------------------------------------------------------
loc_F6800:                              ; CODE XREF: sub_F67E4+E   j
                move.w  $14(a3),d0
                btst    #7,$62(a3)
                bne.w   loc_F6810
                neg.w   d0
loc_F6810:                              ; CODE XREF: sub_F67E4+26   j
                bset    #2,(word_FFC2F8).w
                movea.l #word_F68DE,a0
                cmp.w   #$58,d0 ; 'X'
                blt.w   loc_F6830
                movea.l #word_F68FE,a0
                bclr    #2,(word_FFC2F8).w
loc_F6830:                              ; CODE XREF: sub_F67E4+18   j
                                        ; sub_F67E4+3C   j
                move.w  $54(a3),d0
                btst    #7,$62(a3)
                bne.w   loc_F6844
                addq.w  #4,d0
                andi.w  #7,d0
loc_F6844:                              ; CODE XREF: sub_F67E4+56   j
                asl.w   #2,d0
                move.w  (a0,d0.w),d1
                move.w  2(a0,d0.w),d2
                cmpa.l  #word_F68FE,a0
                bne.w   loc_F687E
                move.w  $14(a3),d0
                bpl.w   loc_F6862
                neg.w   d0
loc_F6862:                              ; CODE XREF: sub_F67E4+78   j
                cmp.w   #$8A,d0
                blt.w   loc_F687E
                move.w  (a3),d0
                bpl.w   loc_F6872
                neg.w   d0
loc_F6872:                              ; CODE XREF: sub_F67E4+88   j
                cmp.w   #$37,d0 ; '7'
                bgt.w   loc_F687E
                move.w  #$103,d2
loc_F687E:                              ; CODE XREF: sub_F67E4+70   j
                                        ; sub_F67E4+82   j ...
                btst    #7,$62(a3)
                bne.w   loc_F688C
                neg.w   d1
                neg.w   d2
loc_F688C:                              ; CODE XREF: sub_F67E4+A0   j
                move.w  #$A,d0
                jsr     (randomd0).l
                add.w   d0,d1
                move.w  #$A,d0
                jsr     (randomd0).l
                add.w   d0,d2
                move.w  d1,(word_FFD414).w
                tst.w   $34(a3)
                beq.w   loc_F68D4
                sub.w   (a3),d1
                bmi.w   loc_F68C8
                subi.w  #$3C,d1 ; '<'
                bpl.w   loc_F68D4
                neg.w   d1
                add.w   d1,(word_FFD414).w
                bra.w   loc_F68D4
; ---------------------------------------------------------------------------
loc_F68C8:                              ; CODE XREF: sub_F67E4+CE   j
                addi.w  #$3C,d1 ; '<'
                bmi.w   loc_F68D4
                sub.w   d1,(word_FFD414).w
loc_F68D4:                              ; CODE XREF: sub_F67E4+C8   j
                                        ; sub_F67E4+D6   j ...
                move.w  d2,(word_FFD416).w
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_F67E4
; ---------------------------------------------------------------------------
word_F68DE:     dc.w $74                ; DATA XREF: sub_F67E4+32   o
                dc.w $C2
                dc.w $74
                dc.w $C2
                dc.w $74
                dc.w $C2
                dc.w $74
                dc.w $C2
                dc.w $FF8C
                dc.w $C2
                dc.w $FF8C
                dc.w $C2
                dc.w $FF8C
                dc.w $C2
                dc.w $FF8C
                dc.w $C2
word_F68FE:     dc.w $FFFB              ; DATA XREF: sub_F67E4+40   o
                                        ; sub_F67E4+6A   o
                dc.w $AB
                dc.w $FFFB
                dc.w $AB
                dc.w $FFFB
                dc.w $AB
                dc.w $FFFB
                dc.w $AB
                dc.w $FFFB
                dc.w $AB
                dc.w $FFFB
                dc.w $AB
                dc.w $FFFB
                dc.w $AB
                dc.w $FFFB
                dc.w $AB
word_F691E:     dc.w $FFFB              ; DATA XREF: sub_F67E4+12   o
                dc.w $FFF7
                dc.w $32
                dc.w $FFF7
                dc.w $32
                dc.w $FFF7
                dc.w $32
                dc.w $FFF7
                dc.w $FFFB
                dc.w $FFF7
                dc.w $FFCE
                dc.w $FFF7
                dc.w $FFCE
                dc.w $FFF7
                dc.w $FFCE
                dc.w $FFF7


assonetimer:                            ; DATA XREF: ROM:00018E08   o
                bclr    #1,$62(a3)      ; pfna - clear new assignment
                beq.w   loc_F6A3C
                bset    #3,$64(a3)
                bne.w   loc_F6A3C
                bclr    #0,(word_FFBF76).w
                bclr    #5,(byte_FFC2FE).w
                clr.w   (word_FFBF76).w
                clr.w   (word_FFBF6E).w
                st      (word_FFBEE0).w
                movem.l d0-d7/a0-a6,-(sp)
                move.w  $52(a3),d0
                move.w  d0,(word_FFBF6C).w
                btst    #3,$62(a3)
                bne.w   loc_F6A16
                tst.w   (word_FFDED8).w
                bmi.w   loc_F6A16
                beq.w   loc_F69D2
                cmpi.w  #1,(word_FFDEDA).w
                bne.w   loc_F69C8
                move.w  (cont2team).w,-(sp)
                move.w  (c2playernum).w,-(sp)
                move.w  (cont4team).w,(cont2team).w
                move.w  (c4playernum).w,(c2playernum).w
                jsr     (setc2player).l
                move.w  (c2playernum).w,(c4playernum).w
                move.w  (cont2team).w,(cont4team).w
                move.w  (sp)+,(c2playernum).w
                move.w  (sp)+,(cont2team).w
                bra.w   loc_F6A16
; ---------------------------------------------------------------------------
loc_F69C8:                              ; CODE XREF: assonetimer+54   j
                jsr     (setc2player).l
                bra.w   loc_F6A16
; ---------------------------------------------------------------------------
loc_F69D2:                              ; CODE XREF: assonetimer+4A   j
                tst.w   (word_FFDEDA).w
                bne.w   loc_F6A0C
                move.w  (cont1team).w,-(sp)
                move.w  (c1playernum).w,-(sp)
                move.w  (cont3team).w,(cont1team).w
                move.w  (c3playernum).w,(c1playernum).w
                jsr     (setc1player).l
                move.w  (c1playernum).w,(c3playernum).w
                move.w  (cont1team).w,(cont3team).w
                move.w  (sp)+,(c1playernum).w
                move.w  (sp)+,(cont1team).w
                bra.w   loc_F6A16
; ---------------------------------------------------------------------------
loc_F6A0C:                              ; CODE XREF: assonetimer+98   j
                jsr     (setc1player).l
                bra.w   *+4
; ---------------------------------------------------------------------------
loc_F6A16:                              ; CODE XREF: assonetimer+3E   j
                                        ; assonetimer+46   j ...
                move.w  d0,-(sp)
                bsr.w   sub_F6C0A
                clr.w   $5A(a3)
                jsr     (SetSPA).l
                bset    #5,$62(a3)
                bset    #1,$63(a3)
                move.w  (sp)+,d0
                movem.l (sp)+,d0-d7/a0-a6
                bra.w   _ex
; ---------------------------------------------------------------------------
loc_F6A3C:                              ; CODE XREF: assonetimer+6   j
                                        ; assonetimer+10   j
                btst    #0,(word_FFBF76).w
                bne.w   loc_F6A96
                movem.w d0-d1,-(sp)
                move.w  (puckx).w,d0
                sub.w   (a3),d0
                cmp.w   #$3C,d0 ; '<'
                bgt.w   loc_F6A60
                cmp.w   #$FFC4,d0
                bgt.w   loc_F6A72
loc_F6A60:                              ; CODE XREF: assonetimer+116   j
                move.w  (puckvx).w,d1
                eor.w   d1,d0
                bmi.w   loc_F6A72
loc_F6A6A:                              ; CODE XREF: assonetimer+152   j
                movem.w (sp)+,d0-d1
                bra.w   loc_F6A9E
; ---------------------------------------------------------------------------
loc_F6A72:                              ; CODE XREF: assonetimer+11E   j
                                        ; assonetimer+128   j
                move.w  (pucky).w,d0
                sub.w   $14(a3),d0
                cmp.w   #$3C,d0 ; '<'
                bgt.w   loc_F6A8A
                cmp.w   #$FFC4,d0
                bgt.w   loc_F6A92
loc_F6A8A:                              ; CODE XREF: assonetimer+140   j
                move.w  (puckvy).w,d1
                eor.w   d1,d0
                bpl.s   loc_F6A6A
loc_F6A92:                              ; CODE XREF: assonetimer+148   j
                movem.w (sp)+,d0-d1
loc_F6A96:                              ; CODE XREF: assonetimer+104   j
                tst.w   (puckc).w
                bmi.w   loc_F6AA8
loc_F6A9E:                              ; CODE XREF: assonetimer+130   j
                bclr    #7,(byte_FFC2FE).w
                bra.w   loc_F6C02
; ---------------------------------------------------------------------------
loc_F6AA8:                              ; CODE XREF: assonetimer+15C   j
                btst    #0,(gmode).w
                bne.w   loc_F6C02
                movem.l d0-d1,-(sp)
                cmpi.w  #$10,$5A(a3)
                bge.w   loc_F6B58
                btst    #2,(word_FFBF76).w
                bne.w   loc_F6B58
                move.w  (a3),d0
                move.w  (puckx).w,d1
                sub.w   d1,d0
                bpl.w   loc_F6AD8
                neg.w   d0
loc_F6AD8:                              ; CODE XREF: assonetimer+194   j
                move.w  $14(a3),d1
                move.w  (pucky).w,d2
                sub.w   d2,d1
                bpl.w   loc_F6AE8
                neg.w   d1
loc_F6AE8:                              ; CODE XREF: assonetimer+1A4   j
                move.w  (puckvx).w,d2
                beq.w   loc_F6AF6
                cmp.w   d0,d1
                ble.w   loc_F6AFC
loc_F6AF6:                              ; CODE XREF: assonetimer+1AE   j
                move.w  (puckvy).w,d2
                move.w  d1,d0
loc_F6AFC:                              ; CODE XREF: assonetimer+1B4   j
                swap    d0
                andi.l  #$FFFF0000,d0
                tst.w   d2
                bpl.w   loc_F6B0C
                neg.w   d2
loc_F6B0C:                              ; CODE XREF: assonetimer+1C8   j
                move.w  #$11,d1
                tst.w   (word_FFD06E).w
                beq.w   loc_F6B1C
                move.w  #$16,d1
loc_F6B1C:                              ; CODE XREF: assonetimer+1D6   j
                tst.w   d2
                bne.w   loc_F6B26
                move.w  #1,d2
loc_F6B26:                              ; CODE XREF: assonetimer+1E0   j
                divu.w  d2,d0
                andi.l  #$FFFF,d0
                divu.w  d1,d0
                move.w  $5A(a3),d2
                lsr.w   #2,d2
                subq.w  #6,d2
                neg.w   d2
                asl.w   #2,d2
                cmp.w   d2,d0
                bgt.w   loc_F6B50
                neg.w   $5A(a3)
                addi.w  #$18,$5A(a3)
                bra.w   loc_F6BC8
; ---------------------------------------------------------------------------
loc_F6B50:                              ; CODE XREF: assonetimer+200   j
                add.w   d7,(word_FFBF6E).w
                bra.w   loc_F6B7E
; ---------------------------------------------------------------------------
loc_F6B58:                              ; CODE XREF: assonetimer+17E   j
                                        ; assonetimer+188   j
                bset    #2,(word_FFBF76).w
                btst    #1,(word_FFBF76).w
                bne.w   loc_F6B7E
                cmpi.w  #$18,$5A(a3)
                bne.w   loc_F6B7E
                addi.w  #$30,$5C(a3) ; '0'
                bset    #1,(word_FFBF76).w
loc_F6B7E:                              ; CODE XREF: assonetimer+216   j
                                        ; assonetimer+226   j ...
                btst    #1,(word_FFBF76).w
                beq.w   loc_F6BA4
                cmpi.w  #$18,$5A(a3)
                ble.w   loc_F6BA4
                btst    #0,(word_FFBF76).w
                bne.w   loc_F6BA4
                movem.l (sp)+,d0-d1
                bra.w   loc_F6C02
; ---------------------------------------------------------------------------
loc_F6BA4:                              ; CODE XREF: assonetimer+246   j
                                        ; assonetimer+250   j ...
                btst    #0,(word_FFBF76).w
                beq.w   loc_F6BC8
                cmpi.w  #$18,$5A(a3)
                bne.w   loc_F6BC8
                cmpi.w  #1,$5C(a3)
                ble.w   loc_F6BC8
                move.w  #1,$5C(a3)
loc_F6BC8:                              ; CODE XREF: assonetimer+20E   j
                                        ; assonetimer+26C   j ...
                btst    #1,$63(a3)
                bne.w   loc_F6BDA
                movem.l (sp)+,d0-d1
                bra.w   loc_F6BF8
; ---------------------------------------------------------------------------
loc_F6BDA:                              ; CODE XREF: assonetimer+290   j
                move.w  $5A(a3),d0
                movem.l (sp)+,d0-d1
                btst    #0,(word_FFBF76).w
                beq.w   loc_F6BF6
                bclr    #5,$62(a3)
                bra.w   loc_F6BF8
; ---------------------------------------------------------------------------
loc_F6BF6:                              ; CODE XREF: assonetimer+2AA   j
                nop
loc_F6BF8:                              ; CODE XREF: assonetimer+298   j
                                        ; assonetimer+2B4   j
                btst    #1,$63(a3)
                bne.w   _ex
loc_F6C02:                              ; CODE XREF: assonetimer+166   j
                                        ; assonetimer+170   j ...
                jsr     (sub_FEFF0).l
_ex:                                    ; CODE XREF: assonetimer+FA   j
                                        ; assonetimer+2C0   j
                rts
; End of function assonetimer


sub_F6C0A:                              ; CODE XREF: assonetimer+DA   p
                move.w  #$7FC,d1
                movem.w d0-d1,-(sp)
                move.w  (a3),d0
                neg.w   d0
                move.w  #$108,d1
                btst    #7,$62(a3)
                bne.w   loc_F6C26
                neg.w   d1
loc_F6C26:                              ; CODE XREF: sub_F6C0A+16   j
                sub.w   $14(a3),d1
                jsr     (vtoa).l
                jsr     (sub_F6D22).l
                movem.w (sp)+,d0-d1
                beq.w   locret_F6C42
                move.w  #$92E,d1
locret_F6C42:                           ; CODE XREF: sub_F6C0A+30   j
                rts
; End of function sub_F6C0A


sub_F6C44:                              ; CODE XREF: doinput+120   p
                                        ; ROM:0000B70A   p ...
                movem.w d0-d1,-(sp)
                move.w  (pucky).w,d0
                btst    #7,$62(a3)      ; pfgoal - check which goal shooting at
                bne.w   _cont           ; branch if top goal
                neg.w   d0
_cont:                                  ; CODE XREF: sub_F6C44+E   j
                tst.w   d0              ; check if d0 is 0
                bpl.w   _plus           ; branch if higher
                bra.w   _0
; ---------------------------------------------------------------------------
                move.w  (passdir).w,d0  ; code never used from here up to _0
                addq.w  #4,d0
                andi.w  #7,d0
                move.w  $54(a3),d1
                cmp.w   d0,d1
                bra.w   _plus
; ---------------------------------------------------------------------------
                beq.w   _plus
                addq.w  #1,d1
                andi.w  #7,d1
                cmp.w   d0,d1
                beq.w   _plus
                addq.w  #1,d1
                andi.w  #7,d1
                cmp.w   d0,d1
                beq.w   _plus
                subq.w  #3,d1
                andi.w  #7,d1
                cmp.w   d0,d1
                beq.w   _plus
                subq.w  #1,d1
                andi.w  #7,d1
                beq.w   _plus
_0:                                     ; CODE XREF: sub_F6C44+1A   j
                move.w  #0,d0
                bra.w   _ex
; ---------------------------------------------------------------------------
_plus:                                  ; CODE XREF: sub_F6C44+16   j
                                        ; sub_F6C44+2E   j ...
                move.w  #1,d0
_ex:                                    ; CODE XREF: sub_F6C44+68   j
                movem.w (sp)+,d0-d1
                rts
; End of function sub_F6C44


; do shot, set players who had touched the puck previously, and add to one timer attempts
onetimershot:                           ; CODE XREF: puckstick+17A   p
                move.w  #4,(passdir).w
                jsr     (doshot).l
                movem.l d0/a0,-(sp)
                movea.l #$FFFFC6CE,a0   ; Home Stats
                btst    #6,$62(a3)      ; check if home or away
                beq.w   loc_F6CDE       ; branch if home
                lea     $364(a0),a0     ; add if away
loc_F6CDE:                              ; CODE XREF: onetimershot+1C   j
                clr.w   d0
                move.b  $66(a3),d0      ; player offset in roster
                move.w  $1A(a0),$1C(a0) ; move assist 1 player to assist 2
                move.w  $18(a0),$1A(a0) ; move last player to touch puck to assist 1
                move.w  d0,$18(a0)      ; move d0 into player touching puck
                bset    #7,(byte_FFC2FE).w ; set bit 7
                addi.w  #$96,(crowdlevel).w ; add to crowdlevel
                addi.w  #$A,(CwdExciteLvl).w ; add to Excite Level
                addq.w  #1,$35C(a0)     ; add to one timer attempt
                movem.l (sp)+,d0/a0
                bset    #0,(word_FFBF76).w ; set bit 0
                bset    #1,$63(a3)      ; set animation in progress
                bset    #1,(word_FFC2F8).w ; set bit 1
                rts
; End of function onetimershot


sub_F6D22:                              ; CODE XREF: sub_F6C0A+26   p
                movem.w d0-d1,-(sp)
                neg.w   d0
                addq.w  #8,d0
                andi.w  #7,d0
                move.w  $54(a3),d1
                add.w   d0,d1
                andi.w  #7,d1
                cmp.w   #4,d1
                bgt.w   loc_F6D50
                move.w  4(a3),d0
                eori.w  #$FFFF,d0
                andi.w  #$800,d0
                bra.w   loc_F6D58
; ---------------------------------------------------------------------------
loc_F6D50:                              ; CODE XREF: sub_F6D22+1A   j
                move.w  4(a3),d0
                andi.w  #$800,d0
loc_F6D58:                              ; CODE XREF: sub_F6D22+2A   j
                movem.w (sp)+,d0-d1
                rts
; End of function sub_F6D22


Unk_ControlsSetRelated:                 ; CODE XREF: Begin+48   p
                move.w  #0,(IO_Z80RES).l
                move.b  #$40,(IO_CT1_CTRL+1).l ; '@'
                move.b  #$43,(IO_CT2_CTRL+1).l ; 'C'
                nop
                move.b  #$7C,(IO_CT2_DATA+1).l ; '|'
                nop
                move.b  #$7F,(IO_CT2_CTRL+1).l
                nop
                move.b  #$7C,(IO_CT2_DATA+1).l ; '|'
                nop
                move.b  (IO_CT1_DATA+1).l,d0
                andi.b  #3,d0
                cmp.b   #0,d0
                bne.s   loc_F6DAE
                move.w  #1,(FourWayPlay).w
                bra.s   loc_F6DBC
; ---------------------------------------------------------------------------
loc_F6DAE:                              ; CODE XREF: Unk_ControlsSetRelated+46   j
                move.w  #0,(FourWayPlay).w
                move.b  #$40,(IO_CT2_CTRL+1).l ; '@'
loc_F6DBC:                              ; CODE XREF: Unk_ControlsSetRelated+4E   j
                move.w  #$100,(IO_Z80RES).l
                rts
; End of function Unk_ControlsSetRelated
; ---------------------------------------------------------------------------


nullsub_2:                              ; CODE XREF: forcepldata+28   p
                rts
; End of function nullsub_2
; ---------------------------------------------------------------------------


LoadCrowdRec:                           ; CODE XREF: StartGame+96   p
                movem.l d0-d7/a0-a6,-(sp)
                move.w  (HomeTeam).w,d1
                ext.l   d1
                movea.l #$FFFFCF36,a0
                jsr     (clrCrowdRAM?).l
                move.b  8(a0),d0
                beq.w   loc_F6EB0
                andi.w  #$FF,d0
                bra.w   _ex
; ---------------------------------------------------------------------------
loc_F6EB0:                              ; CODE XREF: LoadCrowdRec+1A   j
                move.w  #$50,d0 ; 'P'
_ex:                                    ; CODE XREF: LoadCrowdRec+22   j
                move.w  d0,(CrowdRecord).w
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function LoadCrowdRec


Crowd_Noise?:                           ; CODE XREF: setvideo+40   p
                btst    #7,(sflags).w   ; screen is in horizontal mode
                bne.w   _ex1
                btst    #0,(word_FFC2FA).w
                bne.w   _ex1
                btst    #0,(sflags3).w  ; check if game paused
                bne.w   _ex2
                btst    #7,(byte_FFC2F6).w
                bne.w   loc_F6F24
                tst.w   (word_FFC304).w
                beq.w   loc_F6EFC
                subq.w  #1,(word_FFC304).w
                bpl.w   _ex1
                clr.w   (word_FFC304).w
_ex2:                                   ; CODE XREF: Crowd_Noise?+1A   j
                rts
; ---------------------------------------------------------------------------
loc_F6EFC:                              ; CODE XREF: Crowd_Noise?+2C   j
                move.w  (CrowdRecord).w,d0
                move.w  d0,(CrowdAvg).w
                subi.w  #$B,(CrowdAvg).w
                subi.w  #$49,d0 ; 'I'
                muls.w  d0,d0
                asr.l   #2,d0
                addq.w  #6,d0
                cmp.w   (CwdExciteLvl).w,d0
                bgt.w   _ex1
                bset    #7,(byte_FFC2F6).w
                rts
; ---------------------------------------------------------------------------
loc_F6F24:                              ; CODE XREF: Crowd_Noise?+24   j
                move.w  (CrowdAvg).w,d0
                subi.w  #$41,d0 ; 'A'
                muls.w  d0,d0
                asr.l   #2,d0
                cmp.w   (CwdExciteLvl).w,d0
                blt.w   loc_F6F3E
                bclr    #7,(byte_FFC2F6).w
loc_F6F3E:                              ; CODE XREF: Crowd_Noise?+76   j
                sub.w   d7,(CwdChkCntr).w
                bpl.w   _ex1
                move.w  #$14,(CwdChkCntr).w
                addq.w  #1,(CwdChkCnt).w
                move.w  (CwdExciteLvl).w,d0
                ext.l   d0
                asl.w   #2,d0
                jsr     (sroot).l
                addi.w  #$41,d0 ; 'A'
                move.w  d0,(CurCrowdMeter).w
                cmp.w   (CrowdPeak).w,d0
                ble.w   loc_F6F72
                move.w  d0,(CrowdPeak).w
loc_F6F72:                              ; CODE XREF: Crowd_Noise?+AC   j
                move.w  (CurCrowdMeter).w,d0
                cmp.w   (CrowdRecord).w,d0
                blt.w   _stack
                bra.w   *+4
; ---------------------------------------------------------------------------
_stack:                                 ; CODE XREF: Crowd_Noise?+BC   j
                                        ; Crowd_Noise?+C0   j
                movem.l d0-d7/a0-a6,-(sp)
                movem.l (sp)+,d0-d7/a0-a6
_ex1:                                   ; CODE XREF: Crowd_Noise?+6   j
                                        ; Crowd_Noise?+10   j ...
                rts
; End of function Crowd_Noise?


stopna2:                                ; CODE XREF: goalieacc+120   p
                                        ; goalieacc:loc_10A34   p ...
                tst.w   $28(a3)
                bpl.w   _xp
                addi.w  #$7D0,$28(a3)
                bmi.w   _y
                clr.w   $28(a3)
_xp:                                    ; CODE XREF: stopna2+4   j
                subi.w  #$7D0,$28(a3)
                bpl.w   _y
                clr.w   $28(a3)
_y:                                     ; CODE XREF: stopna2+E   j
                                        ; stopna2+1C   j
                tst.w   $2A(a3)
                bpl.w   _yp
                addi.w  #$7D0,$2A(a3)
                bmi.w   _ex
                clr.w   $2A(a3)
_yp:                                    ; CODE XREF: stopna2+28   j
                subi.w  #$7D0,$2A(a3)
                bpl.w   _ex
                clr.w   $2A(a3)
_ex:                                    ; CODE XREF: stopna2+32   j
                                        ; stopna2+40   j
                rts
; End of function stopna2


; 210 = ywall - distance from blueline to end of rink in pixels
; 64 = radius - radius of corners on ice rink
checkwallcoll:                          ; CODE XREF: wallcollduringcheck+34   p
                bclr    #4,$64(a3)      ; clears bit 4 in pflags3 (not used in 92)
                move.w  #$88,d4         ; sideline
                sub.w   (wcradiusx).w,d4 ; BD22 = wcradiusx
                move.w  #$12A,d5        ; ywall
                sub.w   (wcradiusy).w,d5 ; BD24 = wcradiusy
                movem.w d2-d5,-(sp)
                neg.w   d4
                neg.w   d5
                addi.w  #$40,d4 ; '@'   ; radius
                addi.w  #$40,d5 ; '@'
                cmp.w   d5,d3
                bgt.w   _ctc
                cmp.w   d4,d2
                blt.w   _circle
                neg.w   d4
                cmp.w   d4,d2
                bgt.w   _circle
                bra.w   _exit
; ---------------------------------------------------------------------------
_ctc:                                   ; CODE XREF: checkwallcoll+28   j
                neg.w   d5
                cmp.w   d5,d3
                blt.w   _exit
                cmp.w   d4,d2
                blt.w   _circle
                neg.w   d4
                cmp.w   d4,d2
                bgt.w   _circle
                bra.w   _exit
; ---------------------------------------------------------------------------
_circle:                                ; CODE XREF: checkwallcoll+2E   j
                                        ; checkwallcoll+36   j ...
                sub.w   d4,d2
                sub.w   d5,d3
                move.w  d3,d0           ; cos0 = dy/r
                move.w  d2,d1           ; sin0 = -dx/r
                neg.w   d1
                muls.w  d3,d3
                muls.w  d2,d2
                add.l   d2,d3           ; dist from dot
                cmp.l   #$1000,d3       ; .radius^2 = $1000
                bls.w   _exit
                exg     d0,d3
                jsr     (sroot).l
                exg     d0,d3
                ext.l   d0
                asl.l   #8,d0
                divs.w  d3,d0
                ext.l   d1
                asl.l   #8,d1
                divs.w  d3,d1
                bsr.w   wallcollb
_exit:                                  ; CODE XREF: checkwallcoll+3A   j
                                        ; checkwallcoll+42   j ...
                movem.w (sp)+,d2-d5
                move.w  $4E(a3),d0      ; wallcos(a3)
                or.w    $50(a3),d0      ; wallsin(a3)
                bne.w   rtss3
                move.w  #$100,d0        ; now check side walls
                clr.w   d1
                cmp.w   d5,d3
                bge.w   wallcollb
                neg.w   d5
                neg.w   d0
                cmp.w   d5,d3
                ble.w   wallcollb
                exg     d0,d1
                cmp.w   d4,d2
                bge.w   wallcollb
                neg.w   d4
                neg.w   d1
                cmp.w   d4,d2
                ble.w   wallcollb
rtss3:                                  ; CODE XREF: checkwallcoll+98   j
                rts
; End of function checkwallcoll


; Attributes: thunk
wallcollb:                              ; CODE XREF: checkwallcoll+88   p
                                        ; checkwallcoll+A4   j ...
                jmp     wallcollb2
; End of function wallcollb


; Creates Hot/Cold Table. Runs RNG and stores the value. Iterates until complete.
; Uses d1 as the iterator, d0 as the value to store.
Create_HotCold_Table:                   ; CODE XREF: StartGame+62   p
                                        ; StartGame+6E   p ...
                movem.l d0-d7,-(sp)
                move.w  #$19F,d1        ; $19F = 415. Loop will run 416 times.
                                        ; (26 players/team * 8) * 2 teams = 416
HotColdLoop:                            ; CODE XREF: Create_HotCold_Table+20   j
                move.w  #9,d0           ; sets RNG limit (-9 - +8)
                jsr     (randomd0s).l
                move.l  a0,-(sp)
                adda.l  #$1A2,a0
                move.b  d0,(a0,d1.w)
                movea.l (sp)+,a0
                dbf     d1,HotColdLoop
                movem.l (sp)+,d0-d7
                rts
; End of function Create_HotCold_Table
; ---------------------------------------------------------------------------


; Do math on attribute, add Hot/Cold value from table
; a3 = sortcord of player
; d3 = attribute value
AttributeCalc:                          ; CODE XREF: setplayer+122   p
                                        ; setplayer+138   p ...
                movem.l d0-d2/a1,-(sp)
                move.w  (word_FFBF14).w,d1 ; BF14 goes to d1
                movea.l #$FFFFC6CE,a1   ; Start of Home Team struct
                btst    #6,$62(a3)      ; Check if home or away
                beq.w   _attribmath
_away:                                  ; shift to start of Away Team struct
                adda.l  #$364,a1
_attribmath:                            ; CODE XREF: AttributeCalc+14   j
                clr.w   d1
                move.b  $66(a3),d1      ; move roster offset into d1
                asl.w   #4,d1           ; shifts d1 4 bits left, moving the values over 1 nibble
                adda.l  #$1A2,a1        ; a1 points to Hot/Cold Table Start
                move.b  (a1,d1.w),d1    ; move data at add. (a1 + d1) into d1
                ext.w   d1              ; sign-extend word. Ex: F5 (-5) -> FFF5
                ext.l   d1              ; sign-extend long word. Ex: FFF5 -> FFFFFFF5
                divs.w  #3,d1           ; Signed-Div D1 by 3 (FFFFFFF5 / 3, or -5 / 3 = -1r2, or FFFEFFFF
                                        ; Remainder is 4 MS Nibbles, result is 4 LS Nibbles)
                move.w  d3,-(sp)        ; push d3 onto stack
                asl.w   #2,d3           ; shift left 2 bits (mult. by 4)
                add.w   (sp)+,d3        ; Pop off d3 value and add to d3 (attrib X 5)
                add.w   d1,d3           ; add d1 (H/C value) to d3
                bmi.w   _LowerLimit
_UpperLimitCheck:                       ; check if above upper limit (1E or 30 decimal)
                cmp.w   #$1E,d3
                blt.w   _MaskAttribMathResult
_UpperLimit:                            ; if above, set to 1E
                move.w  #$1E,d3
                bra.w   _MaskAttribMathResult
; ---------------------------------------------------------------------------
_LowerLimit:                            ; CODE XREF: AttributeCalc+40   j
                clr.w   d3              ; if below lower limit (0), set to 0
_MaskAttribMathResult:                  ; CODE XREF: AttributeCalc+48   j
                                        ; AttributeCalc+50   j
                andi.w  #$FF,d3         ; pass only lower byte
                movem.l (sp)+,d0-d2/a1
                rts
; End of function AttributeCalc


sub_F7144:                              ; CODE XREF: sub_17730:loc_1792E   p
                movem.l d0/a0,-(sp)
                movea.l #$FFFFBF5E,a0
                move.w  (word_FFBF56).w,d0
                add.w   d0,d0
                move.w  (a0,d0.w),d1
                cmpi.w  #0,(word_FFBF56).w
                bge.w   loc_F7166
                addq.w  #1,(word_FFBF56).w
loc_F7166:                              ; CODE XREF: sub_F7144+1A   j
                movem.l (sp)+,d0/a0
                movea.l #$FFFFC6CE,a1
                rts
; End of function sub_F7144


sub_F7172:                              ; CODE XREF: sub_17730:loc_17938   p
                movem.l d0/a0,-(sp)
                movea.l #$FFFFBF5C,a0
                move.w  (word_FFBF54).w,d0
                add.w   d0,d0
                move.w  (a0,d0.w),d1
                cmpi.w  #0,(word_FFBF54).w
                bge.w   loc_F7194
                addq.w  #1,(word_FFBF54).w
loc_F7194:                              ; CODE XREF: sub_F7172+1A   j
                movem.l (sp)+,d0/a0
                movea.l #$FFFFCA32,a1
                rts
; End of function sub_F7172
; ---------------------------------------------------------------------------


sub_F71A2:                              ; CODE XREF: sub_FCC76+6   p
                                        ; sub_FCC76+44   p
                clr.w   (word_FFBF54).w
                clr.w   (word_FFBF56).w
                movem.l d0-d7/a0-a6,-(sp)
                movea.l #$FFFFC6CE,a0
                bsr.w   sub_F71F0
                movea.l #$FFFFBF5E,a0
                bsr.w   sub_F72DA
                movea.l #$FFFFBF62,a0
                bsr.w   sub_F72FA
                movea.l #$FFFFCA32,a0
                bsr.w   sub_F71F0
                movea.l #$FFFFBF5C,a0
                bsr.w   sub_F72DA
                movea.l #$FFFFBF60,a0
                bsr.w   sub_F72FA
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_F71A2


sub_F71F0:                              ; CODE XREF: sub_F71A2+12   p
                                        ; sub_F71A2+30   p ...
                movem.l d0-d7/a0-a6,-(sp)
                movea.l a0,a2
                adda.l  #$1A2,a2
                movea.l $1E(a0),a0
                adda.w  6(a0),a0
                movea.l #$FFFFBF20,a1
                move.w  #5,d0
loc_F720E:                              ; CODE XREF: sub_F71F0+54   j
                move.b  (a0)+,d1
                subq.b  #1,d1
                move.b  d1,(a1)+
                ext.w   d1
                asl.w   #4,d1
                clr.b   (a1)
                addq.w  #3,d1
                move.w  #3,d7
loc_F7220:                              ; CODE XREF: sub_F71F0+50   j
                clr.w   d2
                move.b  (a2,d1.w),d2
                cmp.b   #9,d7
                beq.w   loc_F7238
                cmp.b   #$D,d7
                beq.w   loc_F7238
                add.b   d2,(a1)
loc_F7238:                              ; CODE XREF: sub_F71F0+3A   j
                                        ; sub_F71F0+42   j
                addq.w  #1,d1
                addq.w  #1,d7
                cmp.b   #$10,d7
                bne.s   loc_F7220
                tst.b   (a1)+
                dbf     d0,loc_F720E
loc_F7248:                              ; CODE XREF: sub_F71F0+84   j
                movea.l #$FFFFBF20,a1
                clr.w   d1
                move.w  #4,d0
loc_F7254:                              ; CODE XREF: sub_F71F0+7E   j
                move.b  3(a1),d6
                cmp.b   1(a1),d6
                ble.w   loc_F726C
                st      d1
                move.w  2(a1),d2
                move.w  (a1),2(a1)
                move.w  d2,(a1)
loc_F726C:                              ; CODE XREF: sub_F71F0+6C   j
                tst.w   (a1)+
                dbf     d0,loc_F7254
                tst.w   d1
                bne.s   loc_F7248
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_F71F0


sub_F727C:                              ; CODE XREF: sub_17730:loc_17942   p
                movem.l d0/a0,-(sp)
                movea.l #$FFFFBF62,a0
                move.w  (word_FFBF5A).w,d0
                add.w   d0,d0
                move.w  (a0,d0.w),d1
                cmpi.w  #0,(word_FFBF5A).w
                bge.w   loc_F729E
                addq.w  #1,(word_FFBF5A).w
loc_F729E:                              ; CODE XREF: sub_F727C+1A   j
                movem.l (sp)+,d0/a0
                movea.l #$FFFFC6CE,a1
                rts
; End of function sub_F727C


sub_F72AA:                              ; CODE XREF: sub_17730:loc_1794C   p
                movem.l d0/a0,-(sp)
                movea.l #$FFFFBF60,a0
                move.w  (word_FFBF58).w,d0
                add.w   d0,d0
                move.w  (a0,d0.w),d1
                cmpi.w  #0,(word_FFBF58).w
                bge.w   loc_F72CC
                addq.w  #1,(word_FFBF58).w
loc_F72CC:                              ; CODE XREF: sub_F72AA+1A   j
                movem.l (sp)+,d0/a0
                movea.l #$FFFFCA32,a1
                rts
; End of function sub_F72AA
; ---------------------------------------------------------------------------


sub_F72DA:                              ; CODE XREF: sub_F71A2+1C   p
                                        ; sub_F71A2+3A   p
                movem.l d0-d1/a0-a1,-(sp)
                movea.l #$FFFFBF20,a1
                move.w  #0,d0
loc_F72E8:                              ; CODE XREF: sub_F72DA+16   j
                clr.b   (a0)+
                move.b  (a1),d1
                move.b  d1,(a0)+
                tst.w   (a1)+
                dbf     d0,loc_F72E8
                movem.l (sp)+,d0-d1/a0-a1
                rts
; End of function sub_F72DA


sub_F72FA:                              ; CODE XREF: sub_F71A2+26   p
                                        ; sub_F71A2+44   p
                movem.l d0/a0-a1,-(sp)
                movea.l #$FFFFBF2A,a1
                move.w  #0,d0
loc_F7308:                              ; CODE XREF: sub_F72FA+14   j
                clr.b   (a0)+
                move.b  (a1),(a0)+
                tst.w   -(a1)
                dbf     d0,loc_F7308
                movem.l (sp)+,d0/a0-a1
                rts
; End of function sub_F72FA


sub_F7318:                              ; CODE XREF: sub_FCC76+1FC   p
                movem.l d1-d7/a0-a6,-(sp)
                movea.l #$FFFFC6CE,a0
                bsr.w   sub_F737E
                move.w  d1,(word_FFBF12).w
                movea.l #$FFFFCA32,a0
                bsr.w   sub_F737E
                move.w  d1,(word_FFBF14).w
                move.w  (word_FFBF12).w,d1
                move.w  (word_FFBF14).w,d2
                sub.w   d1,d2
                move.w  #0,(word_FFBF50).w
                tst.w   d2
                bmi.w   loc_F7354
                move.w  #1,(word_FFBF50).w
loc_F7354:                              ; CODE XREF: sub_F7318+32   j
                tst.w   d2
                bpl.w   loc_F735C
                neg.w   d2
loc_F735C:                              ; CODE XREF: sub_F7318+3E   j
                move.w  #$FFFF,d0
                cmp.w   #$5E,d2 ; '^'
                blt.w   loc_F7378
                move.w  #$22,d0 ; '"'
                cmp.w   #$BD,d2
                blt.w   loc_F7378
                move.w  #$23,d0 ; '#'
loc_F7378:                              ; CODE XREF: sub_F7318+4C   j
                                        ; sub_F7318+58   j
                movem.l (sp)+,d1-d7/a0-a6
                rts
; End of function sub_F7318


sub_F737E:                              ; CODE XREF: sub_F7318+A   p
                                        ; sub_F7318+18   p
                bsr.w   sub_F71F0
                move.w  #6,d0
                movea.l #$FFFFBF20,a0
                clr.w   d1
loc_F738E:                              ; CODE XREF: sub_F737E+1A   j
                move.b  1(a0),d2
                ext.w   d2
                add.w   d2,d1
                tst.w   (a0)+
                dbf     d0,loc_F738E
                rts
; End of function sub_F737E


sub_F739E:                              ; CODE XREF: ROM:00017312   p
                jsr     (sub_FE660).l
                movea.l #$FFFFD088,a3
                jsr     (sub_1803E).l
                move.w  (TmpOptLine2).w,(OptLine).w
                move.w  (TempOptPlayMode).w,(OptPlayMode).w
                bclr    #1,(byte_FFC2FC).w
                jsr     (sub_FD73C).l
                jsr     (sub_F9C68).l
                bsr.w   setoptions
                clr.w   (word_FFD422).w
                clr.w   (word_FFD424).w
                bsr.w   sub_F8070
                tst.w   (demoflag).w
                bne.w   loc_F73FE
                moveq   #$1C,d0
                jsr     (randomd0).l
                move.w  d0,(Opt1Team).w
                moveq   #$1C,d0
                jsr     (randomd0).l
                move.w  d0,(Opt2Team).w
loc_F73FE:                              ; CODE XREF: sub_F739E+44   j
                st      (demoflag).w
                cmpi.w  #4,(OptPlayMode).w
                bne.w   loc_F7410
                bra.w   loc_F742C
; ---------------------------------------------------------------------------
loc_F7410:                              ; CODE XREF: sub_F739E+6A   j
                cmpi.w  #2,(OptPlayMode).w
                blt.w   loc_F741E
                bsr.w   j_NewPO
loc_F741E:                              ; CODE XREF: sub_F739E+78   j
                cmpi.w  #1,(OptPlayMode).w
                bne.w   loc_F742C
                bsr.w   sub_F76CE
loc_F742C:                              ; CODE XREF: sub_F739E+6E   j
                                        ; sub_F739E+86   j
                clr.w   d7
                clr.w   d0
                bsr.w   sub_F76D4
                bsr.w   sub_F78A2
                move.w  (HomeTeam).w,(word_FFD42A).w
                move.w  (HomeTeam).w,(word_FFD428).w
                bsr.w   sub_F85B0
                move.w  (VisTeam).w,(word_FFD42C).w
                move.w  (VisTeam).w,(word_FFD428).w
                bsr.w   sub_F8608
                move.w  #$18,(palcount).w
                bclr    #2,(disflags).w
loc_F7464:                              ; CODE XREF: sub_F739E+18A   j
                                        ; sub_F739E+20C   j ...
                cmpi.w  #4,(OptPlayMode).w
                bne.w   loc_F7480
                move.w  #1,(OptLine).w
                move.w  #0,(OptPen).w
                move.w  #1,(OptUserRec).w
loc_F7480:                              ; CODE XREF: sub_F739E+CC   j
                bsr.w   sub_F8304
                tst.w   d1
                bne.w   loc_F748E
                bra.w   loc_F8418
; ---------------------------------------------------------------------------
loc_F748E:                              ; CODE XREF: sub_F739E+E8   j
                btst    #7,d1
                bne.w   loc_F843E
                btst    #1,d1
                beq.w   loc_F752C
                tst.w   (OptNOP).w
                bne.w   loc_F74B6
                cmp.w   #8,d7
                bne.w   loc_F74B6
                move.w  #4,d0
                bra.w   loc_F74BA
; ---------------------------------------------------------------------------
loc_F74B6:                              ; CODE XREF: sub_F739E+104   j
                                        ; sub_F739E+10C   j
                move.w  #2,d0
loc_F74BA:                              ; CODE XREF: sub_F739E+114   j
                cmpi.w  #4,(OptPlayMode).w
                beq.w   loc_F74DC
                tst.w   (OptNOP).w
                bne.w   loc_F74DC
                cmp.w   #8,d7
                bne.w   loc_F74DC
                move.w  #6,d0
                bra.w   loc_F7520
; ---------------------------------------------------------------------------
loc_F74DC:                              ; CODE XREF: sub_F739E+122   j
                                        ; sub_F739E+12A   j ...
                cmp.w   #6,d7
                bne.w   loc_F74FC
                cmpi.w  #4,(OptPlayMode).w
                bne.w   loc_F74FC
                tst.w   (OptNOP).w
                bne.w   loc_F751C
                clr.w   d0
                bra.w   loc_F7520
; ---------------------------------------------------------------------------
loc_F74FC:                              ; CODE XREF: sub_F739E+142   j
                                        ; sub_F739E+14C   j
                cmp.w   #$A,d7
                bne.w   loc_F7520
                cmpi.w  #4,(OptPlayMode).w
                bne.w   loc_F7514
                clr.w   d0
                bra.w   loc_F7520
; ---------------------------------------------------------------------------
loc_F7514:                              ; CODE XREF: sub_F739E+16C   j
                tst.w   (word_FFD458).w
                bpl.w   loc_F7520
loc_F751C:                              ; CODE XREF: sub_F739E+154   j
                move.w  #4,d0
loc_F7520:                              ; CODE XREF: sub_F739E+13A   j
                                        ; sub_F739E+15A   j ...
                bsr.w   sub_F76D4
                bsr.w   sub_F78A2
                bra.w   loc_F7464
; ---------------------------------------------------------------------------
loc_F752C:                              ; CODE XREF: sub_F739E+FC   j
                btst    #0,d1
                beq.w   loc_F75AE
                tst.w   (OptNOP).w
                bne.w   loc_F754C
                cmp.w   #$C,d7
                bne.w   loc_F754C
                move.w  #$FFFC,d0
                bra.w   loc_F7572
; ---------------------------------------------------------------------------
loc_F754C:                              ; CODE XREF: sub_F739E+19A   j
                                        ; sub_F739E+1A2   j
                move.w  #$FFFE,d0
                cmpi.w  #4,(OptPlayMode).w
                beq.w   loc_F7572
                tst.w   (OptNOP).w
                bne.w   loc_F7572
                cmp.w   #$E,d7
                bne.w   loc_F7572
                move.w  #$FFFA,d0
                bra.w   loc_F75A2
; ---------------------------------------------------------------------------
loc_F7572:                              ; CODE XREF: sub_F739E+1AA   j
                                        ; sub_F739E+1B8   j ...
                cmp.w   #$A,d7
                bne.w   loc_F7584
                cmpi.w  #4,(OptPlayMode).w
                beq.w   loc_F759E
loc_F7584:                              ; CODE XREF: sub_F739E+1D8   j
                cmp.w   #$E,d7
                bne.w   loc_F75A2
                cmpi.w  #4,(OptPlayMode).w
                beq.w   loc_F759E
                tst.w   (word_FFD458).w
                bpl.w   loc_F75A2
loc_F759E:                              ; CODE XREF: sub_F739E+1E2   j
                                        ; sub_F739E+1F4   j
                move.w  #$FFFC,d0
loc_F75A2:                              ; CODE XREF: sub_F739E+1D0   j
                                        ; sub_F739E+1EA   j ...
                bsr.w   sub_F76D4
                bsr.w   sub_F78A2
                bra.w   loc_F7464
; ---------------------------------------------------------------------------
loc_F75AE:                              ; CODE XREF: sub_F739E+192   j
                moveq   #1,d2
                btst    #3,d1
                bne.w   loc_F75C2
                btst    #2,d1
                beq.w   loc_F7464
                moveq   #$FFFFFFFF,d2
loc_F75C2:                              ; CODE XREF: sub_F739E+216   j
                cmpi.w  #4,(OptPlayMode).w
                beq.w   loc_F75D2
                jsr     (FigureJoy).l
loc_F75D2:                              ; CODE XREF: sub_F739E+22A   j
                move.w  (Opt2Team).w,-(sp)
                move.w  (Opt1Team).w,-(sp)
                bsr.w   sub_F7942
                move.w  (sp)+,d0
                cmpi.w  #4,(OptPlayMode).w
                beq.w   loc_F75F2
                tst.w   (OptPlayMode).w
                bne.w   loc_F75FE
loc_F75F2:                              ; CODE XREF: sub_F739E+248   j
                move.w  (Opt1Team).w,(HomeTeam).w
                move.w  (Opt2Team).w,(VisTeam).w
loc_F75FE:                              ; CODE XREF: sub_F739E+250   j
                move.w  (HomeTeam).w,(word_FFD428).w
                btst    #6,(word_FFD42E).w
                beq.w   loc_F7622
                movem.w d0,-(sp)
                move.w  (word_FFD42A).w,d0
                cmp.w   (HomeTeam).w,d0
                movem.w (sp)+,d0
                beq.w   loc_F762C
loc_F7622:                              ; CODE XREF: sub_F739E+26C   j
                move.w  (HomeTeam).w,(word_FFD42A).w
                bsr.w   sub_F85B0
loc_F762C:                              ; CODE XREF: sub_F739E+280   j
                btst    #7,(word_FFD42E).w
                beq.w   loc_F764A
                movem.w d0,-(sp)
                move.w  (word_FFD42C).w,d0
                cmp.w   (VisTeam).w,d0
                movem.w (sp)+,d0
                beq.w   loc_F7660
loc_F764A:                              ; CODE XREF: sub_F739E+294   j
                move.w  (VisTeam).w,(word_FFD42C).w
                move.w  (VisTeam).w,(word_FFD428).w
                bsr.w   sub_F8608
                move.w  (HomeTeam).w,(word_FFD428).w
loc_F7660:                              ; CODE XREF: sub_F739E+2A8   j
                tst.w   (sp)+
                bra.w   loc_F76BE
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_F76BE:                              ; CODE XREF: sub_F739E+2C4   j
                bsr.w   sub_F78A2
                bra.w   loc_F7464
; End of function sub_F739E
; ---------------------------------------------------------------------------


; Attributes: thunk
j_NewPO:                                ; CODE XREF: sub_F739E+7C   p
                                        ; sub_F7942+1BA   j ...
                jmp     NewPO
; End of function j_NewPO


; Attributes: thunk
sub_F76CE:                              ; CODE XREF: sub_F739E+8A   p
                jmp     sub_17CA0
; End of function sub_F76CE


sub_F76D4:                              ; CODE XREF: sub_F739E+92   p
                                        ; sub_F739E:loc_F7520   p ...
                move.w  d7,d3
loc_F76D6:                              ; CODE XREF: sub_F76D4+C2   j
                                        ; sub_F76D4+DE   j
                bclr    #2,(byte_FFC2F6).w
                tst.w   d0
                bpl.w   loc_F770A
                move.w  d0,-(sp)
                move.w  d7,d0
                asr.w   #1,d0
                cmp.w   (word_FFD422).w,d0
                bne.w   loc_F7708
                move.w  (word_FFD422).w,(word_FFD424).w
                bset    #2,(byte_FFC2F6).w
                subq.w  #1,(word_FFD422).w
                bpl.w   loc_F7708
                clr.w   (word_FFD422).w
loc_F7708:                              ; CODE XREF: sub_F76D4+18   j
                                        ; sub_F76D4+2C   j
                move.w  (sp)+,d0
loc_F770A:                              ; CODE XREF: sub_F76D4+A   j
                move.w  d7,(word_FFBF12).w
                add.w   d0,d7
                bpl.w   loc_F7716
                clr.w   d7
loc_F7716:                              ; CODE XREF: sub_F76D4+3C   j
                tst.w   d0
                bmi.w   loc_F7768
                move.w  d0,-(sp)
                move.w  d7,d0
                asr.w   #1,d0
                sub.w   (word_FFD422).w,d0
                cmp.w   #5,d0
                bgt.w   loc_F7732
                bra.w   loc_F7766
; ---------------------------------------------------------------------------
loc_F7732:                              ; CODE XREF: sub_F76D4+56   j
                move.w  (word_FFD422).w,(word_FFD424).w
                bset    #2,(byte_FFC2F6).w
                addq.w  #1,(word_FFD422).w
                move.w  d7,d0
                asr.w   #1,d0
                sub.w   (word_FFD422).w,d0
                cmp.w   #5,d0
                ble.w   loc_F7756
                addq.w  #1,(word_FFD422).w
loc_F7756:                              ; CODE XREF: sub_F76D4+7A   j
                cmpi.w  #3,(word_FFD422).w
                ble.w   loc_F7766
                move.w  #3,(word_FFD422).w
loc_F7766:                              ; CODE XREF: sub_F76D4+5A   j
                                        ; sub_F76D4+88   j
                move.w  (sp)+,d0
loc_F7768:                              ; CODE XREF: sub_F76D4+44   j
                btst    #2,(byte_FFC2F6).w
                bne.w   loc_F7778
                move.w  (word_FFD422).w,(word_FFD424).w
loc_F7778:                              ; CODE XREF: sub_F76D4+9A   j
                cmp.w   #$12,d7
                blt.w   loc_F7782
                sub.w   d0,d7
loc_F7782:                              ; CODE XREF: sub_F76D4+A8   j
                cmpi.w  #1,(OptPlayMode).w
                bne.w   loc_F779A
                tst.w   d7
                beq.w   loc_F779A
                cmp.w   #6,d7
                bls.w   loc_F76D6
loc_F779A:                              ; CODE XREF: sub_F76D4+B4   j
                                        ; sub_F76D4+BA   j
                cmpi.w  #2,(OptPlayMode).w
                blt.w   loc_F77B6
                cmpi.w  #4,(OptPlayMode).w
                beq.w   loc_F77B6
                cmp.w   #6,d7
                beq.w   loc_F76D6
loc_F77B6:                              ; CODE XREF: sub_F76D4+CC   j
                                        ; sub_F76D4+D6   j
                bsr.w   sub_F780C
                movem.l d0-d7/a0-a6,-(sp)
                move.w  (word_FFD426).w,d4
                movea.l #unk_BEFB8,a0
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                move.w  (printx).w,d0
                subq.w  #1,d0
                move.w  d1,d3
                move.w  (printy).w,d1
                subi.w  #$E,d1
                moveq   #$17,d2
                moveq   #0,d5
                bset    #0,(word_FFC2F8).w
                jsr     (dobitmap).l
                bclr    #0,(word_FFC2F8).w
                movem.l (sp)+,d0-d7/a0-a6
                move.w  d7,d3
                bsr.w   sub_F7864
                move.w  #$6000,(printa).w
                jmp     Framer
; End of function sub_F76D4


sub_F780C:                              ; CODE XREF: sub_F76D4:loc_F77B6   p
                jsr     (printz).l
                ori.b   #$10,d6
                move.w  #$17,d0
                move.w  #$D,d1
                rts
; End of function sub_F780C
; ---------------------------------------------------------------------------


sub_F7864:                              ; CODE XREF: sub_F76D4+128   p
                jsr     (printz).l
                ori.b   #$10,d6
                add.w   d3,(printy).w
                move.w  (word_FFD422).w,d0
                add.w   d0,d0
                sub.w   d0,(printy).w
                moveq   #$17,d0
                moveq   #3,d1
                cmpi.w  #2,(OptPlayMode).w
                blt.w   locret_F78A0
                cmpi.w  #4,(OptPlayMode).w
                beq.w   locret_F78A0
                cmp.w   #4,d3
                bne.w   locret_F78A0
                moveq   #5,d1
locret_F78A0:                           ; CODE XREF: sub_F7864+24   j
                                        ; sub_F7864+2E   j ...
                rts
; End of function sub_F7864


sub_F78A2:                              ; CODE XREF: sub_F739E+96   p
                                        ; sub_F739E+186   p ...
                movem.l d0-d7/a0-a6,-(sp)
                cmpi.w  #4,(OptPlayMode).w
                bne.w   loc_F78B6
                move.w  #1,(OptUserRec).w
loc_F78B6:                              ; CODE XREF: sub_F78A2+A   j
                tst.w   (OptNOP).w
                bne.w   loc_F78C4
                move.w  #1,(OptUserRec).w
loc_F78C4:                              ; CODE XREF: sub_F78A2+18   j
                tst.w   (OptNOP).w
                bne.w   loc_F78F8
                move.w  #0,(OptGoalie).w
                move.w  #0,(word_FFD05A).w
                move.w  #0,(word_FFD05C).w
                tst.w   (OptNOP).w
                bne.w   loc_F78F8
                move.w  #1,(OptGoalie).w
                move.w  #1,(word_FFD05A).w
                move.w  #1,(word_FFD05C).w
loc_F78F8:                              ; CODE XREF: sub_F78A2+26   j
                                        ; sub_F78A2+40   j
                move.w  (word_FFD422).w,d0
                cmp.w   (word_FFD424).w,d0
                beq.w   loc_F7908
                bsr.w   sub_F8070
loc_F7908:                              ; CODE XREF: sub_F78A2+5E   j
                bset    #3,(word_FFC2F8).w
                bsr.w   sub_F7B20
                bclr    #3,(word_FFC2F8).w
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_F78A2
; ---------------------------------------------------------------------------


sub_F7942:                              ; CODE XREF: sub_F739E+23C   p
                                        ; sub_F7B20+8   p
                tst.w   d7
                bne.w   loc_F79A6
                movem.w d0/d2,-(sp)
                tst.w   d2
                beq.w   loc_F797A
                move.w  (OptPlayMode).w,d0
                add.w   d2,d0
                bpl.w   loc_F7960
                move.w  #4,d0
loc_F7960:                              ; CODE XREF: sub_F7942+16   j
                cmp.w   #4,d0
                bne.w   loc_F797A
                move.w  (OptUserRec).w,(TmpOptUserRec).w
                move.w  (OptPen).w,(TmpOptPen).w
                move.w  (OptLine).w,(TmpOptLine).w
loc_F797A:                              ; CODE XREF: sub_F7942+C   j
                                        ; sub_F7942+22   j
                movem.w (sp)+,d0/d2
                tst.w   d7
                bne.w   loc_F79A6
                tst.w   d2
                beq.w   loc_F79A6
                cmpi.w  #4,(OptPlayMode).w
                bne.w   loc_F79A6
                move.w  (TmpOptUserRec).w,(OptUserRec).w
                move.w  (TmpOptPen).w,(OptPen).w
                move.w  (TmpOptLine).w,(OptLine).w
loc_F79A6:                              ; CODE XREF: sub_F7942+2   j
                                        ; sub_F7942+3E   j ...
                movea.w #(OptPlayMode-M68K_RAM),a2
                movea.l #unk_F791E,a3
                tst.w   (FourWayPlay).w
                beq.w   loc_F79BE
                movea.l #unk_F7930,a3
loc_F79BE:                              ; CODE XREF: sub_F7942+72   j
                clr.w   d5
                move.w  (a3,d7.w),d4
                move.w  (a2,d7.w),d3
                cmpi.w  #2,(OptPlayMode).w
                blt.w   loc_F79E6
                cmpi.w  #4,(OptPlayMode).w
                beq.w   loc_F79E6
                cmp.w   #4,d7
                bne.w   loc_F79E6
                moveq   #$1A,d4
loc_F79E6:                              ; CODE XREF: sub_F7942+8C   j
                                        ; sub_F7942+96   j ...
                cmp.w   #2,d7
                bne.w   loc_F7A78
                cmpi.w  #4,(OptPlayMode).w
                bne.w   loc_F7A48
                movem.w d2,-(sp)
                add.w   (OptNOP).w,d2
                bpl.w   loc_F7A06
                addq.w  #7,d2
loc_F7A06:                              ; CODE XREF: sub_F7942+BE   j
                cmp.w   #4,d2
                movem.w (sp)+,d2
                ble.w   loc_F7A26
                tst.w   d2
                bpl.w   loc_F7A20
                move.w  #4,d2
                bra.w   loc_F7A48
; ---------------------------------------------------------------------------
loc_F7A20:                              ; CODE XREF: sub_F7942+D2   j
                addq.w  #2,d2
                bra.w   loc_F7A48
; ---------------------------------------------------------------------------
loc_F7A26:                              ; CODE XREF: sub_F7942+CC   j
                movem.w d2,-(sp)
                add.w   (OptNOP).w,d2
                cmp.w   #3,d2
                movem.w (sp)+,d2
                bne.w   loc_F7A48
                tst.w   d2
                bpl.w   loc_F7A46
                subq.w  #1,d2
                bra.w   loc_F7A48
; ---------------------------------------------------------------------------
loc_F7A46:                              ; CODE XREF: sub_F7942+FA   j
                addq.w  #1,d2
loc_F7A48:                              ; CODE XREF: sub_F7942+B2   j
                                        ; sub_F7942+DA   j ...
                moveq   #5,d5
                tst.w   (FourWayPlay).w
                beq.w   loc_F7A58
                move.w  #$A,d4
                addq.w  #2,d5
loc_F7A58:                              ; CODE XREF: sub_F7942+10C   j
                cmpi.w  #4,(OptPlayMode).w
                beq.w   loc_F7A6A
                tst.w   (OptPlayMode).w
                bne.w   loc_F7A6E
loc_F7A6A:                              ; CODE XREF: sub_F7942+11C   j
                clr.w   d5
                moveq   #5,d4
loc_F7A6E:                              ; CODE XREF: sub_F7942+124   j
                                        ; sub_F7942+1A0   j
                tst.w   (FourWayPlay).w
                beq.w   loc_F7A78
                addq.w  #2,d4
loc_F7A78:                              ; CODE XREF: sub_F7942+A8   j
                                        ; sub_F7942+130   j
                bsr.w   sub_F7B0A
                tst.w   (FourWayPlay).w
                beq.w   loc_F7ABA
                cmp.w   #2,d7
                bne.w   loc_F7ABA
                tst.w   d2
                bmi.w   loc_F7AA6
                cmp.w   #9,d3
                beq.w   loc_F7AB6
                cmp.w   #$A,d3
                beq.w   loc_F7AB6
                bra.w   loc_F7ABA
; ---------------------------------------------------------------------------
loc_F7AA6:                              ; CODE XREF: sub_F7942+14C   j
                cmp.w   #$A,d3
                bne.w   loc_F7ABA
                move.w  #8,d3
                bra.w   loc_F7ABA
; ---------------------------------------------------------------------------
loc_F7AB6:                              ; CODE XREF: sub_F7942+154   j
                                        ; sub_F7942+15C   j
                move.w  #$B,d3
loc_F7ABA:                              ; CODE XREF: sub_F7942+13E   j
                                        ; sub_F7942+146   j ...
                move.w  d3,(a2,d7.w)
                tst.w   d2
                beq.w   locret_F78A0
                cmpi.w  #1,(OptPlayMode).w
                bne.w   loc_F7AE6
                tst.w   d7
                bne.w   loc_F7AE6
                jsr     (sub_17CA0).l
                move.w  (gamelevel).w,d0
                or.w    (bosgames).w,d0
                beq.s   loc_F7A6E
                rts
; ---------------------------------------------------------------------------
loc_F7AE6:                              ; CODE XREF: sub_F7942+188   j
                                        ; sub_F7942+18E   j
                cmpi.w  #2,(OptPlayMode).w
                blt.w   locret_F78A0
                cmpi.w  #4,(OptPlayMode).w
                beq.w   locret_F78A0
                tst.w   d7
                beq.w   j_NewPO
                cmp.w   #4,d7
                beq.w   j_NewPO
                rts
; End of function sub_F7942


sub_F7B0A:                              ; CODE XREF: sub_F7942:loc_F7A78   p
                add.w   d2,d3
                cmp.w   d5,d3
                bge.w   loc_F7B16
                move.w  d4,d3
                subq.w  #1,d3
loc_F7B16:                              ; CODE XREF: sub_F7B0A+4   j
                cmp.w   d4,d3
                blt.w   locret_F78A0
                move.w  d5,d3
                rts
; End of function sub_F7B0A


sub_F7B20:                              ; CODE XREF: sub_F78A2+6C   p
                move.w  d7,d6
                moveq   #$FFFFFFFE,d7
loc_F7B24:                              ; CODE XREF: sub_F7B20+26   j
                addq.w  #2,d7
                clr.w   d2
                bsr.w   sub_F7942
                movem.l d7,-(sp)
                asr.w   #1,d7
                cmp.w   (word_FFD422).w,d7
                movem.l (sp)+,d7
                blt.w   loc_F7B42
                bsr.w   sub_F7B66
loc_F7B42:                              ; CODE XREF: sub_F7B20+1A   j
                cmp.w   #$10,d7
                bne.s   loc_F7B24
                bsr.w   sub_F7BFA
                move.w  d6,d7
                jsr     (sub_17AF4).l
                btst    #0,(word_FFD42E).w
                bne.w   locret_F7B64
                jsr     (sub_F87D2).l
locret_F7B64:                           ; CODE XREF: sub_F7B20+3A   j
                rts
; End of function sub_F7B20


sub_F7B66:                              ; CODE XREF: sub_F7B20+1E   p
                jsr     (printz).l
                ori.b   #$11,d6
                move.b  d0,d0
                move.w  (word_FFD422).w,d0
                add.w   d0,d0
                sub.w   d0,(printy).w
                add.w   d7,(printy).w
                cmpi.w  #$1B,(printy).w
                bgt.w   locret_F78A0
                subq.w  #1,(printy).w
                move.w  #$11,(printx).w
                cmp.w   #4,d7
                beq.w   loc_F7C5E
                cmp.w   #6,d7
                beq.w   loc_F7C5E
                movea.l #$FFFFD048,a0
                move.w  (a0,d7.w),d3
                movea.l #unk_F7D04,a0
                adda.w  (a0,d7.w),a0
                cmpa.l  #unk_F7F3C,a0
                bne.w   loc_F7BD8
                cmpi.w  #4,(OptPlayMode).w
                bne.w   loc_F7BD8
                movea.l #unk_F7CEE,a1
                jmp     print
; ---------------------------------------------------------------------------
loc_F7BD8:                              ; CODE XREF: sub_F7B66+58   j
                                        ; sub_F7B66+62   j
                tst.w   (FourWayPlay).w
                beq.w   loc_F7BEC
                cmp.w   #2,d7
                bne.w   loc_F7BEC
                adda.w  #$B0,a0
loc_F7BEC:                              ; CODE XREF: sub_F7B66+76   j
                                        ; sub_F7B66+7E   j ...
                movea.l a0,a1
                adda.w  (a0),a0
                dbf     d3,loc_F7BEC
                jmp     print
; End of function sub_F7B66


sub_F7BFA:                              ; CODE XREF: sub_F7B20+28   p
                move.w  #$19,(printy).w
                movea.l #unk_F7C5A,a1
                cmpi.w  #3,(word_FFD422).w
                beq.w   loc_F7C20
                cmpi.w  #4,(OptPlayMode).w
                beq.w   loc_F7C20
                movea.l #unk_F7C56,a1
loc_F7C20:                              ; CODE XREF: sub_F7BFA+12   j
                                        ; sub_F7BFA+1C   j
                move.w  #2,(printx).w
                jsr     (print).l
                movea.l #unk_F7C5A,a1
                move.w  #$F,(printy).w
                tst.w   (word_FFD422).w
                beq.w   loc_F7C46
                movea.l #unk_F7C52,a1
loc_F7C46:                              ; CODE XREF: sub_F7BFA+42   j
                move.w  #2,(printx).w
                jmp     print
; End of function sub_F7BFA
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_F7C5E:                              ; CODE XREF: sub_F7B66+32   j
                                        ; sub_F7B66+3A   j
                move.w  (printx).w,-(sp)
                movea.l #unk_F7CD8,a1
                jsr     (print).l
                move.w  (sp)+,(printx).w
                movea.l #$FFFFD048,a1
                move.w  (a1,d7.w),d3
                movea.w #$30E,a1
                asl.w   #2,d3
                movea.l (a1,d3.w),a1
                lsr.w   #2,d3
                adda.w  4(a1),a1
                cmp.w   #$E,d3
                bne.w   loc_F7C9E
                movea.l #unk_F7CC6,a1
                bra.w   loc_F7CAC
; ---------------------------------------------------------------------------
loc_F7C9E:                              ; CODE XREF: ROM:000F7C90   j
                cmp.w   #$D,d3
                bne.w   loc_F7CAC
                movea.l #unk_F7CB2,a1
loc_F7CAC:                              ; CODE XREF: ROM:000F7C9A   j
                                        ; ROM:000F7CA2   j
                jmp     print
; ---------------------------------------------------------------------------


sub_F8070:                              ; CODE XREF: sub_F739E+3C   p
                                        ; sub_F78A2+62   p
                movem.l d0-d1,-(sp)
                bset    #3,(word_FFC2F8).w
                movea.l #unk_F80D4,a1
                move.w  #$F,d0
                move.w  (word_FFD422).w,d1
                add.w   d1,d1
                sub.w   d1,d0
                move.w  d0,(printy).w
loc_F8090:                              ; CODE XREF: sub_F8070+56   j
                cmpi.w  #$F,(printy).w
                bge.w   loc_F80A0
                adda.w  (a1),a1
                bra.w   loc_F80C2
; ---------------------------------------------------------------------------
loc_F80A0:                              ; CODE XREF: sub_F8070+26   j
                cmpi.w  #$19,(printy).w
                bgt.w   loc_F80C8
                move.w  #3,(printx).w
                move.w  #0,(printa).w
                move.w  #0,(printm).w
                jsr     (print2).l
loc_F80C2:                              ; CODE XREF: sub_F8070+2C   j
                addq.w  #2,(printy).w
                bra.s   loc_F8090
; ---------------------------------------------------------------------------
loc_F80C8:                              ; CODE XREF: sub_F8070+36   j
                bclr    #3,(word_FFC2F8).w
                movem.l (sp)+,d0-d1
                rts
; End of function sub_F8070
; ---------------------------------------------------------------------------


; options screen display and input
setoptions:                             ; CODE XREF: sub_F739E+30   p
                move.l  #loc_17C42,(vbint).w
                move    #$2500,sr
                bclr    #0,(disflags).w ; #dfok - graphics are ready for transfer (clr = not ready)
                bset    #2,(disflags).w ; #dfng - dont int graphics
                bclr    #1,(disflags).w ; #df32c - 32 bit column mode (clr = off)
                move.w  #0,(VSCRLPM).w
                move.w  #$B400,(VSPRITES).w
                move.w  #$B800,(VmMap3).w
                move.w  #5,(Map3col1).w
                move.w  #$C000,(VmMap2).w
                move.w  #6,(Map2col1).w
                move.w  #$E000,(VmMap1).w
                move.w  #6,(Map1col1).w
                move.w  #0,d0           ; fade to color
                jsr     (setvram).l
                jsr     (orjoy).l
                jsr     (unk_F84D0).l
                move.w  d4,(framercset).w
                movea.l #unk_BF54A,a2
                jsr     (sub_1172C).l
                bchg    d1,(a6)
                or.l    d4,-$3211(a3)
                move.w  d4,(word_FFB012).w
                movea.l #unk_AAC5A,a2
                jsr     (sub_1172C).l
                bset    d7,d0
                or.l    d4,-$3211(a3)
                move.w  d4,(word_FFBF52).w
                movea.l #unk_BE272,a2
                jsr     (sub_1172C).l
                btst    d0,-(a3)
                or.l    d4,-$3211(a3)
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$28,d0 ; '('
                moveq   #$1C,d1
                move.w  #$7FF,d2
                jsr     (eraser).l
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$7C,d0 ; '|'
                ori.b   #$A0,d4
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                clr.w   d0
                clr.w   d1
                moveq   #$28,d2 ; '('
                moveq   #$1C,d3
                moveq   #$D,d5
                jsr     (dobitmap).l
                move.w  d4,(word_FFD432).w
                addi.w  #$24,d4 ; '$'
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$7C,d0 ; '|'
                ori.b   #$EE,d4
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                clr.w   d0
                clr.w   d1
                moveq   #$28,d2 ; '('
                moveq   #4,d3
                moveq   #0,d5
                jsr     (dobitmap).l
                jsr     (printz).l
                ori.b   #1,d6
                move.w  d4,(word_FFD426).w
                movea.l #unk_BEFB8,a0
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                clr.w   d0
                clr.w   d1
                moveq   #$26,d2 ; '&'
                moveq   #$D,d3
                moveq   #0,d5
                jsr     (dobitmap).l
                move.w  d4,(word_FFD430).w
                addi.w  #$24,d4 ; '$'
                move.w  d4,(word_FFD436).w
                movea.l #unk_BF70A,a2
                jsr     (sub_11738).l
                move.w  d4,(word_FFD438).w
                movea.l #unk_BF70A,a2
                jsr     (sub_1172C).l
                bchg    d1,d1
                or.l    d4,-$3211(a3)
                jsr     (sub_16E82).l
                move.w  #$28,(word_FFB066).w ; '('
                move.w  #$28,(word_FFB366).w ; '('
                st      (HmShots).w
                st      (byte_FFCA32).w
                rts
; End of function setoptions


sub_F8304:                              ; CODE XREF: sub_F739E:loc_F7480   p
                move.l  #$5460,d6
loc_F830A:                              ; CODE XREF: sub_F8304+E   j
                                        ; sub_F8304:loc_F8412   j
                move.w  (vcount).w,d1
                sub.w   (oldvcount).w,d1
                beq.s   loc_F830A
                move.w  (vcount).w,(oldvcount).w
                bclr    #5,(word_FFD42E).w
                jsr     (nullsub_3).l
                jsr     (ReadJoy1).l
                jsr     (sub_11318).l
                tst.w   d1
                beq.w   loc_F8356
                btst    #5,d1
                beq.w   locret_F8416
                btst    #5,d2
                beq.w   loc_F8350
                move.w  #$53,(word_FFD43C).l ; 'S'
loc_F8350:                              ; CODE XREF: sub_F8304+40   j
                bset    #5,(word_FFD42E).w
loc_F8356:                              ; CODE XREF: sub_F8304+30   j
                jsr     (ReadJoy2).l
                jsr     (sub_11318).l
                tst.w   d1
                beq.w   loc_F8376
                btst    #5,d1
                beq.w   locret_F8416
                bset    #5,(word_FFD42E).w
loc_F8376:                              ; CODE XREF: sub_F8304+60   j
                tst.w   (FourWayPlay).w
                beq.w   loc_F83BE
                jsr     (ReadJoy3).l
                jsr     (sub_11318).l
                tst.w   d1
                beq.w   loc_F839E
                btst    #5,d1
                beq.w   locret_F8416
                bset    #5,(word_FFD42E).w
loc_F839E:                              ; CODE XREF: sub_F8304+88   j
                jsr     (ReadJoy4).l
                jsr     (sub_11318).l
                tst.w   d1
                beq.w   loc_F83BE
                btst    #5,d1
                beq.w   locret_F8416
                bset    #5,(word_FFD42E).w
loc_F83BE:                              ; CODE XREF: sub_F8304+76   j
                                        ; sub_F8304+A8   j
                btst    #6,(word_FFD42E).w
                beq.w   loc_F83DC
                btst    #7,(word_FFD42E).w
                bne.w   loc_F83F0
                move.w  (word_FFD42C).w,(word_FFD428).w
                bsr.w   sub_F8608
loc_F83DC:                              ; CODE XREF: sub_F8304+C0   j
                btst    #7,(word_FFD42E).w
                beq.w   loc_F83F0
                move.w  (word_FFD42A).w,(word_FFD428).w
                bsr.w   sub_F85B0
loc_F83F0:                              ; CODE XREF: sub_F8304+CA   j
                                        ; sub_F8304+DE   j
                cmp.w   #$4650,d6
                bgt.w   loc_F840C
                btst    #0,(word_FFD42E).w
                bne.w   loc_F840C
                jsr     (sub_F87D2).l
                bra.w   loc_F8412
; ---------------------------------------------------------------------------
loc_F840C:                              ; CODE XREF: sub_F8304+F0   j
                                        ; sub_F8304+FA   j
                jsr     (sub_F87EA).l
loc_F8412:                              ; CODE XREF: sub_F8304+104   j
                dbf     d6,loc_F830A
locret_F8416:                           ; CODE XREF: sub_F8304+38   j
                                        ; sub_F8304+68   j ...
                rts
; End of function sub_F8304
; ---------------------------------------------------------------------------
loc_F8418:                              ; CODE XREF: sub_F739E+EC   j
                clr.w   (demoflag).w
                move.w  (VDP_CNTR).l,(RNGseed).w
                move.w  (VDP_CNTR).l,(RNGseed+2).w
                clr.w   (OptPlayMode).w
                clr.w   (OptNOP).w
                clr.w   (OptLine).w
                move.w  #1,(OptPen).w
loc_F843E:                              ; CODE XREF: sub_F739E+F4   j
                move.w  (OptGoalie).w,-(sp)
                move.w  (sp),(word_FFD05A).w
                move.w  (sp)+,(word_FFD05C).w
                jsr     (sub_17AC8).l
                move.w  (VDP_CNTR).l,(RNGseed).w
                move.w  (VDP_CNTR).l,(RNGseed+2).w
                move.w  (OptLine).w,(TmpOptLine2).w
                cmpi.w  #2,(OptLine).w
                bne.w   loc_F847A
                clr.w   (OptLine).w
                bset    #4,(byte_FFC2FC).w
loc_F847A:                              ; CODE XREF: ROM:000F846C   j
                move.w  (OptPlayMode).w,(TempOptPlayMode).w
                cmpi.w  #4,(OptPlayMode).w
                bne.w   loc_F849C
                move.w  #0,(OptPlayMode).w
                bset    #0,(word_FFC2FA).w
                jsr     (sub_FC47C).l
loc_F849C:                              ; CODE XREF: ROM:000F8486   j
                jmp     MakeTree
; ---------------------------------------------------------------------------
                tst.w   (OptNOP).w
                beq.w   locret_F84CE
                cmpi.w  #5,(OptNOP).w
                beq.w   locret_F84CE
                cmpi.w  #6,(OptNOP).w
                beq.w   locret_F84CE
                cmpi.w  #9,(OptNOP).w
                beq.w   locret_F84CE
                cmpi.w  #$A,(OptNOP).w
locret_F84CE:                           ; CODE XREF: ROM:000F84A6   j
                                        ; ROM:000F84B0   j ...
                rts
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
                movea.l #unk_AFE1A,a2
                jsr     (sub_11738).l
                move.w  d4,(word_FFD43A).w
                movea.l #unk_AFE1A,a2
                jsr     (sub_1172C).l
                bchg    d1,d1
                move.l  -(sp),-$7655(a2)
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
                rts


nullsub_3:                              ; CODE XREF: sub_F8304+1C   p
                rts
; End of function nullsub_3
; ---------------------------------------------------------------------------
                rts


sub_F84FC:                              ; CODE XREF: sub_F85B0+4   p
                                        ; sub_F8608+4   p
                movem.l d0-d7,-(sp)
                bclr    #0,(word_FFD42E).w
                beq.w   loc_F85AA
                bclr    #6,(word_FFD42E).w
                bclr    #7,(word_FFD42E).w
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$FC,d0
                ori.b   #$2A,d5 ; '*'
                moveq   #8,d0
                moveq   #8,d1
                move.w  #$7FF,d2
                btst    #1,(word_FFD42E).w
                beq.w   loc_F8574
                move.w  #3,(printx).w
                jsr     (eraser).l
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$FC,d0
                ori.b   #$28,a3 ; '('
                move.w  #5,(printy).w
                move.w  #$19,d0
                move.w  #8,d1
loc_F8566:
                move.w  #$7FF,d2
                jsr     (eraser).l
                bra.w   loc_F85AA
; ---------------------------------------------------------------------------
loc_F8574:                              ; CODE XREF: sub_F84FC+3A   j
                move.w  #$1C,(printx).w
                jsr     (eraser).l
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$FC,d0
                ori.b   #$28,d3 ; '('
                move.w  #5,(printy).w
                move.w  #$19,d0
                move.w  #8,d1
                move.w  #$7FF,d2
                jsr     (eraser).l
loc_F85AA:                              ; CODE XREF: sub_F84FC+A   j
                                        ; sub_F84FC+74   j
                movem.l (sp)+,d0-d7
                rts
; End of function sub_F84FC


sub_F85B0:                              ; CODE XREF: sub_F739E+A6   p
                                        ; sub_F739E+28A   p ...
                movem.l d0-d7/a0-a6,-(sp)
                bsr.w   sub_F84FC
                bset    #2,(word_FFD42E).w
                bset    #6,(word_FFD42E).w
                bsr.w   sub_F8770
                bclr    #3,(word_FFD42E).w
                beq.w   loc_F85F2
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$FC,d0
                ori.b   #$28,a0 ; '('
                move.w  #5,(printy).w
                moveq   #8,d0
                moveq   #8,d1
                move.w  #$7FF,d2
loc_F85F2:                              ; CODE XREF: sub_F85B0+1E   j
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$FC,d0
                ori.b   #$28,(a1)+ ; '('
                bra.w   loc_F865C
; End of function sub_F85B0


sub_F8608:                              ; CODE XREF: sub_F739E+B6   p
                                        ; sub_F739E+2B8   p ...
                movem.l d0-d7/a0-a6,-(sp)
                bsr.w   sub_F84FC
                bset    #3,(word_FFD42E).w
                bset    #7,(word_FFD42E).w
                bsr.w   sub_F878C
                bclr    #2,(word_FFD42E).w
                beq.w   loc_F864A
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$FC,d0
                ori.b   #$28,(a0)+ ; '('
                move.w  #5,(printy).w
                moveq   #8,d0
                moveq   #8,d1
                move.w  #$7FF,d2
loc_F864A:                              ; CODE XREF: sub_F8608+1E   j
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$FC,d0
                ori.b   #$28,a1 ; '('
loc_F865C:                              ; CODE XREF: sub_F85B0+54   j
                move.w  #$B4,(word_FFD440).w
                move.w  #6,(printy).w
                move.w  (word_FFD430).w,d4
                btst    #2,(word_FFD42E).w
                bne.w   loc_F867A
                move.w  (word_FFD432).w,d4
loc_F867A:                              ; CODE XREF: sub_F8608+6A   j
                move.w  (word_FFD428).w,d3
                asl.w   #2,d3
                movea.l #unk_F86F2,a0
                movea.l (a0,d3.w),a0
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                asl.w   #3,d3
                movea.l #unk_FF462,a0
                btst    #2,(word_FFD42E).w
                beq.w   loc_F86AA
                subi.w  #$20,d3 ; ' '
                bra.w   loc_F86AE
; ---------------------------------------------------------------------------
loc_F86AA:                              ; CODE XREF: sub_F8608+96   j
                subi.w  #$40,d3 ; '@'
loc_F86AE:                              ; CODE XREF: sub_F8608+9E   j
                adda.w  d3,a0
                adda.l  (a2)+,a1
                move.w  #6,d3
                move.w  #6,d2
                clr.w   d0
                clr.w   d1
                move.l  (dword_FFBD4A).w,-(sp)
                move.l  (dword_FFBD4E).w,-(sp)
                move.w  #4,d5
                btst    #2,(word_FFD42E).w
                beq.w   loc_F86D8
                move.w  #2,d5
loc_F86D8:                              ; CODE XREF: sub_F8608+C8   j
                jsr     (dobitmap).l
                move.l  (sp)+,(dword_FFBD4E).w
                move.l  (sp)+,(dword_FFBD4A).w
                move.w  #$64,(palcount).w ; 'd'
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_F8608
; ---------------------------------------------------------------------------


sub_F8762:                              ; CODE XREF: sub_F8868+82   p
                move.w  (word_FFD436).w,d4
                move.w  #$1C,(printx).w
                bra.w   loc_F8796
; End of function sub_F8762


sub_F8770:                              ; CODE XREF: sub_F85B0+14   p
                move.w  (word_FFD436).w,d4
                move.w  #$18,(printx).w
                bra.w   loc_F8796
; End of function sub_F8770


sub_F877E:                              ; CODE XREF: sub_F8868:loc_F88F2   p
                move.w  (word_FFD438).w,d4
                move.w  #3,(printx).w
                bra.w   loc_F8796
; End of function sub_F877E


sub_F878C:                              ; CODE XREF: sub_F8608+14   p
                move.w  (word_FFD438).w,d4
                move.w  #8,(printx).w
loc_F8796:                              ; CODE XREF: sub_F8762+A   j
                                        ; sub_F8770+A   j ...
                clr.w   (printa).w
                move.w  #5,(printy).w
                movea.l #unk_BF702,a0
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                move.w  #8,d3
                move.w  #8,d2
                clr.w   d0
                clr.w   d1
                move.w  #0,d5
                bset    #0,(word_FFC2F8).w
                jsr     (dobitmap).l
                bclr    #0,(word_FFC2F8).w
                rts
; End of function sub_F878C


sub_F87D2:                              ; CODE XREF: sub_F7B20+3E   p
                                        ; sub_F8304+FE   p ...
                move.w  #$AA,(word_FFD43C).w
                btst    #5,(word_FFD42E).w
                beq.w   locret_F87E8
                move.w  #$53,(word_FFD43C).w ; 'S'
locret_F87E8:                           ; CODE XREF: sub_F87D2+C   j
                rts
; End of function sub_F87D2


sub_F87EA:                              ; CODE XREF: sub_F8304:loc_F840C   p
                subq.w  #1,(word_FFD440).w
                bpl.w   locret_F8860
                move.w  #$FFFF,(word_FFD440).w
                bset    #0,(word_FFD42E).w
                btst    #0,(word_FFD42E).w
                beq.w   locret_F8860
                btst    #5,(word_FFD42E).w
                beq.w   loc_F8822
                cmpi.w  #$52,(word_FFD43C).w ; 'R'
                bge.w   loc_F8822
                subi.w  #$50,(word_FFD43C).w ; 'P'
loc_F8822:                              ; CODE XREF: sub_F87EA+24   j
                                        ; sub_F87EA+2E   j
                subq.w  #1,(word_FFD43C).w
                bmi.w   loc_F8862
                cmpi.w  #$52,(word_FFD43C).w ; 'R'
                bne.w   locret_F8860
                bclr    #2,(word_FFD42E).w
                bclr    #3,(word_FFD42E).w
                bchg    #1,(word_FFD42E).w
                st      (word_FFD42A).w
                st      (word_FFD42C).w
                bclr    #6,(word_FFD42E).w
                bclr    #7,(word_FFD42E).w
                jsr     (sub_F8868).l
locret_F8860:                           ; CODE XREF: sub_F87EA+4   j
                                        ; sub_F87EA+1A   j ...
                rts
; ---------------------------------------------------------------------------
loc_F8862:                              ; CODE XREF: sub_F87EA+3C   j
                jmp     sub_F87D2
; End of function sub_F87EA


sub_F8868:                              ; CODE XREF: sub_F87EA+70   p
                movem.l d0-d7/a0-a6,-(sp)
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$FC,d0
                ori.b   #$28,(a4)+ ; '('
                btst    #1,(word_FFD42E).w
                bne.w   loc_F888E
                move.w  #3,(printx).w
loc_F888E:                              ; CODE XREF: sub_F8868+1C   j
                move.w  #5,(printy).w
                move.w  #8,d0
                move.w  #8,d1
                move.w  #$7FF,d2
                jsr     (eraser).l
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$FC,d0
                ori.b   #$28,d3 ; '('
                btst    #1,(word_FFD42E).w
                bne.w   loc_F88C8
                move.w  #$B,(printx).w
loc_F88C8:                              ; CODE XREF: sub_F8868+56   j
                move.w  #5,(printy).w
                move.w  #$19,d0
                move.w  #8,d1
                move.w  #$7FF,d2
                jsr     (eraser).l
                btst    #1,(word_FFD42E).w
                bne.w   loc_F88F2
                bsr.w   sub_F8762
                bra.w   loc_F88FA
; ---------------------------------------------------------------------------
loc_F88F2:                              ; CODE XREF: sub_F8868+7E   j
                bsr.w   sub_F877E
                addq.w  #1,(word_FFD43E).w
loc_F88FA:                              ; CODE XREF: sub_F8868+86   j
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$79,d0 ; 'y'
                ori.b   #$FF,d6
                add.b   ,d2
                blt.w   loc_F8916
                clr.w   (word_FFD43E).w
loc_F8916:                              ; CODE XREF: sub_F8868+A6   j
                move.w  (HomeTeam).w,d0
                move.w  #$1D,(printx).w
                btst    #1,(word_FFD42E).w
                beq.w   loc_F8934
                move.w  (VisTeam).w,d0
                move.w  #4,(printx).w
loc_F8934:                              ; CODE XREF: sub_F8868+BE   j
                move.w  #6,(printy).w
                move.w  (word_FFD430).w,d4
                move.w  (word_FFD43E).w,d3
                mulu.w  #6,d3
                asl.w   #2,d0
                movea.l #(loc_F92F0+4),a0
                movea.l (a0,d0.w),a0
                move.w  4(a0,d3.w),(word_FFD434).w
                movea.l (a0,d3.w),a0
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                movea.l #unk_C63F8,a0
                adda.l  (a0),a0
                tst.l   (a2)
                bne.w   loc_F8980
                movea.l #unk_C63F8,a1
                adda.l  4(a1),a1
                tst.l   (a2)+
                bra.w   loc_F8982
; ---------------------------------------------------------------------------
loc_F8980:                              ; CODE XREF: sub_F8868+104   j
                adda.l  (a2)+,a1
loc_F8982:                              ; CODE XREF: sub_F8868+114   j
                bsr.w   sub_FE98A
                movea.l #$FFFFDA1E,a2
                move.w  (vcount).w,d3
loc_F8990:                              ; CODE XREF: sub_F8868+12C   j
                cmp.w   (vcount).w,d3
                beq.s   loc_F8990
                move.w  #6,d3
                move.w  #6,d2
                clr.w   d0
                clr.w   d1
                move.l  (dword_FFBD4A).w,-(sp)
                move.l  (dword_FFBD4E).w,-(sp)
                move.w  #2,d5
                jsr     (dobitmap).l
                move.l  (sp)+,(dword_FFBD4E).w
                move.l  (sp)+,(dword_FFBD4A).w
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$FC,d0
                bra.w   loc_F39F8
; End of function sub_F8868
; ---------------------------------------------------------------------------
                move.w  #3,(printx).w
                move.w  #$19,d0
                btst    #1,(word_FFD42E).w
                beq.w   loc_F89EC
                move.w  #$B,(printx).w
                move.w  #$19,d0
loc_F89EC:                              ; CODE XREF: ROM:000F89DE   j
                move.w  #5,(printy).w
                move.w  #8,d1
                move.w  (printx).w,(word_FFD442).w
                addq.w  #1,(word_FFD442).w
                move.w  (printy).w,(word_FFD444).w
                addq.w  #1,(word_FFD444).w
                jsr     (Framer).l
                move.w  (word_FFD442).w,(printx).w
                move.w  (word_FFD444).w,(printy).w
                move.w  #0,(printa).w
                move.w  #0,(printm).w
                move.w  (HomeTeam).w,d0
                btst    #1,(word_FFD42E).w
                beq.w   loc_F8A3A
                move.w  (VisTeam).w,d0
loc_F8A3A:                              ; CODE XREF: ROM:000F8A32   j
                move.w  d0,(word_FFD446).w
                movea.l #$30E,a2
                asl.w   #2,d0
                movea.l (a2,d0.w),a2
                adda.w  (a2),a2
                move.w  (word_FFD434).w,d0
                bra.w   loc_F8A58
; ---------------------------------------------------------------------------
loc_F8A54:                              ; CODE XREF: ROM:loc_F8A58   j
                adda.w  (a2),a2
                addq.w  #8,a2
loc_F8A58:                              ; CODE XREF: ROM:000F8A50   j
                dbf     d0,loc_F8A54
                movea.l #$FFFFBFA4,a3
                lea     2(a3),a1
                move.w  #6,(a3)
                move.l  a2,-(sp)
                adda.w  (a2),a2
                move.b  (a2),d0
                ext.w   d0
                jsr     (sub_18BDC).l
                move.w  #$2000,4(a3)
                movea.l (sp)+,a1
                jsr     (sub_11D9E).l
                movea.l a3,a1
                bset    #3,(word_FFC2F8).w
                jsr     (print2).l
                bclr    #3,(word_FFC2F8).w
                movea.l #$FFFFBFA4,a1
                move.w  (word_FFD446).w,d0
                move.w  (word_FFD434).w,d1
                tst.w   (word_FFD458).w
                bmi.w   loc_F8B4E
                jsr     (sub_F98C6).l
                cmpi.w  #2,(a1)
                beq.w   loc_F8B4E
                move.w  (word_FFD442).w,(printx).w
                addq.w  #2,(printy).w
                bset    #3,(word_FFC2F8).w
                jsr     (print2).l
                bclr    #3,(word_FFC2F8).w
                movea.l #$FFFFBFA4,a1
                move.w  (word_FFD446).w,d0
                move.w  (word_FFD434).w,d1
                movea.l #$FFFF0000,a0
                jsr     (sub_F9A64).l
                move.w  (word_FFD442).w,(printx).w
                cmpi.w  #2,(a1)
                beq.w   loc_F8B18
                addq.w  #1,(printy).w
                bset    #3,(word_FFC2F8).w
                jsr     (print2).l
                bclr    #3,(word_FFC2F8).w
loc_F8B18:                              ; CODE XREF: ROM:000F8AFE   j
                movea.l #$FFFFBFA4,a1
                move.w  (word_FFD446).w,d0
                move.w  (word_FFD434).w,d1
                movea.l #$FFFF0000,a0
                jsr     (sub_F9AAC).l
                move.w  (word_FFD442).w,(printx).w
                addq.w  #1,(printy).w
                bset    #3,(word_FFC2F8).w
                jsr     (print2).l
                bclr    #3,(word_FFC2F8).w
loc_F8B4E:                              ; CODE XREF: ROM:000F8AAC   j
                                        ; ROM:000F8ABA   j
                move.w  #$64,(palcount).w ; 'd'
                movem.l (sp)+,d0-d7/a0-a6
                rts


wallcollduringcheck:                    ; CODE XREF: CCStart+A6   p
                                        ; FallDown+10C   p
                tst.w   $34(a2)         ; check if goalie
                beq.w   _end
                movem.l d0-d7,-(sp)
                move.w  (a2),d2         ; Xpos of checking player
                move.w  $14(a2),d3      ; Ypos of checking player
                move.w  $4A(a2),(wcradiusx).w ; moves radiusX into FFBD22 (width of graphic)
                addi.w  #$17,(wcradiusx).l ; add $17 to BD22
                move.w  $4C(a2),(wcradiusy).w ; moves radiusY into FFBD24 (height of graphic)
                addi.w  #$17,(wcradiusy).l ; add $17 to BD24
                movem.l a0-a6,-(sp)
                exg     a2,a3           ; swap a2 and a3
                jsr     (checkwallcoll).l
                exg     a2,a3           ; swap a2 and a3
                movem.l (sp)+,a0-a6
                movem.l (sp)+,d0-d7
_end:                                   ; CODE XREF: wallcollduringcheck+4   j
                rts
; End of function wallcollduringcheck


; sets bit 5 of C2F8 if puck carrier is in the slot
setSlotBit:                             ; CODE XREF: Gameloop:loc_798A   p
                bclr    #5,(word_FFC2F8).w ; clears Slot Bit
                tst.w   (puckc).w
                bmi.w   _ex
                movem.l d0/a0,-(sp)
                movea.l #$FFFFB04A,a0   ; start of SCStructs
                move.w  (puckc).w,d0    ; move puckc SCnum into d0
                asl.w   #7,d0           ; mult by 128 decimal
                adda.w  d0,a0           ; move to start of puckc SCstruct
                move.w  $14(a0),d0      ; Ypos
                btst    #7,$62(a0)      ; pfgoal - which goal shooting at
                bne.w   _checkpos       ; jump if top goal
                neg.w   d0              ; negative d0
_checkpos:                              ; CODE XREF: setSlotBit+2A   j
                cmp.w   #$58,d0 ; 'X'   ; compare to blueline
                blt.w   _restore        ; branch if not in off zone
                cmpi.w  #$47,(a0) ; 'G' ; compare X position to $47
                bgt.w   _restore        ; branch if greater than 47
                cmpi.w  #$FFB9,(a0)     ; compare X position to -$47
                blt.w   _restore        ; branch if less than -47
                bset    #5,(word_FFC2F8).w ; set bit
_restore:                               ; CODE XREF: setSlotBit+34   j
                                        ; setSlotBit+3C   j ...
                movem.l (sp)+,d0/a0
_ex:                                    ; CODE XREF: setSlotBit+A   j
                rts
; End of function setSlotBit
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_F8F4C:                              ; CODE XREF: ROM:000F4BB4   j
                ori.b   #$22,a0 ; '"'
                andi.b  #$8E,-(a2)
                ori.w   #$EEE,a2
                ori.b   #$A8,d0
                addi.w  #$864,$22C(a6)
                addi.b  #8,$622(a2)
                andi.b  #$8E,-(a2)
                ori.b   #$E8,d6
                ori.b   #$AA,d0
                cmpi.l  #$2E0C60,d6
                        #$44
                bchg    #8,d0
                ori.b   #$EE,d6
                ori.b   #$AA,d0
                cmpi.l  #$2E0C60,d6
                        #$44
                bchg    #8,d0
                cas.l   d6,d0,$6A(a0)
                cas.l   d0,d0,$68A(a6)
                addi.l  #$4660244,a0
                andi.b  #$28,8(a4) ; '('
                eori.l  #unk_40EE8,$EE8(a2)
                cas.l   d6,d0,$6A(a0)
                cas.l   d0,d0,$68A(a6)
                addi.l  #$4660244,a0
                andi.b  #$28,8(a4) ; '('
                eori.l  #unk_40EE8,0(a2)
                ori.w   #$EE8,a2
                ori.b   #$CC,d0
                eori.l  #$46E006E,$888(a2)
                addi.w  #$2E,-(a6) ; '.'
                subi.w  #$EE8,d4
                ori.b   #$4A,d0 ; 'J'
                cas.l   d0,d0,$CCC(a6)
                eori.l  #$46E006E,$888(a2)
                addi.w  #$2E,-(a6) ; '.'
                subi.w  #$EE8,d4
                ori.b   #$8C,d0
                cas.l   d0,d0,$AAA(a6)
                addi.w  #$4EE,$464(a2)
                subi.w  #$2CE,d0
                andi.w  #$AEE,d4
                cas.l   d0,d0,$8C(a0)
                cas.l   d0,d0,$AAA(a6)
                addi.w  #$4EE,$464(a2)
                subi.w  #$2CE,d0
                andi.w  #$AEE,d4
                ori.b   #$E8,d6
                ori.b   #0,d0
                ori.b   #$44,a6 ; 'D'
                addi.b  #6,d0
                cas.l   d0,d0,$C00(a6)
                ori.b   #$44,a6 ; 'D'
                ori.b   #$60,d0 ; '`'
                cas.l   d0,d0,$860(a6)
                addi.w  #$888,d2
                cmpi.l  #$ACC02AE,$6E(a0)
                ori.w   #$46A,a0
                cas.l   d0,d0,$860(a0)
                cas.l   d0,d0,$860(a6)
                addi.w  #$888,d2
                cmpi.l  #$ACC02AE,$6E(a0)
                ori.w   #$46A,a0
                ori.w   #$EE8,$EE8(a2)
                cas.l   d0,d0,$602(a6)
                andi.w  #2,a4
                ori.b   #$68,-(a6) ; 'h'
                subi.b  #$6E,$EE8(a0) ; 'n'
                btst    #$6A,-(a2) ; 'j'
                cas.l   d0,d0,$602(a6)
                andi.w  #2,a4
                ori.b   #$68,-(a6) ; 'h'
                subi.b  #$6E,$EE8(a0) ; 'n'
                ori.b   #0,d0
                cas.l   d0,d0,$C86(a6)
                eori.l  #$C440822,d4
                eori.b  #$A8,d0
                cas.l   d0,d0,$600(a0)
                cas.l   d0,d0,$C86(a6)
                eori.l  #$C440822,d4
                eori.b  #$A8,d0
                addi.b  #-$18,d0
                ori.b   #$CA,d0
                eori.l  #$C660822,$CCC(a2)
                addi.b  #-$12,d0
                ori.b   #$CA,d0
                eori.l  #$C660822,$CCC(a2)
                cas.l   d0,d0,$8C(a0)
                cas.l   d0,d0,$CE(a6)
                ori.w   #$4E,$28(a2) ; 'N'
                ori.b   #$20,-(a2) ; ' '
                ori.l   #$88806CE,a6
                cas.l   d0,d0,$8C(a0)
                cas.l   d0,d0,$CE(a6)
                ori.w   #$4E,$28(a2) ; 'N'
                ori.b   #$20,-(a2) ; ' '
                ori.l   #$88806CE,a6
                cas.l   d6,d0,$600(a0)
                cas.l   d0,d0,$22C(a6)
                cmpi.l  #$EA8088E,d6
                        #$E8
                ori.b   #0,d6
                cas.l   d0,d0,$22C(a6)
                cmpi.l  #$EA8088E,d6
                        #$E8
                addi.b  #6,d0
                cas.l   d0,d0,$22C(a6)
                subi.b  #$AC,-(a2)
                addi.w  #$CAA,-(a6)
                subi.w  #$66E,d4
                andi.b  #$E8,-(a6)
                addi.b  #6,d0
                cas.l   d0,d0,$22C(a6)
                subi.b  #$AC,-(a2)
                addi.w  #$CAA,-(a6)
                subi.w  #$66E,d4
                andi.b  #$E8,-(a6)
                ori.b   #$4A,d0 ; 'J'
                cas.l   d0,d0,$688(a6)
                subi.w  #$244,-(a4)
                andi.b  #$4E,-(a2) ; 'N'
                ori.b   #$22,a2 ; '"'
                eori.l  #$EE8,$EE8(a2)
                cas.l   d0,d0,$4A(a0)
                cas.l   d0,d0,$688(a6)
                subi.w  #$244,-(a4)
                andi.b  #$4E,-(a2) ; 'N'
                ori.b   #$22,a2 ; '"'
                eori.l  #$EE8,0(a2)
                ori.w   #$EE8,a2
                ori.b   #$88,d0
                subi.w  #$244,-(a4)
                andi.b  #$4E,-(a2) ; 'N'
                ori.b   #$22,a2 ; '"'
                eori.l  #$EE8,$EE8(a2)
                cas.l   d0,d0,$4A(a0)
                cas.l   d0,d0,$688(a6)
                subi.w  #$244,-(a4)
                andi.b  #$4E,-(a2) ; 'N'
                ori.b   #$22,a2 ; '"'
loc_F92F0:                              ; DATA XREF: sub_F8868+E0   o
                eori.l  #$F,-$6C74(a2)
                ori.b   #$B4,sp
                ori.b   #$E2,sp
                ori.b   #$A,sp
loc_F9304:                              ; CODE XREF: ROM:000F936C   j
                ori.b   #$32,sp ; '2'
                ori.b   #$5A,sp ; 'Z'
loc_F930C:                              ; CODE XREF: ROM:000F9372   j
                ori.b   #$82,sp
                ori.b   #$AA,sp
                ori.b   #$64,sp ; 'd'
                ori.b   #$D2,sp
loc_F931C:                              ; CODE XREF: ROM:000F9384   j
                ori.b   #$FA,sp
                ori.b   #$28,sp ; '('
                ori.b   #$50,sp ; 'P'
                ori.b   #$78,sp ; 'x'
                ori.b   #$A0,sp
                ori.b   #$C8,sp
                ori.b   #$F0,sp
                ori.b   #$18,sp
                ori.b   #$4C,sp ; 'L'
loc_F9340:                              ; CODE XREF: ROM:000F93A6   j
                ori.b   #$74,sp ; 't'
                ori.b   #$9C,sp
                ori.b   #$C4,sp
                ori.b   #$EC,sp
                ori.b   #$14,sp
                ori.b   #$3C,sp ; '<'
                ori.b   #$6A,sp ; 'j'
                ori.b   #$92,sp
                ori.b   #$2C,sp ; ','
                ori.b   #$6C,a4 ; 'l'
                ori.b   #$C,d0
                bmi.s   loc_F9304+2
                ori.b   #$C,a5
                bmi.s   loc_F930C
                ori.b   #$C,a3
                bvc.s   loc_F93A8
                ori.b   #$C,d7
                bvc.s   loc_F93AE
                ori.b   #$C,d4
                bmi.s   loc_F931C+2
                ori.b   #0,d3
                ori.b   #$C,d0
                moveq   #$6C,d1 ; 'l'
                ori.b   #$C,d0
                bvc.s   loc_F93C4
                ori.b   #$C,a3
                bvc.s   loc_F93CA
                ori.b   #$C,a5
                bvc.s   loc_F93D0
                ori.b   #$C,d3
                bmi.s   loc_F9340
loc_F93A8:                              ; CODE XREF: ROM:000F9378   j
                ori.b   #$C,d5
                bvc.s   loc_F93DC
loc_F93AE:                              ; CODE XREF: ROM:000F937E   j
                ori.b   #0,d7
                ori.b   #$C,d0
                ori.b   #$C,d0
                or.b    (a4),d0
                ori.b   #$C,(a2)
loc_F93C4:                              ; CODE XREF: ROM:000F9394   j
                ori.b   #$C,(a1)
                or.w    ,d1
loc_F93CA:                              ; CODE XREF: ROM:000F939A   j
                ori.b   #$C,d6
                moveq   #$FFFFFFAA,d6
loc_F93D0:                              ; CODE XREF: ROM:000F93A0   j
                ori.b   #$C,d2
                divu.w  $B(a0),d3
                ori.b   #$98,a4
loc_F93DC:                              ; CODE XREF: ROM:000F93AC   j
                ori.b   #0,(a3)
                ori.b   #$C,d0
loc_F93E4:                              ; DATA XREF: ROM:loc_F93E4   r
                suba.l  loc_F93E4+2(pc),a3
                ori.b   #$90,a4
                ori.b   #$C,(a1)
                sub.w   d5,-(a4)
                ori.b   #$C,(a2)
                sub.b   d0,-(a6)
                ori.b   #$C,d4
                or.l    d6,#unk_3000C
                or.w    (a2),d5
                ori.b   #0,a4
                ori.b   #$C,d0
                suba.w  a6,sp
                ori.b   #$C,d0
                _PaintOne
                ori.b   #$C,sp
                _PortSize, autoPop
                ori.b   #$C,(a0)
                ori.b   #$C,d6
                _QDExtensions2, autoPop
                ori.b   #$C,d2
                ori.b   #0,a3
                ori.b   #$C,d0
                cmpm.w  (a2)+,(a1)+
                ori.b   #$C,d0
                mulu.w  $12(a2,d0.w),d0
                ori.b   #$88,a4
                ori.b   #$C,(a1)
                and.w   (a4)+,d2
                ori.b   #$C,d6
                cmp.l   2(a4,d0.w),d3
                ori.b   #$1E,a4
                ori.b   #0,a3
                ori.b   #$D,d0
                ori.b   #$D,d0
                move.w  d2,(a3)+
                ori.b   #$D,(a0)
                move.w  $11(a4),d5
                ori.b   #$96,a5
                ori.b   #$D,d3
                move.w  (a0)+,2(a1)
                ori.b   #0,a5
                ori.b   #0,a2
                ori.b   #$C,d0
                muls.w  d6,d3
                ori.b   #$C,d0
                add.w   d2,$12(a6)
                ori.b   #4,a4
                ori.b   #$C,(a1)
                and.l   (a2)+,d7
                ori.b   #$C,d3
                and.b   d5,2(a0,d0.w)
                ori.b   #$D8,a4
                ori.b   #0,a4
                ori.b   #$C,d0
                add.w   d2,d6
                ori.b   #$C,d0
                add.l   d7,$11(a4)
                ori.b   #$16,a4
loc_F94BA:                              ; CODE XREF: ROM:000F9520   j
                ori.b   #$C,(a2)
                asr.l   #3,d0
                ori.b   #$C,a0
                bfextu  $C(a2){0:2},d0
                bfffo   (a0,d0.w){0:14},d0
                ori.b   #$C,d0
                ori.b   #$C,d0
                ori.b   #$D,(a2)
                andi.w  #$13,$C(a4)
                ori.b   #$C,a0
                ori.b   #$C,d3
                ori.b   #0,a5
                ori.b   #$D,d0
                move.b  0(a6),(a5)+
                ori.b   #$1A,a5
                ori.b   #$D,(a0)
                move.l  d4,(a6)
                ori.b   #$D,(a1)
                movea.l d6,a1
                ori.b   #$D,d7
                move.b  (a4)+,(sp)+
                ori.b   #$D,d3
                move.l  $C(a0,d0.w),$C(a2,d0.w)
                bmi.s   loc_F94BA
                ori.b   #0,a5
                ori.b   #$D,d0
                neg.w   0(a2)
                ori.b   #$3E,a5 ; '>'
                ori.b   #$D,(a1)
                lea     (a4),a3
                ori.b   #$D,(a0)
                addq.w  #1
                ori.b   #$D,d6
                chk.l   (a4),d7
                ori.b   #$D,d2
                scs     $B(a0)
                ori.b   #0,d0
                ori.b   #$BC,a5
                ori.b   #$D,d0
                bra.s   loc_F9580
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_F9572:                              ; CODE XREF: ROM:000F95A2   j
                ori.b   #0,a4
                ori.b   #$D,d0
                move.b  (a4),d0
                ori.b   #$D,d0
loc_F9580:                              ; CODE XREF: ROM:000F9558   j
                move.b
                ori.b   #$D,(a2)
                move.b  $11(a0),(a3)+
                ori.b   #$40,a5 ; '@'
                ori.b   #$D,a0
                cmpi.l  #unk_2000D,$5D6(a2)
                ori.b   #0,d3
                ori.b   #$D,d0
                blt.s   loc_F9572
                ori.b   #$D,d0
                ori.b   #$D,(a2)
                ori.b   #$D,(a1)
                ori.b   #$D,d6
                ori.b   #$D,d2
                moveq   #$78,d4 ; 'x'
                ori.b   #0,a3
                ori.b   #$D,d0
                or.l    (a6,d0.w),d1
                ori.b   #$60,a5 ; '`'
                ori.b   #$D,(a3)
loc_F95D6:                              ; CODE XREF: ROM:000F963E   j
                divs.w  $12(a6,d0.w),d4
                ori.b   #$8C,a5
                ori.b   #$D,a1
                suba.w  a2,a0
                ori.b   #$D,d2
                sub.b   $E(a4,d0.w),d2
                ori.b   #0,d0
                ori.b   #$46,a5 ; 'F'
                ori.b   #$D,d0
                _FrameRoundRect
                ori.b   #$D,(a2)
                sub.w   $11(a2,d0.w),d7
                ori.b   #8,a5
                ori.b   #$D,d4
                sub.l   d3,(a6)+
                ori.b   #$D,d3
                ori.b   #0,a6
                ori.b   #$D,d0
                _HOpenResFile, autoPop
                ori.b   #$D,d0
                cmpa.l  d2,a4
                ori.b   #$D,(a0)
                eor.b   d6,$11(a4)
                ori.b   #$EE,a5
                ori.b   #$D,d6
                _slXMASK8, autoPop
                ori.b   #$D,d2
                cmp.w   (a0)+,d3
                ori.b   #$C,a2
                bmi.s   loc_F95D6+2
                ori.b   #$C,a3
                ble.s   loc_F9646+2
loc_F9646:                              ; CODE XREF: ROM:000F9644   j
                ori.b   #0,d1
                ori.b   #$D,d0
                and.l   (a6),d0
                ori.b   #$D,d0
                and.l   $12(a2),d7
                ori.b   #$D6,a5
                ori.b   #$D,(a1)
                exg     d5,d0
                ori.b   #$D,d2
                add.b   (a4),d1
                ori.b   #$D,a5
                and.w   $E(a4),d2
                ori.b   #0,d0
                ori.b   #$BC,a5
                ori.b   #$D,d0
                asl.b   d1,d6
                ori.b   #$D,(a1)
                adda.w  $10(a0),a4
                ori.b   #$90,a5
                ori.b   #$D,a1
                add.w   ,d2
                ori.b   #$D,d3
                add.w   (a2),d6
                ori.b   #0,a5
                ori.b   #$D,d0
                bfextu  loc_F96AC+3(pc){0:32},d0
                ori.b   #$D,(a0)
loc_F96AC:                              ; DATA XREF: ROM:000F969E   r
                ori.b   #$D,(a1)
                ori.b   #$D,a3
                asl.w   d6,d4
                ori.b   #$D,d2
                line_f  unk_FFFFFF,#$CE
                ori.b   #0,a4
                ori.b   #$E,d0
                bset    d0,-(a0)
                ori.b   #$E,d0
                movep.l $13(a2),d2
                ori.b   #$B4,a6
                ori.b   #$E,(a2)
                cmpi.b  #$B,(a6)+
                ori.b   #$76,a5 ; 'v'
                ori.b   #$E,d3
                movep.w d7,4(a0)
                ori.b   #0,d0
                ori.b   #$F2,a6
                ori.b   #$E,d0
                move.b  $12(a0,d0.w),-(a6)
                ori.b   #$9A,a6
                ori.b   #$E,(a1)
                move.l  d4,d2
                ori.b   #$E,a0
                ori.b   #$E,d3
                ori.b   #0,a4
                ori.b   #$E,d0
                move.l  a2,d4
                ori.b   #$E,d0
                move.w  $12(a2,d0.w),$E(a2,d0.w)
                movea.w a0,a1
                ori.b   #$E,(a1)
                move.l  6(a4,d0.w),$E(a5)
                move.w  (a4)+,-(a4)
                ori.b   #$E,d2
                move.l  (a6)+,(sp)+
                ori.b   #0,a4
                ori.b   #$E,d0
                move.w  d6,(a6)
                ori.b   #$E,d0
                chk.w   (a0)+,d6
                ori.b   #$E,(a1)
                tst.b   $10(a6)
loc_F974E:                              ; CODE XREF: ROM:000F9784   j
                ori.b   #$5A,a6 ; 'Z'
                ori.b   #$E,d3
                ori.b   #$E,d2
                move    d4,sr
                ori.b   #$C,a3
                bvc.s   loc_F9792
                ori.b   #0,(a2)
                ori.b   #$E,d0
                subq.w  #5,d0
                ori.b   #$E,d0
                addq.l  #7,$12(a2)
                ori.b   #$D6,a6
                ori.b   #$E,(a1)
                subq.b  #8,d2
                ori.b   #$E,d3
                bhi.s   loc_F974E
                ori.b   #$E,d2
                addq.w  #2,$C(a4)
                ori.b   #0,d0
loc_F9792:                              ; CODE XREF: ROM:000F9762   j
                                        ; ROM:000F97FA   j
                ori.b   #$6A,a5 ; 'j'
                ori.b   #$C,d0
                ori.b   #$D,(a2)
                cmpa.l  d2,a4
                ori.b   #$C,(a1)
                moveq   #$FFFFFFAA,d6
                ori.b   #$D,d6
                _slXMASK8, autoPop
                ori.b   #$C,d3
                or.w    (a2),d5
                ori.b   #$C,sp
loc_F97B8:                              ; DATA XREF: ROM:loc_F97B8   r
                suba.l  loc_F97B8+3(pc),a3
loc_F97BC:                              ; CODE XREF: ROM:000F9824   j
                ori.b   #$1A,a5
                ori.b   #$D,d2
                ori.b   #$D,d4
                chk.l   (a4),d7
                ori.b   #$D,d5
                exg     d5,d0
                ori.b   #$D,d7
                cmpi.l  #unk_8000C,-$7244(a2)
                ori.b   #$D,a1
                cmpa.w  $A(a6),a1
                ori.b   #$58,a5 ; 'X'
                ori.b   #$E,a3
                move    d4,sr
                ori.b   #$D,a4
                moveq   #$78,d4 ; 'x'
                ori.b   #$C,a5
                bmi.s   loc_F9792+2
                ori.b   #$D,a6
                ori.b   #$D,(a0)
                ori.b   #$D,(a3)
                muls.w  (a6),d3
                ori.b   #$E,(a4)
                chk.w   (a0)+,d6
                ori.b   #$D,(a5)
                subq.w  #4,(a2)
                ori.b   #$C,(a6)
                ori.b   #$C,(sp)
                bmi.s   loc_F97BC+2
                ori.b   #0,(a0)+
                ori.b   #$C,d0
                cmpm.w  (a2)+,(a1)+
                ori.b   #$C,d0
loc_F9834:                              ; CODE XREF: ROM:000F989A   j
                add.b   d4,d1
                ori.b   #$E,(a3)
                seq     (a6)
                ori.b   #$D,(a5)
                movea.l d6,a1
                ori.b   #$C,a2
                and.b   d5,3(a0,d0.w)
                ori.b   #$6C,a6 ; 'l'
                ori.b   #$C,a6
                muls.w  d6,d3
                ori.b   #$E,d1
                move.b  2(a2,d0.w),(a1)+
                ori.b   #$58,a5 ; 'X'
                ori.b   #$C,d4
                cmp.l   5(a4,d0.w),d3
                ori.b   #$76,a5 ; 'v'
                ori.b   #$E,d6
                ori.b   #$D,d7
                move.b  (a4)+,(sp)+
                ori.b   #$C,a0
                ori.b   #$C,a1
                ori.b   #$D,a3
                line_f  unk_FFFFFF,#$CE
                ori.b   #$E,a4
                move.l  (a6)+,(sp)+
                ori.b   #$D,a5
                add.w   (a2),d6
                ori.b   #$C,sp
                bmi.s   loc_F9834
                ori.b   #$C,(a0)
                _PaintOne
                ori.b   #$D,(a1)
                ori.b   #$C,(a2)
                cmpm.l  (a0)+,(a6)+
                ori.b   #$C,(a4)
                add.l   d7,$16(a4)
                ori.b   #$F2,a4
                ori.b   #$C,(sp)
                add.w   d2,$18(a6)
                ori.b   #0,d0


sub_F98C6:                              ; CODE XREF: ROM:000F8AB0   p
                movem.l d0-d7/a1-a6,-(sp)
                move.l  a1,-(sp)
                movea.l a1,a3
                movea.l #unk_F9950,a1
                movem.l d0-d1,-(sp)
                bsr.w   sub_F997A
                movem.l (sp)+,d0-d1
                bsr.w   sub_F99F2
                tst.w   d0
                bne.w   loc_F98F4
                movea.l (sp)+,a1
                move.w  #2,(a1)
                bra.w   loc_F994A
; ---------------------------------------------------------------------------
loc_F98F4:                              ; CODE XREF: sub_F98C6+20   j
                movea.l #$FFFFBF20,a1
                move.w  d0,(word_FFBF14).w
                bsr.w   sub_F998E
                movea.l (sp),a3
                movea.l #$FFFFBF20,a1
                jsr     (sub_11D9E).l
                move.w  (word_FFBF14).w,d0
                movea.l #unk_F996A,a1
                cmp.w   #1,d0
                bne.w   loc_F9928
                movea.l #unk_F9972,a1
loc_F9928:                              ; CODE XREF: sub_F98C6+58   j
                tst.w   d1
                bne.w   loc_F9942
                movea.l #unk_F995A,a1
                cmp.w   #1,d0
                bne.w   loc_F9942
                movea.l #unk_F9962,a1
loc_F9942:                              ; CODE XREF: sub_F98C6+64   j
                                        ; sub_F98C6+72   j
                movea.l (sp)+,a3
                jsr     (sub_11D9E).l
loc_F994A:                              ; CODE XREF: sub_F98C6+2A   j
                movem.l (sp)+,d0-d7/a1-a6
                rts
; End of function sub_F98C6
; ---------------------------------------------------------------------------


sub_F997A:                              ; CODE XREF: sub_F98C6+12   p
                                        ; sub_F9A64+12   p ...
                movem.l d0,-(sp)
                move.w  (a1),d0
                subq.w  #1,d0
loc_F9982:                              ; CODE XREF: sub_F997A+A   j
                move.b  (a1)+,(a3)+
                dbf     d0,loc_F9982
                movem.l (sp)+,d0
                rts
; End of function sub_F997A


sub_F998E:                              ; CODE XREF: sub_F98C6+38   p
                                        ; sub_FA75C+72   p ...
                movem.w d0-d6/a0,-(sp)
                move.l  a1,-(sp)
                move.w  d0,d6
                addq.l  #2,a1
                clr.w   d1
                ext.l   d0
                divu.w  #$64,d0 ; 'd'
                tst.w   d0
                beq.w   loc_F99AE
                addi.w  #$30,d0 ; '0'
                move.b  d0,(a1)+
                addq.w  #1,d1
loc_F99AE:                              ; CODE XREF: sub_F998E+14   j
                swap    d0
                ext.l   d0
                divu.w  #$A,d0
                addi.w  #$30,d0 ; '0'
                cmp.b   #$30,d0 ; '0'
                bne.w   loc_F99CA
                cmp.w   #$A,d6
                blt.w   loc_F99CE
loc_F99CA:                              ; CODE XREF: sub_F998E+30   j
                move.b  d0,(a1)+
                addq.w  #1,d1
loc_F99CE:                              ; CODE XREF: sub_F998E+38   j
                swap    d0
                addi.w  #$30,d0 ; '0'
                move.b  d0,(a1)+
                addq.w  #1,d1
                btst    #0,d1
                beq.w   loc_F99E6
                move.b  #0,(a1)+
                addq.w  #1,d1
loc_F99E6:                              ; CODE XREF: sub_F998E+4E   j
                movea.l (sp)+,a0
                addq.w  #2,d1
                move.w  d1,(a0)
                movem.w (sp)+,d0-d6/a0
                rts
; End of function sub_F998E


sub_F99F2:                              ; CODE XREF: sub_F98C6+1A   p
                movem.l d2-d7/a0-a6,-(sp)
                move.w  d0,-(sp)
                movea.l #$30E,a2
                asl.w   #2,d0
                movea.l (a2,d0.w),a2
                adda.w  (a2),a2
                move.w  d1,d0
                bra.w   loc_F9A10
; ---------------------------------------------------------------------------
loc_F9A0C:                              ; CODE XREF: sub_F99F2:loc_F9A10   j
                adda.w  (a2),a2
                addq.w  #8,a2
loc_F9A10:                              ; CODE XREF: sub_F99F2+16   j
                dbf     d0,loc_F9A0C
                move.w  d1,d0
                move.w  (sp)+,d1
                move.w  d0,d5
                move.w  d1,d4
                ext.l   d0
                movea.l #$FFFF0000,a0
                bsr.w   sub_F9B94
                move.b  (a0),d0
                ext.w   d0
                movea.l #$30E,a5
                asl.w   #2,d4
                movea.l (a5,d4.w),a5
                adda.w  $A(a5),a5
                move.w  (a5),d1
                movem.w d0,-(sp)
                clr.w   d0
loc_F9A44:                              ; CODE XREF: sub_F99F2+56   j
                addq.w  #1,d0
                asl.w   #4,d1
                bne.s   loc_F9A44
                cmp.w   d5,d0
                movem.w (sp)+,d0
                bgt.w   loc_F9A5A
                clr.w   d1
                bra.w   loc_F9A5E
; ---------------------------------------------------------------------------
loc_F9A5A:                              ; CODE XREF: sub_F99F2+5E   j
                move.w  #1,d1
loc_F9A5E:                              ; CODE XREF: sub_F99F2+64   j
                movem.l (sp)+,d2-d7/a0-a6
                rts
; End of function sub_F99F2


sub_F9A64:                              ; CODE XREF: ROM:000F8AEE   p
                movem.l d0-d7/a1-a6,-(sp)
                move.l  a1,-(sp)
                movea.l a1,a3
                movea.l #unk_F9AA6,a1
                movem.l d0-d1,-(sp)
                bsr.w   sub_F997A
                movem.l (sp)+,d0-d1
                movea.l #$FFFFBF20,a1
                bsr.w   sub_F9AE4
                movea.l (sp)+,a3
                cmpi.w  #2,(a1)
                bne.w   loc_F9A9A
                move.w  #2,(a3)
                bra.w   loc_F9AA0
; ---------------------------------------------------------------------------
loc_F9A9A:                              ; CODE XREF: sub_F9A64+2A   j
                jsr     (sub_11D9E).l
loc_F9AA0:                              ; CODE XREF: sub_F9A64+32   j
                movem.l (sp)+,d0-d7/a1-a6
                rts
; End of function sub_F9A64
; ---------------------------------------------------------------------------


sub_F9AAC:                              ; CODE XREF: ROM:000F8B2C   p
                movem.l d0-d7/a1-a6,-(sp)
                move.l  a1,-(sp)
                movea.l a1,a3
                movea.l #unk_F9ADE,a1
                movem.l d0-d1,-(sp)
                bsr.w   sub_F997A
                movem.l (sp)+,d0-d1
                movea.l #$FFFFBF20,a1
                bsr.w   sub_F9B2A
                movea.l (sp)+,a3
                jsr     (sub_11D9E).l
                movem.l (sp)+,d0-d7/a1-a6
                rts
; End of function sub_F9AAC
; ---------------------------------------------------------------------------


sub_F9AE4:                              ; CODE XREF: sub_F9A64+20   p
                movem.l d0-d7/a1-a2,-(sp)
                cmpa.l  #0,a0
                bne.w   loc_F9B14
                movem.l d0-d7/a1-a6,-(sp)
                move.w  d0,-(sp)
                move.w  d1,d0
                move.w  (sp)+,d1
                ext.l   d1
                ext.l   d0
                movea.l #$FFFF0000,a0
                bsr.w   sub_F9B94
                movea.l #$FFFF0000,a0
                movem.l (sp)+,d0-d7/a1-a6
loc_F9B14:                              ; CODE XREF: sub_F9AE4+A   j
                move.b  1(a0),d2
                ext.w   d2
                bset    #7,(word_FFC2F8).w
                bsr.w   sub_FA014
                movem.l (sp)+,d0-d7/a1-a2
                rts
; End of function sub_F9AE4


sub_F9B2A:                              ; CODE XREF: sub_F9AAC+20   p
                movem.l d0-d7/a0-a6,-(sp)
                cmpa.l  #0,a0
                bne.w   loc_F9B5A
                movem.l d0-d7/a1-a6,-(sp)
                move.w  d0,-(sp)
                move.w  d1,d0
                move.w  (sp)+,d1
                ext.l   d1
                ext.l   d0
                movea.l #$FFFF0000,a0
                bsr.w   sub_F9B94
                movea.l #$FFFF0000,a0
                movem.l (sp)+,d0-d7/a1-a6
loc_F9B5A:                              ; CODE XREF: sub_F9B2A+A   j
                move.b  3(a0),d2
                ext.w   d2
                movem.l d0/a1,-(sp)
                bset    #7,(word_FFC2F8).w
                bsr.w   sub_FA014
                movea.l a1,a3
                movea.l #unk_F9B90,a1
                jsr     (sub_11D9E).l
                movem.l (sp)+,d0/a1
                move.b  2(a0),d0
                jsr     (sub_FA880).l
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_F9B2A
; ---------------------------------------------------------------------------


sub_F9B94:                              ; CODE XREF: sub_F99F2+32   p
                                        ; sub_F9AE4+22   p ...
                bclr    #6,(word_FFC2F8).w
loc_F9B9A:                              ; CODE XREF: sub_F9BDA+6   j
                movem.l d0-d1/a0-a1,-(sp)
                asl.l   #2,d0
                addi.l  #0,d0
                movea.l #unk_F9CA4,a1
                add.w   d1,d1
                move.w  (a1,d1.w),d1
                asl.w   #2,d1
                ext.l   d1
                add.l   d1,d0
                moveq   #4,d1
                btst    #6,(word_FFC2F8).w
                beq.w   loc_F9BCE
                jsr     (sub_1A1E4).l
                bra.w   loc_F9BD4
; ---------------------------------------------------------------------------
loc_F9BCE:                              ; CODE XREF: sub_F9B94+2C   j
                jsr     (sub_1A244).l
loc_F9BD4:                              ; CODE XREF: sub_F9B94+36   j
                movem.l (sp)+,d0-d1/a0-a1
                rts
; End of function sub_F9B94


sub_F9BDA:                              ; CODE XREF: sub_F9F50+64   p
                bset    #6,(word_FFC2F8).w
                bra.s   loc_F9B9A
; End of function sub_F9BDA


clrCrowdRAM?:                           ; CODE XREF: sub_9A84+7E   p
                                        ; sub_9B4A+16   p ...
                bclr    #6,(word_FFC2F8).w
loc_F9BE8:                              ; CODE XREF: sub_F9C18+6   j
                movem.l d0-d1/a0-a1,-(sp)
                move.l  d1,d0
                asl.w   #4,d0
                addi.l  #$B60,d0
                moveq   #$10,d1
                btst    #6,(word_FFC2F8).w
                beq.w   loc_F9C0C
                jsr     (sub_1A1E4).l
                bra.w   loc_F9C12
; ---------------------------------------------------------------------------
loc_F9C0C:                              ; CODE XREF: clrCrowdRAM?+1C   j
                jsr     (sub_1A244).l
loc_F9C12:                              ; CODE XREF: clrCrowdRAM?+26   j
                movem.l (sp)+,d0-d1/a0-a1
                rts
; End of function clrCrowdRAM?


sub_F9C18:                              ; CODE XREF: sub_F9EAA+9C   p
                bset    #6,(word_FFC2F8).w
                bra.s   loc_F9BE8
; End of function sub_F9C18


sub_F9C20:                              ; CODE XREF: sub_F9DDA+4   p
                bclr    #6,(word_FFC2F8).w
loc_F9C26:                              ; CODE XREF: sub_F9C56+6   j
                movem.l d0-d1/a0-a1,-(sp)
                move.l  d1,d0
                asl.w   #4,d0
                addi.l  #$D20,d0
                moveq   #$10,d1
                btst    #6,(word_FFC2F8).w
                beq.w   loc_F9C4A
                jsr     (sub_1A1E4).l
                bra.w   loc_F9C50
; ---------------------------------------------------------------------------
loc_F9C4A:                              ; CODE XREF: sub_F9C20+1C   j
                jsr     (sub_1A244).l
loc_F9C50:                              ; CODE XREF: sub_F9C20+26   j
                movem.l (sp)+,d0-d1/a0-a1
                rts
; End of function sub_F9C20


sub_F9C56:                              ; CODE XREF: sub_F9DDA:loc_F9EA0   p
                bset    #6,(word_FFC2F8).w
                bra.s   loc_F9C26
; End of function sub_F9C56


sub_F9C5E:                              ; CODE XREF: sub_FB9D4+68   p
                bset    #6,(word_FFC2F8).w
                bra.w   loc_F9C6E
; End of function sub_F9C5E


sub_F9C68:                              ; CODE XREF: sub_F739E+2A   p
                                        ; ROM:000FB214   p ...
                bclr    #6,(word_FFC2F8).w
loc_F9C6E:                              ; CODE XREF: sub_F9C5E+6   j
                movem.l d0-d7/a0-a6,-(sp)
                move.l  #$80,d1
                move.l  #$DA0,d0
                movea.l #$FFFFD45A,a0
                btst    #6,(word_FFC2F8).w
                beq.w   loc_F9C98
                jsr     (sub_1A1E4).l
                bra.w   loc_F9C9E
; ---------------------------------------------------------------------------
loc_F9C98:                              ; CODE XREF: sub_F9C68+22   j
                jsr     (sub_1A244).l
loc_F9C9E:                              ; CODE XREF: sub_F9C68+2C   j
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_F9C68
; ---------------------------------------------------------------------------


sub_F9CDE:                              ; CODE XREF: sub_130E6+10   p
                tst.w   (word_FFD458).w
                bmi.w   locret_F9DD8
                tst.w   (OptUserRec).w
                bne.w   locret_F9DD8
                movem.l d0-d7/a0-a6,-(sp)
                bsr.w   sub_F9FC0
                bsr.w   sub_F9FEA
                move.w  (HomeTeam).w,d1
                ext.l   d1
                movea.l #$FFFFCF36,a0
                movea.l #$FFFFC6CE,a2
                move.w  (word_FFD448).w,d5
                move.w  (VisTeam).w,d6
                bsr.w   sub_F9F50
                move.w  (VisTeam).w,d1
                ext.l   d1
                movea.l #$FFFFCA32,a2
                move.w  (word_FFD44A).w,d5
                move.w  (HomeTeam).w,d6
                bsr.w   sub_F9F50
                clr.w   d7
                movea.l #$FFFFC6CE,a1
                move.w  (word_FFD042).w,d4
                move.w  (word_FFD044).w,d5
                move.w  (HomeTeam).w,d1
                move.w  (VisTeam).w,d2
                move.w  (word_FFD448).w,d6
                ext.l   d1
                movea.l #$FFFFCF36,a0
                bsr.w   sub_F9EAA
                movea.l #$FFFFCA32,a1
                move.w  (word_FFD044).w,d4
                move.w  (word_FFD042).w,d5
                move.w  (VisTeam).w,d1
                move.w  (HomeTeam).w,d2
                move.w  (word_FFD44A).w,d6
                ext.l   d1
                movea.l #$FFFFCF36,a0
                bsr.w   sub_F9EAA
                movea.l #$FFFFCF36,a0
                move.w  (word_FFD042).w,d1
                ext.l   d1
                move.w  (word_FFD044).w,d2
                move.w  (HomeTeam).w,d3
                move.w  (VisTeam).w,d4
                movea.l #$FFFFC6CE,a1
                movea.l #$FFFFCA32,a2
                bsr.w   sub_F9DDA
                movea.l #$FFFFCF36,a0
                move.w  (word_FFD044).w,d1
                ext.l   d1
                move.w  (word_FFD042).w,d2
                move.w  (VisTeam).w,d3
                move.w  (HomeTeam).w,d4
                movea.l #$FFFFCA32,a1
                movea.l #$FFFFC6CE,a2
                bsr.w   sub_F9DDA
                jsr     (sub_1A206).l
                movem.l (sp)+,d0-d7/a0-a6
locret_F9DD8:                           ; CODE XREF: sub_F9CDE+4   j
                                        ; sub_F9CDE+C   j
                rts
; End of function sub_F9CDE


sub_F9DDA:                              ; CODE XREF: sub_F9CDE+C4   p
                                        ; sub_F9CDE+EC   p
                movem.l d0-d7/a0-a6,-(sp)
                bsr.w   sub_F9C20
                st      d7
                movem.w d0,-(sp)
                clr.w   d0
                move.b  $A(a0),d0
                lsl.w   #8,d0
                move.b  $B(a0),d0
                cmp.w   #$2328,d0
                bge.w   loc_F9E4C
                addq.w  #1,d0
                move.b  d0,$B(a0)
                lsr.w   #8,d0
                move.b  d0,$A(a0)
                move.w  $C(a1),d0
                cmp.w   $C(a2),d0
                bgt.w   loc_F9E34
                blt.w   loc_F9E4C
                clr.w   d0
                move.b  $C(a0),d0
                lsl.w   #8,d0
                move.b  $D(a0),d0
                addq.w  #1,d0
                move.b  d0,$D(a0)
                lsr.w   #8,d0
                move.b  d0,$C(a0)
                bra.w   loc_F9E4C
; ---------------------------------------------------------------------------
loc_F9E34:                              ; CODE XREF: sub_F9DDA+36   j
                clr.w   d0
                move.b  8(a0),d0
                lsl.w   #8,d0
                move.b  9(a0),d0
                addq.w  #1,d0
                move.b  d0,9(a0)
                lsr.w   #8,d0
                move.b  d0,8(a0)
loc_F9E4C:                              ; CODE XREF: sub_F9DDA+1E   j
                                        ; sub_F9DDA+3A   j ...
                movem.w (sp)+,d0
                movem.w d0,-(sp)
                move.w  $C(a1),d0
                cmp.w   $C(a2),d0
                movem.w (sp)+,d0
                ble.w   loc_F9EA0
                move.w  $C(a1),d5
                cmp.b   (a0),d5
                ble.w   loc_F9E7E
                st      d7
                move.b  d5,(a0)
                move.b  d3,1(a0)
                move.b  d4,2(a0)
                move.b  d2,3(a0)
loc_F9E7E:                              ; CODE XREF: sub_F9DDA+90   j
                move.w  $C(a2),d5
                move.w  (a2),d6
                sub.w   d5,d6
                cmp.b   4(a0),d6
                ble.w   loc_F9EA0
                st      d7
                move.b  d6,4(a0)
                move.b  d3,5(a0)
                move.b  d4,6(a0)
                move.b  d2,7(a0)
loc_F9EA0:                              ; CODE XREF: sub_F9DDA+86   j
                                        ; sub_F9DDA+B0   j
                bsr.w   sub_F9C56
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_F9DDA


sub_F9EAA:                              ; CODE XREF: sub_F9CDE+76   p
                                        ; sub_F9CDE+9C   p
                movem.l d0-d7/a0-a6,-(sp)
                bsr.w   clrCrowdRAM?
                move.w  $C(a1),d3
                cmp.b   (a0),d3
                ble.w   loc_F9ECC
                move.b  d3,(a0)
                move.b  d4,1(a0)
                move.b  d5,3(a0)
                move.b  d2,2(a0)
                st      d7
loc_F9ECC:                              ; CODE XREF: sub_F9EAA+E   j
                subq.w  #1,d6
                clr.w   d3
loc_F9ED0:                              ; CODE XREF: sub_F9EAA:loc_F9EF4   j
                move.w  d6,d0
                addi.w  #$E8,d0
                move.b  (a1,d0.w),(word_FFBF12).w
                addi.w  #-$34,d0
                move.b  (a1,d0.w),d0
                sub.b   d0,(word_FFBF12).w
                cmp.b   (word_FFBF12).w,d3
                bge.w   loc_F9EF4
                move.b  (word_FFBF12).w,d3
loc_F9EF4:                              ; CODE XREF: sub_F9EAA+42   j
                dbf     d6,loc_F9ED0
                cmp.b   4(a0),d3
                ble.w   loc_F9F12
                st      d7
                move.b  d3,4(a0)
                move.b  d4,5(a0)
                move.b  d5,7(a0)
                move.b  d2,6(a0)
loc_F9F12:                              ; CODE XREF: sub_F9EAA+52   j
                cmp.w   (HomeTeam).w,d1
                bne.w   loc_F9F40
                move.b  8(a0),d3
                andi.w  #$FF,d3
                cmp.w   (CrowdPeak).w,d3
                bge.w   loc_F9F40
                move.w  (CrowdPeak).w,d3
                st      d7
                move.b  d3,8(a0)
                move.b  d4,9(a0)
                move.b  d5,$B(a0)
                move.b  d2,$A(a0)
loc_F9F40:                              ; CODE XREF: sub_F9EAA+6C   j
                                        ; sub_F9EAA+7C   j
                tst.w   d7
                beq.w   loc_F9F4A
                bsr.w   sub_F9C18
loc_F9F4A:                              ; CODE XREF: sub_F9EAA+98   j
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_F9EAA


sub_F9F50:                              ; CODE XREF: sub_F9CDE+36   p
                                        ; sub_F9CDE+4E   p
                clr.l   d0
                move.w  #$19,d2
loc_F9F56:                              ; CODE XREF: sub_F9F50+6A   j
                bsr.w   sub_F9B94
                cmp.w   d5,d0
                blt.w   loc_F9F70
                move.w  d0,-(sp)
                addi.w  #$B4,d0
                move.b  (a2,d0.w),d4
                move.w  (sp)+,d0
                bra.w   loc_F9F84
; ---------------------------------------------------------------------------
loc_F9F70:                              ; CODE XREF: sub_F9F50+C   j
                move.w  d0,-(sp)
                addi.w  #$E8,d0
                move.b  (a2,d0.w),d4
                addi.w  #-$34,d0
                sub.b   (a2,d0.w),d4
                move.w  (sp)+,d0
loc_F9F84:                              ; CODE XREF: sub_F9F50+1C   j
                move.b  (a0),d3
                cmp.b   d3,d4
                ble.w   loc_F9FB8
                move.b  d4,(a0)
                move.b  (word_FFD042+1).w,1(a0)
                move.b  (word_FFD044+1).w,3(a0)
                cmpa.l  #$FFFFC6CE,a2
                beq.w   loc_F9FB0
                move.b  (word_FFD044+1).w,1(a0)
                move.b  (word_FFD042+1).w,3(a0)
loc_F9FB0:                              ; CODE XREF: sub_F9F50+50   j
                move.b  d6,2(a0)
                bsr.w   sub_F9BDA
loc_F9FB8:                              ; CODE XREF: sub_F9F50+38   j
                addq.w  #1,d0
                dbf     d2,loc_F9F56
                rts
; End of function sub_F9F50


sub_F9FC0:                              ; CODE XREF: ROM:000188F2   p
                                        ; sub_F9CDE+14   p ...
                movem.l d0-d7/a0-a6,-(sp)
                movea.l #$FFFFC6CE,a2
                jsr     (sub_9F40).l
                move.w  d0,(word_FFD448).w
                movea.l #$FFFFCA32,a2
                jsr     (sub_9F40).l
                move.w  d0,(word_FFD44A).w
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_F9FC0


sub_F9FEA:                              ; CODE XREF: sub_F9CDE+18   p
                                        ; ROM:000FA0E0   p
                movem.l d0-d7/a0-a6,-(sp)
                movea.l #$FFFFC6CE,a2
                jsr     (sub_9F9A).l
                move.w  d0,(word_FFD44C).w
                movea.l #$FFFFCA32,a2
                jsr     (sub_9F9A).l
                move.w  d0,(word_FFD44E).w
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_F9FEA


sub_FA014:                              ; CODE XREF: sub_F9AE4+3C   p
                                        ; sub_F9B2A+40   p ...
                movem.l d0-d3/a0-a3,-(sp)
                movea.l a1,a2
                tst.w   d2
                beq.w   loc_FA060
                move.w  #$B,d0
                clr.w   d3
                movea.l #$FFFFD45A,a0
                mulu.w  #$C,d2
                adda.l  d2,a0
loc_FA032:                              ; CODE XREF: sub_FA014+32   j
                move.b  (a0,d3.w),d1
                bne.w   loc_FA03E
                move.b  #$20,d1 ; ' '
loc_FA03E:                              ; CODE XREF: sub_FA014+22   j
                move.b  d1,2(a1)
                tst.b   (a1)+
                addq.w  #1,d3
                dbf     d0,loc_FA032
                move.w  #$E,(a2)
                btst    #7,(word_FFC2F8).w
                beq.w   loc_FA05C
                bsr.w   sub_FAF66
loc_FA05C:                              ; CODE XREF: sub_FA014+40   j
                bra.w   loc_FA076
; ---------------------------------------------------------------------------
loc_FA060:                              ; CODE XREF: sub_FA014+8   j
                movea.l a1,a3
                move.l  a3,-(sp)
                movea.l #unk_FA07C,a1
                jsr     (sub_F997A).l
                movea.l (sp)+,a2
                bsr.w   sub_FAF66
loc_FA076:                              ; CODE XREF: sub_FA014:loc_FA05C   j
                movem.l (sp)+,d0-d3/a0-a3
                rts
; End of function sub_FA014
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
                tst.w   (word_FFD458).w
                bpl.w   loc_FA088
                rts
; ---------------------------------------------------------------------------
loc_FA088:                              ; CODE XREF: ROM:000FA082   j
                movem.l d0-d7/a0-a6,-(sp)
                jsr     (forceblack).l
                bclr    #0,(disflags).w
                move.w  (disflags).w,-(sp)
                bset    #2,(disflags).w
                move.w  (VSPRITES).w,d0
                jsr     (Vmaddr).l
                move.l  #0,(a0)
                move.w  #$8C81,4(a0)
                move.w  #6,(Map3col1).w
                move.w  #$8D00,4(a0)
                clr.w   d0
                jsr     (Vmaddr).l
                move.l  #0,(a0)
                move.w  (sp)+,(disflags).w
                bclr    #1,(disflags).w
                bsr.w   sub_F9FC0
                bsr.w   sub_F9FEA
                move.w  (word_FFB012).w,d4
                movea.l #unk_AAC5A,a2
                jsr     (sub_1172C).l
                btst    d2,-(a3)
                or.l    d4,-$3211(a3)
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$7C,d0 ; '|'
                ori.b   #$32,a6 ; '2'
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                clr.w   d1
                clr.w   d0
                moveq   #$28,d2 ; '('
                move.w  #$1C,d3
                moveq   #$D,d5
                move.w  #1,d4
                jsr     (dobitmap).l
                move.w  d4,(word_FFD450).w
                addi.w  #$24,d4 ; '$'
                move.w  d4,(word_FFD452).w
                addi.w  #$24,d4 ; '$'
                move.w  d4,-(sp)
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$40,d0 ; '@'
                moveq   #$20,d1 ; ' '
                move.w  #$7FF,d2
                jsr     (eraser).l
                move.w  (sp)+,d4
                jsr     (printz).l
                ori.b   #1,d6
                btst    d0,d0
                movea.l #unk_E9A80,a0
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                clr.w   d1
                clr.w   d0
                moveq   #6,d2
                move.w  #6,d3
                moveq   #8,d5
                jsr     (dobitmap).l
                jsr     (printz).l
                ori.b   #$21,d6 ; '!'
                btst    d0,d0
                movea.l #unk_E9ED6,a0
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                clr.w   d1
                clr.w   d0
                moveq   #6,d2
                move.w  #6,d3
                moveq   #0,d5
                jsr     (dobitmap).l
                bsr.w   sub_FAFBA
                move.w  #$18,(palcount).w
                clr.w   (word_FFD4F0).w
                clr.w   (word_FFD4F2).w
                tst.w   (FourWayPlay).w
                beq.w   loc_FA1DA
                cmpi.w  #3,(word_FFC316).w
                beq.w   loc_FA1EC
                bra.w   loc_FA1E4
; ---------------------------------------------------------------------------
loc_FA1DA:                              ; CODE XREF: ROM:000FA1C8   j
                btst    #1,(sflags).w
                beq.w   loc_FA1EC
loc_FA1E4:                              ; CODE XREF: ROM:000FA1D6   j
                move.w  (cont2team).w,d0
                bra.w   loc_FA1F0
; ---------------------------------------------------------------------------
loc_FA1EC:                              ; CODE XREF: ROM:000FA1D2   j
                                        ; ROM:000FA1E0   j
                move.w  (cont1team).w,d0
loc_FA1F0:                              ; CODE XREF: ROM:000FA1E8   j
                subq.w  #1,d0
                bpl.w   loc_FA1F8
                clr.w   d0
loc_FA1F8:                              ; CODE XREF: ROM:000FA1F2   j
                andi.w  #1,d0
                movea.l #$FFFFD4F2,a0
                move.w  d0,(word_FFD4F6).w
                bne.w   loc_FA210
                movea.l #$FFFFD4F0,a0
loc_FA210:                              ; CODE XREF: ROM:000FA206   j
                bsr.w   sub_FA2C0
loc_FA214:                              ; CODE XREF: ROM:000FA268   j
                                        ; ROM:000FA294   j
                jsr     (sub_80BA).l
                jsr     (sub_A41E).l
                jsr     (sub_11318).l
                btst    #7,d3
                bne.w   loc_FA298
                btst    #6,d1
                beq.w   loc_FA242
                eori.w  #1,(word_FFD4F6).w
                clr.w   d0
                bra.w   loc_FA26A
; ---------------------------------------------------------------------------
loc_FA242:                              ; CODE XREF: ROM:000FA232   j
                move.w  #1,d0
                btst    #5,d1
                bne.w   loc_FA26A
                moveq   #1,d0
                jsr     (nodiag).l
                btst    #3,d1
                bne.w   loc_FA26A
                neg.w   d0
                btst    #2,d1
                bne.w   loc_FA26A
                bra.s   loc_FA214
; ---------------------------------------------------------------------------
loc_FA26A:                              ; CODE XREF: ROM:000FA23E   j
                                        ; ROM:000FA24A   j ...
                movea.l #$FFFFD4F0,a0
                move.w  (word_FFD44C).w,(word_FFD4F8).w
                tst.w   (word_FFD4F6).w
                beq.w   loc_FA28A
                movea.l #$FFFFD4F2,a0
                move.w  (word_FFD44E).w,(word_FFD4F8).w
loc_FA28A:                              ; CODE XREF: ROM:000FA27A   j
                add.w   d0,(a0)
                bsr.w   sub_FA2A2
                bsr.w   sub_FA2C0
                bra.w   loc_FA214
; ---------------------------------------------------------------------------
loc_FA298:                              ; CODE XREF: ROM:000FA22A   j
                movem.l (sp)+,d0-d7/a0-a6
                jmp     loc_9CD8


sub_FA2A2:                              ; CODE XREF: ROM:000FA28C   p
                move.w  d0,-(sp)
                move.w  (word_FFD4F8).w,d0
                addq.w  #1,d0
                cmp.w   (a0),d0
                bne.w   loc_FA2B2
                clr.w   (a0)
loc_FA2B2:                              ; CODE XREF: sub_FA2A2+A   j
                tst.w   (a0)
                bpl.w   loc_FA2BC
                subq.w  #1,d0
                move.w  d0,(a0)
loc_FA2BC:                              ; CODE XREF: sub_FA2A2+12   j
                move.w  (sp)+,d0
                rts
; End of function sub_FA2A2


sub_FA2C0:                              ; CODE XREF: ROM:loc_FA210   p
                                        ; ROM:000FA290   p
                movem.l d0-d7/a1-a6,-(sp)
                move.l  a0,-(sp)
                move.w  (HomeTeam).w,d0
                tst.w   (word_FFD4F6).w
                beq.w   loc_FA2D6
                move.w  (VisTeam).w,d0
loc_FA2D6:                              ; CODE XREF: sub_FA2C0+E   j
                asl.w   #6,d0
                movea.l #unk_F8BF4,a6
                move.l  $26(a6,d0.w),(dword_FFBD4A).w
                move.w  #$64,(palcount).w ; 'd'
                jsr     (printz).l
                ori.b   #0,d6
                btst    d3,d0
                move.w  #$28,d0 ; '('
                move.w  #$15,d1
                move.w  #$7FF,d2
                jsr     (eraser).l
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$57,d0 ; 'W'
                tst.w   (a0)
                bne.w   loc_FA324
                bsr.w   sub_FA550
                bra.w   loc_FA328
; ---------------------------------------------------------------------------
loc_FA324:                              ; CODE XREF: sub_FA2C0+58   j
                bsr.w   loc_FA330
loc_FA328:                              ; CODE XREF: sub_FA2C0+60   j
                movea.l (sp)+,a0
                movem.l (sp)+,d0-d7/a1-a6
                rts
; End of function sub_FA2C0
; ---------------------------------------------------------------------------
loc_FA330:                              ; CODE XREF: sub_FA2C0:loc_FA324   p
                movem.l d0-d7/a0-a6,-(sp)
                move.w  (a0),(word_FFD4F4).w
                bsr.w   sub_FAEBC
                move.w  #$21,d0 ; '!'
                move.w  #8,d1
                jsr     (sub_FA66E).l
                move.w  #$64,(palcount).w ; 'd'
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$38,d0 ; '8'
                and.b   d1,$78(a0,d4.l*2)
                adda.w  0(a6,d6.w*8),a2
                ori.b   #$38,d6 ; '8'
                and.b   0(),d1
                eor.b   d7,(a4)
                movea.l #$30E,a2
                asl.w   #2,d0
                movea.l (a2,d0.w),a2
                adda.w  (a2),a2
                bsr.w   sub_FAF8C
                bra.w   loc_FA38A
; ---------------------------------------------------------------------------
loc_FA386:                              ; CODE XREF: ROM:loc_FA38A   j
                adda.w  (a2),a2
                addq.w  #8,a2
loc_FA38A:                              ; CODE XREF: ROM:000FA382   j
                dbf     d0,loc_FA386
                clr.w   d7
                movea.l #$FFFFCF36,a3
                movea.l a2,a1
                bsr.w   sub_F997A
                movea.l #$FFFFCF38,a3
loc_FA3A2:                              ; CODE XREF: ROM:000FA3A8   j
                addq.w  #1,d7
                cmpi.b  #$20,(a3)+ ; ' '
                bne.s   loc_FA3A2
                subq.w  #1,d7
                move.b  #0,-(a3)
                movea.l #$FFFFCF36,a3
                addq.w  #1,d7
                andi.w  #$FE,d7
                addq.w  #2,d7
                move.w  d7,(a3)
                movea.l a3,a1
                move.w  #8,(printx).l
                move.w  #$B,(printy).l
                jsr     (print2).l
                bsr.w   sub_FAF8C
                movea.l #$FFFFC6CE,a2
                tst.w   (word_FFD4F6).w
                beq.w   loc_FA3F0
                movea.l #$FFFFCA32,a2
loc_FA3F0:                              ; CODE XREF: ROM:000FA3E6   j
                jsr     (sub_18B5E).l
                move.w  #8,(printx).l
                move.w  #$C,(printy).l
                jsr     (print2).l
                move.w  #8,d1
                jsr     (sub_FAC3E).l
                move.w  #$15,(printx).l
                move.w  #$C,(printy).l
                move.w  (printx).w,-(sp)
                jsr     (printz2).l
                ori.b   #$20,a4 ; ' '
                addq.w  #1,-(a5)
                bls.s   loc_FA4A4+3
                moveq   #$64,d1 ; 'd'
                move.w  (sp)+,(printx).w
                addq.w  #1,(printy).w
                jsr     (printz2).l
                ori.b   #$2D,a6 ; '-'
                move.l  $2D2D(a5),-(a6)
                move.l  $2D2D(a5),-(a6)
                move.l  d0,-(a6)
                move.w  #$15,(printx).l
                move.w  #$12,(printy).l
                move.w  (printx).w,-(sp)
                jsr     (printz2).l
                ori.b   #$54,a6 ; 'T'
                bvc.s   loc_FA4DE+3
                blt.s   loc_FA4E2+1
                move.l  d0,d0
                move.w  (sp)+,(printx).w
                addq.w  #1,(printy).w
                jsr     (printz2).l
                ori.b   #$2D,a6 ; '-'
                move.l  $2D2D(a5),-(a6)
                move.l  $2D2D(a5),-(a6)
                move.l  d0,-(a6)
                move.w  (HomeTeam).w,d1
                tst.w   (word_FFD4F6).w
loc_FA4A4:                              ; CODE XREF: ROM:000FA436   j
                beq.w   loc_FA4AC
                move.w  (VisTeam).w,d1
loc_FA4AC:                              ; CODE XREF: ROM:loc_FA4A4   j
                ext.l   d1
                bsr.w   sub_FAF8C
                ext.l   d0
                movea.l #$FFFFCF36,a0
                bsr.w   sub_F9B94
                movea.l #$FFFFCF36,a0
                move.b  (a0),d2
                move.b  1(a0),d3
                move.b  3(a0),d4
                move.b  2(a0),d5
                move.w  #$E,d1
                move.w  (word_FFD448).w,d0
                tst.w   (word_FFD4F6).w
loc_FA4DE:                              ; CODE XREF: ROM:000FA476   j
                beq.w   loc_FA4E6
loc_FA4E2:                              ; CODE XREF: ROM:000FA47C   j
                move.w  (word_FFD44A).w,d0
loc_FA4E6:                              ; CODE XREF: ROM:loc_FA4DE   j
                cmp.w   (word_FFD52E).w,d0
                ble.w   loc_FA50E
                move.w  #$15,d0
                bsr.w   sub_FA708
                bsr.w   sub_FAF8C
                move.w  #$15,d1
                move.w  #$14,d2
                bsr.w   sub_FAD84
                st      (word_FFD598).w
                bra.w   loc_FA52A
; ---------------------------------------------------------------------------
loc_FA50E:                              ; CODE XREF: ROM:000FA4EA   j
                move.w  #$15,d0
                bsr.w   sub_FA75C
                bsr.w   sub_FAF8C
                move.w  #$15,d1
                move.w  #$14,d2
                bsr.w   sub_FACF0
                clr.w   (word_FFD598).w
loc_FA52A:                              ; CODE XREF: ROM:000FA50A   j
                move.w  #3,d1
                move.w  #$11,d2
                bsr.w   sub_FAF8C
                bsr.w   sub_FA8AC
                move.w  #3,d1
                move.w  #$F,d2
                bsr.w   sub_FAF8C
                bsr.w   loc_FAB4C
                movem.l (sp)+,d0-d7/a0-a6
                rts


sub_FA550:                              ; CODE XREF: sub_FA2C0+5C   p
                movem.l d0-d7/a0-a6,-(sp)
                move.w  #$21,d0 ; '!'
                move.w  #8,d1
                jsr     (sub_FA66E).l
                move.w  #1,d0
                move.w  #8,d1
                bset    #0,(word_FFC2F8).w
                jsr     (sub_FA66E).l
                bclr    #0,(word_FFC2F8).w
                move.w  #$64,(palcount).w ; 'd'
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$3C,d0 ; '<'
                ori.b   #$B9,a0
                ori.b   #$3E,sp ; '>'
                move.w  #3,d0
                move.w  #$F,d1
                jsr     (loc_FA936).l
                move.w  #8,d0
                move.w  #$B,d1
                jsr     (sub_FABDC).l
                move.w  #$15,(printx).w
                move.w  #$C,(printy).w
                move.w  (printx).w,-(sp)
                jsr     (printz2).l
                ori.b   #$20,a4 ; ' '
                addq.w  #1,-(a5)
                bls.s   loc_FA63E+3
                moveq   #$64,d1 ; 'd'
                move.w  (sp)+,(printx).w
                addq.w  #1,(printy).w
                jsr     (printz2).l
                ori.b   #$2D,a6 ; '-'
                move.l  $2D2D(a5),-(a6)
                move.l  $2D2D(a5),-(a6)
                move.l  d0,-(a6)
                move.w  (HomeTeam).w,d1
                tst.w   (word_FFD4F6).w
                beq.w   loc_FA602
                move.w  (VisTeam).w,d1
loc_FA602:                              ; CODE XREF: sub_FA550+AA   j
                ext.l   d1
                movea.l #$FFFFCF36,a0
                move.l  a0,-(sp)
                jsr     (clrCrowdRAM?).l
                move.w  #$15,d0
                move.w  #$E,d1
                move.b  (a0),d2
                move.b  1(a0),d3
                move.b  3(a0),d4
                move.b  2(a0),d5
                bsr.w   sub_FA75C
                movea.l (sp),a0
                move.w  #$15,d0
                move.w  #$12,d1
                move.b  4(a0),d2
                move.b  5(a0),d3
loc_FA63E:                              ; CODE XREF: sub_FA550+80   j
                move.b  7(a0),d4
                move.b  6(a0),d5
                bsr.w   sub_FA708
                movea.l (sp)+,a0
                move.w  #$15,d0
                move.w  #$16,d1
                move.b  8(a0),d2
                move.b  9(a0),d3
                move.b  $B(a0),d4
                move.b  $A(a0),d5
                bsr.w   sub_FA6E8
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FA550


sub_FA66E:                              ; CODE XREF: ROM:000FA344   p
                                        ; sub_FA550+C   p ...
                movem.l d0-d7/a0-a6,-(sp)
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$C0,d0
                cmp.b   $31C1(a0),d0
                cmp.b   $3838(a2),d0
                add.w   (a0),d2
                move.w  (HomeTeam).w,d3
                tst.w   (word_FFD4F6).w
                beq.w   loc_FA69A
                move.w  (VisTeam).w,d3
loc_FA69A:                              ; CODE XREF: sub_FA66E+24   j
                asl.w   #2,d3
                movea.l #unk_F86F2,a0
                movea.l (a0,d3.w),a0
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                asl.w   #3,d3
                movea.l #unk_FF462,a0
                subi.w  #$20,d3 ; ' '
                adda.w  d3,a0
                adda.l  (a2)+,a1
                move.w  #6,d3
                move.w  #6,d2
                clr.w   d0
                clr.w   d1
                move.l  (dword_FFBD4A).w,-(sp)
                move.l  (dword_FFBD4E).w,-(sp)
                move.w  #2,d5
                jsr     (dobitmap).l
                move.l  (sp)+,(dword_FFBD4E).w
                move.l  (sp)+,(dword_FFBD4A).w
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FA66E


sub_FA6E8:                              ; CODE XREF: sub_FA550+114   p
                move.l  #unk_FA6F6,(TempMaxSpd).l
                bra.w   loc_FA7B0
; End of function sub_FA6E8
; ---------------------------------------------------------------------------


sub_FA708:                              ; CODE XREF: ROM:000FA4F2   p
                                        ; sub_FA550+F6   p
                movem.l a1-a3,-(sp)
                movea.l #unk_FA734,a1
                tst.w   d3
                beq.w   loc_FA71E
                movea.l #unk_FA746,a1
loc_FA71E:                              ; CODE XREF: sub_FA708+C   j
                cmp.b   #1,d2
                bne.w   loc_FA728
                adda.w  (a1),a1
loc_FA728:                              ; CODE XREF: sub_FA708+1A   j
                move.l  a1,(TempMaxSpd).w
                movem.l (sp)+,a1-a3
                bra.w   loc_FA7B0
; End of function sub_FA708
; ---------------------------------------------------------------------------


sub_FA75C:                              ; CODE XREF: ROM:000FA512   p
                                        ; sub_FA550+D8   p
                movem.l a1-a3,-(sp)
                movea.l #unk_FA788,a1
                tst.w   d3
                beq.w   loc_FA772
                movea.l #unk_FA79A,a1
loc_FA772:                              ; CODE XREF: sub_FA75C+C   j
                cmp.b   #1,d2
                bne.w   loc_FA77C
                adda.w  (a1),a1
loc_FA77C:                              ; CODE XREF: sub_FA75C+1A   j
                move.l  a1,(TempMaxSpd).w
                movem.l (sp)+,a1-a3
                bra.w   loc_FA7B0
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_FA7B0:                              ; CODE XREF: sub_FA6E8+A   j
                                        ; sub_FA708+28   j ...
                tst.b   d2
                bne.w   loc_FA7B8
                rts
; ---------------------------------------------------------------------------
loc_FA7B8:                              ; CODE XREF: sub_FA75C+56   j
                move.w  d0,(printx).w
                move.w  d1,(printy).w
                move.w  d2,d0
                andi.w  #$FF,d0
                movea.l #$FFFFBFA4,a1
                move.l  a1,-(sp)
                jsr     (sub_F998E).l
                movea.l (sp)+,a1
                movea.l a1,a3
                movea.l (TempMaxSpd).w,a1
                jsr     (sub_11D9E).l
                move.w  (printx).w,-(sp)
                movea.l #$FFFFBFA4,a1
                jsr     (print2).l
                move.w  (sp)+,(printx).w
                addq.w  #1,(printy).w
                movea.l #$FFFFBFA4,a1
                move.w  d3,d2
                ext.w   d2
                bset    #7,(word_FFC2F8).w
                jsr     (sub_FA014).l
                movea.l a1,a3
                movea.l #unk_FA876,a1
                jsr     (sub_11D9E).l
                move.w  (printx).w,-(sp)
                movea.l #$FFFFBFA4,a1
                jsr     (print2).l
                move.w  (sp)+,(printx).w
                addq.w  #1,(printy).w
                move.w  d4,d2
                ext.w   d2
                movea.l #$FFFFBFA4,a1
                bset    #7,(word_FFC2F8).w
                jsr     (sub_FA014).l
                movea.l a1,a3
                movea.l #unk_FA87C,a1
                jsr     (sub_11D9E).l
                move.w  d5,d0
                movea.l #$FFFFBFA4,a1
                jsr     (sub_FA880).l
                movea.l #$FFFFBFA4,a1
                jsr     (print2).l
                rts
; End of function sub_FA75C
; ---------------------------------------------------------------------------


sub_FA880:                              ; CODE XREF: sub_F9B2A+5A   p
                                        ; sub_FA75C+106   p
                movem.l d0/a0-a3,-(sp)
                ext.w   d0
                asl.w   #2,d0
                movea.l #$30E,a0
                movea.l (a0,d0.w),a0
                move.w  4(a0),d0
                ext.l   d0
                adda.l  d0,a0
                adda.w  (a0),a0
                movea.l a1,a3
                movea.l a0,a1
                jsr     (sub_11D9E).l
                movem.l (sp)+,d0/a0-a3
                rts
; End of function sub_FA880


sub_FA8AC:                              ; CODE XREF: ROM:000FA536   p
                movem.l d0-d7/a0-a6,-(sp)
                move.w  d1,(printx).w
                move.w  d2,(printy).w
                move.w  d1,-(sp)
                jsr     (printz2).l
                ori.b   #$76,a2 ; 'v'
                bcs.s   loc_FA936+2
                bsr.s   nullsub_4
                bge.w   unk_FDAA9
                cmp.b   $5278(a0),d0
                cmp.b   $4EB9(a2),d0
                ori.b   #$36,d1 ; '6'
                ori.b   #$61,a4 ; 'a'
                moveq   #$69,d2 ; 'i'
                bgt.s   loc_FA946+1
                move.l  -(a0),d0
                move.l  d0,d0
                movea.l #$FFFFC6CE,a2
                tst.w   (word_FFD4F6).w
                beq.w   loc_FA8F8
                movea.l #$FFFFCA32,a2
loc_FA8F8:                              ; CODE XREF: sub_FA8AC+42   j
                move.l  (dword_19420).l,d4
                tst.w   (word_FFD598).w
                beq.w   loc_FA90C
                move.l  (dword_19582).l,d4
loc_FA90C:                              ; CODE XREF: sub_FA8AC+56   j
                bsr.w   sub_FA9F8
                mulu.w  #$64,d0 ; 'd'
                divu.w  d1,d0
                bsr.w   sub_FEF7C
                movea.l #$FFFFBFA4,a1
                bsr.w   sub_F998E
                movea.l #$FFFFBFA4,a1
                jsr     (print2).l
                movem.l (sp)+,d0-d7/a0-a6
; End of function sub_FA8AC


nullsub_4:                              ; CODE XREF: sub_FA8AC+1A   p
                rts
; End of function nullsub_4
; ---------------------------------------------------------------------------
loc_FA936:                              ; CODE XREF: sub_FA550+50   p
                                        ; sub_FA8AC+18   j
                movem.l d0-d7/a0-a6,-(sp)
                move.w  (HomeTeam).w,d2
                bsr.w   sub_FEE4A
                tst.w   (word_FFD4F6).w
loc_FA946:                              ; CODE XREF: sub_FA8AC+32   j
                beq.w   loc_FA952
                move.w  (VisTeam).w,d2
                bsr.w   sub_FEE4A
loc_FA952:                              ; CODE XREF: ROM:loc_FA946   j
                movea.l #$30E,a0
                asl.w   #2,d2
                ext.l   d2
                adda.l  d2,a0
                movea.l (a0),a0
                move.w  6(a0),d2
                ext.l   d2
                adda.l  d2,a0
                move.w  d0,(printx).w
                move.w  d1,(printy).w
                move.w  d0,-(sp)
                jsr     (printz2).l
                ori.b   #$74,(a0) ; 't'
                bsr.s   loc_FA9F0
                moveq   #$69,d2 ; 'i'
                bgt.s   unk_FA9E9
                movea.l a4,a0
                bvs.s   loc_FA9F4
                bcs.w   loc_FFE00
                cmp.b   $31D7(a2),d0
                cmp.b   $227C(a0),d0
                ori.b   #$D2,sp
loc_FA996:                              ; CODE XREF: ROM:000FA9C8   j
                cmpi.w  #2,(a1)
                beq.w   loc_FA9CA
                move.w  (sp),(printx).w
                move.l  a1,-(sp)
                jsr     (print2).l
                move.b  (a0)+,d0
                ext.w   d0
                subq.w  #1,d0
                jsr     (sub_18B6E).l
                jsr     (print2).l
                movea.l (sp)+,a1
                move.w  (a1),d0
                ext.l   d0
                adda.l  d0,a1
                addq.w  #1,(printy).w
                bra.s   loc_FA996
; ---------------------------------------------------------------------------
loc_FA9CA:                              ; CODE XREF: ROM:000FA99A   j
                move.w  (sp)+,d0
                movem.l (sp)+,d0-d7/a0-a6
                rts
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_FA9F0:                              ; CODE XREF: ROM:000FA97C   p
                ori.b   #$57,d6 ; 'W'
loc_FA9F4:                              ; CODE XREF: ROM:000FA984   j
                move.l  -(a0),d0
; ---------------------------------------------------------------------------


sub_FA9F8:                              ; CODE XREF: sub_8D4E+22   p
                                        ; sub_FA8AC:loc_FA90C   p ...
                move.l  a6,-(sp)
                clr.w   (word_FFD6CE).w
                clr.w   (word_FFD6D0).w
                movea.l #unk_FAB3C,a6
                cmp.l   (dword_19420).l,d4
                bne.w   loc_FAA18
                movea.l #unk_FAB1C,a6
loc_FAA18:                              ; CODE XREF: sub_FA9F8+16   j
                cmp.l   (dword_19582).l,d4
                bne.w   loc_FAA28
                movea.l #unk_FAB2C,a6
loc_FAA28:                              ; CODE XREF: sub_FA9F8+26   j
                movea.l $1E(a2),a0
                lea     $1A2(a2),a4
                clr.l   d1
                move.w  d0,d1
                asl.w   #4,d1
                adda.l  d1,a4
                adda.l  #$10,a4
                adda.w  (a0),a0
loc_FAA40:                              ; CODE XREF: sub_FA9F8+4C   j
                adda.w  (a0),a0
                addq.w  #8,a0
                dbf     d0,loc_FAA40
                clr.w   d0
                clr.w   d1
                moveq   #$F,d2
                swap    d4
loc_FAA50:                              ; CODE XREF: sub_FA9F8:loc_FAAE6   j
                btst    d2,d4
                beq.w   loc_FAAE6
                move.w  d2,d3
                lsr.w   #1,d3
                neg.w   d3
                move.b  -1(a0,d3.w),d3
                btst    #0,d2
                beq.w   loc_FAA6A
                lsr.w   #4,d3
loc_FAA6A:                              ; CODE XREF: sub_FA9F8+6C   j
                andi.w  #$F,d3
                cmp.w   #$D,d2
                bne.w   loc_FAA7A
                bra.w   loc_FAAE0
; ---------------------------------------------------------------------------
loc_FAA7A:                              ; CODE XREF: sub_FA9F8+7A   j
                cmp.w   #6,d2
                beq.w   loc_FAAE0
                movem.l d5-d7,-(sp)
                move.b  (a6,d2.w),d5
                ext.w   d5
                cmp.w   #2,d5
                beq.w   loc_FAAA2
                move.w  d3,-(sp)
                subq.w  #2,d5
loc_FAA98:                              ; CODE XREF: sub_FA9F8+A2   j
                add.w   (sp),d3
                dbf     d5,loc_FAA98
                asr.w   #1,d3
                tst.w   (sp)+
loc_FAAA2:                              ; CODE XREF: sub_FA9F8+98   j
                movem.l (sp)+,d5-d7
                cmpa.l  #unk_FAB3C,a6
                beq.w   loc_FAACA
                neg.w   d2
                move.w  d7,-(sp)
                move.b  -1(a4,d2.w),d7
                ext.w   d7
                add.w   d7,(word_FFD6CE).w
                addq.w  #1,(word_FFD6D0).w
                move.w  (sp)+,d7
                neg.w   d2
                bra.w   loc_FAAE0
; ---------------------------------------------------------------------------
loc_FAACA:                              ; CODE XREF: sub_FA9F8+B4   j
                move.w  d3,-(sp)
                asl.w   #4,d3
                add.w   (sp),d3
                add.w   (sp)+,d3
                neg.w   d2
                add.b   -1(a4,d2.w),d3
                bpl.w   loc_FAADE
                clr.b   d3
loc_FAADE:                              ; CODE XREF: sub_FA9F8+E0   j
                neg.w   d2
loc_FAAE0:                              ; CODE XREF: sub_FA9F8+7E   j
                                        ; sub_FA9F8+86   j ...
                add.w   d3,d0
                addi.w  #$64,d1 ; 'd'
loc_FAAE6:                              ; CODE XREF: sub_FA9F8+5A   j
                dbf     d2,loc_FAA50
                cmpa.l  #unk_FAB3C,a6
                beq.w   loc_FAB0E
                move.w  #$64,d1 ; 'd'
                movem.l d6-d7,-(sp)
                move.w  (word_FFD6CE).w,d6
                ext.l   d6
                move.w  (word_FFD6D0).w,d7
                divs.w  d7,d6
                add.w   d6,d0
                movem.l (sp)+,d6-d7
loc_FAB0E:                              ; CODE XREF: sub_FA9F8+F8   j
                cmp.w   d1,d0
                blt.w   loc_FAB18
                move.w  d0,d1
                subq.w  #1,d0
loc_FAB18:                              ; CODE XREF: sub_FA9F8+118   j
                movea.l (sp)+,a6
                rts
; End of function sub_FA9F8
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_FAB4C:                              ; CODE XREF: ROM:000FA546   p
                movem.l d0-d7/a0-a6,-(sp)
                movea.l #$FFFFBFA4,a1
                bsr.w   sub_FAC90
                move.w  d1,(printx).w
                move.w  d2,(printy).w
                jsr     (print2).l
                movea.l #$FFFFC6CE,a2
                tst.w   (word_FFD4F6).w
                beq.w   loc_FAB7C
                movea.l #$FFFFCA32,a2
loc_FAB7C:                              ; CODE XREF: ROM:000FAB72   j
                move.w  d0,-(sp)
                jsr     (sub_9F5C).l
                cmp.w   (sp),d0
                ble.w   loc_FABC0
                move.w  (sp),d0
                jsr     (sub_9F40).l
                cmp.w   (sp),d0
                ble.w   loc_FABAA+2
                jsr     (printz2).l
                ori.b   #$47,a2 ; 'G'
                ble.s   loc_FAC04+1
                bge.s   loc_FAC0E+1
                bcs.w   $100BA8
loc_FABAA:                              ; CODE XREF: ROM:000FAB94   j
                ori.b   #$B9,1(a2)
                move.b  $A(a6,d0.w),d5
                movea.l d6,a0
                ble.s   loc_FAC28+2
                moveq   #$64,d1 ; 'd'
                bra.w   loc_FABD2+2
; ---------------------------------------------------------------------------
loc_FABC0:                              ; CODE XREF: ROM:000FAB86   j
                jsr     (printz2).l
                ori.b   #$44,a6 ; 'D'
                bcs.s   loc_FAC32
                bcs.s   locret_FAC3C
                blt.s   loc_FAC32+1
loc_FABD2:                              ; CODE XREF: ROM:000FABBC   j
                bgt.w   unk_FF633
                movem.l (sp)+,d0-d7/a0-a6
                rts


sub_FABDC:                              ; CODE XREF: sub_FA550+5E   p
                movem.l d0-d7/a0-a6,-(sp)
                move.w  d0,(printx).w
                move.w  d1,(printy).w
                move.w  d0,-(sp)
                jsr     (printz2).l
                ori.b   #$65,d6 ; 'e'
                bsr.s   loc_FAC62+1
                move.w  (sp)+,(printx).w
                addq.w  #1,(printy).w
                jsr     (printz2).l
loc_FAC04:                              ; CODE XREF: ROM:000FABA2   j
                ori.b   #$61,a2 ; 'a'
                moveq   #$69,d2 ; 'i'
                bgt.s   loc_FAC72+1
                move.l  -(a0),d0
loc_FAC0E:                              ; CODE XREF: ROM:000FABA4   j
                movea.l #$FFFFC6CE,a0
                tst.w   (word_FFD4F6).w
                beq.w   loc_FAC22
                movea.l #$FFFFCA32,a0
loc_FAC22:                              ; CODE XREF: sub_FABDC+3C   j
                movea.l a0,a2
                bsr.w   sub_FE172
loc_FAC28:                              ; CODE XREF: ROM:000FABB6   j
                move.w  #2,d1
                jsr     (sub_11D3A).l
loc_FAC32:                              ; CODE XREF: ROM:000FABCA   j
                                        ; ROM:000FABD0   j
                jsr     (print2).l
                movem.l (sp)+,d0-d7/a0-a6
locret_FAC3C:                           ; CODE XREF: ROM:000FABCC   j
                rts
; End of function sub_FABDC


sub_FAC3E:                              ; CODE XREF: ROM:000FA410   p
                movem.l d0-d7/a0-a6,-(sp)
                move.w  d1,(printy).w
                movea.l #$FFFFC6CE,a0
                tst.w   (word_FFD4F6).w
                beq.w   loc_FAC5A
                movea.l #$FFFFCA32,a0
loc_FAC5A:                              ; CODE XREF: sub_FAC3E+12   j
                movea.l $1E(a0),a0
                adda.w  4(a0),a0
loc_FAC62:                              ; CODE XREF: sub_FABDC+18   p
                bsr.w   sub_FAC78
; End of function sub_FAC3E
                adda.w  (a0),a0
                adda.w  (a0),a0
                addq.w  #1,(printy).w
                bsr.w   sub_FAC78
loc_FAC72:                              ; CODE XREF: sub_FABDC+2E   j
                movem.l (sp)+,d0-d7/a0-a6
                rts


sub_FAC78:                              ; CODE XREF: sub_FAC3E:loc_FAC62   p
                                        ; ROM:000FAC6E   p
                move.w  #$14,(printx).w
                move.w  (a0),d0
                subq.w  #2,d0
                lsr.w   #1,d0
                sub.w   d0,(printx).w
                movea.l a0,a1
                jmp     print2
; End of function sub_FAC78


sub_FAC90:                              ; CODE XREF: ROM:000FAB56   p
                movem.l d0-d7/a0-a6,-(sp)
                movea.l #$FFFFC6CE,a0
                tst.w   (word_FFD4F6).w
                beq.w   loc_FACA8
                movea.l #$FFFFCA32,a0
loc_FACA8:                              ; CODE XREF: sub_FAC90+E   j
                movea.l $1E(a0),a0
                move.w  (a0),d1
                ext.l   d1
                adda.l  d1,a0
loc_FACB2:                              ; CODE XREF: sub_FAC90+2A   j
                move.w  (a0),d1
                ext.l   d1
                adda.l  d1,a0
                addq.l  #8,a0
                dbf     d0,loc_FACB2
                subq.l  #8,a0
                move.w  #4,(a1)+
                move.b  (a0),d0
                lsr.w   #4,d0
                andi.w  #$F,d0
                bne.w   loc_FACD8
                move.b  #$20,d0 ; ' '
                bra.w   loc_FACDC
; ---------------------------------------------------------------------------
loc_FACD8:                              ; CODE XREF: sub_FAC90+3C   j
                addi.b  #$30,d0 ; '0'
loc_FACDC:                              ; CODE XREF: sub_FAC90+44   j
                move.b  d0,(a1)+
                move.b  (a0),d0
                andi.w  #$F,d0
                addi.b  #$30,d0 ; '0'
                move.b  d0,(a1)+
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FAC90


sub_FACF0:                              ; CODE XREF: ROM:000FA522   p
                movem.l d0-d7/a0-a6,-(sp)
                bsr.w   sub_FAF50
                move.l  a0,-(sp)
                adda.l  #$B4,a0
                move.b  (a0,d0.w),d3
                ext.w   d3
                movea.l (sp)+,a0
                adda.l  #$CE,a0
                move.b  (a0,d0.w),d4
                ext.w   d4
                move.w  d1,(printx).w
                move.w  d2,(printy).w
                move.w  d1,-(sp)
                jsr     (printz2).l
                ori.b   #$6F,a4 ; 'o'
                bsr.s   loc_FAD94+2
                move.l  -(a0),d0
                move.l  d0,d0
                move.w  d0,-(sp)
                move.w  d3,d0
                movea.l #$FFFFBFA4,a1
                bsr.w   sub_F998E
                move.w  (sp)+,d0
                movea.l #$FFFFBFA4,a1
                jsr     (print2).l
                move.w  (sp)+,(printx).w
                addq.w  #1,(printy).w
                jsr     (printz2).l
                ori.b   #$73,a4 ; 's'
                move.l  d0,d0
                move.w  d4,d0
                movea.l #$FFFFBFA4,a1
                bsr.w   sub_F998E
                movea.l #$FFFFBFA4,a1
                jsr     (print2).l
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FACF0


sub_FAD84:                              ; CODE XREF: ROM:000FA502   p
                movem.l d0-d7/a0-a6,-(sp)
                bsr.w   sub_FAF50
                move.l  a0,-(sp)
                adda.l  #$B4,a0
loc_FAD94:                              ; CODE XREF: sub_FACF0+38   p
                move.b  (a0,d0.w),d3
; End of function sub_FAD84
                ext.w   d3
                movea.l (sp)+,a0
                adda.l  #$E8,a0
                move.b  (a0,d0.w),d4
                ext.w   d4
                move.w  d4,d7
                sub.w   d3,d7
                move.w  d1,(printx).w
                move.w  d2,(printy).w
                move.w  d1,-(sp)
                jsr     (printz2).l
                ori.b   #$61,a4 ; 'a'
                moveq   #$65,d3 ; 'e'
                move.l  -(a0),d0
                move.l  d0,d0
                move.w  d7,d0
                movea.l #$FFFFBFA4,a1
                move.l  a1,-(sp)
                bsr.w   sub_F998E
                movea.l (sp)+,a1
                jsr     (print2).l
                move.w  (sp)+,(printx).w
                addq.w  #1,(printy).w
                jsr     (printz2).l
                ori.b   #$61,a4 ; 'a'
                moveq   #$65,d3 ; 'e'
                move.l  -(a5),d0
                move.l  -(a0),d0
                move.l  d0,d0
                move.w  d7,d0
                mulu.w  #$64,d0 ; 'd'
                tst.w   d4
                bne.w   loc_FAE0A
                clr.w   d0
                bra.w   loc_FAE0C
; ---------------------------------------------------------------------------
loc_FAE0A:                              ; CODE XREF: ROM:000FAE00   j
                divu.w  d4,d0
loc_FAE0C:                              ; CODE XREF: ROM:000FAE06   j
                movea.l #$FFFFBFA4,a1
                move.l  a1,-(sp)
                bsr.w   sub_F998E
                movea.l (sp)+,a1
                jsr     (print2).l
                movem.l (sp)+,d0-d7/a0-a6
                rts


sub_FAE26:                              ; CODE XREF: sub_FAEBC:loc_FAED4   p
                                        ; sub_FD084+6A   p ...
                movem.l d0-d7/a1-a6,-(sp)
                movea.l #$F92F4,a0
                move.w  d1,d2
                asl.w   #2,d2
                movea.l (a0,d2.w),a0
                move.w  #$FFFF,d2
                bra.w   loc_FAE50
; ---------------------------------------------------------------------------
loc_FAE40:                              ; CODE XREF: sub_FAE26+2E   j
                cmp.w   4(a0),d0
                bne.w   loc_FAE4E
                movea.l (a0),a0
                bra.w   loc_FAEB6
; ---------------------------------------------------------------------------
loc_FAE4E:                              ; CODE XREF: sub_FAE26+1E   j
                addq.l  #6,a0
loc_FAE50:                              ; CODE XREF: sub_FAE26+16   j
                addq.w  #1,d2
                tst.l   (a0)
                bne.s   loc_FAE40
                movea.l #$30E,a0
                asl.w   #2,d1
                movea.l (a0,d1.w),a0
                movea.l a0,a6
                move.w  d0,d6
                adda.w  (a6),a6
                bra.w   loc_FAE70
; ---------------------------------------------------------------------------
loc_FAE6C:                              ; CODE XREF: sub_FAE26:loc_FAE70   j
                adda.w  (a6),a6
                addq.w  #8,a6
loc_FAE70:                              ; CODE XREF: sub_FAE26+42   j
                dbf     d6,loc_FAE6C
                adda.w  (a6),a6
                adda.w  $A(a0),a0
                move.w  (a0),d1
                clr.w   d3
loc_FAE7E:                              ; CODE XREF: sub_FAE26+5C   j
                addq.w  #1,d3
                asl.w   #4,d1
                bne.s   loc_FAE7E
                movea.l #unk_C6F02,a0
                btst    #0,4(a6)
                bne.w   loc_FAE9A
                movea.l #unk_C726C,a0
loc_FAE9A:                              ; CODE XREF: sub_FAE26+6A   j
                cmp.w   d3,d0
                blt.w   loc_FAEB6
                movea.l #unk_C6B98,a0
                btst    #0,4(a6)
                bne.w   loc_FAEB6
                movea.l #unk_C682E,a0
loc_FAEB6:                              ; CODE XREF: sub_FAE26+24   j
                                        ; sub_FAE26+76   j ...
                movem.l (sp)+,d0-d7/a1-a6
                rts
; End of function sub_FAE26


sub_FAEBC:                              ; CODE XREF: ROM:000FA338   p
                movem.l d0-d7/a0-a6,-(sp)
                bsr.w   sub_FAF8C
                move.w  (HomeTeam).w,d1
                tst.w   (word_FFD4F6).w
                beq.w   loc_FAED4
                move.w  (VisTeam).w,d1
loc_FAED4:                              ; CODE XREF: sub_FAEBC+10   j
                bsr.w   sub_FAE26
                jsr     (printz).l
                ori.b   #1,d6
                        #$38
                add.w   (a2),d2
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                movea.l #unk_C63F8,a0
                adda.l  (a0),a0
                tst.l   (a2)
                bne.w   loc_FAF0C
                movea.l #unk_C63F8,a1
                adda.l  4(a1),a1
                tst.l   (a2)+
                bra.w   loc_FAF0E
; ---------------------------------------------------------------------------
loc_FAF0C:                              ; CODE XREF: sub_FAEBC+3C   j
                adda.l  (a2)+,a1
loc_FAF0E:                              ; CODE XREF: sub_FAEBC+4C   j
                bsr.w   sub_FE98A
                movea.l #$FFFFDA1E,a2
                move.w  #6,d3
                move.w  #6,d2
                clr.w   d0
                clr.w   d1
                movem.l d0/a0-a1,-(sp)
                adda.w  #$20,a0 ; ' '
                movea.l #$FFFFBD68,a1
                move.w  #7,d0
loc_FAF36:                              ; CODE XREF: sub_FAEBC+7C   j
                move.l  (a0)+,(a1)+
                dbf     d0,loc_FAF36
                movem.l (sp)+,d0/a0-a1
                move.w  #0,d5
                jsr     (dobitmap).l
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FAEBC


sub_FAF50:                              ; CODE XREF: sub_FACF0+4   p
                                        ; sub_FAD84+4   p
                movea.l #$FFFFC6CE,a0
                tst.w   (word_FFD4F6).w
                beq.w   locret_FAF64
                movea.l #$FFFFCA32,a0
locret_FAF64:                           ; CODE XREF: sub_FAF50+A   j
                rts
; End of function sub_FAF50


sub_FAF66:                              ; CODE XREF: sub_FA014+44   p
                                        ; sub_FA014+5E   p
                movem.l a3,-(sp)
                movea.l a2,a3
                adda.w  (a2),a3
loc_FAF6E:                              ; CODE XREF: sub_FAF66+18   j
                move.b  -(a3),d0
                cmp.b   #$20,d0 ; ' '
                bne.w   loc_FAF80
                move.b  #0,(a3)
                subq.w  #1,(a2)
                bra.s   loc_FAF6E
; ---------------------------------------------------------------------------
loc_FAF80:                              ; CODE XREF: sub_FAF66+E   j
                addq.w  #1,(a2)
                andi.w  #$FE,(a2)
                movem.l (sp)+,a3
                rts
; End of function sub_FAF66


sub_FAF8C:                              ; CODE XREF: ROM:000FA37E   p
                                        ; ROM:000FA3D8   p ...
                movem.l d1/a0,-(sp)
                movea.l #$FFFFD4FA,a0
                tst.w   (word_FFD4F6).w
                beq.w   loc_FAFA4
                movea.l #$FFFFD514,a0
loc_FAFA4:                              ; CODE XREF: sub_FAF8C+E   j
                move.w  (word_FFD4F4).w,d1
                subq.w  #1,d1
                move.b  (a0,d1.w),d0
                ext.w   d0
                move.w  d0,(word_FFD52E).w
                movem.l (sp)+,d1/a0
                rts
; End of function sub_FAF8C


sub_FAFBA:                              ; CODE XREF: ROM:000FA1B2   p
                movem.l d0-d7/a0-a6,-(sp)
                movea.l #$FFFFD4FA,a1
                movea.l #$FFFFC6CE,a0
                bsr.w   sub_FAFE4
                movea.l #$FFFFD514,a1
                movea.l #$FFFFCA32,a0
                bsr.w   sub_FAFE4
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FAFBA


sub_FAFE4:                              ; CODE XREF: sub_FAFBA+10   p
                                        ; sub_FAFBA+20   p
                movea.l $1E(a0),a0
                adda.w  6(a0),a0
                movea.l a1,a2
                addq.w  #6,a2
                clr.w   d0
loc_FAFF2:                              ; CODE XREF: sub_FAFE4+30   j
                move.w  #5,d1
loc_FAFF6:                              ; CODE XREF: sub_FAFE4+1E   j
                move.b  (a0,d1.w),d3
                subq.b  #1,d3
                cmp.b   d3,d0
                beq.w   loc_FB00C
                dbf     d1,loc_FAFF6
                move.b  d0,(a2)+
                bra.w   loc_FB00E
; ---------------------------------------------------------------------------
loc_FB00C:                              ; CODE XREF: sub_FAFE4+1A   j
                move.b  d0,(a1)+
loc_FB00E:                              ; CODE XREF: sub_FAFE4+24   j
                addq.w  #1,d0
                cmp.w   #$1A,d0
                blt.s   loc_FAFF2
                rts
; End of function sub_FAFE4
; ---------------------------------------------------------------------------
loc_FB018:                              ; CODE XREF: sub_FBB88+22   p
                                        ; sub_FBB88+4E   p
                movem.l d0-d7/a0-a6,-(sp)
                move    #$2700,sr
                move.w  #2,d4
                move.l  #loc_17C42,(vbint).w
                bclr    #0,(disflags).w
                bset    #2,(disflags).w
                bclr    #1,(disflags).w
                move.w  #0,(VSCRLPM).w
                move.w  #$B400,(VSPRITES).w
                move.w  #$B800,(VmMap3).w
                move.w  #5,(Map3col1).w
                move.w  #$C000,(VmMap2).w
                move.w  #6,(Map2col1).w
                move.w  #$E000,(VmMap1).w
                move.w  #6,(Map1col1).w
                move.w  #0,d0
                jsr     (setvram).l
                move    #$2500,sr
                jsr     (orjoy).l
                move.w  d4,(framercset).w
                movea.l #unk_55B86,a2
                jsr     (sub_1172C).l
                sub.b   d0,-(a3)
                or.l    d4,-$3211(a3)
                move.w  d4,(word_FFD530).w
                movea.l #unk_55B86,a2
                jsr     (sub_1172C).l
                sub.b   d0,-(a3)
                or.l    d4,-$3211(a3)
                move.w  d4,(word_FFB012).w
                jsr     (sub_11F04).l
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$28,d0 ; '('
                moveq   #$1C,d1
                move.w  #$7FF,d2
                jsr     (eraser).l
                jsr     (sub_16C96).l
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$7C,d0 ; '|'
                ori.b   #$24,d5 ; '$'
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                clr.w   d0
                clr.w   d1
                moveq   #$28,d2 ; '('
                moveq   #$1C,d3
                moveq   #$D,d5
                jsr     (dobitmap).l
                move.w  d4,(word_FFD430).w
                addi.w  #$24,d4 ; '$'
                move.w  d4,(word_FFD436).w
                movea.l #unk_BF70A,a2
                jsr     (sub_11738).l
                move.w  d4,(word_FFB010).w
                movea.l #unk_A9A18,a2
                jsr     (sub_1172C).l
                or.l    d4,-$3211(a3)
                jsr     (printz).l
                ori.b   #$1F,d6
                addi.b  #$38,d0 ; '8'
                and.b   d1,$78(a0,d4.l*2)
                adda.w  $6700(a6),a2
                ori.b   #$38,d6 ; '8'
                and.b   d1,$7C(a2,d2.w*2)
                ori.b   #$E,d0
                asl.w   #2,d0
                movea.l (a1,d0.w),a1
                adda.w  4(a1),a1
                move.w  (a1),d0
                subq.w  #2,d0
                lsr.w   #1,d0
                sub.w   d0,(printx).w
                jsr     (print).l
                jsr     (printz).l
                ori.b   #$1B,d6
                btst    d3,d0
                move.w  #8,d0
                move.w  #8,d1
                jsr     (Framer).l
                jsr     (printz).l
                ori.b   #$1C,d6
                        #$38
                and.b   d1,$78(a0,d4.l*2)
                adda.w  $6700(a6),a2
                ori.b   #$38,d6 ; '8'
                and.b   0(a2),d1
                movea.l #unk_F86F2,a0
                movea.l (a0,d3.w),a0
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                asl.w   #3,d3
                movea.l #unk_FF462,a0
                subi.w  #$40,d3 ; '@'
                adda.w  d3,a0
                adda.l  (a2)+,a1
                move.w  #6,d3
                move.w  #6,d2
                clr.w   d0
                clr.w   d1
                move.w  #4,d5
                move.w  (word_FFD430).w,d4
                jsr     (dobitmap).l
                jsr     (printz).l
                ori.b   #2,d6
                ori.b   #$3C,d0 ; '<'
                ori.b   #$3C,-(a4) ; '<'
                ori.b   #$B9,d6
                ori.b   #$B8,d1
                jsr     (sub_11DE2).l
                ori.b   #$A,(a0)
                andi.w  #$414D,a6
                chk.l   -(a0),d2
                movea.l d5,a0
                link    a4,#-$ADA7
                bsr.w   sub_F9C68
                clr.w   (word_FFD4EC).w
                move.w  #1,(word_FFD4EA).w
                clr.w   d0
                bsr.w   sub_FBBDE
                movea.l #$FFFFD4DA,a1
                bsr.w   sub_FB992
                bsr.w   sub_FB822
                jsr     (printz).l
                ori.b   #7,a6
                addi.w  #$616D,a6
                bcs.s   loc_FB264+2
                divu
                move.w  #$18,(palcount).w
                bclr    #2,(disflags).w
                clr.w   d4
                bsr.w   sub_FB722
                bsr.w   sub_FB77A
                bsr.w   sub_FB7CA
loc_FB264:                              ; CODE XREF: ROM:000FB244   j
                move.w  (printx).w,-(sp)
                move.w  (printy).w,-(sp)
                jsr     (sub_FB97C).l
                move.w  (sp)+,(printy).w
                addq.w  #1,(printy).w
                move.w  (sp)+,(printx).w
                addq.w  #1,(printx).w
                bsr.w   sub_FB7A0
                move.w  #1,(word_FFD6C4).w
                bsr.w   sub_FB4C4
                clr.w   d0
                bra.w   loc_FB410
; ---------------------------------------------------------------------------
loc_FB296:                              ; CODE XREF: ROM:000FB324   j
                                        ; ROM:000FB370   j ...
                bsr.w   sub_FB8EC
                jsr     (printz).l
                ori.b   #5,d6
                move.b  d0,d1
                tst.w   (word_FFD6C4).w
                beq.w   loc_FB2BC
                movea.l #$FFFFD4DA,a1
                bsr.w   sub_FB91A
                bsr.w   sub_FB6F0
loc_FB2BC:                              ; CODE XREF: ROM:000FB2AA   j
                bsr.w   sub_FB874
loc_FB2C0:                              ; CODE XREF: ROM:000FB2E8   j
                                        ; ROM:000FB2F6   j
                move.w  (vcount).w,d0
loc_FB2C4:                              ; CODE XREF: ROM:000FB2C8   j
                cmp.w   (vcount).w,d0
                beq.s   loc_FB2C4
                movem.w d1,-(sp)
                move.w  (cont1team).w,d1
                subq.w  #1,d1
                cmp.w   (word_FFD4EE).w,d1
                movem.w (sp)+,d1
                beq.w   loc_FB2EE
                jsr     (ReadJoy2).l
                tst.w   d1
                beq.s   loc_FB2C0
                bra.w   loc_FB2F8
; ---------------------------------------------------------------------------
loc_FB2EE:                              ; CODE XREF: ROM:000FB2DC   j
                jsr     (ReadJoy1).l
                tst.w   d1
                beq.s   loc_FB2C0
loc_FB2F8:                              ; CODE XREF: ROM:000FB2EA   j
                btst    #7,d1
                bne.w   loc_FB4BA
                tst.w   (word_FFD6C4).w
                bne.w   loc_FB332
                move.w  #1,d0
                btst    #1,d1
                bne.w   loc_FB37C
                move.w  #$FFFF,d0
                btst    #0,d1
                bne.w   loc_FB37C
                btst    #4,d1
                beq.w   loc_FB296
                bsr.w   sub_FB4C4
                clr.w   d0
                bra.w   loc_FB37C
; ---------------------------------------------------------------------------
loc_FB332:                              ; CODE XREF: ROM:000FB304   j
                moveq   #$FFFFFFFF,d0
                btst    #6,d1
                bne.w   loc_FB410
                neg.w   d0
                btst    #5,d1
                bne.w   loc_FB410
                btst    #3,d1
                bne.w   loc_FB43E
                neg.w   d0
                btst    #2,d1
                bne.w   loc_FB43E
                moveq   #6,d0
                btst    #1,d1
                bne.w   loc_FB43E
                neg.w   d0
                btst    #0,d1
                bne.w   loc_FB43E
                btst    #4,d1
                beq.w   loc_FB296
                bsr.w   sub_FB4C4
                bra.w   loc_FB296
; ---------------------------------------------------------------------------
loc_FB37C:                              ; CODE XREF: ROM:000FB310   j
                                        ; ROM:000FB31C   j ...
                add.w   d0,(word_FFD4EA).w
loc_FB380:                              ; CODE XREF: ROM:000FB3A2   j
                cmpi.w  #7,(word_FFD4EA).w
                ble.w   loc_FB390
                move.w  #1,(word_FFD4EA).w
loc_FB390:                              ; CODE XREF: ROM:000FB386   j
                tst.w   (word_FFD4EA).w
                bne.w   loc_FB39E
                move.w  #7,(word_FFD4EA).w
loc_FB39E:                              ; CODE XREF: ROM:000FB394   j
                bsr.w   sub_FBBDE
                beq.s   loc_FB380
                movea.l #$FFFFD4DA,a1
                bsr.w   sub_FB992
                tst.w   (word_FFD6C4).w
                bne.w   loc_FB3C0
                jsr     (sub_FB634).l
                bra.w   loc_FB296
; ---------------------------------------------------------------------------
loc_FB3C0:                              ; CODE XREF: ROM:000FB3B2   j
                jsr     (printz).l
                ori.b   #4,d6
                move.b  d0,-(a1)
                add.w   d4,(printx).w
                jsr     (printz).l
                ori.b   #$20,d6 ; ' '
                move.l  d0,d0
                bsr.w   sub_FB7CA
                moveq   #1,d2
                move.w  (printx).w,-(sp)
                move.w  (printy).w,-(sp)
                jsr     (eraser).l
                move.w  (sp)+,(printy).w
                addq.w  #1,(printy).w
                move.w  (sp)+,(printx).w
                addq.w  #1,(printx).w
                bsr.w   sub_FB7A0
                bsr.w   sub_FB722
                move.w  d4,d0
                neg.w   d0
                bra.w   *+4
; ---------------------------------------------------------------------------
loc_FB410:                              ; CODE XREF: ROM:000FB292   j
                                        ; ROM:000FB338   j ...
                add.w   d4,d0
                cmp.w   #$B,d0
                bhi.w   loc_FB296
                move.w  d0,d4
                bsr.w   sub_FB77A
                movea.l #$FFFFD4DA,a0
                clr.w   d0
                cmpi.b  #$2D,(a0,d4.w) ; '-'
                beq.w   loc_FB43E
                move.b  (a0,d4.w),d0
                ext.w   d0
                bsr.w   sub_FB750
                sub.w   d5,d0
loc_FB43E:                              ; CODE XREF: ROM:000FB34A   j
                                        ; ROM:000FB354   j ...
                add.w   d5,d0
                cmp.w   #$1D,d0
                bhi.w   loc_FB296
                move.w  d0,-(sp)
                bsr.w   sub_FB7CA
                moveq   #1,d2
                move.w  (printx).w,-(sp)
                move.w  (printy).w,-(sp)
                jsr     (eraser).l
                move.w  (sp)+,(printy).w
                addq.w  #1,(printy).w
                move.w  (sp)+,(printx).w
                addq.w  #1,(printx).w
                bsr.w   sub_FB7A0
                move.w  (sp)+,d5
                bsr.w   sub_FB7CA
                move.w  (printx).w,-(sp)
                move.w  (printy).w,-(sp)
                tst.w   (word_FFD6C4).w
                beq.w   loc_FB48E
                jsr     (sub_FB97C).l
loc_FB48E:                              ; CODE XREF: ROM:000FB484   j
                move.w  (sp)+,(printy).w
                addq.w  #1,(printy).w
                move.w  (sp)+,(printx).w
                addq.w  #1,(printx).w
                bsr.w   sub_FB7A0
                movea.l #$FFFFD4DA,a0
                movea.l #unk_FB95C,a1
                move.b  (a1,d5.w),d0
                move.b  d0,(a0,d4.w)
                bra.w   loc_FB296
; ---------------------------------------------------------------------------
loc_FB4BA:                              ; CODE XREF: ROM:000FB2FC   j
                bsr.w   sub_FB9D4
                movem.l (sp)+,d0-d7/a0-a6
                rts


sub_FB4C4:                              ; CODE XREF: ROM:000FB28C   p
                                        ; ROM:000FB328   p ...
                movem.l d0-d7/a0-a6,-(sp)
                jsr     (printz).l
                ori.b   #1,d6
                move.b  d0,d2
                move.w  #$16,d0
                move.w  #7,d1
                move.w  #$7FF,d2
                jsr     (eraser).l
                bchg    #0,(word_FFD6C4+1).w
                bne.w   loc_FB5F0
                jsr     (printz).l
                ori.b   #$19,d6
                move.b  d0,-(a0)
                movea.l #unk_FB95C,a0
                moveq   #4,d0
loc_FB504:                              ; CODE XREF: sub_FB4C4+6A   j
                moveq   #5,d1
                movea.l #$FFFFBFA4,a1
                move.w  #$E,(a1)+
loc_FB510:                              ; CODE XREF: sub_FB4C4+52   j
                move.b  (a0)+,(a1)+
                move.b  #$20,(a1)+ ; ' '
                dbf     d1,loc_FB510
                movea.w #(mesarea-M68K_RAM),a1
                jsr     (print).l
                addq.w  #2,(printy).w
                subi.w  #$C,(printx).w
                dbf     d0,loc_FB504
                jsr     (printz).l
                ori.b   #1,d6
                move.b  d0,d2
                moveq   #$16,d0
                moveq   #7,d1
                jsr     (Framer).l
                jsr     (printz).l
                ori.b   #2,(a0)+
                move.b  d4,$2D50(a2)
                bsr.s   loc_FB5BC
                movea.l $6120(a4,d6.l*8),a0
                bge.s   loc_FB5C4+1
                moveq   #$74,d2 ; 't'
                bcs.s   loc_FB5D2+4
                move.l  d0,d7
                move.w  #2,(printx).w
                addq.w  #1,(printy).w
                move.w  (printx).w,-(sp)
                jsr     (printz).l
                ori.b   #$20,(a6) ; ' '
                moveq   #$6F,d2 ; 'o'
                movea.l 0(a3),a0
                bcs.s   loc_FB5E8+1
                moveq   #$20,d2 ; ' '
                bge.s   locret_FB5EE+1
                moveq   #$74,d2 ; 't'
                bcs.s   loc_FB600
                move.l  d0,d7
                move.w  (sp),(printx).w
                addq.w  #1,(printy).w
                jsr     (printz).l
                ori.b   #$20,(a0) ; ' '
                moveq   #$6F,d2 ; 'o'
                movea.l -(sp),a0
                ble.s   loc_FB5C8
                bhi.s   loc_FB60A+1
                bls.s   loc_FB612+5
                move.l  d0,d7
                move.w  (sp),(printx).w
                addq.w  #1,(printy).w
                jsr     (printz).l
; End of function sub_FB4C4
loc_FB5BC:                              ; CODE XREF: sub_FB4C4+92   p
                ori.b   #$20,a6 ; ' '
                moveq   #$6F,d2 ; 'o'
                movea.l -(a3),a0
loc_FB5C4:                              ; CODE XREF: sub_FB4C4+9A   j
                bsr.s   sub_FB634
                bls.s   loc_FB628+5
loc_FB5C8:                              ; CODE XREF: sub_FB4C4+E2   j
                bge.s   loc_FB5F6+2
                move.w  (sp)+,(printx).w
                addq.w  #1,(printy).w
loc_FB5D2:                              ; CODE XREF: sub_FB4C4+9E   j
                jsr     (printz).l
                ori.b   #$54,(a2) ; 'T'
                addq.b  #2,-(a0)
                bcs.s   loc_FB650+2
                movea.l -(a4),a0
                ble.s   loc_FB656
loc_FB5E8:                              ; CODE XREF: sub_FB4C4+C0   j
                bcs.s   loc_FB618
loc_FB5EA:                              ; CODE XREF: ROM:000FB632   j
                movem.l (sp)+,d0-d7/a0-a6
locret_FB5EE:                           ; CODE XREF: sub_FB4C4+C4   j
                rts
; ---------------------------------------------------------------------------
loc_FB5F0:                              ; CODE XREF: sub_FB4C4+28   j
                movea.l #$FFFFD4DA,a1
loc_FB5F6:                              ; CODE XREF: ROM:loc_FB5C8   j
                bsr.w   sub_FB992
                move.w  #0,(printx).w
loc_FB600:                              ; CODE XREF: sub_FB4C4+C8   j
                move.w  #$F,(printy).w
                move.w  #$28,d0 ; '('
loc_FB60A:                              ; CODE XREF: sub_FB4C4+E4   j
                move.w  #$D,d1
                move.w  #$7FF,d2
loc_FB612:                              ; CODE XREF: sub_FB4C4+E6   j
                jsr     (eraser).l
loc_FB618:                              ; CODE XREF: ROM:loc_FB5E8   j
                jsr     (printz).l
                ori.b   #1,d6
                move.b  d0,d2
                moveq   #$16,d0
                moveq   #7,d1
loc_FB628:                              ; CODE XREF: ROM:000FB5C6   j
                jsr     (Framer).l
                bsr.w   sub_FB634
                bra.s   loc_FB5EA


sub_FB634:                              ; CODE XREF: ROM:000FB3B6   p
                                        ; ROM:loc_FB5C4   p ...
                movem.l d0-d7/a0-a6,-(sp)
                jsr     (printz).l
                ori.b   #2,(a2)+
                move.b  d4,$2D50(a2)
                bsr.s   loc_FB6AA+2
                movea.l $2F(a5,d7.w),a0
                bcc.s   loc_FB6BC+1
loc_FB650:                              ; CODE XREF: ROM:000FB5E2   j
                movea.l $2020(a4,d6.l*8),a0
loc_FB656:                              ; CODE XREF: ROM:000FB5E6   j
                move.l  d0,d0
                jsr     (printz).l
                ori.b   #2,(a2)+
                ble.s   sub_FB6DC
                bcs.s   loc_FB686+2
                bsr.s   sub_FB6DC
                moveq   #$6F,d1 ; 'o'
                move.l  -(a0),d7
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  d0,d0
                move.w  #2,(printx).w
                move.w  (printx).w,-(sp)
                addq.w  #1,(printy).w
loc_FB686:                              ; CODE XREF: sub_FB634+32   j
                jsr     (printz).l
                ori.b   #$72,(a6) ; 'r'
                bcs.s   loc_FB702+3
                subq.w  #1,(a4)
                addq.b  #2,-(a0)
                moveq   #$6F,d2 ; 'o'
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                addq.w  #1,(printy).w
                move.w  (sp),(printx).w
loc_FB6AA:                              ; CODE XREF: sub_FB634+12   p
                jsr     (printz).l
; End of function sub_FB634
                ori.b   #$65,(a6) ; 'e'
                bge.s   loc_FB716+5
                bls.s   loc_FB72A+2
                movea.l $616D(a6),a0
loc_FB6BC:                              ; CODE XREF: sub_FB634+18   j
                bcs.s   loc_FB6EA+2
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                addq.w  #1,(printy).w
                move.w  (sp)+,(printx).w
                jsr     (printz).l
                ori.b   #$72,(a6) ; 'r'
                bcs.s   loc_FB74A+3


sub_FB6DC:                              ; CODE XREF: sub_FB634+30   j
                                        ; sub_FB634+34   p
                clr.b   -(a0)
                moveq   #$6F,d2 ; 'o'
                movea.l -(a5),a0
                bcc.s   loc_FB74A+3
                moveq   #$2E,d2 ; '.'
                move.l  -(a0),d0
                move.l  -(a0),d0
loc_FB6EA:                              ; CODE XREF: ROM:loc_FB6BC   j
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FB6DC


sub_FB6F0:                              ; CODE XREF: ROM:000FB2B8   p
                movem.l d0-d7/a0-a6,-(sp)
                move.w  (word_FFD4EA).w,d0
                mulu.w  #$C,d0
                movea.l #$FFFFD45A,a0
loc_FB702:                              ; CODE XREF: sub_FB634+5C   j
                movea.l #unk_FB7F2,a1
                tst.b   (a0,d0.w)
                beq.w   loc_FB716
                movea.l #unk_FB80A,a1
loc_FB716:                              ; CODE XREF: sub_FB6F0+1C   j
                                        ; ROM:000FB6B4   j
                jsr     (print).l
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FB6F0


sub_FB722:                              ; CODE XREF: ROM:000FB258   p
                                        ; ROM:000FB404   p
                movem.l d0-d4/a0-a6,-(sp)
                move.b  (word_FFD4DA).w,d0
loc_FB72A:                              ; CODE XREF: ROM:000FB6B6   j
                bsr.w   sub_FB750
                cmp.w   #$1E,d0
                blt.w   loc_FB73C
                clr.w   d5
                bra.w   loc_FB74A
; ---------------------------------------------------------------------------
loc_FB73C:                              ; CODE XREF: sub_FB722+10   j
                move.w  d0,d5
                movea.l #unk_FB95C,a0
                move.b  (a0,d5.w),(word_FFD4DA).w
loc_FB74A:                              ; CODE XREF: sub_FB722+16   j
                                        ; ROM:000FB6D8   j ...
                movem.l (sp)+,d0-d4/a0-a6
                rts
; End of function sub_FB722


sub_FB750:                              ; CODE XREF: ROM:000FB438   p
                                        ; sub_FB722:loc_FB72A   p
                movem.l d1-d3/a0-a6,-(sp)
                movea.l #unk_FB95C,a0
                move.b  d0,d1
                clr.w   d0
                move.w  #$1E,d3
loc_FB762:                              ; CODE XREF: sub_FB750+1C   j
                cmp.b   (a0,d0.w),d1
                beq.w   loc_FB774
                addq.w  #1,d0
                dbf     d3,loc_FB762
                move.w  #$1E,d0
loc_FB774:                              ; CODE XREF: sub_FB750+16   j
                movem.l (sp)+,d1-d3/a0-a6
                rts
; End of function sub_FB750


sub_FB77A:                              ; CODE XREF: ROM:000FB25C   p
                                        ; ROM:000FB41C   p
                jsr     (printz).l
                ori.b   #4,d6
                move.b  d0,-(a1)
                add.w   d4,(printx).w
                tst.w   (word_FFD6C4).w
                beq.w   locret_FB79E
                jsr     (printz).l
                ori.b   #$3C,d6 ; '<'
                move.l  d0,d0
locret_FB79E:                           ; CODE XREF: sub_FB77A+14   j
                                        ; sub_FB7A0+4   j
                rts
; End of function sub_FB77A


sub_FB7A0:                              ; CODE XREF: ROM:000FB282   p
                                        ; ROM:000FB400   p ...
                tst.w   (word_FFD6C4).w
                beq.s   locret_FB79E
                movea.l #$FFFFCF36,a1
                move.w  #4,(a1)
                move.b  #0,3(a1)
                movea.l #unk_FB95C,a0
                move.b  (a0,d5.w),d0
                move.b  d0,2(a1)
                jmp     print
; End of function sub_FB7A0


sub_FB7CA:                              ; CODE XREF: ROM:000FB260   p
                                        ; ROM:000FB3DC   p ...
                jsr     (printz).l
                ori.b   #$18,d6
                move.b  d0,d0
                move.w  d5,d0
                ext.l   d0
                divu.w  #6,d0
                asl.w   #1,d0
                add.w   d0,(printy).w
                swap    d0
                asl.w   #1,d0
                add.w   d0,(printx).w
                moveq   #3,d0
                moveq   #3,d1
                rts
; End of function sub_FB7CA
; ---------------------------------------------------------------------------


sub_FB822:                              ; CODE XREF: ROM:000FB232   p
                movem.l d0-d7/a0-a6,-(sp)
                move.w  (word_FFD4E8).w,-(sp)
                move.w  (word_FFD4EA).w,-(sp)
                jsr     (printz).l
                ori.b   #5,d6
                        #$3C
                ori.b   #$FC,d6
                ori.b   #$EA,d1
                movea.l #$FFFFBF20,a1
loc_FB84A:                              ; CODE XREF: sub_FB822+40   j
                bsr.w   sub_FB992
                move.w  (printx).w,-(sp)
                bsr.w   sub_FB91A
                move.w  (sp)+,(printx).w
                addq.w  #1,(printy).w
                addq.w  #1,(word_FFD4EA).w
                dbf     d7,loc_FB84A
                move.w  (sp)+,(word_FFD4EA).w
                move.w  (sp)+,(word_FFD4E8).w
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FB822


sub_FB874:                              ; CODE XREF: ROM:loc_FB2BC   p
                movem.l d0-d7/a0-a6,-(sp)
                move.w  (word_FFD4EA).w,d0
                cmp.w   (word_FFD4EC).w,d0
                beq.w   loc_FB898
                movea.l #unk_FB8E4,a1
                bsr.w   sub_FB89E
                movea.l #unk_FB8DC,a1
                bsr.w   sub_FB89E
loc_FB898:                              ; CODE XREF: sub_FB874+C   j
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FB874


sub_FB89E:                              ; CODE XREF: sub_FB874+16   p
                                        ; sub_FB874+20   p
                tst.w   (word_FFD4EC).w
                beq.w   loc_FB8D4
                jsr     (printz).l
                ori.b   #3,d6
                        #$38
                adda.w  $5340(a4),a2
                add.w   d0,(printy).w
                move.l  a1,-(sp)
                jsr     (print).l
                movea.l (sp)+,a1
                adda.w  (a1),a1
                move.w  #$12,(printx).w
                jsr     (print).l
loc_FB8D4:                              ; CODE XREF: sub_FB89E+4   j
                move.w  (word_FFD4EA).w,(word_FFD4EC).w
                rts
; End of function sub_FB89E
; ---------------------------------------------------------------------------


sub_FB8EC:                              ; CODE XREF: ROM:loc_FB296   p
                movem.l d0-d7/a0-a6,-(sp)
                move.w  #$B,d3
                movea.l #$FFFFD4DA,a0
                clr.w   (word_FFD4E8).w
loc_FB8FE:                              ; CODE XREF: sub_FB8EC+24   j
                cmpi.b  #$2D,(a0) ; '-'
                beq.w   loc_FB914
                tst.b   (a0)+
                beq.w   loc_FB914
                addq.w  #1,(word_FFD4E8).w
                dbf     d3,loc_FB8FE
loc_FB914:                              ; CODE XREF: sub_FB8EC+16   j
                                        ; sub_FB8EC+1C   j
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FB8EC


sub_FB91A:                              ; CODE XREF: ROM:000FB2B4   p
                                        ; sub_FB822+30   p
                movem.l d0-d7/a0-a6,-(sp)
                movea.l #$FFFFCF36,a0
                move.w  (word_FFD4E8).w,d0
                move.w  #0,d3
                move.w  #$E,(a0)+
loc_FB930:                              ; CODE XREF: sub_FB91A+2E   j
                move.b  (a1,d3.w),d1
                cmp.w   (word_FFD4E8).w,d3
                blt.w   loc_FB940
                move.b  #$2D,d1 ; '-'
loc_FB940:                              ; CODE XREF: sub_FB91A+1E   j
                move.b  d1,(a0)+
                addq.w  #1,d3
                cmp.w   #$C,d3
                blt.s   loc_FB930
                movea.l #$FFFFCF36,a1
                jsr     (print).l
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FB91A
; ---------------------------------------------------------------------------


sub_FB97C:                              ; CODE XREF: ROM:000FB26C   p
                                        ; ROM:000FB488   p
                move.w  (framercset).w,-(sp)
                move.w  (word_FFD530).w,(framercset).w
                jsr     (Framer).l
                move.w  (sp)+,(framercset).w
                rts
; End of function sub_FB97C


sub_FB992:                              ; CODE XREF: ROM:000FB22E   p
                                        ; ROM:000FB3AA   p ...
                movem.l d0-d7/a0-a6,-(sp)
                movea.l #$FFFFD45A,a0
                move.w  (word_FFD4EA).w,d2
                mulu.w  #$C,d2
                move.w  #0,(word_FFD4E8).w
                move.w  #$B,d3
loc_FB9AE:                              ; CODE XREF: sub_FB992+38   j
                move.b  (a0,d2.w),d0
                beq.w   loc_FB9BA
                bra.w   loc_FB9C2
; ---------------------------------------------------------------------------
loc_FB9BA:                              ; CODE XREF: sub_FB992+20   j
                move.b  #$2D,d0 ; '-'
                subq.w  #1,(word_FFD4E8).w
loc_FB9C2:                              ; CODE XREF: sub_FB992+24   j
                move.b  d0,(a1)+
                addq.w  #1,(word_FFD4E8).w
                addq.w  #1,d2
                dbf     d3,loc_FB9AE
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FB992


sub_FB9D4:                              ; CODE XREF: ROM:loc_FB4BA   p
                movem.l d0-d7/a0-a6,-(sp)
                movea.l #$FFFFD45A,a0
                move.w  (word_FFD4EA).w,d0
                mulu.w  #$C,d0
                adda.w  d0,a0
                movea.l #$FFFFD4DA,a1
                move.w  #$B,d4
loc_FB9F2:                              ; CODE XREF: sub_FB9D4+32   j
                cmpi.b  #$2D,(a1) ; '-'
                bne.w   loc_FB9FE
                move.b  #0,(a1)
loc_FB9FE:                              ; CODE XREF: sub_FB9D4+22   j
                move.b  (a1)+,d1
                cmp.b   (a0)+,d1
                bne.w   loc_FBA0E
                dbf     d4,loc_FB9F2
                bra.w   loc_FBA4C
; ---------------------------------------------------------------------------
loc_FBA0E:                              ; CODE XREF: sub_FB9D4+2E   j
                movea.l #$FFFFD45A,a0
                move.w  (word_FFD4EA).w,d0
                mulu.w  #$C,d0
                adda.w  d0,a0
                movea.l #$FFFFD4DA,a1
                move.w  #$B,d4
loc_FBA28:                              ; CODE XREF: sub_FB9D4+64   j
                move.b  (a1)+,d1
                cmp.b   #$2D,d1 ; '-'
                bne.w   loc_FBA36
                move.b  #0,d1
loc_FBA36:                              ; CODE XREF: sub_FB9D4+5A   j
                move.b  d1,(a0)+
                dbf     d4,loc_FBA28
                bsr.w   sub_F9C5E
                jsr     (sub_FBA76).l
                jsr     (sub_1A206).l
loc_FBA4C:                              ; CODE XREF: sub_FB9D4+36   j
                movea.l #$FFFFD042,a5
                tst.w   (word_FFD4EE).w
                beq.w   loc_FBA60
                movea.l #$FFFFD044,a5
loc_FBA60:                              ; CODE XREF: sub_FB9D4+82   j
                tst.b   (word_FFD4DA).w
                bne.w   loc_FBA6C
                clr.w   (word_FFD4EA).w
loc_FBA6C:                              ; CODE XREF: sub_FB9D4+90   j
                move.w  (word_FFD4EA).w,(a5)
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FB9D4


sub_FBA76:                              ; CODE XREF: sub_FB9D4+6C   p
                movem.l d0-d7/a0-a6,-(sp)
                move.w  #$2D7,d7
                moveq   #0,d0
                moveq   #4,d1
                movea.l #$FFFFCF36,a0
                move.w  (word_FFD4EA).w,d6
loc_FBA8C:                              ; CODE XREF: sub_FBA76+48   j
                clr.w   d5
                jsr     (sub_1A244).l
                cmp.b   1(a0),d6
                bne.w   loc_FBAA2
                clr.b   1(a0)
                st      d5
loc_FBAA2:                              ; CODE XREF: sub_FBA76+22   j
                cmp.b   3(a0),d6
                bne.w   loc_FBAB0
                clr.b   3(a0)
                st      d5
loc_FBAB0:                              ; CODE XREF: sub_FBA76+30   j
                tst.w   d5
                beq.w   loc_FBABC
                jsr     (sub_1A1E4).l
loc_FBABC:                              ; CODE XREF: sub_FBA76+3C   j
                addq.l  #4,d0
                dbf     d7,loc_FBA8C
                move.w  #$1B,d7
                move.l  #$B60,d0
                moveq   #$10,d1
                movea.l #$FFFFCF36,a0
                move.w  (word_FFD4EA).w,d6
loc_FBAD8:                              ; CODE XREF: sub_FBA76+D0   j
                clr.w   d5
                jsr     (sub_1A244).l
                cmp.b   1(a0),d6
                bne.w   loc_FBAEE
                clr.b   1(a0)
                st      d5
loc_FBAEE:                              ; CODE XREF: sub_FBA76+6E   j
                cmp.b   3(a0),d6
                bne.w   loc_FBAFC
                clr.b   3(a0)
                st      d5
loc_FBAFC:                              ; CODE XREF: sub_FBA76+7C   j
                cmp.b   5(a0),d6
                bne.w   loc_FBB0A
                clr.b   5(a0)
                st      d5
loc_FBB0A:                              ; CODE XREF: sub_FBA76+8A   j
                cmp.b   7(a0),d6
                bne.w   loc_FBB18
                clr.b   7(a0)
                st      d5
loc_FBB18:                              ; CODE XREF: sub_FBA76+98   j
                cmp.b   9(a0),d6
                bne.w   loc_FBB26
                clr.b   9(a0)
                st      d5
loc_FBB26:                              ; CODE XREF: sub_FBA76+A6   j
                cmp.b   $B(a0),d6
                bne.w   loc_FBB34
                clr.b   $B(a0)
                st      d5
loc_FBB34:                              ; CODE XREF: sub_FBA76+B4   j
                tst.w   d5
                beq.w   loc_FBB40
                jsr     (sub_1A1E4).l
loc_FBB40:                              ; CODE XREF: sub_FBA76+C0   j
                addi.l  #$10,d0
                dbf     d7,loc_FBAD8
                move.l  #$D20,d0
                move.w  (word_FFD4EA).w,d3
                asl.w   #4,d3
                ext.l   d3
                add.l   d3,d0
                moveq   #$10,d1
                movea.l #$FFFFCF36,a0
                jsr     (sub_1A244).l
                move.l  a0,-(sp)
                move.w  #$F,d3
loc_FBB6E:                              ; CODE XREF: sub_FBA76+FA   j
                clr.b   (a0)+
                dbf     d3,loc_FBB6E
                movea.l (sp)+,a0
                jsr     (sub_1A1E4).l
                jsr     (sub_1A206).l
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FBA76


sub_FBB88:                              ; CODE XREF: ROM:00017318   p
                tst.w   (OptUserRec).w
                bne.w   locret_FBBDC
                clr.w   (word_FFD042).w
                clr.w   (word_FFD044).w
                tst.w   (cont1team).w
                beq.w   loc_FBBB0
                move.w  (cont1team).w,(word_FFD4EE).w
                subq.w  #1,(word_FFD4EE).w
                jsr     (loc_FB018).l
loc_FBBB0:                              ; CODE XREF: sub_FBB88+14   j
                tst.w   (cont2team).w
                beq.w   locret_FBBDC
                movem.w d0,-(sp)
                move.w  (cont1team).w,d0
                cmp.w   (cont2team).w,d0
                movem.w (sp)+,d0
                beq.w   locret_FBBDC
                move.w  (cont2team).w,(word_FFD4EE).w
                subq.w  #1,(word_FFD4EE).w
                jsr     (loc_FB018).l
locret_FBBDC:                           ; CODE XREF: sub_FBB88+4   j
                                        ; sub_FBB88+2C   j ...
                rts
; End of function sub_FBB88


sub_FBBDE:                              ; CODE XREF: ROM:000FB224   p
                                        ; ROM:loc_FB39E   p
                movem.w d0,-(sp)
                move.w  (word_FFD044).w,d0
                tst.w   (word_FFD4EE).w
                beq.w   loc_FBBF2
                move.w  (word_FFD042).w,d0
loc_FBBF2:                              ; CODE XREF: sub_FBBDE+C   j
                cmp.w   (word_FFD4EA).w,d0
                bne.w   loc_FBC0E
                move.w  #1,d0
                tst.w   (sp)
                bpl.w   loc_FBC08
                move.w  #$FFFF,d0
loc_FBC08:                              ; CODE XREF: sub_FBBDE+22   j
                add.w   d0,(word_FFD4EA).w
                clr.w   d0
loc_FBC0E:                              ; CODE XREF: sub_FBBDE+18   j
                movem.w (sp)+,d0
                rts
; End of function sub_FBBDE
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_FC320:                              ; CODE XREF: sub_187B8+10   j
                movem.l d0-d7/a0-a6,-(sp)
                move.w  #$FFFF,d0
                jsr     (prefmes).l
                jsr     (printz).l
                ori.b   #3,d6
                andi.b  #$1B,d0
                moveq   #$C,d1
                jsr     (Framer).l
                lea     unk_FC466(pc),a1
                jsr     (sub_11DF4).l
                move.w  (BA_Skater_Offset).w,d0
                movea.l #$FFFFC6CE,a2
                tst.w   (BA_Team).w
                beq.w   loc_FC366
                movea.l #$FFFFCA32,a2
loc_FC366:                              ; CODE XREF: ROM:000FC35C   j
                jsr     (sub_18AE8).l
                move.w  (printx).w,-(sp)
                jsr     (print).l
                move.w  (sp)+,(printx).w
                addq.w  #1,(printy).w
                addq.w  #6,(printx).w
                jsr     (printz).l
                ori.b   #$76,a2 ; 'v'
                eor.b   d7,d4
                btst    d3,d0
                move.w  (BA_Goalie_SCnum).w,d0
                asl.w   #7,d0
                movea.l #$FFFFB04A,a2
                adda.w  d0,a2
                clr.w   d0
                move.b  $66(a2),d0
                movea.l #$FFFFCA32,a2
                tst.w   (BA_Team).w
                beq.w   loc_FC3BA
                movea.l #$FFFFC6CE,a2
loc_FC3BA:                              ; CODE XREF: ROM:000FC3B0   j
                jsr     (sub_18AE8).l
                jsr     (print).l
                jsr     (printz).l
                ori.b   #4,d6
                btst    d4,d0
                movea.l #$FFFFC6CE,a1
                movea.l $1E(a1),a1
                adda.w  4(a1),a1
                jsr     (print).l
                move.w  #$15,(printx).w
                move.w  (word_FFD574).w,d0
                move.w  #3,d1
                jsr     (sub_11D3A).l
                jsr     (print).l
                jsr     (printz).l
                ori.b   #4,d6
                eori.b  #$7C,d0 ; '|'
                and.b   $69(a2,d2.w*2),d5
                ori.b   #$E9,(a6)+
                ori.b   #$B9,d4
                ori.b   #$A4,d1
                move.w  #$15,(printx).w
                move.w  (word_FFD576).w,d0
                move.w  #3,d1
                jsr     (sub_11D3A).l
                jsr     (print).l
                jsr     (printz).l
                ori.b   #4,a4
                cmpi.w  #$6F75,(a2)
                bgt.s   loc_FC4AC+2
                move.l  d0,d0
                move.w  (word_FFD578).w,d0
                move.w  #2,d1
                jsr     (sub_11D3A).l
                jsr     (print).l
                movem.l (sp)+,d0-d7/a0-a6
                rts
; ---------------------------------------------------------------------------


sub_FC47C:                              ; CODE XREF: ROM:000F8496   p
                movea.l #$FFFFB04A,a0
                move.w  #$3FF,d0
loc_FC486:                              ; CODE XREF: sub_FC47C+C   j
                clr.w   (a0)+
                dbf     d0,loc_FC486
                clr.w   (word_FFDED0).w
                move.w  #1,(word_FFD578).w
                bclr    #3,(word_FFC2FA).w
                clr.w   (word_FFD574).w
                clr.w   (word_FFD576).w
                clr.w   (word_FFD586).w
                clr.w   (word_FFD594).w
loc_FC4AC:                              ; CODE XREF: ROM:000FC448   j
                bsr.w   sub_FC570
                move.w  #1,(word_FFD594).w
                bsr.w   sub_FC570
                clr.w   (word_FFD594).w
                rts
; End of function sub_FC47C


sub_FC4C0:                              ; CODE XREF: ROM:0000ECE2   p
                btst    #3,(word_FFC2FA).w
                beq.w   loc_FC4D0
                jmp     loc_172E4
; ---------------------------------------------------------------------------
loc_FC4D0:                              ; CODE XREF: sub_FC4C0+6   j
                movem.l d0-d7/a0-a6,-(sp)
                bsr.w   sub_FE756
                move.w  (word_FFD594).w,(BA_Team).w
                move.w  #$B,(BA_Goalie_SCnum).w
                movea.l #$FFFFD57A,a0
                tst.w   (word_FFD594).w
                beq.w   loc_FC4FE
                move.w  #5,(BA_Goalie_SCnum).w
                movea.l #$FFFFD588,a0
loc_FC4FE:                              ; CODE XREF: sub_FC4C0+2E   j
                move.w  (word_FFD586).w,d0
                add.w   d0,d0
                move.w  (a0,d0.w),(BA_Skater_Offset).w
                bclr    #2,(byte_FFB7AC).w
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FC4C0


sub_FC516:                              ; CODE XREF: sub_F37C+60   p
                movem.l d0-d7/a0-a6,-(sp)
                btst    #0,(word_FFD594+1).w
                beq.w   loc_FC54A
                cmpi.w  #5,(word_FFD578).w
                blt.w   loc_FC54A
                move.w  (word_FFD574).w,d0
                cmp.w   (word_FFD576).w,d0
                beq.w   loc_FC54A
                bset    #3,(word_FFC2FA).w
                jsr     (sub_FD618).l
                bra.w   loc_FC56A
; ---------------------------------------------------------------------------
loc_FC54A:                              ; CODE XREF: sub_FC516+A   j
                                        ; sub_FC516+14   j ...
                eori.w  #1,(word_FFD594).w
                bne.w   loc_FC56A
                addq.w  #1,(word_FFD586).w
                cmpi.w  #5,(word_FFD586).w
                blt.w   loc_FC566
                clr.w   (word_FFD586).w
loc_FC566:                              ; CODE XREF: sub_FC516+48   j
                addq.w  #1,(word_FFD578).w
loc_FC56A:                              ; CODE XREF: sub_FC516+30   j
                                        ; sub_FC516+3A   j
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FC516


sub_FC570:                              ; CODE XREF: sub_FC47C:loc_FC4AC   p
                                        ; sub_FC47C+3A   p
                movea.l #$FFFFD586,a0
                move.w  (HomeTeam).w,d0
                tst.w   (word_FFD594).w
                beq.w   loc_FC58C
                move.w  (VisTeam).w,d0
                movea.l #$FFFFD594,a0
loc_FC58C:                              ; CODE XREF: sub_FC570+E   j
                movea.l #$30E,a1
                asl.w   #2,d0
                movea.l (a1,d0.w),a1
                adda.w  6(a1),a1
                move.w  #5,d0
loc_FC5A0:                              ; CODE XREF: sub_FC570+38   j
                clr.w   d1
                move.b  (a1)+,d1
                subq.w  #1,d1
                move.w  d1,-(a0)
                dbf     d0,loc_FC5A0
                rts
; End of function sub_FC570


sub_FC5AE:                              ; CODE XREF: SetPA+36   p
                movem.l d0-d7/a0-a6,-(sp)
                jsr     (printz).l
                ori.b   #1,d6
                btst    d6,d0
                move.w  #6,d1
                move.w  #$1E,d0
                jsr     (Framer).l
                jsr     (sub_11DE2).l
                ori.b   #2,(a4)
                addq.b  #2,-(a0)
                subq.w  #3,sp
                clr.w   (a1)+
                addq.w  #2,(printy).w
                move.w  (HomeTeam).w,d1
                move.w  (word_FFD574).w,d0
                cmp.w   (word_FFD576).w,d0
                bgt.w   loc_FC5FE
                move.w  (VisTeam).w,d1
loc_FC5FE:                              ; CODE XREF: sub_FC5AE+48   j
                asl.w   #2,d1
                movea.l #$30E,a1
                movea.l (a1,d1.w),a1
                adda.w  4(a1),a1
                move.w  #2,(printx).w
                jsr     (sub_11DF4).l
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FC5AE
; ---------------------------------------------------------------------------
                btst    #0,(word_FFC2FA).w
                beq.w   loc_FC6C6
                moveq   #0,d0
                moveq   #$1C,d1
                jsr     (sub_9BD8).l
                clr.w   (word_FFD5AC).w
                clr.w   (word_FFD5B0).w
                jsr     (printz2).l
                ori.b   #2,a0
                moveq   #$28,d0 ; '('
                moveq   #$1C,d1
                move.w  #$7FF,d2
                jsr     (eraser).l
                bsr.w   sub_FCA1E
                bsr.w   sub_FCA28
                move.w  #0,(word_FFD5B8).w
loc_FC666:                              ; CODE XREF: ROM:000FC7AC   j
                                        ; ROM:000FC84C   j
                bsr.w   sub_FC986
                bsr.w   sub_FCB1A
                bsr.w   sub_FCAB8
loc_FC672:                              ; CODE XREF: ROM:000FC6C4   j
                                        ; ROM:000FC94A   j ...
                jsr     (sub_80BA).l
                jsr     (sub_A41E).l
                jsr     (sub_11318).l
                btst    #7,d1
                bne.w   loc_FC6C6
                move.w  #1,d0
                btst    #1,d1
                bne.w   loc_FC952
                move.w  #$FFFF,d0
                btst    #0,d1
                bne.w   loc_FC952
                move.w  #0,d0
                btst    #2,d1
                bne.w   loc_FC946
                move.w  #5,d0
                btst    #3,d1
                bne.w   loc_FC946
                btst    #5,d1
                bne.w   loc_FC6CC
                bra.s   loc_FC672
; ---------------------------------------------------------------------------
loc_FC6C6:                              ; CODE XREF: ROM:000FC626   j
                                        ; ROM:000FC688   j
                jmp     loc_9CD8
; ---------------------------------------------------------------------------
loc_FC6CC:                              ; CODE XREF: ROM:000FC6C0   j
                move.w  #$C000,d7
                movea.l #$FFFFD57A,a0
                cmpa.l  #$FFFFC6CE,a2
                beq.w   loc_FC6E6
                movea.l #$FFFFD588,a0
loc_FC6E6:                              ; CODE XREF: ROM:000FC6DC   j
                move.w  (word_FFD5B8).w,d0
                asl.w   #1,d0
                move.w  (a0,d0.w),d6
                jsr     (sub_9F40).l
                move.w  d0,d1
                jsr     (sub_9F9A).l
                sub.w   d1,d0
                subq.w  #1,d0
                cmpi.w  #5,(word_FFD5B8).w
                bne.w   loc_FC712
                move.w  d1,d0
                subq.w  #1,d0
                clr.w   d1
loc_FC712:                              ; CODE XREF: ROM:000FC708   j
                move.w  d0,(word_FFD5B6).w
                clr.w   (word_FFD5B0).w
                clr.w   (word_FFD5AE).w
                movea.w #(unk_FFC018-M68K_RAM),a0
                clr.w   d2
loc_FC724:                              ; CODE XREF: ROM:000FC736   j
                move.b  d1,(a0,d2.w)
                cmp.w   d1,d6
                bne.w   loc_FC732
                move.w  d2,(word_FFD5AE).w
loc_FC732:                              ; CODE XREF: ROM:000FC72A   j
                addq.w  #1,d1
                addq.w  #1,d2
                dbf     d0,loc_FC724
                bsr.w   sub_FCA04
                jsr     (printz2).l
                ori.b   #0,a0
                btst    d1,d1
                ori.b   #$3C,d0 ; '<'
                ori.b   #$3C,(a2) ; '<'
                ori.b   #$B9,d3
                ori.b   #$B8,d1
                jsr     (printz2).l
                ori.b   #$15,d6
                move.w  #$12,d0
                move.w  #3,d1
                jsr     (Framer).l
                jsr     (printz2).l
                ori.b   #4,(a6)
                andi.b  #$7B,d2 ; '{'
                subq.w  #1,-(a5)
                bge.s   loc_FC7E8+3
                bls.s   loc_FC7FA+2
                movea.l (a0),a0
                bge.s   loc_FC7EC+1
                moveq   #$7D,d1 ; '}'
                clr.w   d0
                bra.w   loc_FC7EE
; ---------------------------------------------------------------------------
loc_FC796:                              ; CODE XREF: ROM:000FC7DC   j
                                        ; ROM:000FC7E2   j ...
                jsr     (sub_80BA).l
                jsr     (sub_A41E).l
                jsr     (sub_11318).l
                btst    #7,d1
                bne.w   loc_FC666
                btst    #5,d1
                bne.w   loc_FC820
                moveq   #1,d0
                btst    #1,d1
                bne.w   loc_FC7EE
                btst    #3,d1
                bne.w   loc_FC7DE
                moveq   #$FFFFFFFF,d0
                btst    #0,d1
                bne.w   loc_FC7EE
                btst    #2,d1
                bne.w   loc_FC7DE
                bra.s   loc_FC796
; ---------------------------------------------------------------------------
loc_FC7DE:                              ; CODE XREF: ROM:000FC7C6   j
                                        ; ROM:000FC7D8   j
                add.w   (word_FFD5AC).w,d0
                bmi.s   loc_FC796
                move.w  d0,(word_FFD5AC).w
loc_FC7E8:                              ; CODE XREF: ROM:000FC784   j
                bsr.w   sub_FC850
loc_FC7EC:                              ; CODE XREF: ROM:000FC78A   j
                bra.s   loc_FC796
; ---------------------------------------------------------------------------
loc_FC7EE:                              ; CODE XREF: ROM:000FC792   j
                                        ; ROM:000FC7BE   j ...
                add.w   (word_FFD5AE).w,d0
                bmi.s   loc_FC796
                cmp.w   (word_FFD5B6).w,d0
                bgt.s   loc_FC796
loc_FC7FA:                              ; CODE XREF: ROM:000FC786   j
                move.w  d0,(word_FFD5AE).w
                cmp.w   (word_FFD5B0).w,d0
                bgt.w   loc_FC80A
                move.w  d0,(word_FFD5B0).w
loc_FC80A:                              ; CODE XREF: ROM:000FC802   j
                subq.w  #5,d0
                cmp.w   (word_FFD5B0).w,d0
                ble.w   loc_FC818
                move.w  d0,(word_FFD5B0).w
loc_FC818:                              ; CODE XREF: ROM:000FC810   j
                bsr.w   sub_FC850
                bra.w   loc_FC796
; ---------------------------------------------------------------------------
loc_FC820:                              ; CODE XREF: ROM:000FC7B4   j
                movea.w #(unk_FFC018-M68K_RAM),a3
                adda.w  (word_FFD5AE).w,a3
                clr.w   d0
                move.b  (a3),d0
                move.w  (word_FFD5B8).w,d2
                movea.l #$FFFFD57A,a0
                cmpa.l  #$FFFFC6CE,a2
                beq.w   loc_FC846
                movea.l #$FFFFD588,a0
loc_FC846:                              ; CODE XREF: ROM:000FC83C   j
                asl.w   #1,d2
                move.w  d0,(a0,d2.w)
                bra.w   loc_FC666


sub_FC850:                              ; CODE XREF: ROM:loc_FC7E8   p
                                        ; ROM:loc_FC818   p
                jsr     (printz).l
                ori.b   #$16,d6
                btst    d0,d0
loc_FC85C:                              ; CODE XREF: sub_FC850+3C   j
                movea.l #unk_1940E,a1
                cmpi.w  #5,(word_FFD5B8).w
                bne.w   loc_FC872
                movea.l #unk_19570,a1
loc_FC872:                              ; CODE XREF: sub_FC850+18   j
                move.w  (word_FFD5AC).w,d0
                bra.w   loc_FC87E
; ---------------------------------------------------------------------------
loc_FC87A:                              ; CODE XREF: sub_FC850+30   j
                adda.w  (a1),a1
                addq.w  #4,a1
loc_FC87E:                              ; CODE XREF: sub_FC850+26   j
                tst.w   (a1)
                dbmi    d0,loc_FC87A
                bpl.w   loc_FC88E
                subq.w  #1,(word_FFD5AC).w
                bra.s   loc_FC85C
; ---------------------------------------------------------------------------
loc_FC88E:                              ; CODE XREF: sub_FC850+34   j
                cmpa.l  #unk_1940E,a1
                bne.w   loc_FC89E
                movea.l #unk_FC91A,a1
loc_FC89E:                              ; CODE XREF: sub_FC850+44   j
                cmpa.l  #unk_19570,a1
                bne.w   loc_FC8AE
                movea.l #unk_FC930,a1
loc_FC8AE:                              ; CODE XREF: sub_FC850+54   j
                jsr     (print).l
                move.l  (a1),d4
                movea.w #(unk_FFC018-M68K_RAM),a3
                move.w  (word_FFD5B0).w,d2
                move.w  (word_FFD5B6).w,d1
                sub.w   d2,d1
                cmp.w   #5,d1
                bls.w   loc_FC8CE
                moveq   #5,d1
loc_FC8CE:                              ; CODE XREF: sub_FC850+78   j
                move.w  #2,(printy).w
loc_FC8D4:                              ; CODE XREF: sub_FC850+C4   j
                jsr     (printz2).l
                ori.b   #4,-(a0)
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                cmp.w   (word_FFD5AE).w,d2
                bne.w   loc_FC906
                move.w  d7,(printa).w
loc_FC906:                              ; CODE XREF: sub_FC850+AE   j
                clr.w   d0
                move.b  (a3,d2.w),d0
                jsr     (sub_8D4E).l
                addq.w  #1,d2
                dbf     d1,loc_FC8D4
                rts
; End of function sub_FC850
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_FC946:                              ; CODE XREF: ROM:000FC6AC   j
                                        ; ROM:000FC6B8   j
                cmp.w   (word_FFD5B8).w,d0
                beq.w   loc_FC672
                bra.w   loc_FC976
; ---------------------------------------------------------------------------
loc_FC952:                              ; CODE XREF: ROM:000FC694   j
                                        ; ROM:000FC6A0   j
                cmpi.w  #5,(word_FFD5B8).w
                beq.w   loc_FC672
                add.w   (word_FFD5B8).w,d0
                bmi.w   loc_FC972
                cmp.w   #5,d0
                blt.w   loc_FC976
                clr.w   d0
                bra.w   loc_FC976
; ---------------------------------------------------------------------------
loc_FC972:                              ; CODE XREF: ROM:000FC960   j
                move.w  #4,d0
loc_FC976:                              ; CODE XREF: ROM:000FC94E   j
                                        ; ROM:000FC968   j ...
                move.w  d0,(word_FFD5B8).w
                bsr.w   sub_FCB1A
                bsr.w   sub_FCAB8
                bra.w   loc_FC672


sub_FC986:                              ; CODE XREF: ROM:loc_FC666   p
                bsr.w   sub_FCA04
                movem.l d0-d5/a0-a2,-(sp)
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$7C,d0 ; '|'
                ori.b   #$24,d5 ; '$'
                adda.l  4(a1),a1
                movea.w #$30A,a2
                clr.w   d0
                clr.w   d1
                move.w  (a1),d2
                move.w  2(a1),d3
                moveq   #1,d4
                moveq   #0,d5
                jsr     (dobitmap).l
                movem.l (sp)+,d0-d5/a0-a2
                jsr     (printz).l
                ori.b   #7,d6
                btst    d0,d0
                moveq   #$1A,d0
                moveq   #6,d1
                jsr     (Framer).l
                jsr     (sub_11DE2).l
                ori.b   #$A,(a4)
                subi.b  #$53,-(a0) ; 'S'
                bvc.s   loc_FCA54+1
                ble.s   loc_FCA5A+2
                ble.s   loc_FCA5E+1
                moveq   #$20,d2 ; ' '
                move.l
                btst    d7,d1
                clr.w   d0
                cmpa.w  #$C6CE,a2
                beq.w   loc_FC9FE
                move.w  #$2C,d0 ; ','
loc_FC9FE:                              ; CODE XREF: sub_FC986+70   j
                jmp     sub_8078
; End of function sub_FC986


sub_FCA04:                              ; CODE XREF: ROM:000FC73A   p
                                        ; sub_FC986   p
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$28,d0 ; '('
                moveq   #$A,d1
                move.w  #$7FF,d2
                jmp     eraser
; End of function sub_FCA04


sub_FCA1E:                              ; CODE XREF: ROM:000FC658   p
                clr.w   (word_FFBD82).w
                clr.w   (word_FFBDA2).w
                rts
; End of function sub_FCA1E


sub_FCA28:                              ; CODE XREF: ROM:000FC65C   p
                jsr     (printz2).l
                ori.b   #2,a0
                jsr     (printz2).l
                ori.b   #4,d4
                jsr     (printz2).l
                ori.b   #7,a6
                subq.w  #1,$6F6F(a0)
                moveq   #$65,d2 ; 'e'
                moveq   #$73,d1 ; 's'
loc_FCA54:                              ; CODE XREF: sub_FC986+5E   j
                jsr     (printz2).l
loc_FCA5A:                              ; CODE XREF: sub_FC986+60   j
                ori.b   #3,a2
loc_FCA5E:                              ; CODE XREF: sub_FC986+62   j
                move.w  $2000(a6),-(a0)
                jsr     (printz2).l
                ori.b   #3,a2
                move.w  $2000(a6),d1
                jsr     (printz2).l
                ori.b   #3,a2
                move.w  $2000(a6),-(a1)
                jsr     (printz2).l
                ori.b   #3,a2
                move.w  $2000(a6),d2
                jsr     (printz2).l
                ori.b   #3,a2
                move.w  $2000(a6),-(a2)
                jsr     (printz2).l
                ori.b   #$1A,a4
                bsr.s   loc_FCB1E+2
                bvs.s   sub_FCB1A+1
                rts
; End of function sub_FCA28


sub_FCAB8:                              ; CODE XREF: ROM:000FC66E   p
                                        ; ROM:000FC97E   p
                jsr     (printz2).l
                ori.b   #4,a2
                andi.b  #$F9,a0
                btst    d0,d0
                moveq   #$18,d0
                moveq   #3,d1
                jsr     (Framer).l
                jsr     (printz2).l
                ori.b   #$15,a0
                movea.l #$FFFFD57A,a1
                cmpa.l  #$FFFFC6CE,a2
                beq.w   loc_FCAF6
                movea.l #$FFFFD588,a1
loc_FCAF6:                              ; CODE XREF: sub_FCAB8+34   j
                move.w  (word_FFD5B8).w,d0
                asl.w   #1,d0
                move.w  (a1,d0.w),d0
                jsr     (sub_18A90).l
                move.w  (a1),d0
                lsr.w   #1,d0
                sub.w   d0,(printx).w
                jsr     (print2).l
                clr.w   (word_FFB030).w
                rts
; End of function sub_FCAB8


sub_FCB1A:                              ; CODE XREF: ROM:000FC66A   p
                                        ; ROM:000FC97A   p ...
                movem.l d0-d7/a0-a6,-(sp)
loc_FCB1E:                              ; CODE XREF: sub_FCA28+8A   p
                jsr     (printz2).l
; End of function sub_FCB1A
                ori.b   #6,a0
                move.w  #0,d1
                movea.l #$FFFFD57A,a0
                cmpa.l  #$FFFFC6CE,a2
                beq.w   loc_FCB46
                movea.l #$FFFFD588,a0
loc_FCB46:                              ; CODE XREF: ROM:000FCB3C   j
                                        ; ROM:000FCB92   j
                move.w  d1,d0
                asl.w   #1,d0
                move.w  (a0,d0.w),d0
                jsr     (sub_18B6E).l
                move.w  (printx).w,-(sp)
                cmp.w   (word_FFD5B8).w,d1
                bne.w   loc_FCB66
                move.w  #2,(word_FFB030).w
loc_FCB66:                              ; CODE XREF: ROM:000FCB5C   j
                cmp.w   #5,d1
                bne.w   loc_FCB7A
                move.w  #$19,(printx).w
                move.w  #$E,(printy).w
loc_FCB7A:                              ; CODE XREF: ROM:000FCB6A   j
                jsr     (print2).l
                clr.w   (word_FFB030).w
                move.w  (sp)+,(printx).w
                addq.w  #2,(printy).w
                addq.w  #1,d1
                cmp.w   #6,d1
                blt.s   loc_FCB46
                movem.l (sp)+,d0-d7/a0-a6
                rts


sub_FCB9A:                              ; CODE XREF: sub_17730:loc_178C0   p
                movem.l d0-d7/a0/a2-a6,-(sp)
                move.w  (HomeTeam).w,d1
                ext.l   d1
                movea.l #$FFFFCFFE,a0
                move.l  a0,-(sp)
                jsr     (clrCrowdRAM?).l
                movea.l (sp)+,a0
                movea.l #$FFFFBF20,a1
                clr.w   d0
                move.b  8(a0),d0
                bne.w   loc_FCBC8
                move.b  #$50,d0 ; 'P'
loc_FCBC8:                              ; CODE XREF: sub_FCB9A+26   j
                move.l  a1,-(sp)
                jsr     (sub_F998E).l
                movea.l (sp)+,a1
                movem.l (sp)+,d0-d7/a0/a2-a6
                rts
; End of function sub_FCB9A
; ---------------------------------------------------------------------------


sub_FCC76:                              ; CODE XREF: ROM:0001732C   p
                jsr     (sub_F9C68).l
                jsr     (sub_F71A2).l
                clr.w   (word_FFD5A4).w
                move.w  #$7A,-(sp) ; 'z'
                jsr     (song).l
                move.l  #loc_15E4C,(vbint).w
                jsr     (clearTeamStats).l
                move.l  a0,-(sp)
                movea.l #$FFFFC6CE,a0
                jsr     (Create_HotCold_Table).l
                movea.l #$FFFFCA32,a0
                jsr     (Create_HotCold_Table).l
                movea.l (sp)+,a0
                jsr     (sub_F71A2).l
                bclr    #1,(disflags).w
                move.w  #6,(Map1col1).w
                move.w  #6,(Map2col1).w
                move.w  #0,d0
                jsr     (setvram).l
                move.w  #2,d4
                move.w  d4,(word_FFD430).w
                addi.w  #$24,d4 ; '$'
                move.w  d4,(word_FFD432).w
                addi.w  #$24,d4 ; '$'
                move.w  d4,(word_FFB010).w
                movea.l #unk_A9A18,a2
                jsr     (sub_1172C).l
                bchg    d2,d3
                move.b  -(sp),$79AB(a2)
                muls.w  $4EB9(sp),d6
                ori.b   #4,d1
                move.w  d4,(word_FFB014).w
                movea.l #unk_AAC5A,a2
                jsr     (sub_1172C).l
                eori.b  #$67,-(a3) ; 'g'
                or.l    d4,-$3211(a3)
                movea.l #unk_55B86,a2
                move.w  d4,(framercset).w
                jsr     (sub_1172C).l
                bchg    d2,d2
                move.l  -(a1),-$7655(a2)
                muls.w  $4EB9(sp),d6
                ori.b   #$92,d1
                ori.b   #0,d6
                ori.b   #$7C,d0 ; '|'
                ori.b   #$24,d5 ; '$'
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                clr.w   d0
                clr.w   d1
                moveq   #$28,d2 ; '('
                moveq   #$1C,d3
                moveq   #3,d5
                jsr     (dobitmap).l
                jsr     (sub_11DE2).l
                ori.b   #$C,a6
                movep.l $4154(a5),d6
                subq.w  #2,(a0)
                subq.b  #1,d0
                move.w  #0,(word_FFB030).w
                jsr     (printz).l
                ori.b   #$10,(a0)
                move.b  d1,$4456(a0)
                addq.w  #2,d1
                move.w  d0,d5
                jsr     (printz).l
                ori.b   #6,d6
                btst    d1,d0
                moveq   #$21,d0 ; '!'
                moveq   #9,d1
                jsr     (Framer).l
                jsr     (printz).l
                ori.b   #1,d6
                move.w  #8,d0
                move.w  #8,d1
                jsr     (Framer).l
                jsr     (printz).l
                ori.b   #$1F,d6
                move.w  #8,d0
                move.w  #8,d1
                jsr     (Framer).l
                jsr     (printz).l
                ori.b   #1,d6
                btst    d0,d0
                movea.l #unk_B389C,a0
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                clr.w   d0
                clr.w   d1
                move.w  (a1),d2
                move.w  2(a1),d3
                moveq   #$C,d5
                jsr     (dobitmap).l
                movea.l #unk_F5AFE,a2
                move.w  d4,(word_FFDEE4).w
                jsr     (sub_11738).l
                movea.l #unk_F5D24,a2
                move.w  d4,(word_FFDEE6).w
                jsr     (sub_11738).l
                clr.w   (word_FFD598).w
                clr.w   (word_FFD59A).w
                move.w  #$10D,(word_FFD5A8).l
                bsr.w   sub_FD46C
                bsr.w   sub_FD084
                bsr.w   sub_FD1FE
                move.w  #$18,(palcount).w
                move.l  #loc_15E4C,(vbint).w
                move    #$2500,sr
                jsr     (sub_17718).l
                move.w  #$1B,(a0)+
                move.w  #$1D,(a0)+
                move.w  #$1A,(a0)+
                move.w  #$1D,(a0)+
                jsr     (sub_F7318).l
                tst.w   d0
                bmi.w   loc_FCE84
                move.w  d0,(a0)+
                move.w  #$1D,(a0)+
loc_FCE84:                              ; CODE XREF: sub_FCC76+204   j
                move.w  (HomeTeam).w,d0
                move.w  #$1E,(a0)+
                move.w  #$1D,(a0)+
                cmp.w   (VisTeam).w,d0
                beq.w   loc_FCE9C
                move.w  #$1F,(a0)+
loc_FCE9C:                              ; CODE XREF: sub_FCC76+21E   j
                move.w  #$1D,(a0)+
                move.w  #$20,(a0)+ ; ' '
                move.w  #$1D,(a0)+
                move.w  #$21,(a0)+ ; '!'
                move.w  #$FFFF,(a0)
                clr.w   (asv).w
                move.w  #$7FFF,(word_FFD5B6).w
                move.l  #$8CA0,(dword_FFDEEC).w
loc_FCEC2:                              ; CODE XREF: sub_FCC76+2EE   j
                                        ; sub_FCC76+304   j
                moveq   #0,d0
                jsr     (waitx).l
                subq.w  #1,(word_FFD5A8).w
                bpl.w   loc_FCEDA
                move.w  #$10E,(word_FFD5A8).l
loc_FCEDA:                              ; CODE XREF: sub_FCC76+258   j
                bsr.w   sub_FD4CA
                btst    #7,d1
                bne.w   loc_FCF7E
                cmpi.w  #$10E,(word_FFD5A8).w
                beq.w   loc_FCF06
                btst    #5,d1
                beq.w   loc_FCF16
                move.w  #$7FFF,(word_FFD5B6).w
                move.l  #$8CA0,(dword_FFDEEC).w
loc_FCF06:                              ; CODE XREF: sub_FCC76+276   j
                bsr.w   sub_FD4C0
                move.w  #1,d0
                bsr.w   sub_FCF86
                bra.w   loc_FCF4C
; ---------------------------------------------------------------------------
loc_FCF16:                              ; CODE XREF: sub_FCC76+27E   j
                btst    #6,d1
                beq.w   loc_FCF3C
                move.w  #$7FFF,(word_FFD5B6).w
                move.l  #$8CA0,(dword_FFDEEC).w
                bsr.w   sub_FD4C0
                move.w  #$FFFF,d0
                bsr.w   sub_FCF86
                bra.w   loc_FCF4C
; ---------------------------------------------------------------------------
loc_FCF3C:                              ; CODE XREF: sub_FCC76+2A4   j
                clr.w   (asv).w
                btst    #1,d1
                beq.w   loc_FCF4C
                st      (asv).w
loc_FCF4C:                              ; CODE XREF: sub_FCC76+29C   j
                                        ; sub_FCC76+2C2   j ...
                btst    #1,(word_FFDED4+1).w
                beq.w   loc_FCF5A
                st      (asv).w
loc_FCF5A:                              ; CODE XREF: sub_FCC76+2DC   j
                jsr     (sub_17730).l
                subq.w  #1,(word_FFD5B6).w
                bpl.w   loc_FCEC2
                tst.w   (OptNOP).w
                beq.w   loc_FCF7E
                move.w  #$FFFF,(word_FFD5B6).w
                subq.l  #1,(dword_FFDEEC).w
                bpl.w   loc_FCEC2
loc_FCF7E:                              ; CODE XREF: sub_FCC76+26C   j
                                        ; sub_FCC76+2F6   j
                move.w  #0,(word_FFB030).w
                rts
; End of function sub_FCC76


sub_FCF86:                              ; CODE XREF: sub_FCC76+298   p
                                        ; sub_FCC76+2BE   p
                move.w  #$10E,(word_FFD5A8).w
                add.w   (word_FFD598).w,d0
                bmi.w   loc_FCFA2
                cmp.w   #7,d0
                blt.w   loc_FCFA6
                clr.w   d0
                bra.w   loc_FCFA6
; ---------------------------------------------------------------------------
loc_FCFA2:                              ; CODE XREF: sub_FCF86+A   j
                move.w  #6,d0
loc_FCFA6:                              ; CODE XREF: sub_FCF86+12   j
                                        ; sub_FCF86+18   j
                move.w  d0,(word_FFD598).w
                bsr.w   sub_FD46C
                bsr.w   sub_FD084
                bsr.w   sub_FD1FE
                rts
; End of function sub_FCF86


sub_FCFB8:                              ; CODE XREF: sub_FD1FE+AC   p
                                        ; sub_FD1FE+C8   p
                bsr.w   sub_FCFDC
                move.l  a2,-(sp)
                movea.l a0,a2
                bsr.w   sub_FE172
                movea.l (sp)+,a2
                move.l  d0,-(sp)
                move.w  #2,d1
                jsr     (sub_11D3A).l
                jsr     (print2).l
                move.l  (sp)+,d0
                rts
; End of function sub_FCFB8


sub_FCFDC:                              ; CODE XREF: sub_FCFB8   p
                                        ; sub_FD1FE+196   p ...
                move.l  a1,-(sp)
                move.w  (printx).w,-(sp)
                movea.l #unk_FCFF6,a1
                jsr     (print2).l
                move.w  (sp)+,(printx).w
                movea.l (sp)+,a1
                rts
; End of function sub_FCFDC
; ---------------------------------------------------------------------------


sub_FD084:                              ; CODE XREF: sub_FCC76+1CC   p
                                        ; sub_FCF86+28   p
                movem.l d0-d7/a0-a6,-(sp)
                tst.w   (word_FFD598).w
                bne.w   loc_FD0E6
                move.w  (VisTeam).w,d3
                bsr.w   sub_FD1F0
                move.w  #2,(printx).w
                move.w  #$F,(printy).w
                move.w  (word_FFD432).w,d4
                move.w  #4,d5
                move.w  #$6000,(printa).w
                bsr.w   sub_FD17E
                move.w  (HomeTeam).w,d3
                bsr.w   sub_FD1F0
                move.w  #$20,(printx).w ; ' '
                move.w  #$F,(printy).w
                move.w  (word_FFD430).w,d4
                move.w  #0,(printa).w
                move.w  #2,d5
                bsr.w   sub_FD17E
                move.w  #$64,(palcount).w ; 'd'
                bra.w   loc_FD144
; ---------------------------------------------------------------------------
loc_FD0E6:                              ; CODE XREF: sub_FD084+8   j
                move.w  (VisTeam).w,d1
                move.w  (word_FFD59E).w,d0
                jsr     (sub_FAE26).l
                move.w  #2,(printx).w
                move.w  #$F,(printy).w
                move.w  (word_FFD432).w,d4
                move.w  #2,d5
                move.w  #0,(printa).w
                bsr.w   sub_FD14A
                move.w  (HomeTeam).w,d1
                move.w  (word_FFD59C).w,d0
                jsr     (sub_FAE26).l
                move.w  #$20,(printx).w ; ' '
                move.w  #$F,(printy).w
                move.w  (word_FFD430).w,d4
                move.w  #0,d5
                move.w  #0,(printa).w
                bsr.w   sub_FD14A
                move.w  #$64,(palcount).w ; 'd'
loc_FD144:                              ; CODE XREF: sub_FD084+5E   j
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FD084


sub_FD14A:                              ; CODE XREF: sub_FD084+8A   p
                                        ; sub_FD084+B6   p
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                movea.l #unk_C63F8,a0
                adda.l  (a0),a0
                tst.l   (a2)
                bne.w   loc_FD16E
                movea.l #unk_C63F8,a1
                adda.l  4(a1),a1
                tst.l   (a2)+
                bra.w   loc_FD170
; ---------------------------------------------------------------------------
loc_FD16E:                              ; CODE XREF: sub_FD14A+10   j
                adda.l  (a2)+,a1
loc_FD170:                              ; CODE XREF: sub_FD14A+20   j
                bsr.w   sub_FE98A
                movea.l #$FFFFDA1E,a2
                bra.w   loc_FD1A4
; End of function sub_FD14A


sub_FD17E:                              ; CODE XREF: sub_FD084+2E   p
                                        ; sub_FD084+54   p
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                asl.w   #3,d3
                cmp.w   #4,d5
                beq.w   loc_FD196
                subi.w  #$20,d3 ; ' '
                bra.w   loc_FD19A
; ---------------------------------------------------------------------------
loc_FD196:                              ; CODE XREF: sub_FD17E+C   j
                subi.w  #$40,d3 ; '@'
loc_FD19A:                              ; CODE XREF: sub_FD17E+14   j
                movea.l #unk_FF462,a0
                adda.w  d3,a0
                adda.l  (a2)+,a1
loc_FD1A4:                              ; CODE XREF: sub_FD14A+30   j
                move.w  #6,d3
                move.w  #6,d2
                clr.w   d0
                clr.w   d1
                jsr     (dobitmap).l
                cmpi.w  #$14,(printx).w
                bgt.w   loc_FD1CC
                move.w  #2,(printx).l
                bra.w   loc_FD1D4
; ---------------------------------------------------------------------------
loc_FD1CC:                              ; CODE XREF: sub_FD17E+3E   j
                move.w  #$20,(printx).l ; ' '
loc_FD1D4:                              ; CODE XREF: sub_FD17E+4A   j
                move.w  #$19,(printy).l
                move.w  #8,d0
                move.w  #3,d1
                move.w  #$7FF,d2
                jsr     (eraser).l
                rts
; End of function sub_FD17E


sub_FD1F0:                              ; CODE XREF: sub_FD084+10   p
                                        ; sub_FD084+36   p
                asl.w   #2,d3
                movea.l #unk_F86F2,a0
                movea.l (a0,d3.w),a0
                rts
; End of function sub_FD1F0


sub_FD1FE:                              ; CODE XREF: sub_FCC76+1D0   p
                                        ; sub_FCF86+2C   p
                tst.w   (word_FFD598).w
                bne.w   loc_FD2D2
                jsr     (printz2).l
                ori.b   #0,a2
                btst    d0,(a6)
                move.b  ($10043FA).l,(a3)+
                move.w  #0,d7
loc_FD21E:                              ; CODE XREF: sub_FD1FE+58   j
                move.w  (a1),d0
                asr.w   #1,d0
                neg.w   d0
                addi.w  #$16,d0
                move.w  d0,(printx).w
                cmp.w   #9,d7
                beq.w   loc_FD23A
                adda.w  (a1),a1
                bra.w   loc_FD252
; ---------------------------------------------------------------------------
loc_FD23A:                              ; CODE XREF: sub_FD1FE+32   j
                move.w  #2,(word_FFB030).w
                move.w  (printy).w,-(sp)
                subq.w  #3,(printy).w
                jsr     (print2).l
                move.w  (sp)+,(printy).w
loc_FD252:                              ; CODE XREF: sub_FD1FE+38   j
                addq.w  #1,d7
                tst.w   (a1)
                bpl.s   loc_FD21E
                move.w  #2,(word_FFB030).w
                jsr     (printz).l
                ori.b   #0,$1720(a6)
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  d0,d0
                jsr     (printz).l
                ori.b   #$22,d6 ; '"'
                move.b  d0,d3
                movea.l #$FFFFC6CE,a0
                movea.l #$FFFFCA32,a2
                bsr.w   sub_FCFB8
                move.w  d0,(word_FFD5A0).w
                move.w  #2,(word_FFB030).w
                jsr     (printz).l
                ori.b   #4,d6
                move.b  d0,d3
                exg     a0,a2
                bsr.w   sub_FCFB8
                move.w  d0,(word_FFD5A2).w
                bra.w   locret_FD3FE
; ---------------------------------------------------------------------------
loc_FD2D2:                              ; CODE XREF: sub_FD1FE+4   j
                move.w  (word_FFD598).w,d0
                subq.w  #1,d0
                movea.l #unk_FD400,a1
                bra.w   loc_FD2E4
; ---------------------------------------------------------------------------
loc_FD2E2:                              ; CODE XREF: sub_FD1FE:loc_FD2E4   j
                adda.w  (a1),a1
loc_FD2E4:                              ; CODE XREF: sub_FD1FE+E0   j
                dbf     d0,loc_FD2E2
                jsr     (printz2).l
                ori.b   #0,a2
                movep.w $13F9(a5),d0
                btst    d0,d0
                jsr     (print2).l
                move.w  #$16,(printy).w
                move.w  #2,(word_FFB030).w
                movea.l #$FFFFC6CE,a2
                move.l  (dword_19420).l,d4
                tst.w   (word_FFD5AA).w
                bne.w   loc_FD324
                move.l  (dword_19582).l,d4
loc_FD324:                              ; CODE XREF: sub_FD1FE+11C   j
                move.w  (word_FFD59C).w,d0
                jsr     (printz).l
                ori.b   #0,$1720(a6)
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  -(a0),d0
                move.l  d0,d0
                jsr     (printz).l
                ori.b   #$23,d6 ; '#'
                move.b  d0,-(a3)
                bsr.w   sub_FD89A
                bsr.w   sub_FA9F8
                mulu.w  #$64,d0 ; 'd'
                divu.w  d1,d0
                bsr.w   sub_FEF7C
                move.w  #2,d1
                move.w  d0,(word_FFD5A0).w
                jsr     (sub_11D3A).l
                jsr     (printz).l
                ori.b   #$22,d6 ; '"'
                move.b  d0,d3
                bsr.w   sub_FCFDC
                jsr     (print2).l
                movea.l #$FFFFCA32,a2
                move.l  (dword_19420).l,d4
                tst.w   (word_FFD5AA).w
                bne.w   loc_FD3B8
                move.l  (dword_19582).l,d4
loc_FD3B8:                              ; CODE XREF: sub_FD1FE+1B0   j
                move.w  (word_FFD59E).w,d0
                jsr     (printz).l
                ori.b   #0,d6
                move.b  d0,-(a3)
                bsr.w   sub_FD89A
                bsr.w   sub_FA9F8
                mulu.w  #$64,d0 ; 'd'
                divu.w  d1,d0
                bsr.w   sub_FEF7C
                move.w  d0,(word_FFD5A2).w
                move.w  #2,d1
                jsr     (sub_11D3A).l
                jsr     (printz).l
                ori.b   #4,d6
                move.b  d0,d3
                bsr.w   sub_FCFDC
                jsr     (print2).l
locret_FD3FE:                           ; CODE XREF: sub_FD1FE+D0   j
                rts
; End of function sub_FD1FE
; ---------------------------------------------------------------------------


sub_FD46C:                              ; CODE XREF: sub_FCC76+1C8   p
                                        ; sub_FCF86+24   p
                movem.l d0/a0-a1,-(sp)
                movea.l #$FFFFC6CE,a0
                bsr.w   sub_FD492
                move.w  d0,(word_FFD59C).w
                movea.l #$FFFFCA32,a0
                bsr.w   sub_FD492
                move.w  d0,(word_FFD59E).w
                movem.l (sp)+,d0/a0-a1
                rts
; End of function sub_FD46C


sub_FD492:                              ; CODE XREF: sub_FD46C+A   p
                                        ; sub_FD46C+18   p
                movea.l $1E(a0),a0
                adda.w  6(a0),a0
                move.w  (word_FFD598).w,d0
                movea.l #unk_FD4B8,a1
                move.b  (a1,d0.w),d0
                ext.w   d0
                move.w  d0,(word_FFD5AA).w
                move.b  (a0,d0.w),d0
                ext.w   d0
                subq.w  #1,d0
                rts
; End of function sub_FD492
; ---------------------------------------------------------------------------


sub_FD4C0:                              ; CODE XREF: sub_FCC76:loc_FCF06   p
                                        ; sub_FCC76+2B6   p
                clr.w   (word_FFD5A6).w
                clr.w   (word_FFD5A4).w
                rts
; End of function sub_FD4C0


sub_FD4CA:                              ; CODE XREF: sub_FCC76:loc_FCEDA   p
                movem.l d0-d7/a0-a6,-(sp)
                addq.w  #1,(word_FFD5A6).w
                cmpi.w  #7,(word_FFD5A6).w
                blt.w   loc_FD4F4
                clr.w   (word_FFD5A6).w
                addq.w  #1,(word_FFD5A4).w
                cmpi.w  #6,(word_FFD5A4).w
                blt.w   loc_FD4F4
                move.w  #5,(word_FFD5A4).w
loc_FD4F4:                              ; CODE XREF: sub_FD4CA+E   j
                                        ; sub_FD4CA+20   j
                move.w  (word_FFD5A4).w,d1
                asl.w   #2,d1
                movea.l #unk_FD548,a1
                move.w  (word_FFD5A0).w,d0
                cmp.w   (word_FFD5A2).w,d0
                bgt.w   loc_FD516
                beq.w   loc_FD51E
                movea.l #unk_FD560,a1
loc_FD516:                              ; CODE XREF: sub_FD4CA+3E   j
                movea.l (a1,d1.w),a1
                bra.w   loc_FD524
; ---------------------------------------------------------------------------
loc_FD51E:                              ; CODE XREF: sub_FD4CA+42   j
                movea.l #unk_FD5A8,a1
loc_FD524:                              ; CODE XREF: sub_FD4CA+50   j
                move.w  #2,(word_FFB030).w
                jsr     (printz).l
                ori.b   #$13,d6
                move.b  d0,d3
                jsr     (print2).l
                move.w  #0,(word_FFB030).w
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FD4CA
; ---------------------------------------------------------------------------


sub_FD5AE:                              ; CODE XREF: sub_17730+1B6   p
                                        ; sub_17730+1CA   p
                movem.l d0/a0/a2,-(sp)
                movea.l a2,a1
                movea.l $1E(a1),a1
                adda.w  4(a1),a1
                adda.w  (a1),a1
                adda.w  (a1),a1
                cmpi.w  #2,(a1)
                bne.w   loc_FD5DE
                movea.l #unk_FD5E4,a1
                cmpa.l  #$FFFFC6CE,a2
                beq.w   loc_FD5DE
                movea.l #unk_FD5EA,a1
loc_FD5DE:                              ; CODE XREF: sub_FD5AE+16   j
                                        ; sub_FD5AE+26   j
                movem.l (sp)+,d0/a0/a2
                rts
; End of function sub_FD5AE
; ---------------------------------------------------------------------------


sub_FD5F4:                              ; CODE XREF: sub_17730+1DE   p
                                        ; sub_17730+1F2   p
                movem.l d0/a0/a2,-(sp)
                movea.l a2,a1
                movea.l $1E(a1),a1
                adda.w  4(a1),a1
                adda.w  (a1),a1
                adda.w  (a1),a1
                adda.w  (a1),a1
                movem.l (sp)+,d0/a0/a2
                rts
; End of function sub_FD5F4
; ---------------------------------------------------------------------------


sub_FD618:                              ; CODE XREF: sub_FC516+2A   p
                movem.l d0-d7/a0-a6,-(sp)
                bset    #2,(sflags2).w
                jsr     (freezewindow).l
                move.w  #$60,(word_FFDED0).w ; '`'
                movea.l #$FFFFB04A,a3
                move.w  #0,d0
                move.w  (word_FFD574).w,d2
                cmp.w   (word_FFD576).w,d2
                bgt.w   loc_FD648
                move.w  #6,d0
loc_FD648:                              ; CODE XREF: sub_FD618+28   j
                asl.w   #7,d0
                adda.w  d0,a3
                move.w  #4,d2
                move.w  #6,d3
                bra.w   loc_FD6A4
; ---------------------------------------------------------------------------
loc_FD658:                              ; CODE XREF: sub_FD618+92   j
                movem.w d2-d3,-(sp)
                jsr     (setplayer).l
                move.w  #2,$34(a3)
                move.w  #$F0,d0
                tst.w   (Vpos).w
                bmi.w   loc_FD678
                move.w  #$FF10,d0
loc_FD678:                              ; CODE XREF: sub_FD618+58   j
                add.w   (Vpos).w,d0
                move.w  d0,$14(a3)
                move.w  #0,(a3)
                move.w  #7,d0           ; assscore
                jsr     (assinsert).l
                bclr    #5,$62(a3)
                bclr    #1,$63(a3)
                bclr    #2,$62(a3)
                movem.w (sp)+,d2-d3
loc_FD6A4:                              ; CODE XREF: sub_FD618+3C   j
                adda.l  #$80,a3
                dbf     d2,loc_FD658
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FD618
; ---------------------------------------------------------------------------


sub_FD73C:                              ; CODE XREF: sub_F739E+24   p
                movem.l d0-d7/a0-a6,-(sp)
                movea.l #$FFFFD572,a0
                moveq   #$12,d0
loc_FD748:                              ; CODE XREF: sub_FD73C+E   j
                clr.w   (a0)+
                dbf     d0,loc_FD748
                movea.l #$FFFFC6CE,a0
                move.w  #$363,d0
loc_FD758:                              ; CODE XREF: sub_FD73C+1E   j
                clr.w   (a0)+
                dbf     d0,loc_FD758
                movea.l #$FFFFC3A4,a0
                moveq   #$24,d0 ; '$'
loc_FD766:                              ; CODE XREF: sub_FD73C+2C   j
                clr.w   (a0)+
                dbf     d0,loc_FD766
                clr.w   (BA_PS_flags).w
                clr.w   (word_FFC2F4).w
                clr.w   (word_FFC2F8).w
                clr.w   (word_FFC2FA).w
                clr.w   (word_FFD42E).w
                clr.w   (word_FFD43E).w
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FD73C


sub_FD78A:                              ; CODE XREF: setvideo+32   p
                tst.w   (word_FFD6B4).w
                bmi.w   locret_FD898
                tst.l   (dword_FFD6BA).w
                beq.w   locret_FD898
                btst    #4,(word_FFC2F4).w
                bne.w   locret_FD898
                btst    #3,(sflags2).w
                bne.w   locret_FD898
                btst    #7,(sflags).w
                bne.w   locret_FD898
                movea.l (dword_FFD6BA).w,a1
                adda.l  4(a1),a1
                move.w  (Hpos).w,d4
                move.w  (Vpos).w,d5
                move.w  (word_FFD6AE).w,d0
                bra.w   loc_FD7F0
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_FD7F0:                              ; CODE XREF: sub_FD78A+42   j
                ext.w   d0
                beq.w   locret_FD898
                cmp.w   #$40,d6 ; '@'
                bge.w   locret_FD898
                movem.l d0-d5,-(sp)
                add.w   d0,d0
                movea.l a1,a0
                move.w  2(a0,d0.w),d1
                sub.w   (a0,d0.w),d1
                lsr.w   #3,d1
                subq.w  #1,d1
                move.w  d1,-(sp)
                adda.w  (a0,d0.w),a0
                move.w  d4,d0
                addi.w  #$C0,d0
                move.w  d0,d1
                subi.w  #$90,d0
                addi.w  #$80,d1
                move.w  #$170,d2
                sub.w   d5,d2
                move.w  d2,d3
                subi.w  #$80,d2
                addi.w  #$70,d3 ; 'p'
                move.w  (sp)+,d4
loc_FD83A:                              ; CODE XREF: sub_FD78A+106   j
                cmp.w   2(a0),d2
                bgt.w   loc_FD88E
                cmp.w   2(a0),d3
                blt.w   loc_FD88E
                cmp.w   (a0),d0
                bgt.w   loc_FD88E
                cmp.w   (a0),d1
                blt.w   loc_FD88E
                move.w  2(a0),d5
                addi.w  #$70,d5 ; 'p'
                sub.w   d2,d5
                move.w  d5,(a6)+
                move.b  7(a0),(a6)+
                move.b  d6,(a6)+
                move.w  6(a0),d5
                andi.w  #$F800,d5
                add.w   4(a0),d5
                add.w   (word_FFD6AC).w,d5
                move.w  d5,(a6)+
                move.w  (a0),d5
                addi.w  #$70,d5 ; 'p'
                sub.w   d0,d5
                move.w  d5,(a6)+
                addq.w  #1,d6
                cmp.w   #$40,d6 ; '@'
                beq.w   loc_FD894
loc_FD88E:                              ; CODE XREF: sub_FD78A+B4   j
                                        ; sub_FD78A+BC   j ...
                addq.w  #8,a0
                dbf     d4,loc_FD83A
loc_FD894:                              ; CODE XREF: sub_FD78A+100   j
                movem.l (sp)+,d0-d5
locret_FD898:                           ; CODE XREF: sub_FD78A+4   j
                                        ; sub_FD78A+C   j ...
                rts
; End of function sub_FD78A


sub_FD89A:                              ; CODE XREF: sub_FD1FE+16A   p
                                        ; sub_FD1FE+1CA   p
                movem.l d0-d7/a0-a6,-(sp)
                move.w  d0,(word_FFDEE8).w
                move.l  a2,-(sp)
                jsr     (sub_18B26).l
                movea.l a1,a0
                move.w  (a0),d0
                move.w  d0,d5
                tst.b   -1(a0,d5.w)
                bne.w   loc_FD8C4
                subq.w  #1,d0
                tst.b   -2(a0,d5.w)
                bne.w   loc_FD8C4
                subq.w  #1,d0
loc_FD8C4:                              ; CODE XREF: sub_FD89A+1A   j
                                        ; sub_FD89A+24   j
                add.w   (printx).w,d0
                subi.w  #$29,d0 ; ')'
                bmi.w   loc_FD8D6
                neg.w   d0
                add.w   d0,(printx).w
loc_FD8D6:                              ; CODE XREF: sub_FD89A+32   j
                movea.l a0,a1
                jsr     (print).l
                movea.l (sp)+,a2
                jsr     (sub_FF8DE).l
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FD89A
; ---------------------------------------------------------------------------


sub_FE14C:                              ; CODE XREF: updatepentime+28   p
                btst    #5,(sflags2).w
                beq.w   locret_FE170
                movea.l #$FFFFC6CE,a2
                btst    #6,(sflags2).w
                beq.w   loc_FE16C
                movea.l #$FFFFCA32,a2
loc_FE16C:                              ; CODE XREF: sub_FE14C+16   j
                addq.w  #1,$352(a2)
locret_FE170:                           ; CODE XREF: sub_FE14C+6   j
                rts
; End of function sub_FE14C


sub_FE172:                              ; CODE XREF: sub_FABDC+48   p
                                        ; sub_FCFB8+8   p
                movem.l d1-d7/a0-a6,-(sp)
                move.w  $28(a2),d0
                movea.l #unk_FE18E,a0
                clr.w   d1
                move.b  (a0,d0.w),d1
                move.w  d1,d0
                movem.l (sp)+,d1-d7/a0-a6
                rts
; End of function sub_FE172
; ---------------------------------------------------------------------------


sub_FE1AA:                              ; CODE XREF: doinput+6A   p
                movem.l d0,-(sp)
                tst.w   (cont2team).w
                beq.w   loc_FE1C2
                move.w  $52(a3),d0
                cmp.w   (puckc).w,d0
                bne.w   loc_FE1D2
loc_FE1C2:                              ; CODE XREF: sub_FE1AA+8   j
                cmpi.w  #2,(word_FFC31A).w
                ble.w   loc_FE1D2
                move.w  #2,(word_FFC31A).w
loc_FE1D2:                              ; CODE XREF: sub_FE1AA+14   j
                                        ; sub_FE1AA+1E   j
                movem.l (sp)+,d0
                rts
; End of function sub_FE1AA
; ---------------------------------------------------------------------------


sub_FE2C8:                              ; CODE XREF: periodiceevents+A   p
                                        ; waitxsr+1E   p
                tst.w   (word_FFD6B4).w
                bmi.w   locret_FE324
                movem.l d0-d7/a0-a6,-(sp)
                tst.l   (dword_FFD6BA).w
                bne.w   loc_FE310
                move.w  (word_FFD6B4).w,d0
                asl.w   #3,d0
                movea.l #unk_FE364,a0
                move.l  (a0,d0.w),(dword_FFD6B6).w
                move.l  4(a0,d0.w),(dword_FFD6BA).w
                movea.l 4(a0,d0.w),a2
                addq.w  #8,a2
                move.w  (word_FFD6AC).w,d4
                jsr     (sub_11738).l
                clr.w   (word_FFD6B0).w
                bsr.w   sub_FE326
                bra.w   loc_FE320
; ---------------------------------------------------------------------------
loc_FE310:                              ; CODE XREF: sub_FE2C8+10   j
                sub.w   d7,(word_FFD6B2).w
                bpl.w   loc_FE320
                addq.w  #1,(word_FFD6B0).w
                bsr.w   sub_FE326
loc_FE320:                              ; CODE XREF: sub_FE2C8+44   j
                                        ; sub_FE2C8+4C   j
                movem.l (sp)+,d0-d7/a0-a6
locret_FE324:                           ; CODE XREF: sub_FE2C8+4   j
                rts
; End of function sub_FE2C8


sub_FE326:                              ; CODE XREF: sub_FE2C8+40   p
                                        ; sub_FE2C8+54   p ...
                movea.l (dword_FFD6B6).w,a0
                move.w  (word_FFD6B0).w,d0
                add.w   d0,d0
                move.b  (a0,d0.w),d1
                ext.w   d1
                move.w  d1,(word_FFD6AE).w
                move.b  1(a0,d0.w),d1
                ext.w   d1
                move.w  d1,(word_FFD6B2).w
                cmpi.w  #$FFFF,(word_FFD6AE).w
                bne.w   loc_FE354
                clr.w   (word_FFD6B0).w
                bra.s   sub_FE326
; ---------------------------------------------------------------------------
loc_FE354:                              ; CODE XREF: sub_FE326+24   j
                cmpi.w  #$FFFE,(word_FFD6AE).w
                bne.w   locret_FE362
                bsr.w   sub_FE548
locret_FE362:                           ; CODE XREF: sub_FE326+34   j
                rts
; End of function sub_FE326
; ---------------------------------------------------------------------------


sub_FE510:                              ; CODE XREF: puckfaceoff2+2C0   p
                                        ; FallDown+274   p ...
                movem.l d0-d7/a0-a6,-(sp)
                move.w  d0,(word_FFD6B4).w
                move.l  #0,(dword_FFD6B6).w
                move.l  #0,(dword_FFD6BA).w
                move.w  #1,(word_FFD6AE).w
                clr.w   (word_FFD6B0).w
                st      (word_FFD6BE).w
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FE510


sub_FE53C:                              ; CODE XREF: puckfaceoff:loc_F460   p
                bset    #0,(byte_FFC2FC).w
                move.w  d0,(word_FFD6BE).w
                rts
; End of function sub_FE53C


sub_FE548:                              ; CODE XREF: puckfaceoff2+456   p
                                        ; sub_FE326+38   p
                move.w  #$FFFF,(word_FFD6B4).w
                bclr    #0,(byte_FFC2FC).w
                rts
; End of function sub_FE548


sub_FE556:                              ; CODE XREF: ROM:00007918   p
                                        ; sub_7A34+30   p ...
                movem.l d0-d1/a0-a1,-(sp)
                btst    #4,(gmode).w
                beq.w   loc_FE56C
                move.w  #$FFFF,d1
                bra.w   loc_FE5A6
; ---------------------------------------------------------------------------
loc_FE56C:                              ; CODE XREF: sub_FE556+A   j
                bclr    #6,(byte_FFC2FE).w
                movea.l #unk_FE5B0,a0
                movea.l #unk_FE658,a1
                move.w  (word_FFD6CA).w,d0
                mulu.w  #6,d0
                add.w   (word_FFD6CC).w,d0
                clr.w   d1
                move.b  (a0,d0.w),d1
                bne.w   loc_FE5A6
                move.w  #8,d0
                jsr     (randomd0).l
                andi.w  #7,d0
                move.b  (a1,d0.w),d1
loc_FE5A6:                              ; CODE XREF: sub_FE556+12   j
                                        ; sub_FE556+3A   j
                move.w  d1,(word_FFD6C8).w
                movem.l (sp)+,d0-d1/a0-a1
                rts
; End of function sub_FE556
; ---------------------------------------------------------------------------


sub_FE660:                              ; CODE XREF: Begin+60   p
                                        ; sub_F739E   p
                movem.l d0-d1/a0,-(sp)
                move.l  #$100,d1
                move.l  #$1EF6,d0
                movea.l #$FFFFD076,a0
                jsr     (sub_1A244).l
                bclr    #4,(sflags).w
                move.w  #$FFFF,(lastsfx).w
                move.l  #$FFFF0000,(recbpr).w
                movem.l (sp)+,d0-d1/a0
                rts
; End of function sub_FE660


sub_FE696:                              ; CODE XREF: sub_180FC+48   p
                                        ; sub_180FC+6C   p
                movem.l d0-d1/a0,-(sp)
                move.l  #$100,d1
                move.l  #$1EF6,d0
                movea.l #$FFFFD076,a0
                jsr     (sub_1A1E4).l
                jsr     (sub_1A206).l
                bclr    #4,(sflags).w
                move.w  #$FFFF,(lastsfx).w
                move.l  #$FFFF0000,(recbpr).w
                movem.l (sp)+,d0-d1/a0
                rts
; End of function sub_FE696
; ---------------------------------------------------------------------------
                movem.l d0-d7/a0-a6,-(sp)
                movea.l #$FFFFCF36,a0
                move.w  #7,d7
loc_FE6E0:                              ; CODE XREF: ROM:000FE6F4   j
                clr.b   8(a0)
                clr.b   9(a0)
                clr.b   $A(a0)
                clr.b   $B(a0)
                adda.w  #$10,a0
                dbf     d7,loc_FE6E0
                move.l  #$D20,d0
                move.l  #$80,d1
                movea.l #$FFFFCF36,a0
                jsr     (sub_1A1E4).l
                jsr     (sub_1A206).l
                movem.l (sp)+,d0-d7/a0-a6
                rts


sub_FE71C:                              ; CODE XREF: sub_C566:loc_C63C   p
                movem.l d0-d7/a0-a6,-(sp)
                move.w  (word_FFDA1A).w,d0
                btst    #7,$62(a3)
                bne.w   loc_FE73A
                movea.l #unk_FE744,a0
                add.w   d0,d0
                move.w  (a0,d0.w),d0
loc_FE73A:                              ; CODE XREF: sub_FE71C+E   j
                move.w  d0,(passdir).w
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FE71C
; ---------------------------------------------------------------------------


sub_FE756:                              ; CODE XREF: ROM:loc_ECEC   p
                                        ; sub_FC4C0+14   p
                movem.l d0-d7/a0-a6,-(sp)
loc_FE75A:                              ; CODE XREF: sub_FE756+12   j
                move.w  #7,d0
                jsr     (randomd0).l
                cmp.w   #6,d0
                bgt.s   loc_FE75A
                move.w  d0,(word_FFDA12).w
                bclr    #3,(byte_FFC2FC).w
                move.w  #$FFFF,(word_FFDA14).w
                clr.w   (word_FFDA16).w
                bsr.w   sub_FE7FC
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FE756
; ---------------------------------------------------------------------------


sub_FE7FC:                              ; CODE XREF: sub_FE756+28   p
                                        ; sub_FE864:loc_FE8DA   p
                movem.l d0-d7/a0-a6,-(sp)
                cmpi.b  #$80,(word_FFDA16).w
                beq.w   loc_FE85E
                addq.w  #1,(word_FFDA14).w
                move.w  (word_FFDA14).w,d0
                asl.w   #2,d0
                movea.l #unk_FE788,a0
                move.w  (word_FFDA12).w,d1
                asl.w   #2,d1
                movea.l (a0,d1.w),a0
                move.w  (a0,d0.w),(word_FFDA16).w
                btst    #0,$76(a3)
                beq.w   loc_FE838
                neg.w   (word_FFDA16).w
loc_FE838:                              ; CODE XREF: sub_FE7FC+34   j
                move.w  2(a0,d0.w),(word_FFDA18).w
                cmpi.b  #$80,4(a0,d0.w)
                bne.w   loc_FE85E
                bset    #3,(byte_FFC2FC).w
                clr.w   (word_FFDA1C).w
                move.b  5(a0,d0.w),(word_FFDA1C+1).w
                move.w  6(a0,d0.w),(word_FFDA1A).w
loc_FE85E:                              ; CODE XREF: sub_FE7FC+A   j
                                        ; sub_FE7FC+48   j
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FE7FC


sub_FE864:                              ; CODE XREF: asspuckc:loc_E0EE   p
                movem.l d2-d7/a0-a6,-(sp)
                cmpi.b  #$80,(word_FFDA16).w
                beq.w   loc_FE8E6
                move.w  (word_FFDA16).w,d0
                move.w  (word_FFDA18).w,d1
                btst    #7,$62(a3)
                bne.w   loc_FE888
                neg.w   d0
                neg.w   d1
loc_FE888:                              ; CODE XREF: sub_FE864+1C   j
                sub.w   (a3),d0
                bpl.w   loc_FE890
                neg.w   d0
loc_FE890:                              ; CODE XREF: sub_FE864+26   j
                tst.w   $28(a3)
                bne.w   loc_FE8A8
                tst.w   $2A(a3)
                bne.w   loc_FE8A8
                cmp.w   #$12,d0
                ble.w   loc_FE8B0
loc_FE8A8:                              ; CODE XREF: sub_FE864+30   j
                                        ; sub_FE864+38   j
                cmp.w   #$A,d0
                bgt.w   loc_FE8DE
loc_FE8B0:                              ; CODE XREF: sub_FE864+40   j
                sub.w   $14(a3),d1
                bpl.w   loc_FE8BA
                neg.w   d1
loc_FE8BA:                              ; CODE XREF: sub_FE864+50   j
                tst.w   $28(a3)
                bne.w   loc_FE8D2
                tst.w   $2A(a3)
                bne.w   loc_FE8D2
                cmp.w   #$12,d1
                ble.w   loc_FE8DA
loc_FE8D2:                              ; CODE XREF: sub_FE864+5A   j
                                        ; sub_FE864+62   j
                cmp.w   #$A,d1
                bgt.w   loc_FE8DE
loc_FE8DA:                              ; CODE XREF: sub_FE864+6A   j
                bsr.w   sub_FE7FC
loc_FE8DE:                              ; CODE XREF: sub_FE864+48   j
                                        ; sub_FE864+72   j
                move.w  (word_FFDA16).w,d0
                move.w  (word_FFDA18).w,d1
loc_FE8E6:                              ; CODE XREF: sub_FE864+A   j
                movem.l (sp)+,d2-d7/a0-a6
                rts
; End of function sub_FE864


sub_FE8EC:                              ; CODE XREF: asspuckc:loc_E0A4   p
                movem.l d0-d7/a0-a6,-(sp)
                btst    #1,(word_FFC2FA).w
                beq.w   loc_FE980
                move.w  $52(a3),d0
                cmp.w   (puckc).w,d0
                bne.w   loc_FE980
                cmpi.w  #3,(word_FFD454).w
                ble.w   loc_FE97A
                cmpi.b  #$80,(word_FFDA16).w
                beq.w   loc_FE97A
                btst    #3,(byte_FFC2FC).w
                bne.w   loc_FE942
                tst.w   (puckvx).w
                bne.w   loc_FE980
                tst.w   (puckvy).w
                bne.w   loc_FE980
                cmpi.w  #$F,(word_FFD454).w
                blt.w   loc_FE97A
                bra.w   loc_FE980
; ---------------------------------------------------------------------------
loc_FE942:                              ; CODE XREF: sub_FE8EC+34   j
                move.w  (word_FFDA16).w,d0
                move.w  (word_FFDA18).w,d1
                btst    #7,$62(a3)
                bne.w   loc_FE958
                neg.w   d0
                neg.w   d1
loc_FE958:                              ; CODE XREF: sub_FE8EC+64   j
                sub.w   (a3),d0
                bpl.w   loc_FE960
                neg.w   d0
loc_FE960:                              ; CODE XREF: sub_FE8EC+6E   j
                sub.w   $14(a3),d1
                bpl.w   loc_FE96A
                neg.w   d1
loc_FE96A:                              ; CODE XREF: sub_FE8EC+78   j
                cmp.w   (word_FFDA1C).w,d0
                bgt.w   loc_FE980
                cmp.w   (word_FFDA1C).w,d1
                bgt.w   loc_FE980
loc_FE97A:                              ; CODE XREF: sub_FE8EC+20   j
                                        ; sub_FE8EC+2A   j ...
                clr.w   d0
                bra.w   loc_FE984
; ---------------------------------------------------------------------------
loc_FE980:                              ; CODE XREF: sub_FE8EC+A   j
                                        ; sub_FE8EC+16   j ...
                move.w  #1,d0
loc_FE984:                              ; CODE XREF: sub_FE8EC+90   j
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FE8EC


sub_FE98A:                              ; CODE XREF: sub_F8868:loc_F8982   p
                                        ; sub_FAEBC:loc_FAF0E   p ...
                movem.l d0-d7/a0-a6,-(sp)
                movea.l #$FFFFDA1E,a0
                movea.l #$FFFFDEA0,a1
                move.w  (a2)+,d0
                move.w  d0,(a0)+
                asl.w   #3,d0
                subq.w  #1,d0
loc_FE9A2:                              ; CODE XREF: sub_FE98A+BE   j
                clr.l   (a0)
                clr.l   (a1)
                move.b  (a2)+,(a1)
                move.b  (a2)+,1(a1)
                move.b  (a2)+,2(a1)
                move.l  #0,-(sp)
                move.l  (a1),d2
                andi.l  #$E0000000,d2
                lsr.l   #1,d2
                addi.l  #$50000000,d2
                or.l    d2,(sp)
                move.l  (a1),d2
                andi.l  #$1C000000,d2
                lsr.l   #2,d2
                addi.l  #$5000000,d2
                or.l    d2,(sp)
                move.l  (a1),d2
                andi.l  #$3800000,d2
                lsr.l   #3,d2
                addi.l  #$500000,d2
                or.l    d2,(sp)
                move.l  (a1),d2
                andi.l  #$700000,d2
                lsr.l   #4,d2
                addi.l  #unk_50000,d2
                or.l    d2,(sp)
                move.l  (a1),d2
                andi.l  #unk_E0000,d2
                lsr.l   #5,d2
                addi.l  #$5000,d2
                or.l    d2,(sp)
                move.l  (a1),d2
                andi.l  #unk_1C000,d2
                lsr.l   #6,d2
                addi.l  #$500,d2
                or.l    d2,(sp)
                move.l  (a1),d2
                andi.l  #$3800,d2
                lsr.l   #7,d2
                addi.l  #$50,d2 ; 'P'
                or.l    d2,(sp)
                move.l  (a1),d2
                andi.l  #$700,d2
                move.w  #8,d5
                lsr.l   d5,d2
                addq.l  #5,d2
                or.l    d2,(sp)
                move.l  (sp)+,(a0)+
                dbf     d0,loc_FE9A2
                movem.l (sp)+,d0-d7/a0-a6
                rts
; End of function sub_FE98A


sub_FEA52:                              ; CODE XREF: sub_9CDC+5A   p
                                        ; ClrHor+20   p ...
                move.w  d0,-(sp)
                subi.w  #$18,d4
                movea.l #unk_FEA74,a2
                move.w  (HomeTeam).w,d0
                asl.w   #2,d0
                movea.l (a2,d0.w),a2
                addq.w  #8,a2
                jsr     (sub_11738).l
                move.w  (sp)+,d0
                rts
; End of function sub_FEA52
; ---------------------------------------------------------------------------


sub_FEAE4:                              ; CODE XREF: ROM:000189DC   p
                                        ; ROM:00018A02   p
                movem.l d0/a2,-(sp)
                jsr     (printz).l
                ori.b   #$28,d4 ; '('
                adda.w  #$CE,a2
                bra.w   loc_FEB0C
; End of function sub_FEAE4


sub_FEAFA:                              ; CODE XREF: ROM:000189A0   p
                movem.l d0/a2,-(sp)
                jsr     (printz).l
                ori.b   #$28,d4 ; '('
                adda.w  #$B4,a2
loc_FEB0C:                              ; CODE XREF: sub_FEAE4+12   j
                move.b  (a2,d0.w),d0
                ext.w   d0
                move.w  #1,d1
                cmp.w   #9,d0
                ble.w   loc_FEB2E
                move.w  #2,d1
                cmp.w   #$63,d0 ; 'c'
                ble.w   loc_FEB2E
                move.w  #3,d1
loc_FEB2E:                              ; CODE XREF: sub_FEAFA+20   j
                                        ; sub_FEAFA+2C   j
                jsr     (sub_11D3A).l
                jsr     (print).l
                jsr     (printz).l
                ori.b   #0,d4
                addq.w  #1,(printy).w
                move.w  #$E,(printx).w
                movem.l (sp)+,d0/a2
                rts
; End of function sub_FEAFA


sub_FEB54:                              ; CODE XREF: updateplayers+CA   p
                cmpi.w  #$193E,$58(a3)
                beq.w   loc_FEC44
                cmpi.w  #$1A00,$58(a3)
                beq.w   loc_FEC0C
                cmpi.w  #$18CC,$58(a3)
                beq.w   loc_FEC28
                cmpi.w  #$17E8,$58(a3)
                beq.w   loc_FEBF0
                cmpi.w  #$1776,$58(a3)
                beq.w   loc_FEB94
                cmpi.w  #$185A,$58(a3)
                beq.w   loc_FEBC2
                bra.w   locret_FEC5C
; ---------------------------------------------------------------------------
loc_FEB94:                              ; CODE XREF: sub_FEB54+2E   j
                move.w  #$124,d0
                cmpi.w  #$56,(FallXPos).w ; 'V'
                bgt.w   loc_FEBAC
                cmpi.w  #$FFAA,(FallXPos).w
                bgt.w   loc_FEBB0
loc_FEBAC:                              ; CODE XREF: sub_FEB54+4A   j
                move.w  #$116,d0
loc_FEBB0:                              ; CODE XREF: sub_FEB54+54   j
                sub.w   $14(a3),d0
                bmi.w   locret_FEC5C
                asr.w   #1,d0
                add.w   d0,$14(a3)
                bra.w   locret_FEC5C
; ---------------------------------------------------------------------------
loc_FEBC2:                              ; CODE XREF: sub_FEB54+38   j
                move.w  #$FEDC,d0
                cmpi.w  #$56,(FallXPos).w ; 'V'
                bgt.w   loc_FEBDA
                cmpi.w  #$FFAA,(FallXPos).w
                bgt.w   loc_FEBDE
loc_FEBDA:                              ; CODE XREF: sub_FEB54+78   j
                move.w  #$FEEA,d0
loc_FEBDE:                              ; CODE XREF: sub_FEB54+82   j
                sub.w   $14(a3),d0
                bpl.w   locret_FEC5C
                asr.w   #1,d0
                add.w   d0,$14(a3)
                bra.w   locret_FEC5C
; ---------------------------------------------------------------------------
loc_FEBF0:                              ; CODE XREF: sub_FEB54+24   j
                move.w  #$82,d0
                btst    #3,4(a3)
                beq.w   loc_FEC02
                move.w  #$FF7E,d0
loc_FEC02:                              ; CODE XREF: sub_FEB54+A6   j
                sub.w   (a3),d0
                asr.w   #1,d0
                add.w   d0,(a3)
                bra.w   locret_FEC5C
; ---------------------------------------------------------------------------
loc_FEC0C:                              ; CODE XREF: sub_FEB54+10   j
                move.w  #$88,d0
                btst    #3,4(a3)
                beq.w   loc_FEC1E
                move.w  #$FF78,d0
loc_FEC1E:                              ; CODE XREF: sub_FEB54+C2   j
                sub.w   (a3),d0
                asr.w   #1,d0
                add.w   d0,(a3)
                bra.w   locret_FEC5C
; ---------------------------------------------------------------------------
loc_FEC28:                              ; CODE XREF: sub_FEB54+1A   j
                move.w  #$FF7E,d0
                btst    #3,4(a3)
                beq.w   loc_FEC3A
                move.w  #$82,d0
loc_FEC3A:                              ; CODE XREF: sub_FEB54+DE   j
                sub.w   (a3),d0
                asr.w   #1,d0
                add.w   d0,(a3)
                bra.w   locret_FEC5C
; ---------------------------------------------------------------------------
loc_FEC44:                              ; CODE XREF: sub_FEB54+6   j
                move.w  #$FF78,d0
                btst    #3,4(a3)
                beq.w   loc_FEC56
                move.w  #$88,d0
loc_FEC56:                              ; CODE XREF: sub_FEB54+FA   j
                sub.w   (a3),d0
                asr.w   #1,d0
                add.w   d0,(a3)
locret_FEC5C:                           ; CODE XREF: sub_FEB54+3C   j
                                        ; sub_FEB54+60   j ...
                rts
; End of function sub_FEB54


sub_FEC5E:                              ; CODE XREF: sub_9B4A:loc_9B50   p
                movem.l d1-d7/a0-a6,-(sp)
                move.w  #$1B,d1
                ext.l   d1
                clr.w   d7
                movea.l #$FFFFCF36,a0
loc_FEC70:                              ; CODE XREF: sub_FEC5E:loc_FEC8E   j
                jsr     (clrCrowdRAM?).l
                clr.w   d2
                move.b  8(a0),d2
                bne.w   loc_FEC84
                move.w  #$50,d2 ; 'P'
loc_FEC84:                              ; CODE XREF: sub_FEC5E+1E   j
                cmp.w   d7,d2
                ble.w   loc_FEC8E
                move.w  d2,d7
                move.w  d1,d0
loc_FEC8E:                              ; CODE XREF: sub_FEC5E+28   j
                dbf     d1,loc_FEC70
                movem.l (sp)+,d1-d7/a0-a6
                rts
; End of function sub_FEC5E


getFgtbyte:                             ; CODE XREF: setInjuryType+52   p
                clr.w   d0              ; clear d0
                move.b  $74(a2),d0      ; move H/F bit into d0 (this is always even)
                lsr.w   #2,d0           ; shift 2 right (divide by 4)
                rts
; End of function getFgtbyte


chkFgtBit1:                             ; CODE XREF: setInjuryType+84   p
                btst    #1,$74(a2)
                rts
; End of function chkFgtBit1


sub_FECAA:                              ; CODE XREF: puckfaceoff:loc_F454   p
                movem.l a0,-(sp)
                movea.l #unk_FECE6,a0
                move.w  #$64,d0 ; 'd'
                jsr     (randomd0).l
                andi.w  #7,d0
                add.w   d0,d0
                move.w  (a0,d0.w),d0
                cmpi.w  #$FFC0,(fox).w
                bgt.w   loc_FECE0
                cmpi.w  #$C0,(foy).w
                bgt.w   loc_FECE0
                move.w  #6,d0
loc_FECE0:                              ; CODE XREF: sub_FECAA+24   j
                                        ; sub_FECAA+2E   j
                movem.l (sp)+,a0
                rts
; End of function sub_FECAA
; ---------------------------------------------------------------------------


sub_FECF8:                              ; CODE XREF: puckfaceoff+5A   p
                movem.l d0-d2/a0-a2,-(sp)
                movea.l #$FFFFC6CE,a0
                movea.l #$FFFFCA32,a1
                move.w  $24(a0),d0
                sub.w   $24(a1),d0
                beq.w   loc_FED24
                bpl.w   loc_FED1A
                exg     a0,a1
loc_FED1A:                              ; CODE XREF: sub_FECF8+1C   j
                cmpi.w  #$13,$28(a0)
                bne.w   *+4
loc_FED24:                              ; CODE XREF: sub_FECF8+18   j
                                        ; sub_FECF8+28   j
                movem.l (sp)+,d0-d2/a0-a2
                rts
; End of function sub_FECF8


sub_FED2A:                              ; CODE XREF: sub_17336+200   p
                movea.w #(unk_FFC018-M68K_RAM),a6
                moveq   #1,d6
                movea.l #unk_F3098,a0
                move.w  (word_FFB016).w,d3
                ori.w   #$8000,d3
                move.w  (word_FFB8AE).w,d0
                move.w  (word_FFB8B0).w,d1
                move.w  #1,d2
                jsr     (SetSframe).l
                cmpa.w  #$C018,a6
                bne.w   loc_FED5C
                clr.l   (a6)+
                clr.l   (a6)+
loc_FED5C:                              ; CODE XREF: sub_FED2A+2A   j
                clr.b   -5(a6)
                move.l  a6,d0
                subi.l  #$FFFFC018,d0
                lsr.w   #1,d0
                move.w  d0,(word_FFC2E8).w
                rts
; End of function sub_FED2A


sub_FED70:                              ; CODE XREF: Begin+66   p
                move.l  #loc_15E4C,(vbint).w
                bclr    #1,(disflags).w
                move.w  #5,(Map3col1).w
                move.w  #$A000,(VmMap2).w
                move.w  #7,(Map2col1).w
                move.w  #$C000,(VmMap1).w
                move.w  #7,(Map1col1).w
                move.w  #$F000,(VmMap3).w
                move.w  #$F800,(VSPRITES).w
                move.w  #$FC00,(VSCRLPM).w
                jsr     (forceblack).l
                movea.w #(palfadenew-M68K_RAM),a0
                moveq   #$1F,d1
loc_FEDBA:                              ; CODE XREF: sub_FED70+4C   j
                clr.l   (a0)+
                dbf     d1,loc_FEDBA
                jsr     (loc_115AA).l
                jsr     (printz).l
                ori.b   #$E,d6
                btst    d1,d0
                movea.l #$F4378,a2
                movea.l a2,a0
                movea.l a2,a1
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                clr.w   d0
                clr.w   d1
                move.w  (a1),d2
                move.w  2(a1),d3
                clr.w   d4
                moveq   #$F,d5
                jsr     (dobitmap).l
                jsr     (printz).l
                ori.b   #$10,d6
                move.b  d0,d0
                movea.l #unk_F5338,a2
                movea.l a2,a0
                movea.l a2,a1
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                clr.w   d0
                clr.w   d1
                move.w  (a1),d2
                move.w  2(a1),d3
                moveq   #0,d5
                jsr     (dobitmap).l
                move.w  #$18,(palcount).w
                move    #$2500,sr
                move.w  #$50,(RNGseed).w ; 'P'
loc_FEE30:                              ; CODE XREF: sub_FED70+D2   j
                moveq   #4,d0
                jsr     (waitx).l
                tst.w   d1
                bne.w   loc_FEE44
                subq.w  #1,(RNGseed).w
                bpl.s   loc_FEE30
loc_FEE44:                              ; CODE XREF: sub_FED70+CA   j
                move    #$2700,sr
                rts
; End of function sub_FED70


sub_FEE4A:                              ; CODE XREF: ROM:000FA93E   p
                                        ; ROM:000FA94E   p
                movea.l #$FFFFC6CE,a2
                cmp.w   $28(a2),d2
                beq.w   locret_FEE5E
                movea.l #$FFFFCA32,a2
locret_FEE5E:                           ; CODE XREF: sub_FEE4A+A   j
                rts
; End of function sub_FEE4A


sub_FEE60:                              ; CODE XREF: ROM:0000B760   p
                                        ; ROM:0000B810   p
                movem.l d1-d7/a0,-(sp)
                btst    #0,(gmode).w
                bne.w   loc_FEE9A
                move.w  (word_FFBF12).w,d1
                movea.l #$FFFFDEA4,a0
                tst.w   d4
                beq.w   loc_FEE84
                movea.l #$FFFFDEAC,a0
loc_FEE84:                              ; CODE XREF: sub_FEE60+1A   j
                addq.l  #1,(a0)
                cmp.w   #8,d1
                beq.w   loc_FEE9A
                cmp.w   $54(a3),d1
                beq.w   loc_FEE9A
                addq.l  #1,4(a0)
loc_FEE9A:                              ; CODE XREF: sub_FEE60+A   j
                                        ; sub_FEE60+2A   j ...
                movem.l (sp)+,d1-d7/a0
                rts
; End of function sub_FEE60
; ---------------------------------------------------------------------------


sub_FEEC8:                              ; CODE XREF: sub_17730:loc_178CA   p
                movem.l d0-d7/a0/a2-a6,-(sp)
                move.w  (word_FFD042).w,d0
loc_FEED0:                              ; CODE XREF: sub_FEF5A+8   j
                tst.w   d0
                beq.w   loc_FEF52
                movea.l #$FFFFD4DC,a1
                move.w  d0,(word_FFD4EA).w
                bsr.w   sub_FB992
                adda.w  (word_FFD4E8).w,a1
                move.b  #0,(a1)
                addq.w  #1,(word_FFD4E8).w
                andi.w  #$FFFE,(word_FFD4E8).w
                addq.w  #2,(word_FFD4E8).w
                move.w  (word_FFD4E8).w,(word_FFD4DA).w
                movea.l #$FFFFD4DA,a1
                move.l  a1,-(sp)
                movea.l #$FFFFBF20,a3
                movea.l #unk_FEF42,a1
                bsr.w   sub_F997A
                movea.l (sp)+,a1
                movea.l #$FFFFBF20,a3
                jsr     (sub_11D9E).l
                movea.l #$FFFFBF20,a3
                jsr     (sub_11D96).l
                ori.b   #0,d4
                movea.l #$FFFFBF20,a1
loc_FEF3C:                              ; CODE XREF: sub_FEEC8+90   j
                movem.l (sp)+,d0-d7/a0/a2-a6
                rts
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_FEF52:                              ; CODE XREF: sub_FEEC8+A   j
                movea.l #unk_FEF50,a1
                bra.s   loc_FEF3C
; End of function sub_FEEC8


sub_FEF5A:                              ; CODE XREF: sub_17730:loc_178D4   p
                movem.l d0-d7/a0/a2-a6,-(sp)
                move.w  (word_FFD044).w,d0
                bra.w   loc_FEED0
; End of function sub_FEF5A


set_bit1_C2FE:                          ; CODE XREF: updateplayers:_nobreak   p
                bra.w   _set
; ---------------------------------------------------------------------------
                bclr    #1,(byte_FFC2FE).w
                bra.w   _ex
; ---------------------------------------------------------------------------
_set:                                   ; CODE XREF: set_bit1_C2FE   j
                bset    #1,(byte_FFC2FE).w ; set bit 1 of C2FE
_ex:                                    ; CODE XREF: set_bit1_C2FE+A   j
                rts
; End of function set_bit1_C2FE


sub_FEF7C:                              ; CODE XREF: ROM:00008E46   p
                                        ; sub_FA8AC+6A   p ...
                cmp.w   #$32,d0 ; '2'
                bge.w   locret_FEF8A
                asr.w   #1,d0
                addi.w  #$19,d0
locret_FEF8A:                           ; CODE XREF: sub_FEF7C+4   j
                rts
; End of function sub_FEF7C


sub_FEF8C:
                movem.w d0-d1,-(sp)
                move.w  (puckx).w,d0
                sub.w   (a3),d0
                cmp.w   #$1E,d0
                bgt.w   loc_FEFC6
                move.w  (puckvx).w,d1
                eor.w   d1,d0
                andi.w  #$8000,d0
                beq.w   loc_FEFC6
                move.w  (pucky).w,d0
                sub.w   $14(a3),d0
                cmp.w   #$1E,d0
                bgt.w   loc_FEFC6
                move.w  (puckvy).w,d1
                eor.w   d1,d0
                andi.w  #$8000,d0
loc_FEFC6:                              ; CODE XREF: sub_FEF8C+E   j
                                        ; sub_FEF8C+1C   j ...
                movem.w (sp)+,d0-d1
                rts
; End of function sub_FEF8C


; checks if goalie is pulled (position $26 in Team Struct)
ReadGoaliePulled:                       ; CODE XREF: doshot+12A   p
                                        ; assdefo+40   p ...
                movem.l a1,-(sp)
                movea.l #$FFFFC6CE,a1
                btst    #6,$62(a3)      ; check if home or away 0=home 1=away
                beq.w   _chkgoalie
                movea.l #$FFFFCA32,a1
_chkgoalie:                             ; CODE XREF: ReadGoaliePulled+10   j
                tst.w   $26(a1)
                movem.l (sp)+,a1
                rts
; End of function ReadGoaliePulled


sub_FEFF0:                              ; CODE XREF: sub_14A54+2A   p
                                        ; assonetimer:loc_F6C02   p
                movem.l d0/a0,-(sp)
                bclr    #3,$64(a3)
                bclr    #5,$62(a3)
                bclr    #1,$63(a3)
                clr.w   (word_FFBF76).w
                st      (word_FFBF6C).w
                move.w  d1,-(sp)
                move.w  #$50C,d1
                jsr     (SetSPA).l
                tst.w   $34(a3)
                bpl.w   loc_FF02C
                jsr     (assexit).l
                bra.w   loc_FF032
; ---------------------------------------------------------------------------
loc_FF02C:                              ; CODE XREF: sub_FEFF0+2E   j
                jsr     (Setplass).l
loc_FF032:                              ; CODE XREF: sub_FEFF0+38   j
                clr.w   $5A(a3)
                st      $5C(a3)
                move.w  (sp)+,d1
                movem.l (sp)+,d0/a0
                rts
; End of function sub_FEFF0


sub_FF042:                              ; CODE XREF: ROM:000172F4   p
                move    #$2700,sr
                move.w  (VDP_CNTR).l,(RNGseed).w
                move.w  (VDP_CNTR).l,(RNGseed+2).w
                move.l  #loc_FF348,(vbint).l
                bset    #1,(disflags).w
                move.w  #5,(Map3col1).w
                move.w  #$A000,(VmMap2).w
                move.w  #7,(Map2col1).w
                move.w  #$C000,(VmMap1).w
                move.w  #7,(Map1col1).w
                move.w  #$F000,(VmMap3).w
                move.w  #$F800,(VSPRITES).w
                move.w  #$FC00,(VSCRLPM).w
                move.w  #0,d0
                jsr     (setvram).l
                movea.l #VDP_DATA,a0
                move.w  #$9100,4(a0)
                move.w  #$9217,4(a0)
                move.w  #$8B03,4(a0)
                clr.w   (Vscroll).w
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$3C,d0 ; '<'
                ori.b   #$80,d0
                moveq   #$20,d1 ; ' '
                move.l  #$7FF,d2
                jsr     (eraser).l
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$3C,d0 ; '<'
                ori.b   #$80,d0
                moveq   #$20,d1 ; ' '
                move.l  #$7FF,d2
                jsr     (eraser).l
                clr.w   d4
                move.w  d4,-(sp)
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$7C,d0 ; '|'
                ori.b   #$5C,d4 ; '\'
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                clr.w   d0
                clr.w   d1
                move.w  (a1),d2
                move.w  #$17,d3
                moveq   #$F,d5
                jsr     (dobitmap).l
                move.w  d4,(word_FFBF12).w
                move.w  (sp)+,d4
                jsr     (printz).l
                ori.b   #0,d6
                move.b  d0,-(a3)
                movea.l #unk_4E45C,a0
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                clr.w   d0
                move.w  #$17,d1
                move.w  (a1),d2
                move.w  #5,d3
                moveq   #0,d5
                bset    #0,(word_FFC2F8).w
                jsr     (dobitmap).l
                bclr    #0,(word_FFC2F8).w
                move.w  (word_FFBF12).w,d4
                jsr     (printz).l
                ori.b   #1,d6
                btst    d0,d0
                movea.l #unk_52DAA,a0
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                clr.w   d0
                clr.w   d1
                move.w  (a1),d2
                move.w  2(a1),d3
                moveq   #8,d5
                jsr     (dobitmap).l
                jsr     (printz).l
                ori.b   #$19,d6
                btst    d0,d0
                movea.l #unk_5338C,a0
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                clr.w   d0
                clr.w   d1
                move.w  (a1),d2
                move.w  2(a1),d3
                moveq   #0,d5
                jsr     (dobitmap).l
                jsr     (printz).l
                ori.b   #1,d6
                movea.l #unk_5394E,a0
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                clr.w   d0
                clr.w   d1
                move.w  (a1),d2
                move.w  2(a1),d3
                moveq   #8,d5
                jsr     (dobitmap).l
                clr.w   (palfadenew).w
                clr.l   (dword_FFBDA8).w
                clr.w   (word_FFBDAC).w
                move.w  d4,(word_FFB012).w
                movea.l #unk_AAC5A,a2
                jsr     (sub_1172C).l
                btst    d6,(a0)
                or.l    d4,-$3211(a3)
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$7C,d0 ; '|'
                ori.b   #$76,d0 ; 'v'
                jsr     (sub_FF2C8).l
                addi.w  #$20,(Vscroll).w ; ' '
                move.w  #$104,(word_FFB8B2).w
                move.w  #$120,(word_FFB8AE).w
                move.w  #$D0,(word_FFB8B0).w
                clr.w   (asv).w
                move.w  #$FFCE,(word_FFD5AC).w
                move.w  #$20,(palcount).w ; ' '
                move.w  #$78,-(sp) ; 'x'
                jsr     (song).l
                bsr.w   sub_FF3B0
                move    #$2500,sr
loc_FF26A:                              ; CODE XREF: sub_FF042+232   j
                jsr     (sub_FF318).l
                tst.w   (word_FFB8B2).w
                bne.s   loc_FF26A
                move.w  #$3C,d3 ; '<'
loc_FF27A:                              ; CODE XREF: sub_FF042+23E   j
                jsr     (sub_FF318).l
                dbf     d3,loc_FF27A
                jsr     (printz).l
                ori.b   #0,d6
                ori.b   #$7C,d0 ; '|'
                ori.b   #$B8,d0
loc_FF296:                              ; CODE XREF: sub_FF042+282   j
                jsr     (sub_FF2C8).l
                adda.w  (a1),a1
                moveq   #$27,d4 ; '''
loc_FF2A0:                              ; CODE XREF: sub_FF042+26E   j
                jsr     (sub_FF318).l
                jsr     (sub_FF318).l
                addq.w  #1,(Vscroll).w
                dbf     d4,loc_FF2A0
                moveq   #$78,d4 ; 'x'
loc_FF2B6:                              ; CODE XREF: sub_FF042+27A   j
                jsr     (sub_FF318).l
                dbf     d4,loc_FF2B6
                tst.w   2(a1)
                bpl.s   loc_FF296
                rts
; End of function sub_FF042


sub_FF2C8:                              ; CODE XREF: sub_FF042+1E8   p
                                        ; sub_FF042:loc_FF296   p
                move.w  (Vscroll).w,d0
                asr.w   #3,d0
                addi.w  #$1C,d0
                andi.w  #$1F,d0
                move.w  d0,(printy).w
                move.w  d0,-(sp)
                clr.w   (printx).w
                moveq   #$20,d0 ; ' '
                moveq   #6,d1
                move.w  #$7FF,d2
                jsr     (eraser).l
                move.w  (sp)+,(printy).w
loc_FF2F2:                              ; CODE XREF: sub_FF2C8+4C   j
                move.w  (a1),d0
                asr.w   #1,d0
                neg.w   d0
                addi.w  #$11,d0
                move.w  d0,(printx).w
                jsr     (print).l
                addq.w  #1,(printy).w
                andi.w  #$1F,(printy).w
                tst.w   2(a1)
                bpl.s   loc_FF2F2
                rts
; End of function sub_FF2C8


sub_FF318:                              ; CODE XREF: sub_FF042:loc_FF26A   p
                                        ; sub_FF042:loc_FF27A   p ...
                movem.l d0-d7/a0-a6,-(sp)
                move.w  (vcount).w,d0
loc_FF320:                              ; CODE XREF: sub_FF318+C   j
                cmp.w   (vcount).w,d0
                beq.s   loc_FF320
                subq.w  #2,(word_FFB8B2).w
                bpl.w   loc_FF332
                clr.w   (word_FFB8B2).w
loc_FF332:                              ; CODE XREF: sub_FF318+12   j
                jsr     (orjoy).l
                btst    #7,d1
                movem.l (sp)+,d0-d7/a0-a6
                beq.w   locret_FF346
                addq.w  #4,sp
locret_FF346:                           ; CODE XREF: sub_FF318+28   j
                rts
; End of function sub_FF318
; ---------------------------------------------------------------------------
loc_FF348:                              ; DATA XREF: sub_FF042+14   o
                movem.l d0-d7/a0-a6,-(sp)
                btst    #2,(disflags).w
                bne.w   loc_FF39A
                movea.w #(SortCords-M68K_RAM),a0
                move.w  (VSCRLPM).w,d1
                move.w  #$1C0,d0
                jsr     (DoDMA).l
                movea.l #VDP_DATA,a0
                move.l  #$40000010,4(a0)
                move.w  (Vscroll).w,(a0)
                movea.w #(unk_FFC018-M68K_RAM),a0
                move.w  (word_FFC2E8).w,d0
                beq.w   loc_FF394
                clr.w   (word_FFC2E8).w
                move.w  (VSPRITES).w,d1
                jsr     (DoDMA).l
loc_FF394:                              ; CODE XREF: ROM:000FF382   j
                jsr     (cramfade).l
loc_FF39A:                              ; CODE XREF: ROM:000FF352   j
                addq.w  #1,(vcount).w
                jsr     (sub_FF3F8).l
                jsr     (sub_1A50A).l
                movem.l (sp)+,d0-d7/a0-a6
                rte


sub_FF3B0:                              ; CODE XREF: sub_FF042+220   p
                movem.l d0-d1,-(sp)
                move.w  #$14,(Hscroll).w
                move.w  #$50,(word_FFBF14).w ; 'P'
                move.w  #$50,d0 ; 'P'
                movea.l #$FFFFB04A,a0
                move.l  #$FD80,d1
loc_FF3D0:                              ; CODE XREF: sub_FF3B0:loc_FF3DC   j
                move.l  d1,(a0)+
                btst    #0,d0
                bne.w   loc_FF3DC
                subq.w  #1,d1
loc_FF3DC:                              ; CODE XREF: sub_FF3B0+26   j
                dbf     d0,loc_FF3D0
                move.w  #$60,d0 ; '`'
                move.l  #$100,d1
loc_FF3EA:                              ; CODE XREF: sub_FF3B0+3E   j
                move.l  d1,(a0)+
                addq.l  #4,d1
                dbf     d0,loc_FF3EA
                movem.l (sp)+,d0-d1
                rts
; End of function sub_FF3B0


sub_FF3F8:                              ; CODE XREF: ROM:000FF39E   p
                subq.w  #1,(word_FFBF14).w
                bmi.w   loc_FF402
                rts
; ---------------------------------------------------------------------------
loc_FF402:                              ; CODE XREF: sub_FF3F8+4   j
                clr.w   (word_FFBF14).w
                movem.l d0-d2/a0,-(sp)
                move.w  #$DF,d0
                movea.w #(SortCords-M68K_RAM),a0
loc_FF412:                              ; CODE XREF: sub_FF3F8:loc_FF458   j
                tst.l   (a0)+
                cmp.w   #$28,d0 ; '('
                ble.w   loc_FF458
                move.w  (Hscroll).w,d1
                cmp.w   #$8F,d0
                blt.w   loc_FF44C
                move.w  -2(a0),d2
                beq.w   loc_FF458
                add.w   d1,d2
                move.w  d2,-2(a0)
                andi.w  #$FC00,d2
                cmp.w   #$FC00,d2
                beq.w   loc_FF458
                move.w  #0,-2(a0)
                bra.w   loc_FF458
; ---------------------------------------------------------------------------
loc_FF44C:                              ; CODE XREF: sub_FF3F8+2C   j
                sub.w   d1,-2(a0)
                bpl.w   loc_FF458
                clr.w   -2(a0)
loc_FF458:                              ; CODE XREF: sub_FF3F8+20   j
                                        ; sub_FF3F8+34   j ...
                dbf     d0,loc_FF412
                movem.l (sp)+,d0-d2/a0
                rts
; End of function sub_FF3F8
; ---------------------------------------------------------------------------


sub_FF7E2:                              ; CODE XREF: puckfaceoff2+418   p
                movem.l d0/a0-a3,-(sp)
                move.w  (sflags2).w,-(sp)
                btst    #1,(word_FFC2FA).w
                bne.w   loc_FF884
                movea.w #(HmShots-M68K_RAM),a2
                lea     $364(a2),a3
                move.w  $24(a2),d0
                sub.w   $24(a3),d0
                beq.w   loc_FF884
                bpl.w   loc_FF824
                btst    #6,(sflags2).w
                bne.w   loc_FF83A
                bsr.w   sub_FF87C
                bset    #6,(sflags2).w
                bra.w   loc_FF83A
; ---------------------------------------------------------------------------
loc_FF824:                              ; CODE XREF: sub_FF7E2+26   j
                exg     a2,a3
                btst    #6,(sflags2).w
                beq.w   loc_FF83A
                bsr.w   sub_FF87C
                bclr    #6,(sflags2).w
loc_FF83A:                              ; CODE XREF: sub_FF7E2+30   j
                                        ; sub_FF7E2+3E   j ...
                bset    #5,(sflags2).w
                bne.w   loc_FF884
                cmpa.w  #$C6CE,a3
                bne.w   loc_FF868
                move.w  (HomeTeam).w,(word_FFD6CA).w
                move.w  #1,(word_FFD6CC).w
                jsr     (sub_FE556).l
loc_FF85E:                              ; CODE XREF: sub_FF7E2+98   j
                bset    #6,(byte_FFC2FE).w
                bra.w   loc_FF884
; ---------------------------------------------------------------------------
loc_FF868:                              ; CODE XREF: sub_FF7E2+66   j
                move.w  (HomeTeam).w,(word_FFD6CA).w
                move.w  #4,(word_FFD6CC).w
                jsr     (sub_FE556).l
                bra.s   loc_FF85E
; End of function sub_FF7E2


sub_FF87C:                              ; CODE XREF: sub_FF7E2+34   p
                                        ; sub_FF7E2+4E   p
                bclr    #5,(sflags2).w
                rts
; End of function sub_FF87C
; ---------------------------------------------------------------------------
loc_FF884:                              ; CODE XREF: sub_FF7E2+E   j
                                        ; sub_FF7E2+22   j ...
                move.w  (sp)+,(sflags2).w
                movem.l (sp)+,d0/a0-a3
                rts


sub_FF88E:                              ; CODE XREF: clockcont+FE   p
                movem.l d0/a0,-(sp)
                clr.w   (PBnum).w
                clr.w   (Penaltytimer).w
                clr.w   (Pencntdwn).w
                move.w  #$10,d0
                movea.l #$FFFFC3A4,a0
_loop:                                  ; CODE XREF: sub_FF88E+1C   j
                clr.l   (a0)+
                dbf     d0,_loop
                movea.l #$FFFFC6CE,a0
                bsr.w   clrTmPdst
                movea.l #$FFFFCA32,a0
                bsr.w   clrTmPdst
                movem.l (sp)+,d0/a0
                rts
; End of function sub_FF88E


; clears Team Player destinations
clrTmPdst:                              ; CODE XREF: sub_FF88E+26   p
                                        ; sub_FF88E+30   p
                move.w  #$19,d0         ; 19 = 25 decimal (max roster size)
                adda.w  #$66,a0 ; 'f'   ; Starting at (C734-home, CA98-away) and decrementing
_loop:                                  ; CODE XREF: clrTmPdst+C   j
                move.w  #$FFFE,(a0)+    ; -2 = bench
                dbf     d0,_loop
                move.w  #$FFFF,(a0)     ; -1 = ice
                rts
; End of function clrTmPdst


sub_FF8DE:                              ; CODE XREF: sub_FD89A+46   p
                movem.l d0/a0-a1,-(sp)
                movea.l #$FFFFBF5C,a0
                move.w  #2,(word_FFDEEA).w
                cmpa.l  #$FFFFC6CE,a2
                bne.w   loc_FF904
                movea.l #$FFFFBF5E,a0
                move.w  #$20,(word_FFDEEA).w ; ' '
loc_FF904:                              ; CODE XREF: sub_FF8DE+16   j
                move.w  #0,d0
loc_FF908:                              ; CODE XREF: sub_FF8DE+34   j
                move.w  (a0)+,d1
                cmp.w   (word_FFDEE8).w,d1
                beq.w   loc_FF960
                dbf     d0,loc_FF908
                movea.l #$FFFFBF60,a0
                cmpa.l  #$FFFFC6CE,a2
                bne.w   loc_FF92C
                movea.l #$FFFFBF62,a0
loc_FF92C:                              ; CODE XREF: sub_FF8DE+44   j
                move.w  #0,d0
loc_FF930:                              ; CODE XREF: sub_FF8DE+5C   j
                move.w  (a0)+,d1
                cmp.w   (word_FFDEE8).w,d1
                beq.w   loc_FF96E
                dbf     d0,loc_FF930
                move.w  (word_FFDEEA).w,(printx).w
                move.w  #$19,(printy).w
                move.w  #8,d0
                move.w  #3,d1
                move.w  #$7FF,d2
                jsr     (eraser).l
                bra.w   loc_FF9A2
; ---------------------------------------------------------------------------
loc_FF960:                              ; CODE XREF: sub_FF8DE+30   j
                move.w  (word_FFDEE4).w,d4
                movea.l #unk_F5AF6,a0
                bra.w   loc_FF978
; ---------------------------------------------------------------------------
loc_FF96E:                              ; CODE XREF: sub_FF8DE+58   j
                move.w  (word_FFDEE6).w,d4
                movea.l #unk_F5D1C,a0
loc_FF978:                              ; CODE XREF: sub_FF8DE+8C   j
                move.w  (word_FFDEEA).w,(printx).w
                move.w  #$19,(printy).w
                movea.l a0,a1
                movea.l a0,a2
                adda.l  (a2)+,a0
                adda.l  (a2)+,a1
                movea.w #$30A,a2
                clr.w   d0
                clr.w   d1
                move.w  (a1),d2
                move.w  2(a1),d3
                moveq   #0,d5
                jsr     (dobitmap).l
loc_FF9A2:                              ; CODE XREF: sub_FF8DE+7E   j
                movem.l (sp)+,d0/a0-a1
                rts
; End of function sub_FF8DE


; d4 = controller 0/2
chgplayer:                              ; CODE XREF: changeplayer   j
                btst    #6,(byte_FFC2F6).w ; Check bit 6. This is never set anywhere
                bne.w   exit
                movem.l d0-d6/a0-a1,-(sp)
                move.w  (puckvx).w,d0   ; lead puck slightly
                asr.w   #8,d0
                add.w   (puckx).w,d0
                move.w  (puckvy).w,d1
                asr.w   #8,d1
                add.w   (pucky).w,d1
                movem.w d0-d1,-(sp)
                moveq   #5,d2
                move.w  d4,d3
                eori.w  #2,d3           ; other controller
                moveq   #$FFFFFFFF,d5   ; -1
                movea.w #(SortCords-M68K_RAM),a0 ; start of search
                movea.w #(cont1team-M68K_RAM),a1
                cmpi.w  #1,(a1,d4.w)
                beq.w   _t1
                adda.w  #$300,a0        ; controller is on other team
_t1:                                    ; CODE XREF: chgplayer+3E   j
                movea.w #(c1playernum-M68K_RAM),a1
_top:                                   ; CODE XREF: chgplayer+E0   j
                tst.w   $34(a0)         ; position
                ble.w   _next           ; cant switch to goalie
                btst    #2,$63(a0)      ; #pf2unav
                bne.w   _next           ; this player is unavailable for some reason
                movem.w d1,-(sp)
                move.w  $52(a0),d1      ; SCnum
                cmp.w   (a1,d4.w),d1
                movem.w (sp)+,d1
                beq.w   loc_FFA22
                btst    #3,$62(a0)      ; is player controlled?
                bne.w   _next           ; yes branch
loc_FFA22:                              ; CODE XREF: chgplayer+6C   j
                btst    #2,(BA_PS_flags).w
                beq.w   loc_FFA54
                movem.l d0,-(sp)
                move.w  (BA_Sktr_SCnum).w,d0
                cmp.w   $52(a0),d0
                movem.l (sp)+,d0
                beq.w   loc_FFA54
                movem.l d0,-(sp)
                move.w  (BA_Goalie_SCnum).w,d0
                cmp.w   $52(a0),d0
                movem.l (sp)+,d0
                bne.w   _next
loc_FFA54:                              ; CODE XREF: chgplayer+80   j
                                        ; chgplayer+94   j
                btst    #5,$62(a0)      ; #pfalock
                bne.w   _next           ; player is locked
                movem.w (sp),d0-d1
                sub.w   (a0),d0         ; Xpos
                muls.w  d0,d0
                sub.w   $14(a0),d1      ; Ypos
                muls.w  d1,d1
                add.l   d1,d0
                cmp.l   d5,d0
                bhi.w   _next
                move.w  $52(a0),d1      ; Scnum
                cmp.w   (a1,d3.w),d1
                beq.w   _next           ; this is current player
                move.l  d0,d5
                move.w  d1,d6
_next:                                  ; CODE XREF: chgplayer+4E   j
                                        ; chgplayer+58   j ...
                adda.w  #$80,a0         ; size of SCstruct
                dbf     d2,_top
                addq.w  #4,sp
                pea     (_ex).l
                cmp.w   (a1,d4.w),d6
                beq.w   swpchk          ; player is same so sweep check
                move.w  d6,d0           ; d0 now is new player
                tst.w   d4
                beq.w   setc1player
                bra.w   setc2player
; ---------------------------------------------------------------------------
_ex:                                    ; DATA XREF: chgplayer+E6   o
                movem.l (sp)+,d0-d6/a0-a1
exit:                                   ; CODE XREF: chgplayer+6   j
                rts
; ---------------------------------------------------------------------------
swpchk:                                 ; CODE XREF: chgplayer+F0   j
                jmp     Sweepcheck
; ---------------------------------------------------------------------------
setc1player:                            ; CODE XREF: chgplayer+F8   j
                jmp     setc1player
; ---------------------------------------------------------------------------
setc2player:                            ; CODE XREF: chgplayer+FC   j
                jmp     setc2player
; End of function chgplayer


Calc_Checksum:                          ; CODE XREF: ROM:loc_300   p
                moveq   #0,d0
                suba.l  a0,a0
                move.l  #unk_3FEB0,d1
loc_FFACA:                              ; CODE XREF: Calc_Checksum+18   j
                cmpa.w  #$18C,a0
                bne.s   loc_FFAD4
                addq.w  #4,a0
                bra.s   loc_FFAD6
; ---------------------------------------------------------------------------
loc_FFAD4:                              ; CODE XREF: Calc_Checksum+E   j
                add.l   (a0)+,d0
loc_FFAD6:                              ; CODE XREF: Calc_Checksum+12   j
                subq.l  #1,d1
                bgt.s   loc_FFACA
                cmpi.l  #$8AB9F121,d0
                bne.s   loc_FFAE4
                rts
; ---------------------------------------------------------------------------
loc_FFAE4:                              ; CODE XREF: Calc_Checksum+20   j
                movea.l #VDP_CTRL,a4
                move.w  #$8F02,(a4)
                move.w  #$8004,(a4)
                move.w  #$8700,(a4)
                move.w  #$8144,(a4)
                move.w  #$C000,(a4)
                move.w  #$3F,d1 ; '?'
loc_FFB02:                              ; CODE XREF: Calc_Checksum+4A   j
                move.w  #$E,(VDP_DATA).l
                dbf     d1,loc_FFB02
loc_FFB0E:                              ; CODE XREF: Calc_Checksum:loc_FFB0E   j
                bra.s   loc_FFB0E
; End of function Calc_Checksum
; ---------------------------------------------------------------------------
; ---------------------------------------------------------------------------
loc_FFE00:                              ; CODE XREF: ROM:000FA986   j
loc_FFFFE:                              ; DATA XREF: ROM:RomEnd   o
; end of 'ROM'
